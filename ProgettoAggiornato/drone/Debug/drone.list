
drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ffc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf0  08018200  08018200  00028200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018df0  08018df0  00030394  2**0
                  CONTENTS
  4 .ARM          00000008  08018df0  08018df0  00028df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018df8  08018df8  00030394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018df8  08018df8  00028df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018dfc  08018dfc  00028dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000394  20000000  08018e00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005e50  20000394  08019194  00030394  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200061e4  08019194  000361e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030394  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004f708  00000000  00000000  000303c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000778a  00000000  00000000  0007faca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003970  00000000  00000000  00087258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003658  00000000  00000000  0008abc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f6d5  00000000  00000000  0008e220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036298  00000000  00000000  000bd8f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011dcfe  00000000  00000000  000f3b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021188b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010a6c  00000000  00000000  002118dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000394 	.word	0x20000394
 800021c:	00000000 	.word	0x00000000
 8000220:	080181e4 	.word	0x080181e4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000398 	.word	0x20000398
 800023c:	080181e4 	.word	0x080181e4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <applyAccelerationTrims>:
acc_t acc;
accelerationRuntime_t accelerationRuntime;
accelerometerConfig_t accelerometerConfig;

static void applyAccelerationTrims(const flightDynamicsTrims_t *accelerationTrims)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
    acc.accADC[X] -= accelerationTrims->raw[X];
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <applyAccelerationTrims+0x70>)
 80009e6:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009f0:	ee07 3a90 	vmov	s15, r3
 80009f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <applyAccelerationTrims+0x70>)
 80009fe:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    acc.accADC[Y] -= accelerationTrims->raw[Y];
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <applyAccelerationTrims+0x70>)
 8000a04:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a0e:	ee07 3a90 	vmov	s15, r3
 8000a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <applyAccelerationTrims+0x70>)
 8000a1c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    acc.accADC[Z] -= accelerationTrims->raw[Z];
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <applyAccelerationTrims+0x70>)
 8000a22:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a2c:	ee07 3a90 	vmov	s15, r3
 8000a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <applyAccelerationTrims+0x70>)
 8000a3a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	200003b0 	.word	0x200003b0

08000a50 <accInitFilters>:


static void accInitFilters(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
	accelerometerConfig.acc_lpf_hz = 50;
 8000a56:	4b2e      	ldr	r3, [pc, #184]	; (8000b10 <accInitFilters+0xc0>)
 8000a58:	2232      	movs	r2, #50	; 0x32
 8000a5a:	801a      	strh	r2, [r3, #0]

    // Only set the lowpass cutoff if the ACC sample rate is detected otherwise
    // the filter initialization is not defined (sample rate = 0)
    accelerationRuntime.accLpfCutHz = (acc.sampleRateHz) ? accelerometerConfig.acc_lpf_hz : 0;
 8000a5c:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <accInitFilters+0xc4>)
 8000a5e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d002      	beq.n	8000a6c <accInitFilters+0x1c>
 8000a66:	4b2a      	ldr	r3, [pc, #168]	; (8000b10 <accInitFilters+0xc0>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	e000      	b.n	8000a6e <accInitFilters+0x1e>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	4a2a      	ldr	r2, [pc, #168]	; (8000b18 <accInitFilters+0xc8>)
 8000a70:	8013      	strh	r3, [r2, #0]
    if (accelerationRuntime.accLpfCutHz) {
 8000a72:	4b29      	ldr	r3, [pc, #164]	; (8000b18 <accInitFilters+0xc8>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d02c      	beq.n	8000ad4 <accInitFilters+0x84>
        const uint32_t accSampleTimeUs = 1e6 / acc.sampleRateHz;
 8000a7a:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <accInitFilters+0xc4>)
 8000a7c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8000a80:	ee07 3a90 	vmov	s15, r3
 8000a84:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000a88:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8000b08 <accInitFilters+0xb8>
 8000a8c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000a90:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a94:	ee17 3a90 	vmov	r3, s15
 8000a98:	603b      	str	r3, [r7, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	e016      	b.n	8000ace <accInitFilters+0x7e>
            biquadFilterInitLPF(&accelerationRuntime.accFilter[axis], accelerationRuntime.accLpfCutHz, accSampleTimeUs);
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <accInitFilters+0xc8>)
 8000aac:	4413      	add	r3, r2
 8000aae:	3304      	adds	r3, #4
 8000ab0:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <accInitFilters+0xc8>)
 8000ab2:	8812      	ldrh	r2, [r2, #0]
 8000ab4:	ee07 2a90 	vmov	s15, r2
 8000ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000abc:	6839      	ldr	r1, [r7, #0]
 8000abe:	eeb0 0a67 	vmov.f32	s0, s15
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fbe2 	bl	800128c <biquadFilterInitLPF>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3301      	adds	r3, #1
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	dde5      	ble.n	8000aa0 <accInitFilters+0x50>
        }
    }

    accelerationRuntime.accumulatedMeasurementCount = 0;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <accInitFilters+0xc8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    accelerationRuntime.accumulatedMeasurements[0] = 0.0f;
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <accInitFilters+0xc8>)
 8000ade:	f04f 0200 	mov.w	r2, #0
 8000ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    accelerationRuntime.accumulatedMeasurements[1] = 0.0f;
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <accInitFilters+0xc8>)
 8000ae8:	f04f 0200 	mov.w	r2, #0
 8000aec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    accelerationRuntime.accumulatedMeasurements[2] = 0.0f;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <accInitFilters+0xc8>)
 8000af2:	f04f 0200 	mov.w	r2, #0
 8000af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	f3af 8000 	nop.w
 8000b08:	00000000 	.word	0x00000000
 8000b0c:	412e8480 	.word	0x412e8480
 8000b10:	200004a4 	.word	0x200004a4
 8000b14:	200003b0 	.word	0x200003b0
 8000b18:	20000410 	.word	0x20000410

08000b1c <setAccelerationTrims>:

static void setAccelerationTrims(flightDynamicsTrims_t *accelerationTrimsToUse)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
    accelerationRuntime.accelerationTrims = accelerationTrimsToUse;
 8000b24:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <setAccelerationTrims+0x1c>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000410 	.word	0x20000410

08000b3c <accInit>:

void accInit(sensorAccInitFuncPtr initFn, sensorAccReadFuncPtr readFn) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
	memset(&acc, 0, sizeof(acc));
 8000b46:	2260      	movs	r2, #96	; 0x60
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4824      	ldr	r0, [pc, #144]	; (8000bdc <accInit+0xa0>)
 8000b4c:	f012 fe4f 	bl	80137ee <memset>
	// copy over the common gyro mpu settings
	acc.dev.gyro = &gyro.gyroSensor1.gyroDev;
 8000b50:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <accInit+0xa0>)
 8000b52:	4a23      	ldr	r2, [pc, #140]	; (8000be0 <accInit+0xa4>)
 8000b54:	621a      	str	r2, [r3, #32]
	acc.dev.acc_high_fsr = accelerometerConfig.acc_high_fsr;
 8000b56:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <accInit+0xa8>)
 8000b58:	78da      	ldrb	r2, [r3, #3]
 8000b5a:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <accInit+0xa0>)
 8000b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// Copy alignment from active gyro, as all production boards use acc-gyro-combi chip.
	// Exceptions are STM32F3DISCOVERY and STM32F411DISCOVERY, and (may be) handled in future enhancement.

	sensor_align_e alignment = gyro.gyroSensor1.gyroDev.gyroAlign;
 8000b60:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <accInit+0xac>)
 8000b62:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8000b66:	73fb      	strb	r3, [r7, #15]
	sensorAlignment_t customAlignment;
	buildAlignmentFromStandardAlignment(&customAlignment, alignment);
 8000b68:	7bfa      	ldrb	r2, [r7, #15]
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f005 faeb 	bl	800614c <buildAlignmentFromStandardAlignment>

	acc.dev.accAlign = alignment;
 8000b76:	4a19      	ldr	r2, [pc, #100]	; (8000bdc <accInit+0xa0>)
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	7793      	strb	r3, [r2, #30]
	buildRotationMatrixFromAlignment(&customAlignment, &acc.dev.rotationMatrix);
 8000b7c:	f107 0308 	add.w	r3, r7, #8
 8000b80:	491a      	ldr	r1, [pc, #104]	; (8000bec <accInit+0xb0>)
 8000b82:	4618      	mov	r0, r3
 8000b84:	f005 fa9e 	bl	80060c4 <buildRotationMatrixFromAlignment>

	acc.dev.initFn = initFn;
 8000b88:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <accInit+0xa0>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6053      	str	r3, [r2, #4]
	acc.dev.readFn = readFn;
 8000b8e:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <accInit+0xa0>)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	6093      	str	r3, [r2, #8]

	acc.dev.acc_1G = 256; // set default
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <accInit+0xa0>)
 8000b96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b9a:	819a      	strh	r2, [r3, #12]
	acc.dev.initFn(&acc.dev); // driver initialisation
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <accInit+0xa0>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	480e      	ldr	r0, [pc, #56]	; (8000bdc <accInit+0xa0>)
 8000ba2:	4798      	blx	r3
	acc.dev.acc_1G_rec = 1.0f / acc.dev.acc_1G;
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <accInit+0xa0>)
 8000ba6:	899b      	ldrh	r3, [r3, #12]
 8000ba8:	ee07 3a90 	vmov	s15, r3
 8000bac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <accInit+0xa0>)
 8000bba:	edc3 7a00 	vstr	s15, [r3]

	acc.sampleRateHz = 1000;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <accInit+0xa0>)
 8000bc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bc4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	setAccelerationTrims(&accelerometerConfig.accZero);
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <accInit+0xb4>)
 8000bca:	f7ff ffa7 	bl	8000b1c <setAccelerationTrims>

	accInitFilters();
 8000bce:	f7ff ff3f 	bl	8000a50 <accInitFilters>
}
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200003b0 	.word	0x200003b0
 8000be0:	20000650 	.word	0x20000650
 8000be4:	200004a4 	.word	0x200004a4
 8000be8:	20000614 	.word	0x20000614
 8000bec:	200003d8 	.word	0x200003d8
 8000bf0:	200004a8 	.word	0x200004a8

08000bf4 <accUpdate>:

void accUpdate(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
    if (!acc.dev.readFn(&acc.dev)) {
 8000bfa:	4b41      	ldr	r3, [pc, #260]	; (8000d00 <accUpdate+0x10c>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	4840      	ldr	r0, [pc, #256]	; (8000d00 <accUpdate+0x10c>)
 8000c00:	4798      	blx	r3
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d077      	beq.n	8000cf8 <accUpdate+0x104>
        return;
    }
    acc.isAccelUpdatedAtLeastOnce = true;
 8000c08:	4b3d      	ldr	r3, [pc, #244]	; (8000d00 <accUpdate+0x10c>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	e00e      	b.n	8000c34 <accUpdate+0x40>
        acc.accADC[axis] = acc.dev.accADC[axis];
 8000c16:	4a3a      	ldr	r2, [pc, #232]	; (8000d00 <accUpdate+0x10c>)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	3304      	adds	r3, #4
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	4937      	ldr	r1, [pc, #220]	; (8000d00 <accUpdate+0x10c>)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	3314      	adds	r3, #20
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	3301      	adds	r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	dded      	ble.n	8000c16 <accUpdate+0x22>
    }

    if (accelerationRuntime.accLpfCutHz) {
 8000c3a:	4b32      	ldr	r3, [pc, #200]	; (8000d04 <accUpdate+0x110>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d025      	beq.n	8000c8e <accUpdate+0x9a>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	e01f      	b.n	8000c88 <accUpdate+0x94>
            acc.accADC[axis] = biquadFilterApply(&accelerationRuntime.accFilter[axis], acc.accADC[axis]);
 8000c48:	68ba      	ldr	r2, [r7, #8]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4a2c      	ldr	r2, [pc, #176]	; (8000d04 <accUpdate+0x110>)
 8000c54:	4413      	add	r3, r2
 8000c56:	1d1a      	adds	r2, r3, #4
 8000c58:	4929      	ldr	r1, [pc, #164]	; (8000d00 <accUpdate+0x10c>)
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	3314      	adds	r3, #20
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	440b      	add	r3, r1
 8000c62:	edd3 7a00 	vldr	s15, [r3]
 8000c66:	eeb0 0a67 	vmov.f32	s0, s15
 8000c6a:	4610      	mov	r0, r2
 8000c6c:	f000 fb26 	bl	80012bc <biquadFilterApply>
 8000c70:	eef0 7a40 	vmov.f32	s15, s0
 8000c74:	4a22      	ldr	r2, [pc, #136]	; (8000d00 <accUpdate+0x10c>)
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	3314      	adds	r3, #20
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	4413      	add	r3, r2
 8000c7e:	edc3 7a00 	vstr	s15, [r3]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	3301      	adds	r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	dddc      	ble.n	8000c48 <accUpdate+0x54>
        }
    }

    alignSensorViaRotation(acc.accADC, acc.dev.accAlign);
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <accUpdate+0x10c>)
 8000c90:	7f9b      	ldrb	r3, [r3, #30]
 8000c92:	4619      	mov	r1, r3
 8000c94:	481c      	ldr	r0, [pc, #112]	; (8000d08 <accUpdate+0x114>)
 8000c96:	f005 faa7 	bl	80061e8 <alignSensorViaRotation>

    applyAccelerationTrims(accelerationRuntime.accelerationTrims);
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <accUpdate+0x110>)
 8000c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fe9c 	bl	80009dc <applyAccelerationTrims>

    ++accelerationRuntime.accumulatedMeasurementCount;
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <accUpdate+0x110>)
 8000ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000caa:	3301      	adds	r3, #1
 8000cac:	4a15      	ldr	r2, [pc, #84]	; (8000d04 <accUpdate+0x110>)
 8000cae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	e01b      	b.n	8000cf0 <accUpdate+0xfc>
        accelerationRuntime.accumulatedMeasurements[axis] += acc.accADC[axis];
 8000cb8:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <accUpdate+0x110>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3320      	adds	r3, #32
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	3304      	adds	r3, #4
 8000cc4:	ed93 7a00 	vldr	s14, [r3]
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <accUpdate+0x10c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3314      	adds	r3, #20
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	edd3 7a00 	vldr	s15, [r3]
 8000cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <accUpdate+0x110>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3320      	adds	r3, #32
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3301      	adds	r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	dde0      	ble.n	8000cb8 <accUpdate+0xc4>
 8000cf6:	e000      	b.n	8000cfa <accUpdate+0x106>
        return;
 8000cf8:	bf00      	nop
    }
}
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200003b0 	.word	0x200003b0
 8000d04:	20000410 	.word	0x20000410
 8000d08:	20000400 	.word	0x20000400

08000d0c <accGetAccumulationAverage>:

bool accGetAccumulationAverage(float *accumulationAverage)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
    if (accelerationRuntime.accumulatedMeasurementCount > 0) {
 8000d14:	4b25      	ldr	r3, [pc, #148]	; (8000dac <accGetAccumulationAverage+0xa0>)
 8000d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	dd2e      	ble.n	8000d7c <accGetAccumulationAverage+0x70>
        // If we have gyro data accumulated, calculate average rate that will yield the same rotation
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	e022      	b.n	8000d6a <accGetAccumulationAverage+0x5e>
            accumulationAverage[axis] = accelerationRuntime.accumulatedMeasurements[axis] / accelerationRuntime.accumulatedMeasurementCount;
 8000d24:	4a21      	ldr	r2, [pc, #132]	; (8000dac <accGetAccumulationAverage+0xa0>)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3320      	adds	r3, #32
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	3304      	adds	r3, #4
 8000d30:	edd3 6a00 	vldr	s13, [r3]
 8000d34:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <accGetAccumulationAverage+0xa0>)
 8000d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d3a:	ee07 3a90 	vmov	s15, r3
 8000d3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d4e:	edc3 7a00 	vstr	s15, [r3]
            accelerationRuntime.accumulatedMeasurements[axis] = 0.0f;
 8000d52:	4a16      	ldr	r2, [pc, #88]	; (8000dac <accGetAccumulationAverage+0xa0>)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	3320      	adds	r3, #32
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	f04f 0200 	mov.w	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	3301      	adds	r3, #1
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	ddd9      	ble.n	8000d24 <accGetAccumulationAverage+0x18>
        }
        accelerationRuntime.accumulatedMeasurementCount = 0;
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <accGetAccumulationAverage+0xa0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        return true;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e010      	b.n	8000d9e <accGetAccumulationAverage+0x92>
    } else {
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	e009      	b.n	8000d96 <accGetAccumulationAverage+0x8a>
            accumulationAverage[axis] = 0.0f;
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	f04f 0200 	mov.w	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	3301      	adds	r3, #1
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	ddf2      	ble.n	8000d82 <accGetAccumulationAverage+0x76>
        }
        return false;
 8000d9c:	2300      	movs	r3, #0
    }
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000410 	.word	0x20000410

08000db0 <attitudeInit>:
 */

#include "attitude.h"
#include "imu.h"

void attitudeInit(void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	imuInit();
 8000db4:	f001 fefe 	bl	8002bb4 <imuInit>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <attitudeUpdate>:

void attitudeUpdate(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	imuCalculateEstimatedAttitude();
 8000dc0:	f002 fc08 	bl	80035d4 <imuCalculateEstimatedAttitude>
	imuCalculateThrottleAngleCorrection();
 8000dc4:	f002 fce8 	bl	8003798 <imuCalculateThrottleAngleCorrection>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <barometerConfig>:
    ioTag_t baro_xclr_tag;
} barometerConfig_t;

barometerConfig_t barometerConfig_System;

static inline const barometerConfig_t* barometerConfig(void) { return &barometerConfig_System; }
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4b02      	ldr	r3, [pc, #8]	; (8000ddc <barometerConfig+0x10>)
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	2000056c 	.word	0x2000056c

08000de0 <pgResetFn_barometerConfig>:

static void pgResetFn_barometerConfig(barometerConfig_t *barometerConfig)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
    barometerConfig->baro_hardware = BARO_LPS;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2205      	movs	r2, #5
 8000dec:	715a      	strb	r2, [r3, #5]
    barometerConfig->baro_busType = BUS_TYPE_I2C;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
    barometerConfig->baro_i2c_device = I2C_DEV_TO_CFG(BARO_I2C_INSTANCE);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	70da      	strb	r2, [r3, #3]
    barometerConfig->baro_i2c_address = DEFAULT_BARO_I2C_ADDRESS;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	711a      	strb	r2, [r3, #4]
    barometerConfig->baro_spi_device = SPI_DEV_TO_CFG(SPIINVALID);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	705a      	strb	r2, [r3, #1]
    barometerConfig->baro_spi_csn = IO_TAG_NONE;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	709a      	strb	r2, [r3, #2]
    barometerConfig->baro_eoc_tag = IO_TAG(BARO_EOC_PIN);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	719a      	strb	r2, [r3, #6]
    barometerConfig->baro_xclr_tag = IO_TAG(BARO_XCLR_PIN);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	71da      	strb	r2, [r3, #7]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <lpsNothing>:

static void lpsNothing(baroDev_t *baro)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
    (void)(baro);
    return;
 8000e2c:	bf00      	nop
}
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <lpsNothingBool>:

static bool lpsNothingBool(baroDev_t *baro)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	(void)(baro);
    return true;
 8000e40:	2301      	movs	r3, #1
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <lpsNothingCalculate>:

static void lpsNothingCalculate(int32_t *pressure, int32_t *temperature)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
	(void)(*pressure);
	(void)(*temperature);
    return;
 8000e58:	bf00      	nop
}
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <lpsDetect>:

static bool lpsDetect(baroDev_t *baro)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
    baro->combined_read = true;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    baro->ut_delay = 1;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2201      	movs	r2, #1
 8000e78:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    baro->up_delay = 1000000 / 24;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f24a 22c2 	movw	r2, #41666	; 0xa2c2
 8000e82:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    baro->start_ut = lpsNothing;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <lpsDetect+0x68>)
 8000e8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    baro->get_ut = lpsNothingBool;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <lpsDetect+0x6c>)
 8000e92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    baro->read_ut = lpsNothingBool;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <lpsDetect+0x6c>)
 8000e9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    baro->start_up = lpsNothing;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <lpsDetect+0x68>)
 8000ea2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    baro->get_up = lpsNothingBool;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <lpsDetect+0x6c>)
 8000eaa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    baro->read_up = lpsNothingBool;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <lpsDetect+0x6c>)
 8000eb2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    baro->calculate = lpsNothingCalculate;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <lpsDetect+0x70>)
 8000eba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    return true;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	08000e25 	.word	0x08000e25
 8000ed0:	08000e39 	.word	0x08000e39
 8000ed4:	08000e4f 	.word	0x08000e4f

08000ed8 <baroDetect>:

static bool baroDetect(baroDev_t *baroDev, baroSensor_e baroHardwareToUse)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
    extDevice_t *dev = &baroDev->dev;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	60bb      	str	r3, [r7, #8]

    // Detect what pressure sensors are available. baro->update() is set to sensor-specific update function

    baroSensor_e baroHardware = baroHardwareToUse;
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	73fb      	strb	r3, [r7, #15]

    switch (barometerConfig()->baro_busType) {
 8000eec:	f7ff ff6e 	bl	8000dcc <barometerConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d12b      	bne.n	8000f50 <baroDetect+0x78>
    case BUS_TYPE_I2C:
        i2cBusSetInstance(dev, barometerConfig()->baro_i2c_device);
 8000ef8:	f7ff ff68 	bl	8000dcc <barometerConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	78db      	ldrb	r3, [r3, #3]
 8000f00:	4619      	mov	r1, r3
 8000f02:	68b8      	ldr	r0, [r7, #8]
 8000f04:	f000 f8c6 	bl	8001094 <i2cBusSetInstance>
        dev->busType_u.i2c.address = barometerConfig()->baro_i2c_address;
 8000f08:	f7ff ff60 	bl	8000dcc <barometerConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	791a      	ldrb	r2, [r3, #4]
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	711a      	strb	r2, [r3, #4]
        break;
 8000f14:	bf00      	nop
    default:
        return false;
    }

    switch (baroHardware) {
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	2b0a      	cmp	r3, #10
 8000f1a:	d827      	bhi.n	8000f6c <baroDetect+0x94>
 8000f1c:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <baroDetect+0x4c>)
 8000f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f22:	bf00      	nop
 8000f24:	08000f55 	.word	0x08000f55
 8000f28:	08000f67 	.word	0x08000f67
 8000f2c:	08000f55 	.word	0x08000f55
 8000f30:	08000f55 	.word	0x08000f55
 8000f34:	08000f67 	.word	0x08000f67
 8000f38:	08000f55 	.word	0x08000f55
 8000f3c:	08000f67 	.word	0x08000f67
 8000f40:	08000f67 	.word	0x08000f67
 8000f44:	08000f67 	.word	0x08000f67
 8000f48:	08000f67 	.word	0x08000f67
 8000f4c:	08000f67 	.word	0x08000f67
        return false;
 8000f50:	2300      	movs	r3, #0
 8000f52:	e011      	b.n	8000f78 <baroDetect+0xa0>
    case BARO_DEFAULT:
    case BARO_BMP085:
    case BARO_MS5611:
    case BARO_LPS:
        if (lpsDetect(baroDev)) {
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff85 	bl	8000e64 <lpsDetect>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d002      	beq.n	8000f66 <baroDetect+0x8e>
            baroHardware = BARO_LPS;
 8000f60:	2305      	movs	r3, #5
 8000f62:	73fb      	strb	r3, [r7, #15]
            break;
 8000f64:	e002      	b.n	8000f6c <baroDetect+0x94>
    case BARO_BMP280:
    case BARO_QMP6988:
    case BARO_2SMPB_02B:
    case BARO_VIRTUAL:
    case BARO_NONE:
        baroHardware = BARO_NONE;
 8000f66:	2301      	movs	r3, #1
 8000f68:	73fb      	strb	r3, [r7, #15]
        break;
 8000f6a:	bf00      	nop
    }

    if (baroHardware == BARO_NONE) {
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d101      	bne.n	8000f76 <baroDetect+0x9e>
        return false;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <baroDetect+0xa0>
    }

    return true;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <pressureToAltitude>:

static float pressureToAltitude(const float pressure)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	ed87 0a01 	vstr	s0, [r7, #4]
    return (1.0f - powf(pressure / 101325.0f, 0.190295f)) * 4433000.0f;
 8000f8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f8e:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000fc0 <pressureToAltitude+0x40>
 8000f92:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f96:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8000fc4 <pressureToAltitude+0x44>
 8000f9a:	eeb0 0a47 	vmov.f32	s0, s14
 8000f9e:	f016 ff57 	bl	8017e50 <powf>
 8000fa2:	eef0 7a40 	vmov.f32	s15, s0
 8000fa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fae:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000fc8 <pressureToAltitude+0x48>
 8000fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	47c5e680 	.word	0x47c5e680
 8000fc4:	3e42dcb1 	.word	0x3e42dcb1
 8000fc8:	4a8748d0 	.word	0x4a8748d0

08000fcc <baroInit>:

void baroInit(sensorBaroInitFuncPtr initFn, sensorBaroReadFuncPtr readFn)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	pgResetFn_barometerConfig(&barometerConfig_System);
 8000fd6:	4818      	ldr	r0, [pc, #96]	; (8001038 <baroInit+0x6c>)
 8000fd8:	f7ff ff02 	bl	8000de0 <pgResetFn_barometerConfig>
    baroDetect(&baro.dev, barometerConfig()->baro_hardware);
 8000fdc:	f7ff fef6 	bl	8000dcc <barometerConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	795b      	ldrb	r3, [r3, #5]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4815      	ldr	r0, [pc, #84]	; (800103c <baroInit+0x70>)
 8000fe8:	f7ff ff76 	bl	8000ed8 <baroDetect>
    baro.dev.read_ut = readFn;
 8000fec:	4a13      	ldr	r2, [pc, #76]	; (800103c <baroInit+0x70>)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    initFn(&baro.dev);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4811      	ldr	r0, [pc, #68]	; (800103c <baroInit+0x70>)
 8000ff8:	4798      	blx	r3
    if (baro.dev.baroADC > 0) {
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <baroInit+0x70>)
 8000ffc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001000:	2b00      	cmp	r3, #0
 8001002:	dd10      	ble.n	8001026 <baroInit+0x5a>
    	baro.ground_altitude = pressureToAltitude(baro.dev.baroADC);
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <baroInit+0x70>)
 8001006:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001012:	eeb0 0a67 	vmov.f32	s0, s15
 8001016:	f7ff ffb3 	bl	8000f80 <pressureToAltitude>
 800101a:	eef0 7a40 	vmov.f32	s15, s0
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <baroInit+0x70>)
 8001020:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
    } else {
    	baro.ground_altitude = 0;
    }
}
 8001024:	e004      	b.n	8001030 <baroInit+0x64>
    	baro.ground_altitude = 0;
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <baroInit+0x70>)
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000056c 	.word	0x2000056c
 800103c:	200004b4 	.word	0x200004b4

08001040 <baroUpdate>:

void baroUpdate(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
    baro.dev.read_ut(&baro.dev);
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <baroUpdate+0x50>)
 8001048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800104c:	4810      	ldr	r0, [pc, #64]	; (8001090 <baroUpdate+0x50>)
 800104e:	4798      	blx	r3
    if (baro.dev.baroADC > 0) {
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <baroUpdate+0x50>)
 8001052:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001056:	2b00      	cmp	r3, #0
 8001058:	dd16      	ble.n	8001088 <baroUpdate+0x48>
        const float altitude = pressureToAltitude(baro.dev.baroADC);
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <baroUpdate+0x50>)
 800105c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001068:	eeb0 0a67 	vmov.f32	s0, s15
 800106c:	f7ff ff88 	bl	8000f80 <pressureToAltitude>
 8001070:	ed87 0a01 	vstr	s0, [r7, #4]
        baro.altitude = altitude - baro.ground_altitude;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <baroUpdate+0x50>)
 8001076:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 800107a:	ed97 7a01 	vldr	s14, [r7, #4]
 800107e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001082:	4b03      	ldr	r3, [pc, #12]	; (8001090 <baroUpdate+0x50>)
 8001084:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
    }
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200004b4 	.word	0x200004b4

08001094 <i2cBusSetInstance>:

#define I2CDEV_COUNT 4
#define I2C_CFG_TO_DEV(x)   ((x) - 1)

bool i2cBusSetInstance(extDevice_t *dev, uint32_t device)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
    // I2C bus structures to associate with external devices
    static busDevice_t i2cBus[I2CDEV_COUNT];

    if ((device < 1) || (device > I2CDEV_COUNT)) {
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <i2cBusSetInstance+0x16>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	d901      	bls.n	80010ae <i2cBusSetInstance+0x1a>
        return false;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e016      	b.n	80010dc <i2cBusSetInstance+0x48>
    }

    dev->bus = &i2cBus[I2C_CFG_TO_DEV(device)];
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	1e5a      	subs	r2, r3, #1
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <i2cBusSetInstance+0x54>)
 80010bc:	441a      	add	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	601a      	str	r2, [r3, #0]
    dev->bus->busType = BUS_TYPE_I2C;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
    dev->bus->busType_u.i2c.device = I2C_CFG_TO_DEV(device);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	3b01      	subs	r3, #1
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b252      	sxtb	r2, r2
 80010d8:	711a      	strb	r2, [r3, #4]

    return true;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	20000574 	.word	0x20000574

080010ec <controlMotorInit>:

#include "control_motor.h"

#include "pid.h"

void controlMotorInit(void) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	pidInit();
 80010f0:	f004 f8ca 	bl	8005288 <pidInit>
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <controlMotorUpdate>:

void controlMotorUpdate(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
    pidIncUpdateCounter();
 80010fc:	f004 ff06 	bl	8005f0c <pidIncUpdateCounter>
    processRcCommand();
 8001100:	f004 ff24 	bl	8005f4c <processRcCommand>
    pidController();
 8001104:	f004 fa2a 	bl	800555c <pidController>
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <filterGetNotchQ>:
#include "filter.h"
#include "flight_math.h"


float filterGetNotchQ(float centerFreq, float cutoffFreq)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	ed87 0a01 	vstr	s0, [r7, #4]
 8001116:	edc7 0a00 	vstr	s1, [r7]
    return centerFreq * cutoffFreq / (centerFreq * centerFreq - cutoffFreq * cutoffFreq);
 800111a:	ed97 7a01 	vldr	s14, [r7, #4]
 800111e:	edd7 7a00 	vldr	s15, [r7]
 8001122:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001126:	edd7 7a01 	vldr	s15, [r7, #4]
 800112a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800112e:	edd7 7a00 	vldr	s15, [r7]
 8001132:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001136:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800113a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800113e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001142:	eeb0 0a67 	vmov.f32	s0, s15
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <nullFilterApply>:

float nullFilterApply(filter_t *filter, float input)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	ed87 0a00 	vstr	s0, [r7]
    return input;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	ee07 3a90 	vmov	s15, r3
}
 8001162:	eeb0 0a67 	vmov.f32	s0, s15
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <pt1FilterGain>:

float pt1FilterGain(float f_cut, float dT)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	ed87 0a01 	vstr	s0, [r7, #4]
 800117a:	edc7 0a00 	vstr	s1, [r7]
    float RC = 1 / (2 * M_PIf * f_cut);
 800117e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001182:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80011bc <pt1FilterGain+0x4c>
 8001186:	ee27 7a87 	vmul.f32	s14, s15, s14
 800118a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800118e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001192:	edc7 7a03 	vstr	s15, [r7, #12]
    return dT / (RC + dT);
 8001196:	ed97 7a03 	vldr	s14, [r7, #12]
 800119a:	edd7 7a00 	vldr	s15, [r7]
 800119e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a2:	ed97 7a00 	vldr	s14, [r7]
 80011a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011aa:	eef0 7a66 	vmov.f32	s15, s13
}
 80011ae:	eeb0 0a67 	vmov.f32	s0, s15
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	40c90fdb 	.word	0x40c90fdb

080011c0 <pt1FilterInit>:

void pt1FilterInit(pt1Filter_t *filter, float k)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
    filter->k = k;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	605a      	str	r2, [r3, #4]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <pt1FilterApply>:

float pt1FilterApply(pt1Filter_t *filter, float input)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	ed87 0a00 	vstr	s0, [r7]
    filter->state = filter->state + filter->k * (input - filter->state);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	ed93 7a00 	vldr	s14, [r3]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	edd3 6a01 	vldr	s13, [r3, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	edd3 7a00 	vldr	s15, [r3]
 8001204:	ed97 6a00 	vldr	s12, [r7]
 8001208:	ee76 7a67 	vsub.f32	s15, s12, s15
 800120c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	ee07 3a90 	vmov	s15, r3
}
 8001222:	eeb0 0a67 	vmov.f32	s0, s15
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <biquadFilterInit>:

void biquadFilterInit(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, float Q, biquadFilterType_e filterType, float weight)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6178      	str	r0, [r7, #20]
 8001238:	ed87 0a04 	vstr	s0, [r7, #16]
 800123c:	60f9      	str	r1, [r7, #12]
 800123e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001242:	4613      	mov	r3, r2
 8001244:	ed87 1a00 	vstr	s2, [r7]
 8001248:	71fb      	strb	r3, [r7, #7]
    biquadFilterUpdate(filter, filterFreq, refreshRate, Q, filterType, weight);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	ed97 1a00 	vldr	s2, [r7]
 8001250:	461a      	mov	r2, r3
 8001252:	edd7 0a02 	vldr	s1, [r7, #8]
 8001256:	68f9      	ldr	r1, [r7, #12]
 8001258:	ed97 0a04 	vldr	s0, [r7, #16]
 800125c:	6978      	ldr	r0, [r7, #20]
 800125e:	f000 f877 	bl	8001350 <biquadFilterUpdate>

    // zero initial samples
    filter->x1 = filter->x2 = 0;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	699a      	ldr	r2, [r3, #24]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	615a      	str	r2, [r3, #20]
    filter->y1 = filter->y2 = 0;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	621a      	str	r2, [r3, #32]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	6a1a      	ldr	r2, [r3, #32]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	61da      	str	r2, [r3, #28]
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <biquadFilterInitLPF>:

#define BIQUAD_Q 1.0f / sqrtf(2.0f)

void biquadFilterInitLPF(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	ed87 0a02 	vstr	s0, [r7, #8]
 8001298:	6079      	str	r1, [r7, #4]
    biquadFilterInit(filter, filterFreq, refreshRate, BIQUAD_Q, FILTER_LPF, 1.0f);
 800129a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800129e:	2200      	movs	r2, #0
 80012a0:	eddf 0a05 	vldr	s1, [pc, #20]	; 80012b8 <biquadFilterInitLPF+0x2c>
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f7ff ffc0 	bl	8001230 <biquadFilterInit>
}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	3f3504f3 	.word	0x3f3504f3

080012bc <biquadFilterApply>:

float biquadFilterApply(biquadFilter_t *filter, float input)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	ed87 0a00 	vstr	s0, [r7]
    const float result = filter->b0 * input + filter->x1;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	ed93 7a00 	vldr	s14, [r3]
 80012ce:	edd7 7a00 	vldr	s15, [r7]
 80012d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80012dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e0:	edc7 7a03 	vstr	s15, [r7, #12]

    filter->x1 = filter->b1 * input - filter->a1 * result + filter->x2;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80012ea:	edd7 7a00 	vldr	s15, [r7]
 80012ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	edd3 6a03 	vldr	s13, [r3, #12]
 80012f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80012fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001300:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edd3 7a06 	vldr	s15, [r3, #24]
 800130a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	edc3 7a05 	vstr	s15, [r3, #20]
    filter->x2 = filter->b2 * input - filter->a2 * result;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	ed93 7a02 	vldr	s14, [r3, #8]
 800131a:	edd7 7a00 	vldr	s15, [r7]
 800131e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	edd3 6a04 	vldr	s13, [r3, #16]
 8001328:	edd7 7a03 	vldr	s15, [r7, #12]
 800132c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	edc3 7a06 	vstr	s15, [r3, #24]

    return result;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	ee07 3a90 	vmov	s15, r3
}
 8001340:	eeb0 0a67 	vmov.f32	s0, s15
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <biquadFilterUpdate>:

void biquadFilterUpdate(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, float Q, biquadFilterType_e filterType, float weight)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08c      	sub	sp, #48	; 0x30
 8001354:	af00      	add	r7, sp, #0
 8001356:	6178      	str	r0, [r7, #20]
 8001358:	ed87 0a04 	vstr	s0, [r7, #16]
 800135c:	60f9      	str	r1, [r7, #12]
 800135e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001362:	4613      	mov	r3, r2
 8001364:	ed87 1a00 	vstr	s2, [r7]
 8001368:	71fb      	strb	r3, [r7, #7]
    // setup variables
    const float omega = 2.0f * M_PIf * filterFreq * refreshRate * 0.000001f;
 800136a:	edd7 7a04 	vldr	s15, [r7, #16]
 800136e:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001528 <biquadFilterUpdate+0x1d8>
 8001372:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	ee07 3a90 	vmov	s15, r3
 800137c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001384:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800152c <biquadFilterUpdate+0x1dc>
 8001388:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    const float sn = sin_approx(omega);
 8001390:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001394:	f000 fa24 	bl	80017e0 <sin_approx>
 8001398:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    const float cs = cos_approx(omega);
 800139c:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80013a0:	f000 fac8 	bl	8001934 <cos_approx>
 80013a4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    const float alpha = sn / (2.0f * Q);
 80013a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80013ac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80013b0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80013b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b8:	edc7 7a08 	vstr	s15, [r7, #32]

    switch (filterType) {
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d04f      	beq.n	8001462 <biquadFilterUpdate+0x112>
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	dc6e      	bgt.n	80014a4 <biquadFilterUpdate+0x154>
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d002      	beq.n	80013d0 <biquadFilterUpdate+0x80>
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d02a      	beq.n	8001424 <biquadFilterUpdate+0xd4>
 80013ce:	e069      	b.n	80014a4 <biquadFilterUpdate+0x154>
    case FILTER_LPF:
        // 2nd order Butterworth (with Q=1/sqrt(2)) / Butterworth biquad section with Q
        // described in http://www.ti.com/lit/an/slaa447/slaa447.pdf
        filter->b1 = 1 - cs;
 80013d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	edc3 7a01 	vstr	s15, [r3, #4]
        filter->b0 = filter->b1 * 0.5f;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80013e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	edc3 7a00 	vstr	s15, [r3]
        filter->b2 = filter->b0;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	609a      	str	r2, [r3, #8]
        filter->a1 = -2 * cs;
 80013fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001402:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	edc3 7a03 	vstr	s15, [r3, #12]
        filter->a2 = 1 - alpha;
 8001410:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001414:	edd7 7a08 	vldr	s15, [r7, #32]
 8001418:	ee77 7a67 	vsub.f32	s15, s14, s15
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 8001422:	e03f      	b.n	80014a4 <biquadFilterUpdate+0x154>
    case FILTER_NOTCH:
        filter->b0 = 1;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800142a:	601a      	str	r2, [r3, #0]
        filter->b1 = -2 * cs;
 800142c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001430:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001434:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	edc3 7a01 	vstr	s15, [r3, #4]
        filter->b2 = 1;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001444:	609a      	str	r2, [r3, #8]
        filter->a1 = filter->b1;
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	60da      	str	r2, [r3, #12]
        filter->a2 = 1 - alpha;
 800144e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001452:	edd7 7a08 	vldr	s15, [r7, #32]
 8001456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 8001460:	e020      	b.n	80014a4 <biquadFilterUpdate+0x154>
    case FILTER_BPF:
        filter->b0 = alpha;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	6a3a      	ldr	r2, [r7, #32]
 8001466:	601a      	str	r2, [r3, #0]
        filter->b1 = 0;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
        filter->b2 = -alpha;
 8001470:	edd7 7a08 	vldr	s15, [r7, #32]
 8001474:	eef1 7a67 	vneg.f32	s15, s15
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	edc3 7a02 	vstr	s15, [r3, #8]
        filter->a1 = -2 * cs;
 800147e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001482:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	edc3 7a03 	vstr	s15, [r3, #12]
        filter->a2 = 1 - alpha;
 8001490:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001494:	edd7 7a08 	vldr	s15, [r7, #32]
 8001498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 80014a2:	bf00      	nop
    }

    const float a0 = 1 + alpha;
 80014a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80014a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014b0:	edc7 7a07 	vstr	s15, [r7, #28]

    // precompute the coefficients
    filter->b0 /= a0;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	edd3 6a00 	vldr	s13, [r3]
 80014ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80014be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	edc3 7a00 	vstr	s15, [r3]
    filter->b1 /= a0;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	edd3 6a01 	vldr	s13, [r3, #4]
 80014ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80014d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->b2 /= a0;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	edd3 6a02 	vldr	s13, [r3, #8]
 80014e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80014e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->a1 /= a0;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	edd3 6a03 	vldr	s13, [r3, #12]
 80014f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80014fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	edc3 7a03 	vstr	s15, [r3, #12]
    filter->a2 /= a0;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	edd3 6a04 	vldr	s13, [r3, #16]
 800150a:	ed97 7a07 	vldr	s14, [r7, #28]
 800150e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	edc3 7a04 	vstr	s15, [r3, #16]

    // update weight
    filter->weight = weight;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800151e:	bf00      	nop
 8001520:	3730      	adds	r7, #48	; 0x30
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40c90fdb 	.word	0x40c90fdb
 800152c:	358637bd 	.word	0x358637bd

08001530 <pt2FilterGain>:

float pt2FilterGain(float f_cut, float dT)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	ed87 0a01 	vstr	s0, [r7, #4]
 800153a:	edc7 0a00 	vstr	s1, [r7]
    const float order = 2.0f;
 800153e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001542:	617b      	str	r3, [r7, #20]
    const float orderCutoffCorrection = 1 / sqrtf(powf(2, 1.0f / order) - 1);
 8001544:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001548:	edd7 7a05 	vldr	s15, [r7, #20]
 800154c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001550:	eef0 0a47 	vmov.f32	s1, s14
 8001554:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001558:	f016 fc7a 	bl	8017e50 <powf>
 800155c:	eef0 7a40 	vmov.f32	s15, s0
 8001560:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001564:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001568:	eeb0 0a67 	vmov.f32	s0, s15
 800156c:	f016 fdd0 	bl	8018110 <sqrtf>
 8001570:	eeb0 7a40 	vmov.f32	s14, s0
 8001574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800157c:	edc7 7a04 	vstr	s15, [r7, #16]
    float RC = 1 / (2 * orderCutoffCorrection * M_PIf * f_cut);
 8001580:	edd7 7a04 	vldr	s15, [r7, #16]
 8001584:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001588:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80015c8 <pt2FilterGain+0x98>
 800158c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001590:	edd7 7a01 	vldr	s15, [r7, #4]
 8001594:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001598:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800159c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a0:	edc7 7a03 	vstr	s15, [r7, #12]
    // float RC = 1 / (2 * 1.553773974f * M_PIf * f_cut);
    // where 1.553773974 = 1 / sqrt( (2^(1 / order) - 1) ) and order is 2
    return dT / (RC + dT);
 80015a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80015a8:	edd7 7a00 	vldr	s15, [r7]
 80015ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b0:	ed97 7a00 	vldr	s14, [r7]
 80015b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015b8:	eef0 7a66 	vmov.f32	s15, s13
}
 80015bc:	eeb0 0a67 	vmov.f32	s0, s15
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40490fdb 	.word	0x40490fdb

080015cc <pt2FilterInit>:

void pt2FilterInit(pt2Filter_t *filter, float k)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
    filter->state1 = 0.0f;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	605a      	str	r2, [r3, #4]
    filter->k = k;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	609a      	str	r2, [r3, #8]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <pt2FilterApply>:

float pt2FilterApply(pt2Filter_t *filter, float input)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	ed87 0a00 	vstr	s0, [r7]
    filter->state1 = filter->state1 + filter->k * (input - filter->state1);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	ed93 7a01 	vldr	s14, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	edd3 7a01 	vldr	s15, [r3, #4]
 8001618:	ed97 6a00 	vldr	s12, [r7]
 800161c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001620:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->state = filter->state + filter->k * (filter->state1 - filter->state);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	ed93 7a00 	vldr	s14, [r3]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	edd3 6a02 	vldr	s13, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	ed93 6a01 	vldr	s12, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	ee76 7a67 	vsub.f32	s15, s12, s15
 800164a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800164e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	ee07 3a90 	vmov	s15, r3
}
 8001660:	eeb0 0a67 	vmov.f32	s0, s15
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <pt3FilterGain>:

float pt3FilterGain(float f_cut, float dT)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	ed87 0a01 	vstr	s0, [r7, #4]
 800167a:	edc7 0a00 	vstr	s1, [r7]
    const float order = 3.0f;
 800167e:	4b21      	ldr	r3, [pc, #132]	; (8001704 <pt3FilterGain+0x94>)
 8001680:	617b      	str	r3, [r7, #20]
    const float orderCutoffCorrection = 1 / sqrtf(powf(2, 1.0f / order) - 1);
 8001682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001686:	edd7 7a05 	vldr	s15, [r7, #20]
 800168a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800168e:	eef0 0a47 	vmov.f32	s1, s14
 8001692:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001696:	f016 fbdb 	bl	8017e50 <powf>
 800169a:	eef0 7a40 	vmov.f32	s15, s0
 800169e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016a6:	eeb0 0a67 	vmov.f32	s0, s15
 80016aa:	f016 fd31 	bl	8018110 <sqrtf>
 80016ae:	eeb0 7a40 	vmov.f32	s14, s0
 80016b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ba:	edc7 7a04 	vstr	s15, [r7, #16]
    float RC = 1 / (2 * orderCutoffCorrection * M_PIf * f_cut);
 80016be:	edd7 7a04 	vldr	s15, [r7, #16]
 80016c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016c6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001708 <pt3FilterGain+0x98>
 80016ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016de:	edc7 7a03 	vstr	s15, [r7, #12]
    // float RC = 1 / (2 * 1.961459177f * M_PIf * f_cut);
    // where 1.961459177 = 1 / sqrt( (2^(1 / order) - 1) ) and order is 3
    return dT / (RC + dT);
 80016e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80016e6:	edd7 7a00 	vldr	s15, [r7]
 80016ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ee:	ed97 7a00 	vldr	s14, [r7]
 80016f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016f6:	eef0 7a66 	vmov.f32	s15, s13
}
 80016fa:	eeb0 0a67 	vmov.f32	s0, s15
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40400000 	.word	0x40400000
 8001708:	40490fdb 	.word	0x40490fdb

0800170c <pt3FilterInit>:

void pt3FilterInit(pt3Filter_t *filter, float k)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
    filter->state1 = 0.0f;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	605a      	str	r2, [r3, #4]
    filter->state2 = 0.0f;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
    filter->k = k;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	60da      	str	r2, [r3, #12]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <pt3FilterApply>:
float pt3FilterApply(pt3Filter_t *filter, float input)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	ed87 0a00 	vstr	s0, [r7]
    filter->state1 = filter->state1 + filter->k * (input - filter->state1);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	ed93 7a01 	vldr	s14, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	edd3 6a03 	vldr	s13, [r3, #12]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001760:	ed97 6a00 	vldr	s12, [r7]
 8001764:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800176c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->state2 = filter->state2 + filter->k * (filter->state1 - filter->state2);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	ed93 7a02 	vldr	s14, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	ed93 6a01 	vldr	s12, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	edd3 7a02 	vldr	s15, [r3, #8]
 800178e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001792:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->state = filter->state + filter->k * (filter->state2 - filter->state);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	ed93 7a00 	vldr	s14, [r3]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	edd3 6a03 	vldr	s13, [r3, #12]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	ed93 6a02 	vldr	s12, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	edd3 7a00 	vldr	s15, [r3]
 80017b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80017bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	ee07 3a90 	vmov	s15, r3
}
 80017d2:	eeb0 0a67 	vmov.f32	s0, s15
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <sin_approx>:
#define sinPolyCoef5  8.312366210e-3f
#define sinPolyCoef7 -1.849218155e-4f
#define sinPolyCoef9  0

float sin_approx(float x)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t xint = x;
 80017ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80017ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017f2:	ee17 3a90 	vmov	r3, s15
 80017f6:	60fb      	str	r3, [r7, #12]
    if (xint < -32 || xint > 32) return 0.0f;                               // Stop here on error input (5 * 360 Deg)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f113 0f20 	cmn.w	r3, #32
 80017fe:	db02      	blt.n	8001806 <sin_approx+0x26>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b20      	cmp	r3, #32
 8001804:	dd0a      	ble.n	800181c <sin_approx+0x3c>
 8001806:	eddf 7a42 	vldr	s15, [pc, #264]	; 8001910 <sin_approx+0x130>
 800180a:	e079      	b.n	8001900 <sin_approx+0x120>
    while (x >  M_PIf) x -= (2.0f * M_PIf);                                 // always wrap input angle to -PI..PI
 800180c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001810:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001914 <sin_approx+0x134>
 8001814:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001818:	edc7 7a01 	vstr	s15, [r7, #4]
 800181c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001820:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001918 <sin_approx+0x138>
 8001824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182c:	dcee      	bgt.n	800180c <sin_approx+0x2c>
    while (x < -M_PIf) x += (2.0f * M_PIf);
 800182e:	e007      	b.n	8001840 <sin_approx+0x60>
 8001830:	edd7 7a01 	vldr	s15, [r7, #4]
 8001834:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001914 <sin_approx+0x134>
 8001838:	ee77 7a87 	vadd.f32	s15, s15, s14
 800183c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001840:	edd7 7a01 	vldr	s15, [r7, #4]
 8001844:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800191c <sin_approx+0x13c>
 8001848:	eef4 7ac7 	vcmpe.f32	s15, s14
 800184c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001850:	d4ee      	bmi.n	8001830 <sin_approx+0x50>
    if (x >  (0.5f * M_PIf)) x =  (0.5f * M_PIf) - (x - (0.5f * M_PIf));   // We just pick -90..+90 Degree
 8001852:	edd7 7a01 	vldr	s15, [r7, #4]
 8001856:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001920 <sin_approx+0x140>
 800185a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800185e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001862:	dd0c      	ble.n	800187e <sin_approx+0x9e>
 8001864:	edd7 7a01 	vldr	s15, [r7, #4]
 8001868:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001920 <sin_approx+0x140>
 800186c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001870:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001920 <sin_approx+0x140>
 8001874:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001878:	edc7 7a01 	vstr	s15, [r7, #4]
 800187c:	e014      	b.n	80018a8 <sin_approx+0xc8>
    else if (x < -(0.5f * M_PIf)) x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);
 800187e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001882:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001924 <sin_approx+0x144>
 8001886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800188a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188e:	d50b      	bpl.n	80018a8 <sin_approx+0xc8>
 8001890:	edd7 7a01 	vldr	s15, [r7, #4]
 8001894:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001920 <sin_approx+0x140>
 8001898:	ee77 7a87 	vadd.f32	s15, s15, s14
 800189c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001924 <sin_approx+0x144>
 80018a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a4:	edc7 7a01 	vstr	s15, [r7, #4]
    float x2 = x * x;
 80018a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018b0:	edc7 7a02 	vstr	s15, [r7, #8]
    return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));
 80018b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80018b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80018c4:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001910 <sin_approx+0x130>
 80018c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80018cc:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001928 <sin_approx+0x148>
 80018d0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80018d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018dc:	eddf 6a13 	vldr	s13, [pc, #76]	; 800192c <sin_approx+0x14c>
 80018e0:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80018e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ec:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001930 <sin_approx+0x150>
 80018f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80018f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018fc:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001900:	eeb0 0a67 	vmov.f32	s0, s15
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	00000000 	.word	0x00000000
 8001914:	40c90fdb 	.word	0x40c90fdb
 8001918:	40490fdb 	.word	0x40490fdb
 800191c:	c0490fdb 	.word	0xc0490fdb
 8001920:	3fc90fdb 	.word	0x3fc90fdb
 8001924:	bfc90fdb 	.word	0xbfc90fdb
 8001928:	3941e792 	.word	0x3941e792
 800192c:	3c083097 	.word	0x3c083097
 8001930:	3e2aa815 	.word	0x3e2aa815

08001934 <cos_approx>:

float cos_approx(float x)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	ed87 0a01 	vstr	s0, [r7, #4]
    return sin_approx(x + (0.5f * M_PIf));
 800193e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001942:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001960 <cos_approx+0x2c>
 8001946:	ee77 7a87 	vadd.f32	s15, s15, s14
 800194a:	eeb0 0a67 	vmov.f32	s0, s15
 800194e:	f7ff ff47 	bl	80017e0 <sin_approx>
 8001952:	eef0 7a40 	vmov.f32	s15, s0
}
 8001956:	eeb0 0a67 	vmov.f32	s0, s15
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	3fc90fdb 	.word	0x3fc90fdb

08001964 <acos_approx>:

float acos_approx(float x)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	ed87 0a01 	vstr	s0, [r7, #4]
    float xa = fabsf(x);
 800196e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001972:	eef0 7ae7 	vabs.f32	s15, s15
 8001976:	edc7 7a03 	vstr	s15, [r7, #12]
    float result = sqrtf(1.0f - xa) * (1.5707288f + xa * (-0.2121144f + xa * (0.0742610f + (-0.0187293f * xa))));
 800197a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800197e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001982:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001986:	eeb0 0a67 	vmov.f32	s0, s15
 800198a:	f016 fbc1 	bl	8018110 <sqrtf>
 800198e:	eef0 6a40 	vmov.f32	s13, s0
 8001992:	edd7 7a03 	vldr	s15, [r7, #12]
 8001996:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80019f8 <acos_approx+0x94>
 800199a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800199e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80019fc <acos_approx+0x98>
 80019a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80019a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80019aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ae:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001a00 <acos_approx+0x9c>
 80019b2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80019b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80019ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019be:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001a04 <acos_approx+0xa0>
 80019c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ca:	edc7 7a02 	vstr	s15, [r7, #8]
    if (x < 0.0f)
 80019ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80019d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019da:	d506      	bpl.n	80019ea <acos_approx+0x86>
        return M_PIf - result;
 80019dc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001a08 <acos_approx+0xa4>
 80019e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80019e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e8:	e001      	b.n	80019ee <acos_approx+0x8a>
    else
        return result;
 80019ea:	edd7 7a02 	vldr	s15, [r7, #8]
}
 80019ee:	eeb0 0a67 	vmov.f32	s0, s15
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	bc996e30 	.word	0xbc996e30
 80019fc:	3d981627 	.word	0x3d981627
 8001a00:	3e593484 	.word	0x3e593484
 8001a04:	3fc90da4 	.word	0x3fc90da4
 8001a08:	40490fdb 	.word	0x40490fdb

08001a0c <atan2_approx>:

float atan2_approx(float y, float x)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b08b      	sub	sp, #44	; 0x2c
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a16:	edc7 0a00 	vstr	s1, [r7]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 8001a1a:	edd7 7a00 	vldr	s15, [r7]
 8001a1e:	eef0 7ae7 	vabs.f32	s15, s15
 8001a22:	edc7 7a08 	vstr	s15, [r7, #32]
    absY = fabsf(y);
 8001a26:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a2a:	eef0 7ae7 	vabs.f32	s15, s15
 8001a2e:	edc7 7a07 	vstr	s15, [r7, #28]
    res  = MAX(absX, absY);
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4a:	dd01      	ble.n	8001a50 <atan2_approx+0x44>
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	e000      	b.n	8001a52 <atan2_approx+0x46>
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
    if (res) res = MIN(absX, absY) / res;
 8001a54:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a60:	d018      	beq.n	8001a94 <atan2_approx+0x88>
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7a:	d502      	bpl.n	8001a82 <atan2_approx+0x76>
 8001a7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a80:	e001      	b.n	8001a86 <atan2_approx+0x7a>
 8001a82:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a86:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001a8a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a8e:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8001a92:	e002      	b.n	8001a9a <atan2_approx+0x8e>
    else res = 0.0f;
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 8001a9a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a9e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001b7c <atan2_approx+0x170>
 8001aa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aa6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001b80 <atan2_approx+0x174>
 8001aaa:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001aae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001b84 <atan2_approx+0x178>
 8001aba:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001abe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001b88 <atan2_approx+0x17c>
 8001aca:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001ace:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001b8c <atan2_approx+0x180>
 8001ada:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ade:	eef1 6a67 	vneg.f32	s13, s15
 8001ae2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ae6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001b90 <atan2_approx+0x184>
 8001aea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aee:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001b94 <atan2_approx+0x188>
 8001af2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001af6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001afe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b0a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 8001b0e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b12:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1e:	dd07      	ble.n	8001b30 <atan2_approx+0x124>
 8001b20:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001b98 <atan2_approx+0x18c>
 8001b24:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b2c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (x < 0) res = M_PIf - res;
 8001b30:	edd7 7a00 	vldr	s15, [r7]
 8001b34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3c:	d507      	bpl.n	8001b4e <atan2_approx+0x142>
 8001b3e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001b9c <atan2_approx+0x190>
 8001b42:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b4a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (y < 0) res = -res;
 8001b4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5a:	d505      	bpl.n	8001b68 <atan2_approx+0x15c>
 8001b5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b60:	eef1 7a67 	vneg.f32	s15, s15
 8001b64:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return res;
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	ee07 3a90 	vmov	s15, r3
}
 8001b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b72:	372c      	adds	r7, #44	; 0x2c
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	3d4e0939 	.word	0x3d4e0939
 8001b80:	3e9eb5e3 	.word	0x3e9eb5e3
 8001b84:	3e16fa88 	.word	0x3e16fa88
 8001b88:	3f7ffe45 	.word	0x3f7ffe45
 8001b8c:	34a8dfa7 	.word	0x34a8dfa7
 8001b90:	3f24fb99 	.word	0x3f24fb99
 8001b94:	3e16a269 	.word	0x3e16a269
 8001b98:	3fc90fdb 	.word	0x3fc90fdb
 8001b9c:	40490fdb 	.word	0x40490fdb

08001ba0 <rotateVector>:

void rotateVector(float v[XYZ_AXIS_COUNT], float rotation[XYZ_AXIS_COUNT])
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
    // rotate v around rotation vector rotation
    // rotation in radians, all elements must be small
    for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e054      	b.n	8001c5a <rotateVector+0xba>
        int i_1 = (i + 1) % 3;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <rotateVector+0xd0>)
 8001bb6:	fb83 3102 	smull	r3, r1, r3, r2
 8001bba:	17d3      	asrs	r3, r2, #31
 8001bbc:	1ac9      	subs	r1, r1, r3
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	440b      	add	r3, r1
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	613b      	str	r3, [r7, #16]
        int i_2 = (i + 2) % 3;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	1c9a      	adds	r2, r3, #2
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <rotateVector+0xd0>)
 8001bce:	fb83 3102 	smull	r3, r1, r3, r2
 8001bd2:	17d3      	asrs	r3, r2, #31
 8001bd4:	1ac9      	subs	r1, r1, r3
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	440b      	add	r3, r1
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	60fb      	str	r3, [r7, #12]
        float newV = v[i_1] + v[i_2] * rotation[i];
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	4413      	add	r3, r2
 8001be8:	ed93 7a00 	vldr	s14, [r3]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	edd3 6a00 	vldr	s13, [r3]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	edd3 7a00 	vldr	s15, [r3]
 8001c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0c:	edc7 7a02 	vstr	s15, [r7, #8]
        v[i_2] -= v[i_1] * rotation[i];
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	4413      	add	r3, r2
 8001c18:	ed93 7a00 	vldr	s14, [r3]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	4413      	add	r3, r2
 8001c24:	edd3 6a00 	vldr	s13, [r3]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	edd3 7a00 	vldr	s15, [r3]
 8001c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	4413      	add	r3, r2
 8001c40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c44:	edc3 7a00 	vstr	s15, [r3]
        v[i_1] = newV;
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	4413      	add	r3, r2
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3301      	adds	r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	dda7      	ble.n	8001bb0 <rotateVector+0x10>
    }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	371c      	adds	r7, #28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	55555556 	.word	0x55555556

08001c74 <buildRotationMatrix>:

void buildRotationMatrix(fp_angles_t *delta, fp_rotationMatrix_t *rotation)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08c      	sub	sp, #48	; 0x30
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, sinzcosx, coszsinx, sinzsinx;

    cosx = cos_approx(delta->angles.roll);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	edd3 7a00 	vldr	s15, [r3]
 8001c84:	eeb0 0a67 	vmov.f32	s0, s15
 8001c88:	f7ff fe54 	bl	8001934 <cos_approx>
 8001c8c:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    sinx = sin_approx(delta->angles.roll);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9a:	f7ff fda1 	bl	80017e0 <sin_approx>
 8001c9e:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    cosy = cos_approx(delta->angles.pitch);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cac:	f7ff fe42 	bl	8001934 <cos_approx>
 8001cb0:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    siny = sin_approx(delta->angles.pitch);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cba:	eeb0 0a67 	vmov.f32	s0, s15
 8001cbe:	f7ff fd8f 	bl	80017e0 <sin_approx>
 8001cc2:	ed87 0a08 	vstr	s0, [r7, #32]
    cosz = cos_approx(delta->angles.yaw);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd0:	f7ff fe30 	bl	8001934 <cos_approx>
 8001cd4:	ed87 0a07 	vstr	s0, [r7, #28]
    sinz = sin_approx(delta->angles.yaw);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cde:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce2:	f7ff fd7d 	bl	80017e0 <sin_approx>
 8001ce6:	ed87 0a06 	vstr	s0, [r7, #24]

    coszcosx = cosz * cosx;
 8001cea:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf6:	edc7 7a05 	vstr	s15, [r7, #20]
    sinzcosx = sinz * cosx;
 8001cfa:	ed97 7a06 	vldr	s14, [r7, #24]
 8001cfe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d06:	edc7 7a04 	vstr	s15, [r7, #16]
    coszsinx = sinx * cosz;
 8001d0a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001d0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d16:	edc7 7a03 	vstr	s15, [r7, #12]
    sinzsinx = sinx * sinz;
 8001d1a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001d1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d26:	edc7 7a02 	vstr	s15, [r7, #8]

    rotation->m[0][X] = cosz * cosy;
 8001d2a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	edc3 7a00 	vstr	s15, [r3]
    rotation->m[0][Y] = -cosy * sinz;
 8001d3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d40:	eeb1 7a67 	vneg.f32	s14, s15
 8001d44:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	edc3 7a01 	vstr	s15, [r3, #4]
    rotation->m[0][Z] = siny;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6a3a      	ldr	r2, [r7, #32]
 8001d56:	609a      	str	r2, [r3, #8]
    rotation->m[1][X] = sinzcosx + (coszsinx * siny);
 8001d58:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d5c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d64:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	edc3 7a03 	vstr	s15, [r3, #12]
    rotation->m[1][Y] = coszcosx - (sinzsinx * siny);
 8001d72:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d76:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	edc3 7a04 	vstr	s15, [r3, #16]
    rotation->m[1][Z] = -sinx * cosy;
 8001d8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d90:	eeb1 7a67 	vneg.f32	s14, s15
 8001d94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	edc3 7a05 	vstr	s15, [r3, #20]
    rotation->m[2][X] = (sinzsinx) - (coszcosx * siny);
 8001da2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001da6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dae:	ed97 7a02 	vldr	s14, [r7, #8]
 8001db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	edc3 7a06 	vstr	s15, [r3, #24]
    rotation->m[2][Y] = (coszsinx) + (sinzcosx * siny);
 8001dbc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dc0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001dc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	edc3 7a07 	vstr	s15, [r3, #28]
    rotation->m[2][Z] = cosy * cosx;
 8001dd6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001dda:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001de8:	bf00      	nop
 8001dea:	3730      	adds	r7, #48	; 0x30
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <degreesToRadians>:

float degreesToRadians(int16_t degrees)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	80fb      	strh	r3, [r7, #6]
    return degrees * RAD;
 8001dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e06:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001e1c <degreesToRadians+0x2c>
 8001e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001e0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	3c8efa35 	.word	0x3c8efa35

08001e20 <gyroSetTargetLooptime>:
static float accumulatedMeasurements[XYZ_AXIS_COUNT] = { 0.0f, 0.0f, 0.0f };
static float gyroPrevious[XYZ_AXIS_COUNT] = { 0.0f, 0.0f, 0.0f };
static int accumulatedMeasurementCount = 0;

static void gyroSetTargetLooptime(uint8_t pidDenom)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
    activePidLoopDenom = pidDenom;
 8001e2a:	4a21      	ldr	r2, [pc, #132]	; (8001eb0 <gyroSetTargetLooptime+0x90>)
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	7013      	strb	r3, [r2, #0]
    if (gyro.sampleRateHz) {
 8001e30:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <gyroSetTargetLooptime+0x94>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d028      	beq.n	8001e8a <gyroSetTargetLooptime+0x6a>
        gyro.sampleLooptime = 1e6 / gyro.sampleRateHz;
 8001e38:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <gyroSetTargetLooptime+0x94>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001e44:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8001ea8 <gyroSetTargetLooptime+0x88>
 8001e48:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e50:	ee17 2a90 	vmov	r2, s15
 8001e54:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <gyroSetTargetLooptime+0x94>)
 8001e56:	609a      	str	r2, [r3, #8]
        gyro.targetLooptime = activePidLoopDenom * 1e6 / gyro.sampleRateHz;
 8001e58:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <gyroSetTargetLooptime+0x90>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e64:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001ea8 <gyroSetTargetLooptime+0x88>
 8001e68:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <gyroSetTargetLooptime+0x94>)
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	ee07 3a90 	vmov	s15, r3
 8001e74:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001e78:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e7c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e80:	ee17 2a90 	vmov	r2, s15
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <gyroSetTargetLooptime+0x94>)
 8001e86:	605a      	str	r2, [r3, #4]
    } else {
        gyro.sampleLooptime = 0;
        gyro.targetLooptime = 0;
    }
}
 8001e88:	e005      	b.n	8001e96 <gyroSetTargetLooptime+0x76>
        gyro.sampleLooptime = 0;
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <gyroSetTargetLooptime+0x94>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
        gyro.targetLooptime = 0;
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <gyroSetTargetLooptime+0x94>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	605a      	str	r2, [r3, #4]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	412e8480 	.word	0x412e8480
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	20000614 	.word	0x20000614

08001eb8 <gyroSetSampleRate>:

static uint16_t gyroSetSampleRate(gyroDev_t *gyro) {
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	gyro->gyroRateKHz = GYRO_RATE_6664_Hz;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
	uint16_t gyroSampleRateHz = 6664;
 8001ec8:	f641 2308 	movw	r3, #6664	; 0x1a08
 8001ecc:	81fb      	strh	r3, [r7, #14]
	uint16_t accSampleRateHz = 6664;
 8001ece:	f641 2308 	movw	r3, #6664	; 0x1a08
 8001ed2:	81bb      	strh	r3, [r7, #12]

	gyro->mpuDividerDrops  = 0; // we no longer use the gyro's sample divider
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	gyro->accSampleRateHz = accSampleRateHz;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	89ba      	ldrh	r2, [r7, #12]
 8001ee0:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
	return gyroSampleRateHz;
 8001ee4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <gyroInitSlewLimiter>:

static void gyroInitSlewLimiter(gyroSensor_t *gyroSensor) {
 8001ef2:	b480      	push	{r7}
 8001ef4:	b085      	sub	sp, #20
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	e009      	b.n	8001f14 <gyroInitSlewLimiter+0x22>
        gyroSensor->gyroDev.gyroADCRawPrevious[axis] = 0;
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	332a      	adds	r3, #42	; 0x2a
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	605a      	str	r2, [r3, #4]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3301      	adds	r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	ddf2      	ble.n	8001f00 <gyroInitSlewLimiter+0xe>
    }
}
 8001f1a:	bf00      	nop
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <gyroInitSensorFilters>:

static void gyroInitSensorFilters(gyroSensor_t *gyroSensor)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
    gyroInitSlewLimiter(gyroSensor);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ffde 	bl	8001ef2 <gyroInitSlewLimiter>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <gyroInitSensor>:

static void gyroInitSensor(gyroSensor_t *gyroSensor)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
    gyroSensor->gyroDev.gyro_high_fsr = true;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
    gyroSensor->gyroDev.gyroAlign = CW90_DEG;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2202      	movs	r2, #2
 8001f52:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    sensorAlignment_t customAlignment;
    buildAlignmentFromStandardAlignment(&customAlignment, gyroSensor->gyroDev.gyroAlign);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
 8001f5c:	f107 0308 	add.w	r3, r7, #8
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 f8f2 	bl	800614c <buildAlignmentFromStandardAlignment>
    buildRotationMatrixFromAlignment(&customAlignment, &gyroSensor->gyroDev.rotationMatrix);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001f6e:	f107 0308 	add.w	r3, r7, #8
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f004 f8a5 	bl	80060c4 <buildRotationMatrixFromAlignment>
    gyroSensor->gyroDev.mpuIntExtiTag = 0U;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
    gyroSensor->gyroDev.hardware_lpf = 0U;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7

    // The targetLooptime gets set later based on the active sensor's gyroSampleRateHz and pid_process_denom
    gyroSensor->gyroDev.gyroSampleRateHz = gyroSetSampleRate(&gyroSensor->gyroDev);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff93 	bl	8001eb8 <gyroSetSampleRate>
 8001f92:	4603      	mov	r3, r0
 8001f94:	461a      	mov	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
    gyroSensor->gyroDev.initFn(&gyroSensor->gyroDev);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4798      	blx	r3

    // As new gyros are supported, be sure to add them below based on whether they are subject to the overflow/inversion bug
    // Any gyro not explicitly defined will default to not having built-in overflow protection as a safe alternative.
    gyroSensor->gyroDev.gyroHasOverflowProtection = false;  // default catch for newly added gyros until proven to be unaffected
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb

    gyroInitSensorFilters(gyroSensor);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ffba 	bl	8001f28 <gyroInitSensorFilters>
}
 8001fb4:	bf00      	nop
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <calculateNyquistAdjustedNotchHz>:
    FILTER_LPF1 = 0,
    FILTER_LPF2
};

static uint16_t calculateNyquistAdjustedNotchHz(uint16_t notchHz, uint16_t notchCutoffHz)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	460a      	mov	r2, r1
 8001fc6:	80fb      	strh	r3, [r7, #6]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	80bb      	strh	r3, [r7, #4]
    const uint32_t gyroFrequencyNyquist = 1000000 / 2 / gyro.targetLooptime;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <calculateNyquistAdjustedNotchHz+0x44>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a0c      	ldr	r2, [pc, #48]	; (8002004 <calculateNyquistAdjustedNotchHz+0x48>)
 8001fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd6:	60fb      	str	r3, [r7, #12]
    if (notchHz > gyroFrequencyNyquist) {
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d208      	bcs.n	8001ff2 <calculateNyquistAdjustedNotchHz+0x36>
        if (notchCutoffHz < gyroFrequencyNyquist) {
 8001fe0:	88bb      	ldrh	r3, [r7, #4]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d902      	bls.n	8001fee <calculateNyquistAdjustedNotchHz+0x32>
            notchHz = gyroFrequencyNyquist;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	80fb      	strh	r3, [r7, #6]
 8001fec:	e001      	b.n	8001ff2 <calculateNyquistAdjustedNotchHz+0x36>
        } else {
            notchHz = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	80fb      	strh	r3, [r7, #6]
        }
    }

    return notchHz;
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	20000614 	.word	0x20000614
 8002004:	0007a120 	.word	0x0007a120

08002008 <gyroInitLowpassFilterLpf>:

static bool gyroInitLowpassFilterLpf(int slot, int type, uint16_t lpfHz, uint32_t looptime)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08e      	sub	sp, #56	; 0x38
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	4613      	mov	r3, r2
 8002016:	80fb      	strh	r3, [r7, #6]
    filterApplyFnPtr *lowpassFilterApplyFn;
    gyroLowpassFilter_t *lowpassFilter = NULL;
 8002018:	2300      	movs	r3, #0
 800201a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (slot) {
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <gyroInitLowpassFilterLpf+0x22>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d005      	beq.n	8002034 <gyroInitLowpassFilterLpf+0x2c>
 8002028:	e009      	b.n	800203e <gyroInitLowpassFilterLpf+0x36>
    case FILTER_LPF1:
        lowpassFilterApplyFn = &gyro.lowpassFilterApplyFn;
 800202a:	4b65      	ldr	r3, [pc, #404]	; (80021c0 <gyroInitLowpassFilterLpf+0x1b8>)
 800202c:	637b      	str	r3, [r7, #52]	; 0x34
        lowpassFilter = gyro.lowpassFilter;
 800202e:	4b65      	ldr	r3, [pc, #404]	; (80021c4 <gyroInitLowpassFilterLpf+0x1bc>)
 8002030:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002032:	e006      	b.n	8002042 <gyroInitLowpassFilterLpf+0x3a>

    case FILTER_LPF2:
        lowpassFilterApplyFn = &gyro.lowpass2FilterApplyFn;
 8002034:	4b64      	ldr	r3, [pc, #400]	; (80021c8 <gyroInitLowpassFilterLpf+0x1c0>)
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
        lowpassFilter = gyro.lowpass2Filter;
 8002038:	4b64      	ldr	r3, [pc, #400]	; (80021cc <gyroInitLowpassFilterLpf+0x1c4>)
 800203a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800203c:	e001      	b.n	8002042 <gyroInitLowpassFilterLpf+0x3a>

    default:
        return false;
 800203e:	2300      	movs	r3, #0
 8002040:	e0b9      	b.n	80021b6 <gyroInitLowpassFilterLpf+0x1ae>
    }

    bool ret = false;
 8002042:	2300      	movs	r3, #0
 8002044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Establish some common constants
    const uint32_t gyroFrequencyNyquist = 1000000 / 2 / looptime;
 8002048:	4a61      	ldr	r2, [pc, #388]	; (80021d0 <gyroInitLowpassFilterLpf+0x1c8>)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002050:	61bb      	str	r3, [r7, #24]
    const float gyroDt = looptime * 1e-6f;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	ee07 3a90 	vmov	s15, r3
 8002058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800205c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80021d4 <gyroInitLowpassFilterLpf+0x1cc>
 8002060:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002064:	edc7 7a05 	vstr	s15, [r7, #20]

    // Gain could be calculated a little later as it is specific to the pt1/bqrcf2/fkf branches
    const float gain = pt1FilterGain(lpfHz, gyroDt);
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	ee07 3a90 	vmov	s15, r3
 800206e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002072:	edd7 0a05 	vldr	s1, [r7, #20]
 8002076:	eeb0 0a67 	vmov.f32	s0, s15
 800207a:	f7ff f879 	bl	8001170 <pt1FilterGain>
 800207e:	ed87 0a04 	vstr	s0, [r7, #16]

    // Dereference the pointer to null before checking valid cutoff and filter
    // type. It will be overridden for positive cases.
    *lowpassFilterApplyFn = nullFilterApply;
 8002082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002084:	4a54      	ldr	r2, [pc, #336]	; (80021d8 <gyroInitLowpassFilterLpf+0x1d0>)
 8002086:	601a      	str	r2, [r3, #0]

    // If lowpass cutoff has been specified
    if (lpfHz) {
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 808e 	beq.w	80021ac <gyroInitLowpassFilterLpf+0x1a4>
        switch (type) {
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b03      	cmp	r3, #3
 8002094:	f200 808d 	bhi.w	80021b2 <gyroInitLowpassFilterLpf+0x1aa>
 8002098:	a201      	add	r2, pc, #4	; (adr r2, 80020a0 <gyroInitLowpassFilterLpf+0x98>)
 800209a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209e:	bf00      	nop
 80020a0:	080020b1 	.word	0x080020b1
 80020a4:	080020eb 	.word	0x080020eb
 80020a8:	08002139 	.word	0x08002139
 80020ac:	08002173 	.word	0x08002173
        case FILTER_PT1:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt1FilterApply;
 80020b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b2:	4a4a      	ldr	r2, [pc, #296]	; (80021dc <gyroInitLowpassFilterLpf+0x1d4>)
 80020b4:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80020b6:	2300      	movs	r3, #0
 80020b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ba:	e00f      	b.n	80020dc <gyroInitLowpassFilterLpf+0xd4>
                pt1FilterInit(&lowpassFilter[axis].pt1FilterState, gain);
 80020bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	461a      	mov	r2, r3
 80020c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ca:	4413      	add	r3, r2
 80020cc:	ed97 0a04 	vldr	s0, [r7, #16]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff f875 	bl	80011c0 <pt1FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80020d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d8:	3301      	adds	r3, #1
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
 80020dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020de:	2b02      	cmp	r3, #2
 80020e0:	ddec      	ble.n	80020bc <gyroInitLowpassFilterLpf+0xb4>
            }
            ret = true;
 80020e2:	2301      	movs	r3, #1
 80020e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 80020e8:	e063      	b.n	80021b2 <gyroInitLowpassFilterLpf+0x1aa>
        case FILTER_BIQUAD:
            if (lpfHz <= gyroFrequencyNyquist) {
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d35e      	bcc.n	80021b0 <gyroInitLowpassFilterLpf+0x1a8>
                *lowpassFilterApplyFn = (filterApplyFnPtr) biquadFilterApply;
 80020f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f4:	4a3a      	ldr	r2, [pc, #232]	; (80021e0 <gyroInitLowpassFilterLpf+0x1d8>)
 80020f6:	601a      	str	r2, [r3, #0]
                for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80020f8:	2300      	movs	r3, #0
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
 80020fc:	e015      	b.n	800212a <gyroInitLowpassFilterLpf+0x122>
                    biquadFilterInitLPF(&lowpassFilter[axis].biquadFilterState, lpfHz, looptime);
 80020fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	461a      	mov	r2, r3
 800210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210c:	4413      	add	r3, r2
 800210e:	88fa      	ldrh	r2, [r7, #6]
 8002110:	ee07 2a90 	vmov	s15, r2
 8002114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002118:	6839      	ldr	r1, [r7, #0]
 800211a:	eeb0 0a67 	vmov.f32	s0, s15
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff f8b4 	bl	800128c <biquadFilterInitLPF>
                for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	3301      	adds	r3, #1
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	2b02      	cmp	r3, #2
 800212e:	dde6      	ble.n	80020fe <gyroInitLowpassFilterLpf+0xf6>
                }
                ret = true;
 8002130:	2301      	movs	r3, #1
 8002132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            break;
 8002136:	e03b      	b.n	80021b0 <gyroInitLowpassFilterLpf+0x1a8>
        case FILTER_PT2:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt2FilterApply;
 8002138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213a:	4a2a      	ldr	r2, [pc, #168]	; (80021e4 <gyroInitLowpassFilterLpf+0x1dc>)
 800213c:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800213e:	2300      	movs	r3, #0
 8002140:	623b      	str	r3, [r7, #32]
 8002142:	e00f      	b.n	8002164 <gyroInitLowpassFilterLpf+0x15c>
                pt2FilterInit(&lowpassFilter[axis].pt2FilterState, gain);
 8002144:	6a3a      	ldr	r2, [r7, #32]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	461a      	mov	r2, r3
 8002150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002152:	4413      	add	r3, r2
 8002154:	ed97 0a04 	vldr	s0, [r7, #16]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fa37 	bl	80015cc <pt2FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	3301      	adds	r3, #1
 8002162:	623b      	str	r3, [r7, #32]
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	2b02      	cmp	r3, #2
 8002168:	ddec      	ble.n	8002144 <gyroInitLowpassFilterLpf+0x13c>
            }
            ret = true;
 800216a:	2301      	movs	r3, #1
 800216c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8002170:	e01f      	b.n	80021b2 <gyroInitLowpassFilterLpf+0x1aa>
        case FILTER_PT3:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt3FilterApply;
 8002172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002174:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <gyroInitLowpassFilterLpf+0x1e0>)
 8002176:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
 800217c:	e00f      	b.n	800219e <gyroInitLowpassFilterLpf+0x196>
                pt3FilterInit(&lowpassFilter[axis].pt3FilterState, gain);
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	461a      	mov	r2, r3
 800218a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218c:	4413      	add	r3, r2
 800218e:	ed97 0a04 	vldr	s0, [r7, #16]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff faba 	bl	800170c <pt3FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	3301      	adds	r3, #1
 800219c:	61fb      	str	r3, [r7, #28]
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	ddec      	ble.n	800217e <gyroInitLowpassFilterLpf+0x176>
            }
            ret = true;
 80021a4:	2301      	movs	r3, #1
 80021a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 80021aa:	e002      	b.n	80021b2 <gyroInitLowpassFilterLpf+0x1aa>
        }
    }
 80021ac:	bf00      	nop
 80021ae:	e000      	b.n	80021b2 <gyroInitLowpassFilterLpf+0x1aa>
            break;
 80021b0:	bf00      	nop
    return ret;
 80021b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3738      	adds	r7, #56	; 0x38
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	2000079c 	.word	0x2000079c
 80021c4:	200007a0 	.word	0x200007a0
 80021c8:	20000818 	.word	0x20000818
 80021cc:	2000081c 	.word	0x2000081c
 80021d0:	0007a120 	.word	0x0007a120
 80021d4:	358637bd 	.word	0x358637bd
 80021d8:	08001151 	.word	0x08001151
 80021dc:	080011e7 	.word	0x080011e7
 80021e0:	080012bd 	.word	0x080012bd
 80021e4:	080015fb 	.word	0x080015fb
 80021e8:	08001743 	.word	0x08001743

080021ec <gyroInitFilterNotch1>:

static void gyroInitFilterNotch1(uint16_t notchHz, uint16_t notchCutoffHz)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	460a      	mov	r2, r1
 80021f6:	80fb      	strh	r3, [r7, #6]
 80021f8:	4613      	mov	r3, r2
 80021fa:	80bb      	strh	r3, [r7, #4]
    gyro.notchFilter1ApplyFn = nullFilterApply;
 80021fc:	4b27      	ldr	r3, [pc, #156]	; (800229c <gyroInitFilterNotch1+0xb0>)
 80021fe:	4a28      	ldr	r2, [pc, #160]	; (80022a0 <gyroInitFilterNotch1+0xb4>)
 8002200:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

    notchHz = calculateNyquistAdjustedNotchHz(notchHz, notchCutoffHz);
 8002204:	88ba      	ldrh	r2, [r7, #4]
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fed6 	bl	8001fbc <calculateNyquistAdjustedNotchHz>
 8002210:	4603      	mov	r3, r0
 8002212:	80fb      	strh	r3, [r7, #6]

    if (notchHz != 0 && notchCutoffHz != 0) {
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d03c      	beq.n	8002294 <gyroInitFilterNotch1+0xa8>
 800221a:	88bb      	ldrh	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d039      	beq.n	8002294 <gyroInitFilterNotch1+0xa8>
        gyro.notchFilter1ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8002220:	4b1e      	ldr	r3, [pc, #120]	; (800229c <gyroInitFilterNotch1+0xb0>)
 8002222:	4a20      	ldr	r2, [pc, #128]	; (80022a4 <gyroInitFilterNotch1+0xb8>)
 8002224:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
        const float notchQ = filterGetNotchQ(notchHz, notchCutoffHz);
 8002228:	88fb      	ldrh	r3, [r7, #6]
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002232:	88bb      	ldrh	r3, [r7, #4]
 8002234:	ee07 3a10 	vmov	s14, r3
 8002238:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800223c:	eef0 0a47 	vmov.f32	s1, s14
 8002240:	eeb0 0a67 	vmov.f32	s0, s15
 8002244:	f7fe ff62 	bl	800110c <filterGetNotchQ>
 8002248:	ed87 0a02 	vstr	s0, [r7, #8]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e01d      	b.n	800228e <gyroInitFilterNotch1+0xa2>
            biquadFilterInit(&gyro.notchFilter1[axis], notchHz, gyro.targetLooptime, notchQ, FILTER_NOTCH, 1.0f);
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002260:	4a0e      	ldr	r2, [pc, #56]	; (800229c <gyroInitFilterNotch1+0xb0>)
 8002262:	4413      	add	r3, r2
 8002264:	3304      	adds	r3, #4
 8002266:	88fa      	ldrh	r2, [r7, #6]
 8002268:	ee07 2a90 	vmov	s15, r2
 800226c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002270:	4a0a      	ldr	r2, [pc, #40]	; (800229c <gyroInitFilterNotch1+0xb0>)
 8002272:	6851      	ldr	r1, [r2, #4]
 8002274:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002278:	2201      	movs	r2, #1
 800227a:	edd7 0a02 	vldr	s1, [r7, #8]
 800227e:	eeb0 0a67 	vmov.f32	s0, s15
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe ffd4 	bl	8001230 <biquadFilterInit>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3301      	adds	r3, #1
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b02      	cmp	r3, #2
 8002292:	ddde      	ble.n	8002252 <gyroInitFilterNotch1+0x66>
        }
    }
}
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000614 	.word	0x20000614
 80022a0:	08001151 	.word	0x08001151
 80022a4:	080012bd 	.word	0x080012bd

080022a8 <gyroInitFilterNotch2>:

static void gyroInitFilterNotch2(uint16_t notchHz, uint16_t notchCutoffHz)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	460a      	mov	r2, r1
 80022b2:	80fb      	strh	r3, [r7, #6]
 80022b4:	4613      	mov	r3, r2
 80022b6:	80bb      	strh	r3, [r7, #4]
    gyro.notchFilter2ApplyFn = nullFilterApply;
 80022b8:	4b27      	ldr	r3, [pc, #156]	; (8002358 <gyroInitFilterNotch2+0xb0>)
 80022ba:	4a28      	ldr	r2, [pc, #160]	; (800235c <gyroInitFilterNotch2+0xb4>)
 80022bc:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

    notchHz = calculateNyquistAdjustedNotchHz(notchHz, notchCutoffHz);
 80022c0:	88ba      	ldrh	r2, [r7, #4]
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	4611      	mov	r1, r2
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fe78 	bl	8001fbc <calculateNyquistAdjustedNotchHz>
 80022cc:	4603      	mov	r3, r0
 80022ce:	80fb      	strh	r3, [r7, #6]

    if (notchHz != 0 && notchCutoffHz != 0) {
 80022d0:	88fb      	ldrh	r3, [r7, #6]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d03b      	beq.n	800234e <gyroInitFilterNotch2+0xa6>
 80022d6:	88bb      	ldrh	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d038      	beq.n	800234e <gyroInitFilterNotch2+0xa6>
        gyro.notchFilter2ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <gyroInitFilterNotch2+0xb0>)
 80022de:	4a20      	ldr	r2, [pc, #128]	; (8002360 <gyroInitFilterNotch2+0xb8>)
 80022e0:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
        const float notchQ = filterGetNotchQ(notchHz, notchCutoffHz);
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	ee07 3a90 	vmov	s15, r3
 80022ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ee:	88bb      	ldrh	r3, [r7, #4]
 80022f0:	ee07 3a10 	vmov	s14, r3
 80022f4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80022f8:	eef0 0a47 	vmov.f32	s1, s14
 80022fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002300:	f7fe ff04 	bl	800110c <filterGetNotchQ>
 8002304:	ed87 0a02 	vstr	s0, [r7, #8]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	e01c      	b.n	8002348 <gyroInitFilterNotch2+0xa0>
            biquadFilterInit(&gyro.notchFilter2[axis], notchHz, gyro.targetLooptime, notchQ, FILTER_NOTCH, 1.0f);
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800231c:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <gyroInitFilterNotch2+0xb0>)
 800231e:	4413      	add	r3, r2
 8002320:	88fa      	ldrh	r2, [r7, #6]
 8002322:	ee07 2a90 	vmov	s15, r2
 8002326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800232a:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <gyroInitFilterNotch2+0xb0>)
 800232c:	6851      	ldr	r1, [r2, #4]
 800232e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002332:	2201      	movs	r2, #1
 8002334:	edd7 0a02 	vldr	s1, [r7, #8]
 8002338:	eeb0 0a67 	vmov.f32	s0, s15
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe ff77 	bl	8001230 <biquadFilterInit>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	3301      	adds	r3, #1
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2b02      	cmp	r3, #2
 800234c:	dddf      	ble.n	800230e <gyroInitFilterNotch2+0x66>
        }
    }
}
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000614 	.word	0x20000614
 800235c:	08001151 	.word	0x08001151
 8002360:	080012bd 	.word	0x080012bd

08002364 <gyroInitFilters>:

static void gyroInitFilters(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
    gyroInitLowpassFilterLpf(
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <gyroInitFilters+0x44>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002370:	2100      	movs	r1, #0
 8002372:	2000      	movs	r0, #0
 8002374:	f7ff fe48 	bl	8002008 <gyroInitLowpassFilterLpf>
	  FILTER_PT1,
	  LPF_MAX_HZ,
      gyro.targetLooptime
    );

    gyro.downsampleFilterEnabled = gyroInitLowpassFilterLpf(
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <gyroInitFilters+0x44>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002380:	2100      	movs	r1, #0
 8002382:	2001      	movs	r0, #1
 8002384:	f7ff fe40 	bl	8002008 <gyroInitLowpassFilterLpf>
 8002388:	4603      	mov	r3, r0
 800238a:	461a      	mov	r2, r3
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <gyroInitFilters+0x44>)
 800238e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  FILTER_PT1,
	  LPF_MAX_HZ,
      gyro.sampleLooptime
    );

    gyroInitFilterNotch1(0, 0);
 8002392:	2100      	movs	r1, #0
 8002394:	2000      	movs	r0, #0
 8002396:	f7ff ff29 	bl	80021ec <gyroInitFilterNotch1>
    gyroInitFilterNotch2(0, 0);
 800239a:	2100      	movs	r1, #0
 800239c:	2000      	movs	r0, #0
 800239e:	f7ff ff83 	bl	80022a8 <gyroInitFilterNotch2>
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000614 	.word	0x20000614

080023ac <gyroInit>:

#define PID_PROCESS_DENOM_DEFAULT       1

void gyroInit(sensorGyroInitFuncPtr initFn, sensorGyroReadFuncPtr readFn)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
    gyro.gyroDebugMode = DEBUG_NONE;
 80023b6:	4b29      	ldr	r3, [pc, #164]	; (800245c <gyroInit+0xb0>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 237b 	strb.w	r2, [r3, #891]	; 0x37b
    gyro.useDualGyroDebugging = false;
 80023be:	4b27      	ldr	r3, [pc, #156]	; (800245c <gyroInit+0xb0>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
    gyro.gyroHasOverflowProtection = false;
 80023c6:	4b25      	ldr	r3, [pc, #148]	; (800245c <gyroInit+0xb0>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
    gyro.gyroToUse = GYRO_CONFIG_USE_GYRO_1;
 80023ce:	4b23      	ldr	r3, [pc, #140]	; (800245c <gyroInit+0xb0>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
    gyro.gyroDebugAxis = FD_ROLL;
 80023d6:	4b21      	ldr	r3, [pc, #132]	; (800245c <gyroInit+0xb0>)
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e

	gyro.gyroSensor1.gyroDev.initFn = initFn;
 80023de:	4a1f      	ldr	r2, [pc, #124]	; (800245c <gyroInit+0xb0>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	63d3      	str	r3, [r2, #60]	; 0x3c
	gyro.gyroSensor1.gyroDev.readFn = readFn;
 80023e4:	4a1d      	ldr	r2, [pc, #116]	; (800245c <gyroInit+0xb0>)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6413      	str	r3, [r2, #64]	; 0x40
    static uint8_t gyroBuf1[GYRO_BUF_SIZE];
    // SPI DMA buffer required per device
    gyro.gyroSensor1.gyroDev.dev.txBuf = gyroBuf1;
 80023ea:	4b1c      	ldr	r3, [pc, #112]	; (800245c <gyroInit+0xb0>)
 80023ec:	4a1c      	ldr	r2, [pc, #112]	; (8002460 <gyroInit+0xb4>)
 80023ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    gyro.gyroSensor1.gyroDev.dev.rxBuf = &gyroBuf1[GYRO_BUF_SIZE / 2];
 80023f2:	4b1a      	ldr	r3, [pc, #104]	; (800245c <gyroInit+0xb0>)
 80023f4:	4a1b      	ldr	r2, [pc, #108]	; (8002464 <gyroInit+0xb8>)
 80023f6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    gyroInitSensor(&gyro.gyroSensor1);
 80023fa:	481b      	ldr	r0, [pc, #108]	; (8002468 <gyroInit+0xbc>)
 80023fc:	f7ff fd9f 	bl	8001f3e <gyroInitSensor>

    // Copy the sensor's scale to the high-level gyro object. If running in "BOTH" mode
    // then logic above requires both sensors to be the same so we'll use sensor1's scale.
    // This will need to be revised if we ever allow different sensor types to be used simultaneously.
    // Likewise determine the appropriate raw data for use in DEBUG_GYRO_RAW
    gyro.scale = gyro.gyroSensor1.gyroDev.scale;
 8002400:	4b16      	ldr	r3, [pc, #88]	; (800245c <gyroInit+0xb0>)
 8002402:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002406:	4a15      	ldr	r2, [pc, #84]	; (800245c <gyroInit+0xb0>)
 8002408:	60d3      	str	r3, [r2, #12]
    gyro.rawSensorDev = &gyro.gyroSensor1.gyroDev;
 800240a:	4b14      	ldr	r3, [pc, #80]	; (800245c <gyroInit+0xb0>)
 800240c:	4a16      	ldr	r2, [pc, #88]	; (8002468 <gyroInit+0xbc>)
 800240e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    if (gyro.rawSensorDev) {
 8002412:	4b12      	ldr	r3, [pc, #72]	; (800245c <gyroInit+0xb0>)
 8002414:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00f      	beq.n	800243c <gyroInit+0x90>
        gyro.sampleRateHz = gyro.rawSensorDev->gyroSampleRateHz;
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <gyroInit+0xb0>)
 800241e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002422:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	; 0xf4
 8002426:	4b0d      	ldr	r3, [pc, #52]	; (800245c <gyroInit+0xb0>)
 8002428:	801a      	strh	r2, [r3, #0]
        gyro.accSampleRateHz = gyro.rawSensorDev->accSampleRateHz;
 800242a:	4b0c      	ldr	r3, [pc, #48]	; (800245c <gyroInit+0xb0>)
 800242c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002430:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	; 0xf6
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <gyroInit+0xb0>)
 8002436:	f8a3 2378 	strh.w	r2, [r3, #888]	; 0x378
 800243a:	e006      	b.n	800244a <gyroInit+0x9e>
    } else {
        gyro.sampleRateHz = 0;
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <gyroInit+0xb0>)
 800243e:	2200      	movs	r2, #0
 8002440:	801a      	strh	r2, [r3, #0]
        gyro.accSampleRateHz = 0;
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <gyroInit+0xb0>)
 8002444:	2200      	movs	r2, #0
 8002446:	f8a3 2378 	strh.w	r2, [r3, #888]	; 0x378
    }

	gyroSetTargetLooptime(PID_PROCESS_DENOM_DEFAULT);
 800244a:	2001      	movs	r0, #1
 800244c:	f7ff fce8 	bl	8001e20 <gyroSetTargetLooptime>
	gyroInitFilters();
 8002450:	f7ff ff88 	bl	8002364 <gyroInitFilters>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000614 	.word	0x20000614
 8002460:	200009b0 	.word	0x200009b0
 8002464:	200009c0 	.word	0x200009c0
 8002468:	20000650 	.word	0x20000650

0800246c <gyroUpdateSensor>:

static void gyroUpdateSensor(gyroSensor_t *gyroSensor)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
    if (!gyroSensor->gyroDev.readFn(&gyroSensor->gyroDev)) {
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	4610      	mov	r0, r2
 800247c:	4798      	blx	r3
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d02f      	beq.n	80024e4 <gyroUpdateSensor+0x78>
        return;
    }
    gyroSensor->gyroDev.dataReady = false;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    // move 16-bit gyro data into 32-bit variables to avoid overflows in calculations
    gyroSensor->gyroDev.gyroADC[X] = gyroSensor->gyroDev.gyroADC[X] - gyroSensor->gyroDev.gyroZero[X];
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8002498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
    gyroSensor->gyroDev.gyroADC[Y] = gyroSensor->gyroDev.gyroADC[Y] - gyroSensor->gyroDev.gyroZero[Y];
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80024ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    gyroSensor->gyroDev.gyroADC[Z] = gyroSensor->gyroDev.gyroADC[Z] - gyroSensor->gyroDev.gyroZero[Z];
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80024c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    alignSensorViaRotation(gyroSensor->gyroDev.gyroADC, gyroSensor->gyroDev.gyroAlign);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 80024da:	4619      	mov	r1, r3
 80024dc:	4610      	mov	r0, r2
 80024de:	f003 fe83 	bl	80061e8 <alignSensorViaRotation>
 80024e2:	e000      	b.n	80024e6 <gyroUpdateSensor+0x7a>
        return;
 80024e4:	bf00      	nop
}
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <gyroFilter>:


static void gyroFilter(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	e074      	b.n	80025e2 <gyroFilter+0xf6>
        // downsample the individual gyro samples
        float gyroADCf = 0;
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	603b      	str	r3, [r7, #0]
        if (gyro.downsampleFilterEnabled) {
 80024fe:	4b3e      	ldr	r3, [pc, #248]	; (80025f8 <gyroFilter+0x10c>)
 8002500:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <gyroFilter+0x2e>
            // using gyro lowpass 2 filter for downsampling
            gyroADCf = gyro.sampleSum[axis];
 8002508:	4a3b      	ldr	r2, [pc, #236]	; (80025f8 <gyroFilter+0x10c>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	330a      	adds	r3, #10
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	3304      	adds	r3, #4
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	e020      	b.n	800255c <gyroFilter+0x70>
        } else {
            // using simple average for downsampling
            if (gyro.sampleCount) {
 800251a:	4b37      	ldr	r3, [pc, #220]	; (80025f8 <gyroFilter+0x10c>)
 800251c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002520:	2b00      	cmp	r3, #0
 8002522:	d012      	beq.n	800254a <gyroFilter+0x5e>
                gyroADCf = gyro.sampleSum[axis] / gyro.sampleCount;
 8002524:	4a34      	ldr	r2, [pc, #208]	; (80025f8 <gyroFilter+0x10c>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	330a      	adds	r3, #10
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	3304      	adds	r3, #4
 8002530:	edd3 6a00 	vldr	s13, [r3]
 8002534:	4b30      	ldr	r3, [pc, #192]	; (80025f8 <gyroFilter+0x10c>)
 8002536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002546:	edc7 7a00 	vstr	s15, [r7]
            }
            gyro.sampleSum[axis] = 0;
 800254a:	4a2b      	ldr	r2, [pc, #172]	; (80025f8 <gyroFilter+0x10c>)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	330a      	adds	r3, #10
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	3304      	adds	r3, #4
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
        }

        // apply static notch filters and software lowpass filters
        gyroADCf = gyro.notchFilter1ApplyFn((filter_t *)&gyro.notchFilter1[axis], gyroADCf);
 800255c:	4b26      	ldr	r3, [pc, #152]	; (80025f8 <gyroFilter+0x10c>)
 800255e:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002570:	4a21      	ldr	r2, [pc, #132]	; (80025f8 <gyroFilter+0x10c>)
 8002572:	4413      	add	r3, r2
 8002574:	3304      	adds	r3, #4
 8002576:	ed97 0a00 	vldr	s0, [r7]
 800257a:	4618      	mov	r0, r3
 800257c:	4788      	blx	r1
 800257e:	ed87 0a00 	vstr	s0, [r7]
        gyroADCf = gyro.notchFilter2ApplyFn((filter_t *)&gyro.notchFilter2[axis], gyroADCf);
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <gyroFilter+0x10c>)
 8002584:	f8d3 12fc 	ldr.w	r1, [r3, #764]	; 0x2fc
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002596:	4a18      	ldr	r2, [pc, #96]	; (80025f8 <gyroFilter+0x10c>)
 8002598:	4413      	add	r3, r2
 800259a:	ed97 0a00 	vldr	s0, [r7]
 800259e:	4618      	mov	r0, r3
 80025a0:	4788      	blx	r1
 80025a2:	ed87 0a00 	vstr	s0, [r7]
        gyroADCf = gyro.lowpassFilterApplyFn((filter_t *)&gyro.lowpassFilter[axis], gyroADCf);
 80025a6:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <gyroFilter+0x10c>)
 80025a8:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80025ba:	4a0f      	ldr	r2, [pc, #60]	; (80025f8 <gyroFilter+0x10c>)
 80025bc:	4413      	add	r3, r2
 80025be:	3304      	adds	r3, #4
 80025c0:	ed97 0a00 	vldr	s0, [r7]
 80025c4:	4618      	mov	r0, r3
 80025c6:	4788      	blx	r1
 80025c8:	ed87 0a00 	vstr	s0, [r7]


        gyro.gyroADCf[axis] = gyroADCf;
 80025cc:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <gyroFilter+0x10c>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3306      	adds	r3, #6
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	3304      	adds	r3, #4
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3301      	adds	r3, #1
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	dd87      	ble.n	80024f8 <gyroFilter+0xc>
    }
    gyro.sampleCount = 0;
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <gyroFilter+0x10c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80025f0:	bf00      	nop
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000614 	.word	0x20000614

080025fc <gyroAccumulateMeasurements>:

static void gyroAccumulateMeasurements(void) {
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]
 8002606:	e038      	b.n	800267a <gyroAccumulateMeasurements+0x7e>
        // integrate using trapezium rule to avoid bias
        accumulatedMeasurements[axis] += 0.5f * (gyroPrevious[axis] + gyro.gyroADCf[axis]) * gyro.targetLooptime;
 8002608:	4a23      	ldr	r2, [pc, #140]	; (8002698 <gyroAccumulateMeasurements+0x9c>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	ed93 7a00 	vldr	s14, [r3]
 8002614:	4a21      	ldr	r2, [pc, #132]	; (800269c <gyroAccumulateMeasurements+0xa0>)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	edd3 6a00 	vldr	s13, [r3]
 8002620:	4a1f      	ldr	r2, [pc, #124]	; (80026a0 <gyroAccumulateMeasurements+0xa4>)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3306      	adds	r3, #6
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	3304      	adds	r3, #4
 800262c:	edd3 7a00 	vldr	s15, [r3]
 8002630:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002634:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002638:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800263c:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <gyroAccumulateMeasurements+0xa4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	ee07 3a90 	vmov	s15, r3
 8002644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800264c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002650:	4a11      	ldr	r2, [pc, #68]	; (8002698 <gyroAccumulateMeasurements+0x9c>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	edc3 7a00 	vstr	s15, [r3]
        gyroPrevious[axis] = gyro.gyroADCf[axis];
 800265c:	4a10      	ldr	r2, [pc, #64]	; (80026a0 <gyroAccumulateMeasurements+0xa4>)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3306      	adds	r3, #6
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	3304      	adds	r3, #4
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	490c      	ldr	r1, [pc, #48]	; (800269c <gyroAccumulateMeasurements+0xa0>)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3301      	adds	r3, #1
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b02      	cmp	r3, #2
 800267e:	ddc3      	ble.n	8002608 <gyroAccumulateMeasurements+0xc>
    }
    accumulatedMeasurementCount++;
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <gyroAccumulateMeasurements+0xa8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3301      	adds	r3, #1
 8002686:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <gyroAccumulateMeasurements+0xa8>)
 8002688:	6013      	str	r3, [r2, #0]
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	20000994 	.word	0x20000994
 800269c:	200009a0 	.word	0x200009a0
 80026a0:	20000614 	.word	0x20000614
 80026a4:	200009ac 	.word	0x200009ac

080026a8 <gyroUpdate>:

void gyroUpdate(void) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
	gyroUpdateSensor(&gyro.gyroSensor1);
 80026ac:	4842      	ldr	r0, [pc, #264]	; (80027b8 <gyroUpdate+0x110>)
 80026ae:	f7ff fedd 	bl	800246c <gyroUpdateSensor>

	gyro.gyroADC[X] = gyro.gyroSensor1.gyroDev.gyroADC[X] * gyro.gyroSensor1.gyroDev.scale;
 80026b2:	4b42      	ldr	r3, [pc, #264]	; (80027bc <gyroUpdate+0x114>)
 80026b4:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 80026b8:	4b40      	ldr	r3, [pc, #256]	; (80027bc <gyroUpdate+0x114>)
 80026ba:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80026be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c2:	4b3e      	ldr	r3, [pc, #248]	; (80027bc <gyroUpdate+0x114>)
 80026c4:	edc3 7a04 	vstr	s15, [r3, #16]
	gyro.gyroADC[Y] = gyro.gyroSensor1.gyroDev.gyroADC[Y] * gyro.gyroSensor1.gyroDev.scale;
 80026c8:	4b3c      	ldr	r3, [pc, #240]	; (80027bc <gyroUpdate+0x114>)
 80026ca:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 80026ce:	4b3b      	ldr	r3, [pc, #236]	; (80027bc <gyroUpdate+0x114>)
 80026d0:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80026d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d8:	4b38      	ldr	r3, [pc, #224]	; (80027bc <gyroUpdate+0x114>)
 80026da:	edc3 7a05 	vstr	s15, [r3, #20]
	gyro.gyroADC[Z] = gyro.gyroSensor1.gyroDev.gyroADC[Z] * gyro.gyroSensor1.gyroDev.scale;
 80026de:	4b37      	ldr	r3, [pc, #220]	; (80027bc <gyroUpdate+0x114>)
 80026e0:	ed93 7a39 	vldr	s14, [r3, #228]	; 0xe4
 80026e4:	4b35      	ldr	r3, [pc, #212]	; (80027bc <gyroUpdate+0x114>)
 80026e6:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80026ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ee:	4b33      	ldr	r3, [pc, #204]	; (80027bc <gyroUpdate+0x114>)
 80026f0:	edc3 7a06 	vstr	s15, [r3, #24]

    if (gyro.downsampleFilterEnabled) {
 80026f4:	4b31      	ldr	r3, [pc, #196]	; (80027bc <gyroUpdate+0x114>)
 80026f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d02d      	beq.n	800275a <gyroUpdate+0xb2>
        // using gyro lowpass 2 filter for downsampling
        gyro.sampleSum[X] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[X], gyro.gyroADC[X]);
 80026fe:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <gyroUpdate+0x114>)
 8002700:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002704:	4a2d      	ldr	r2, [pc, #180]	; (80027bc <gyroUpdate+0x114>)
 8002706:	edd2 7a04 	vldr	s15, [r2, #16]
 800270a:	eeb0 0a67 	vmov.f32	s0, s15
 800270e:	482c      	ldr	r0, [pc, #176]	; (80027c0 <gyroUpdate+0x118>)
 8002710:	4798      	blx	r3
 8002712:	eef0 7a40 	vmov.f32	s15, s0
 8002716:	4b29      	ldr	r3, [pc, #164]	; (80027bc <gyroUpdate+0x114>)
 8002718:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        gyro.sampleSum[Y] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[Y], gyro.gyroADC[Y]);
 800271c:	4b27      	ldr	r3, [pc, #156]	; (80027bc <gyroUpdate+0x114>)
 800271e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002722:	4a26      	ldr	r2, [pc, #152]	; (80027bc <gyroUpdate+0x114>)
 8002724:	edd2 7a05 	vldr	s15, [r2, #20]
 8002728:	eeb0 0a67 	vmov.f32	s0, s15
 800272c:	4825      	ldr	r0, [pc, #148]	; (80027c4 <gyroUpdate+0x11c>)
 800272e:	4798      	blx	r3
 8002730:	eef0 7a40 	vmov.f32	s15, s0
 8002734:	4b21      	ldr	r3, [pc, #132]	; (80027bc <gyroUpdate+0x114>)
 8002736:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        gyro.sampleSum[Z] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[Z], gyro.gyroADC[Z]);
 800273a:	4b20      	ldr	r3, [pc, #128]	; (80027bc <gyroUpdate+0x114>)
 800273c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002740:	4a1e      	ldr	r2, [pc, #120]	; (80027bc <gyroUpdate+0x114>)
 8002742:	edd2 7a06 	vldr	s15, [r2, #24]
 8002746:	eeb0 0a67 	vmov.f32	s0, s15
 800274a:	481f      	ldr	r0, [pc, #124]	; (80027c8 <gyroUpdate+0x120>)
 800274c:	4798      	blx	r3
 800274e:	eef0 7a40 	vmov.f32	s15, s0
 8002752:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <gyroUpdate+0x114>)
 8002754:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8002758:	e028      	b.n	80027ac <gyroUpdate+0x104>
    } else {
        // using simple averaging for downsampling
        gyro.sampleSum[X] += gyro.gyroADC[X];
 800275a:	4b18      	ldr	r3, [pc, #96]	; (80027bc <gyroUpdate+0x114>)
 800275c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002760:	4b16      	ldr	r3, [pc, #88]	; (80027bc <gyroUpdate+0x114>)
 8002762:	edd3 7a04 	vldr	s15, [r3, #16]
 8002766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276a:	4b14      	ldr	r3, [pc, #80]	; (80027bc <gyroUpdate+0x114>)
 800276c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        gyro.sampleSum[Y] += gyro.gyroADC[Y];
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <gyroUpdate+0x114>)
 8002772:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <gyroUpdate+0x114>)
 8002778:	edd3 7a05 	vldr	s15, [r3, #20]
 800277c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002780:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <gyroUpdate+0x114>)
 8002782:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        gyro.sampleSum[Z] += gyro.gyroADC[Z];
 8002786:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <gyroUpdate+0x114>)
 8002788:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <gyroUpdate+0x114>)
 800278e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <gyroUpdate+0x114>)
 8002798:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        gyro.sampleCount++;
 800279c:	4b07      	ldr	r3, [pc, #28]	; (80027bc <gyroUpdate+0x114>)
 800279e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027a2:	3301      	adds	r3, #1
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4b05      	ldr	r3, [pc, #20]	; (80027bc <gyroUpdate+0x114>)
 80027a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
    gyroFilter();
 80027ac:	f7ff fe9e 	bl	80024ec <gyroFilter>
	gyroAccumulateMeasurements();
 80027b0:	f7ff ff24 	bl	80025fc <gyroAccumulateMeasurements>
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000650 	.word	0x20000650
 80027bc:	20000614 	.word	0x20000614
 80027c0:	2000081c 	.word	0x2000081c
 80027c4:	20000844 	.word	0x20000844
 80027c8:	2000086c 	.word	0x2000086c

080027cc <gyroGetAccumulationAverage>:

bool gyroGetAccumulationAverage(float *accumulationAverage)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
    if (accumulatedMeasurementCount) {
 80027d4:	4b24      	ldr	r3, [pc, #144]	; (8002868 <gyroGetAccumulationAverage+0x9c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d02e      	beq.n	800283a <gyroGetAccumulationAverage+0x6e>
        // If we have gyro data accumulated, calculate average rate that will yield the same rotation
        const timeUs_t accumulatedMeasurementTimeUs = accumulatedMeasurementCount * gyro.targetLooptime;
 80027dc:	4b23      	ldr	r3, [pc, #140]	; (800286c <gyroGetAccumulationAverage+0xa0>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4a21      	ldr	r2, [pc, #132]	; (8002868 <gyroGetAccumulationAverage+0x9c>)
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	fb02 f303 	mul.w	r3, r2, r3
 80027e8:	60fb      	str	r3, [r7, #12]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e01c      	b.n	800282a <gyroGetAccumulationAverage+0x5e>
            accumulationAverage[axis] = accumulatedMeasurements[axis] / accumulatedMeasurementTimeUs;
 80027f0:	4a1f      	ldr	r2, [pc, #124]	; (8002870 <gyroGetAccumulationAverage+0xa4>)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	edd3 6a00 	vldr	s13, [r3]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002812:	edc3 7a00 	vstr	s15, [r3]
            accumulatedMeasurements[axis] = 0.0f;
 8002816:	4a16      	ldr	r2, [pc, #88]	; (8002870 <gyroGetAccumulationAverage+0xa4>)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3301      	adds	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2b02      	cmp	r3, #2
 800282e:	dddf      	ble.n	80027f0 <gyroGetAccumulationAverage+0x24>
        }
        accumulatedMeasurementCount = 0;
 8002830:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <gyroGetAccumulationAverage+0x9c>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
        return true;
 8002836:	2301      	movs	r3, #1
 8002838:	e010      	b.n	800285c <gyroGetAccumulationAverage+0x90>
    } else {
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	e009      	b.n	8002854 <gyroGetAccumulationAverage+0x88>
            accumulationAverage[axis] = 0.0f;
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	4413      	add	r3, r2
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	3301      	adds	r3, #1
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	2b02      	cmp	r3, #2
 8002858:	ddf2      	ble.n	8002840 <gyroGetAccumulationAverage+0x74>
        }
        return false;
 800285a:	2300      	movs	r3, #0
    }
}
 800285c:	4618      	mov	r0, r3
 800285e:	371c      	adds	r7, #28
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	200009ac 	.word	0x200009ac
 800286c:	20000614 	.word	0x20000614
 8002870:	20000994 	.word	0x20000994

08002874 <gyroOverflowDetected>:

bool gyroOverflowDetected(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
    return false;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <getCosTiltAngle>:
static int throttleAngleValue;
static float fc_acc;
static float smallAngleCosZ = 0;

static float getCosTiltAngle(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
    return rMat[2][2];
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <getCosTiltAngle+0x18>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	ee07 3a90 	vmov	s15, r3
}
 8002890:	eeb0 0a67 	vmov.f32	s0, s15
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	200009e0 	.word	0x200009e0

080028a0 <imuQuaternionComputeProducts>:

static void imuQuaternionComputeProducts(quaternion *quat, quaternionProducts *quatProd)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
    quatProd->ww = quat->w * quat->w;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	ed93 7a00 	vldr	s14, [r3]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	edd3 7a00 	vldr	s15, [r3]
 80028b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	edc3 7a00 	vstr	s15, [r3]
    quatProd->wx = quat->w * quat->x;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	ed93 7a00 	vldr	s14, [r3]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80028cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	edc3 7a01 	vstr	s15, [r3, #4]
    quatProd->wy = quat->w * quat->y;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	ed93 7a00 	vldr	s14, [r3]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	edd3 7a02 	vldr	s15, [r3, #8]
 80028e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	edc3 7a02 	vstr	s15, [r3, #8]
    quatProd->wz = quat->w * quat->z;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	ed93 7a00 	vldr	s14, [r3]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80028f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	edc3 7a03 	vstr	s15, [r3, #12]
    quatProd->xx = quat->x * quat->x;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	ed93 7a01 	vldr	s14, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	edd3 7a01 	vldr	s15, [r3, #4]
 800290e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	edc3 7a04 	vstr	s15, [r3, #16]
    quatProd->xy = quat->x * quat->y;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	ed93 7a01 	vldr	s14, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	edd3 7a02 	vldr	s15, [r3, #8]
 8002924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	edc3 7a05 	vstr	s15, [r3, #20]
    quatProd->xz = quat->x * quat->z;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	ed93 7a01 	vldr	s14, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	edd3 7a03 	vldr	s15, [r3, #12]
 800293a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	edc3 7a06 	vstr	s15, [r3, #24]
    quatProd->yy = quat->y * quat->y;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	ed93 7a02 	vldr	s14, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	edc3 7a07 	vstr	s15, [r3, #28]
    quatProd->yz = quat->y * quat->z;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	edd3 7a03 	vldr	s15, [r3, #12]
 8002966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	edc3 7a08 	vstr	s15, [r3, #32]
    quatProd->zz = quat->z * quat->z;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	ed93 7a03 	vldr	s14, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	edd3 7a03 	vldr	s15, [r3, #12]
 800297c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <imuComputeRotationMatrix>:

static void imuComputeRotationMatrix(void){
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
    imuQuaternionComputeProducts(&q, &qP);
 8002998:	4946      	ldr	r1, [pc, #280]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 800299a:	4847      	ldr	r0, [pc, #284]	; (8002ab8 <imuComputeRotationMatrix+0x124>)
 800299c:	f7ff ff80 	bl	80028a0 <imuQuaternionComputeProducts>

    rMat[0][0] = 1.0f - 2.0f * qP.yy - 2.0f * qP.zz;
 80029a0:	4b44      	ldr	r3, [pc, #272]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 80029a2:	edd3 7a07 	vldr	s15, [r3, #28]
 80029a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029b2:	4b40      	ldr	r3, [pc, #256]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 80029b4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80029b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c0:	4b3e      	ldr	r3, [pc, #248]	; (8002abc <imuComputeRotationMatrix+0x128>)
 80029c2:	edc3 7a00 	vstr	s15, [r3]
    rMat[0][1] = 2.0f * (qP.xy + -qP.wz);
 80029c6:	4b3b      	ldr	r3, [pc, #236]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 80029c8:	ed93 7a05 	vldr	s14, [r3, #20]
 80029cc:	4b39      	ldr	r3, [pc, #228]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 80029ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80029d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029da:	4b38      	ldr	r3, [pc, #224]	; (8002abc <imuComputeRotationMatrix+0x128>)
 80029dc:	edc3 7a01 	vstr	s15, [r3, #4]
    rMat[0][2] = 2.0f * (qP.xz - -qP.wy);
 80029e0:	4b34      	ldr	r3, [pc, #208]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 80029e2:	ed93 7a06 	vldr	s14, [r3, #24]
 80029e6:	4b33      	ldr	r3, [pc, #204]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 80029e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80029ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029f4:	4b31      	ldr	r3, [pc, #196]	; (8002abc <imuComputeRotationMatrix+0x128>)
 80029f6:	edc3 7a02 	vstr	s15, [r3, #8]

    rMat[1][0] = 2.0f * (qP.xy - -qP.wz);
 80029fa:	4b2e      	ldr	r3, [pc, #184]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 80029fc:	ed93 7a05 	vldr	s14, [r3, #20]
 8002a00:	4b2c      	ldr	r3, [pc, #176]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a02:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a0e:	4b2b      	ldr	r3, [pc, #172]	; (8002abc <imuComputeRotationMatrix+0x128>)
 8002a10:	edc3 7a03 	vstr	s15, [r3, #12]
    rMat[1][1] = 1.0f - 2.0f * qP.xx - 2.0f * qP.zz;
 8002a14:	4b27      	ldr	r3, [pc, #156]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a16:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a26:	4b23      	ldr	r3, [pc, #140]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a28:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a34:	4b21      	ldr	r3, [pc, #132]	; (8002abc <imuComputeRotationMatrix+0x128>)
 8002a36:	edc3 7a04 	vstr	s15, [r3, #16]
    rMat[1][2] = 2.0f * (qP.yz + -qP.wx);
 8002a3a:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a3c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002a40:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a42:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a4e:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <imuComputeRotationMatrix+0x128>)
 8002a50:	edc3 7a05 	vstr	s15, [r3, #20]

    rMat[2][0] = 2.0f * (qP.xz + -qP.wy);
 8002a54:	4b17      	ldr	r3, [pc, #92]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a56:	ed93 7a06 	vldr	s14, [r3, #24]
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <imuComputeRotationMatrix+0x128>)
 8002a6a:	edc3 7a06 	vstr	s15, [r3, #24]
    rMat[2][1] = 2.0f * (qP.yz - -qP.wx);
 8002a6e:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a70:	ed93 7a08 	vldr	s14, [r3, #32]
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a76:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a82:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <imuComputeRotationMatrix+0x128>)
 8002a84:	edc3 7a07 	vstr	s15, [r3, #28]
    rMat[2][2] = 1.0f - 2.0f * qP.xx - 2.0f * qP.yy;
 8002a88:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a8a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a9c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002aa0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <imuComputeRotationMatrix+0x128>)
 8002aaa:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000014 	.word	0x20000014
 8002ab8:	20000004 	.word	0x20000004
 8002abc:	200009e0 	.word	0x200009e0

08002ac0 <calculateAccZLowPassFilterRCTimeConstant>:

static float calculateAccZLowPassFilterRCTimeConstant(float accz_lpf_cutoff)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	ed87 0a01 	vstr	s0, [r7, #4]
    return 0.5f / (M_PIf * accz_lpf_cutoff);
 8002aca:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ace:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002af0 <calculateAccZLowPassFilterRCTimeConstant+0x30>
 8002ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ada:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ade:	eef0 7a66 	vmov.f32	s15, s13
}
 8002ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40490fdb 	.word	0x40490fdb

08002af4 <calculateThrottleAngleScale>:

static float calculateThrottleAngleScale(uint16_t throttle_correction_angle)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	80fb      	strh	r3, [r7, #6]
    return (1800.0f / M_PIf) * (900.0f / throttle_correction_angle);
 8002afe:	88fb      	ldrh	r3, [r7, #6]
 8002b00:	ee07 3a90 	vmov	s15, r3
 8002b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b08:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002b28 <calculateThrottleAngleScale+0x34>
 8002b0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b10:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002b2c <calculateThrottleAngleScale+0x38>
 8002b14:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002b18:	eeb0 0a67 	vmov.f32	s0, s15
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	44610000 	.word	0x44610000
 8002b2c:	440f3d4c 	.word	0x440f3d4c

08002b30 <imuConfigure>:

static void imuConfigure(uint16_t throttle_correction_angle, uint8_t throttle_correction_value)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	460a      	mov	r2, r1
 8002b3a:	80fb      	strh	r3, [r7, #6]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	717b      	strb	r3, [r7, #5]
    imuRuntimeConfig.dcm_kp = 2500 / 10000.0f;
 8002b40:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <imuConfigure+0x70>)
 8002b42:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8002b46:	605a      	str	r2, [r3, #4]
    imuRuntimeConfig.dcm_ki = 5000 / 10000.0f;
 8002b48:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <imuConfigure+0x70>)
 8002b4a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002b4e:	601a      	str	r2, [r3, #0]

    smallAngleCosZ = cos_approx(degreesToRadians(25));
 8002b50:	2019      	movs	r0, #25
 8002b52:	f7ff f94d 	bl	8001df0 <degreesToRadians>
 8002b56:	eef0 7a40 	vmov.f32	s15, s0
 8002b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b5e:	f7fe fee9 	bl	8001934 <cos_approx>
 8002b62:	eef0 7a40 	vmov.f32	s15, s0
 8002b66:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <imuConfigure+0x74>)
 8002b68:	edc3 7a00 	vstr	s15, [r3]

    fc_acc = calculateAccZLowPassFilterRCTimeConstant(5.0f); // Set to fix value
 8002b6c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002b70:	f7ff ffa6 	bl	8002ac0 <calculateAccZLowPassFilterRCTimeConstant>
 8002b74:	eef0 7a40 	vmov.f32	s15, s0
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <imuConfigure+0x78>)
 8002b7a:	edc3 7a00 	vstr	s15, [r3]
    throttleAngleScale = calculateThrottleAngleScale(throttle_correction_angle);
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ffb7 	bl	8002af4 <calculateThrottleAngleScale>
 8002b86:	eef0 7a40 	vmov.f32	s15, s0
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <imuConfigure+0x7c>)
 8002b8c:	edc3 7a00 	vstr	s15, [r3]

    throttleAngleValue = throttle_correction_value;
 8002b90:	797b      	ldrb	r3, [r7, #5]
 8002b92:	4a07      	ldr	r2, [pc, #28]	; (8002bb0 <imuConfigure+0x80>)
 8002b94:	6013      	str	r3, [r2, #0]
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200009d8 	.word	0x200009d8
 8002ba4:	20000a1c 	.word	0x20000a1c
 8002ba8:	20000a18 	.word	0x20000a18
 8002bac:	20000a10 	.word	0x20000a10
 8002bb0:	20000a14 	.word	0x20000a14

08002bb4 <imuInit>:

void imuInit(void) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
	imuConfigure(800, 10);
 8002bb8:	210a      	movs	r1, #10
 8002bba:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002bbe:	f7ff ffb7 	bl	8002b30 <imuConfigure>
    canUseGPSHeading = false;
 8002bc2:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <imuInit+0x1c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]

    imuComputeRotationMatrix();
 8002bc8:	f7ff fee4 	bl	8002994 <imuComputeRotationMatrix>
}
 8002bcc:	bf00      	nop
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	20000001 	.word	0x20000001

08002bd4 <imuIsAccelerometerHealthy>:

static bool imuIsAccelerometerHealthy(float *accAverage)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
    float accMagnitudeSq = 0;
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002be2:	2300      	movs	r3, #0
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	e012      	b.n	8002c0e <imuIsAccelerometerHealthy+0x3a>
        const float a = accAverage[axis];
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4413      	add	r3, r2
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60fb      	str	r3, [r7, #12]
        accMagnitudeSq += a * a;
 8002bf4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bf8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002bfc:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c04:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	dde9      	ble.n	8002be8 <imuIsAccelerometerHealthy+0x14>
    }

    accMagnitudeSq = accMagnitudeSq * sq(acc.dev.acc_1G_rec);
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <imuIsAccelerometerHealthy+0x94>)
 8002c16:	ed93 7a00 	vldr	s14, [r3]
 8002c1a:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <imuIsAccelerometerHealthy+0x94>)
 8002c1c:	edd3 7a00 	vldr	s15, [r3]
 8002c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c24:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2c:	edc7 7a05 	vstr	s15, [r7, #20]

    // Accept accel readings only in range 0.9g - 1.1g
    return (0.81f < accMagnitudeSq) && (accMagnitudeSq < 1.21f);
 8002c30:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c34:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002c6c <imuIsAccelerometerHealthy+0x98>
 8002c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c40:	dd0a      	ble.n	8002c58 <imuIsAccelerometerHealthy+0x84>
 8002c42:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c46:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002c70 <imuIsAccelerometerHealthy+0x9c>
 8002c4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c52:	d501      	bpl.n	8002c58 <imuIsAccelerometerHealthy+0x84>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <imuIsAccelerometerHealthy+0x86>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	200003b0 	.word	0x200003b0
 8002c6c:	3f4f5c29 	.word	0x3f4f5c29
 8002c70:	3f9ae148 	.word	0x3f9ae148

08002c74 <invSqrt>:

static float invSqrt(float x)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0f / sqrtf(x);
 8002c7e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002c82:	f015 fa45 	bl	8018110 <sqrtf>
 8002c86:	eef0 7a40 	vmov.f32	s15, s0
 8002c8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c8e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c92:	eef0 7a66 	vmov.f32	s15, s13
}
 8002c96:	eeb0 0a67 	vmov.f32	s0, s15
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <imuMahonyAHRSupdate>:

static void imuMahonyAHRSupdate(float dt, float gx, float gy, float gz,
                                bool useAcc, float ax, float ay, float az,
                                bool useMag,
                                bool useCOG, float courseOverGround, const float dcmKpGain)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	ed2d 8b02 	vpush	{d8}
 8002ca6:	b09e      	sub	sp, #120	; 0x78
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8002cae:	edc7 0a08 	vstr	s1, [r7, #32]
 8002cb2:	ed87 1a07 	vstr	s2, [r7, #28]
 8002cb6:	edc7 1a06 	vstr	s3, [r7, #24]
 8002cba:	4603      	mov	r3, r0
 8002cbc:	ed87 2a04 	vstr	s4, [r7, #16]
 8002cc0:	edc7 2a03 	vstr	s5, [r7, #12]
 8002cc4:	ed87 3a02 	vstr	s6, [r7, #8]
 8002cc8:	edc7 3a01 	vstr	s7, [r7, #4]
 8002ccc:	ed87 4a00 	vstr	s8, [r7]
 8002cd0:	75fb      	strb	r3, [r7, #23]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	75bb      	strb	r3, [r7, #22]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	757b      	strb	r3, [r7, #21]
    static float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;    // integral error terms scaled by Ki

    // Calculate general spin rate (rad/s)
    const float spin_rate = sqrtf(sq(gx) + sq(gy) + sq(gz));
 8002cda:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cde:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002ce2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ce6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002cea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cee:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cf2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8002cfe:	f015 fa07 	bl	8018110 <sqrtf>
 8002d02:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68

    // Use raw heading error (from GPS or whatever else)
    float ex = 0, ey = 0, ez = 0;
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	677b      	str	r3, [r7, #116]	; 0x74
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	673b      	str	r3, [r7, #112]	; 0x70
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (useCOG) {
 8002d18:	7d7b      	ldrb	r3, [r7, #21]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d060      	beq.n	8002de0 <imuMahonyAHRSupdate+0x140>
        while (courseOverGround >  M_PIf) {
 8002d1e:	e007      	b.n	8002d30 <imuMahonyAHRSupdate+0x90>
            courseOverGround -= (2.0f * M_PIf);
 8002d20:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d24:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002d48 <imuMahonyAHRSupdate+0xa8>
 8002d28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d2c:	edc7 7a01 	vstr	s15, [r7, #4]
        while (courseOverGround >  M_PIf) {
 8002d30:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d34:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8002d44 <imuMahonyAHRSupdate+0xa4>
 8002d38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d40:	dcee      	bgt.n	8002d20 <imuMahonyAHRSupdate+0x80>
        }

        while (courseOverGround < -M_PIf) {
 8002d42:	e00d      	b.n	8002d60 <imuMahonyAHRSupdate+0xc0>
 8002d44:	40490fdb 	.word	0x40490fdb
 8002d48:	40c90fdb 	.word	0x40c90fdb
 8002d4c:	c0490fdb 	.word	0xc0490fdb
            courseOverGround += (2.0f * M_PIf);
 8002d50:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d54:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8002d48 <imuMahonyAHRSupdate+0xa8>
 8002d58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d5c:	edc7 7a01 	vstr	s15, [r7, #4]
        while (courseOverGround < -M_PIf) {
 8002d60:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d64:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8002d4c <imuMahonyAHRSupdate+0xac>
 8002d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d70:	d4ee      	bmi.n	8002d50 <imuMahonyAHRSupdate+0xb0>
        }

        const float ez_ef = (- sin_approx(courseOverGround) * rMat[0][0] - cos_approx(courseOverGround) * rMat[1][0]);
 8002d72:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d76:	f7fe fd33 	bl	80017e0 <sin_approx>
 8002d7a:	eef0 7a40 	vmov.f32	s15, s0
 8002d7e:	eeb1 7a67 	vneg.f32	s14, s15
 8002d82:	4bdb      	ldr	r3, [pc, #876]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002d84:	edd3 7a00 	vldr	s15, [r3]
 8002d88:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002d8c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d90:	f7fe fdd0 	bl	8001934 <cos_approx>
 8002d94:	eeb0 7a40 	vmov.f32	s14, s0
 8002d98:	4bd5      	ldr	r3, [pc, #852]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002d9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002da2:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002da6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

        ex = rMat[2][0] * ez_ef;
 8002daa:	4bd1      	ldr	r3, [pc, #836]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002dac:	edd3 7a06 	vldr	s15, [r3, #24]
 8002db0:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        ey = rMat[2][1] * ez_ef;
 8002dbc:	4bcc      	ldr	r3, [pc, #816]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002dbe:	edd3 7a07 	vldr	s15, [r3, #28]
 8002dc2:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dca:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        ez = rMat[2][2] * ez_ef;
 8002dce:	4bc8      	ldr	r3, [pc, #800]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002dd0:	edd3 7a08 	vldr	s15, [r3, #32]
 8002dd4:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ddc:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Use measured magnetic field vector
    float mx = mag.magADC[X];
 8002de0:	4bc4      	ldr	r3, [pc, #784]	; (80030f4 <imuMahonyAHRSupdate+0x454>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	663b      	str	r3, [r7, #96]	; 0x60
    float my = mag.magADC[Y];
 8002de6:	4bc3      	ldr	r3, [pc, #780]	; (80030f4 <imuMahonyAHRSupdate+0x454>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	65fb      	str	r3, [r7, #92]	; 0x5c
    float mz = mag.magADC[Z];
 8002dec:	4bc1      	ldr	r3, [pc, #772]	; (80030f4 <imuMahonyAHRSupdate+0x454>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	65bb      	str	r3, [r7, #88]	; 0x58
    float recipMagNorm = sq(mx) + sq(my) + sq(mz);
 8002df2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002df6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002dfa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002dfe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002e02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e06:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e0a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e12:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    if (useMag && recipMagNorm > 0.01f) {
 8002e16:	7dbb      	ldrb	r3, [r7, #22]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 809f 	beq.w	8002f5c <imuMahonyAHRSupdate+0x2bc>
 8002e1e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e22:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80030f8 <imuMahonyAHRSupdate+0x458>
 8002e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2e:	f340 8095 	ble.w	8002f5c <imuMahonyAHRSupdate+0x2bc>
        // Normalise magnetometer measurement
        recipMagNorm = invSqrt(recipMagNorm);
 8002e32:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002e36:	f7ff ff1d 	bl	8002c74 <invSqrt>
 8002e3a:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
        mx *= recipMagNorm;
 8002e3e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002e42:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e4a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        my *= recipMagNorm;
 8002e4e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002e52:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e5a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        mz *= recipMagNorm;
 8002e5e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002e62:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e6a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        // For magnetometer correction we make an assumption that magnetic field is perpendicular to gravity (ignore Z-component in EF).
        // This way magnetic field will only affect heading and wont mess roll/pitch angles

        // (hx; hy; 0) - measured mag field vector in EF (assuming Z-component is zero)
        // (bx; 0; 0) - reference mag field vector heading due North in EF (assuming Z-component is zero)
        const float hx = rMat[0][0] * mx + rMat[0][1] * my + rMat[0][2] * mz;
 8002e6e:	4ba0      	ldr	r3, [pc, #640]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002e70:	ed93 7a00 	vldr	s14, [r3]
 8002e74:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002e78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e7c:	4b9c      	ldr	r3, [pc, #624]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002e7e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002e82:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002e86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e8e:	4b98      	ldr	r3, [pc, #608]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002e90:	edd3 6a02 	vldr	s13, [r3, #8]
 8002e94:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        const float hy = rMat[1][0] * mx + rMat[1][1] * my + rMat[1][2] * mz;
 8002ea4:	4b92      	ldr	r3, [pc, #584]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002ea6:	ed93 7a03 	vldr	s14, [r3, #12]
 8002eaa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002eae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eb2:	4b8f      	ldr	r3, [pc, #572]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002eb4:	edd3 6a04 	vldr	s13, [r3, #16]
 8002eb8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002ebc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ec0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ec4:	4b8a      	ldr	r3, [pc, #552]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002ec6:	edd3 6a05 	vldr	s13, [r3, #20]
 8002eca:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002ece:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        const float bx = sqrtf(hx * hx + hy * hy);
 8002eda:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002ede:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002ee2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002ee6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eee:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef2:	f015 f90d 	bl	8018110 <sqrtf>
 8002ef6:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

        // magnetometer error is cross product between estimated magnetic north and measured magnetic north (calculated in EF)
        const float ez_ef = -(hy * bx);
 8002efa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002efe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f06:	eef1 7a67 	vneg.f32	s15, s15
 8002f0a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        // Rotate mag error vector back to BF and accumulate
        ex += rMat[2][0] * ez_ef;
 8002f0e:	4b78      	ldr	r3, [pc, #480]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002f10:	ed93 7a06 	vldr	s14, [r3, #24]
 8002f14:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f1c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f24:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        ey += rMat[2][1] * ez_ef;
 8002f28:	4b71      	ldr	r3, [pc, #452]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002f2a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002f2e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f36:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f3e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        ez += rMat[2][2] * ez_ef;
 8002f42:	4b6b      	ldr	r3, [pc, #428]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002f44:	ed93 7a08 	vldr	s14, [r3, #32]
 8002f48:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f50:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f58:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Use measured acceleration vector
    float recipAccNorm = sq(ax) + sq(ay) + sq(az);
 8002f5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f60:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002f64:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f68:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f70:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f7c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (useAcc && recipAccNorm > 0.01f) {
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d068      	beq.n	8003058 <imuMahonyAHRSupdate+0x3b8>
 8002f86:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002f8a:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80030f8 <imuMahonyAHRSupdate+0x458>
 8002f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f96:	dd5f      	ble.n	8003058 <imuMahonyAHRSupdate+0x3b8>
        // Normalise accelerometer measurement
        recipAccNorm = invSqrt(recipAccNorm);
 8002f98:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8002f9c:	f7ff fe6a 	bl	8002c74 <invSqrt>
 8002fa0:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        ax *= recipAccNorm;
 8002fa4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002fa8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb0:	edc7 7a04 	vstr	s15, [r7, #16]
        ay *= recipAccNorm;
 8002fb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fb8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc0:	edc7 7a03 	vstr	s15, [r7, #12]
        az *= recipAccNorm;
 8002fc4:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fc8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd0:	edc7 7a02 	vstr	s15, [r7, #8]

        // Error is sum of cross product between estimated direction and measured direction of gravity
        ex += (ay * rMat[2][2] - az * rMat[2][1]);
 8002fd4:	4b46      	ldr	r3, [pc, #280]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002fd6:	ed93 7a08 	vldr	s14, [r3, #32]
 8002fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fe2:	4b43      	ldr	r3, [pc, #268]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002fe4:	edd3 6a07 	vldr	s13, [r3, #28]
 8002fe8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ff4:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffc:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        ey += (az * rMat[2][0] - ax * rMat[2][2]);
 8003000:	4b3b      	ldr	r3, [pc, #236]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8003002:	ed93 7a06 	vldr	s14, [r3, #24]
 8003006:	edd7 7a02 	vldr	s15, [r7, #8]
 800300a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800300e:	4b38      	ldr	r3, [pc, #224]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8003010:	edd3 6a08 	vldr	s13, [r3, #32]
 8003014:	edd7 7a04 	vldr	s15, [r7, #16]
 8003018:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800301c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003020:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8003024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003028:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        ez += (ax * rMat[2][1] - ay * rMat[2][0]);
 800302c:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 800302e:	ed93 7a07 	vldr	s14, [r3, #28]
 8003032:	edd7 7a04 	vldr	s15, [r7, #16]
 8003036:	ee27 7a27 	vmul.f32	s14, s14, s15
 800303a:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 800303c:	edd3 6a06 	vldr	s13, [r3, #24]
 8003040:	edd7 7a03 	vldr	s15, [r7, #12]
 8003044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800304c:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8003050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003054:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Compute and apply integral feedback if enabled
    if (imuRuntimeConfig.dcm_ki > 0.0f) {
 8003058:	4b28      	ldr	r3, [pc, #160]	; (80030fc <imuMahonyAHRSupdate+0x45c>)
 800305a:	edd3 7a00 	vldr	s15, [r3]
 800305e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003066:	dd53      	ble.n	8003110 <imuMahonyAHRSupdate+0x470>
        // Stop integrating if spinning beyond the certain limit
        if (spin_rate < DEGREES_TO_RADIANS(SPIN_RATE_LIMIT)) {
 8003068:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800306c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003100 <imuMahonyAHRSupdate+0x460>
 8003070:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003078:	d556      	bpl.n	8003128 <imuMahonyAHRSupdate+0x488>
            const float dcmKiGain = imuRuntimeConfig.dcm_ki;
 800307a:	4b20      	ldr	r3, [pc, #128]	; (80030fc <imuMahonyAHRSupdate+0x45c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	63fb      	str	r3, [r7, #60]	; 0x3c
            integralFBx += dcmKiGain * ex * dt;    // integral error scaled by Ki
 8003080:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003084:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800308c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003090:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003094:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <imuMahonyAHRSupdate+0x464>)
 8003096:	edd3 7a00 	vldr	s15, [r3]
 800309a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800309e:	4b19      	ldr	r3, [pc, #100]	; (8003104 <imuMahonyAHRSupdate+0x464>)
 80030a0:	edc3 7a00 	vstr	s15, [r3]
            integralFBy += dcmKiGain * ey * dt;
 80030a4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80030a8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80030ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80030b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b8:	4b13      	ldr	r3, [pc, #76]	; (8003108 <imuMahonyAHRSupdate+0x468>)
 80030ba:	edd3 7a00 	vldr	s15, [r3]
 80030be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c2:	4b11      	ldr	r3, [pc, #68]	; (8003108 <imuMahonyAHRSupdate+0x468>)
 80030c4:	edc3 7a00 	vstr	s15, [r3]
            integralFBz += dcmKiGain * ez * dt;
 80030c8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80030cc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80030d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80030d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <imuMahonyAHRSupdate+0x46c>)
 80030de:	edd3 7a00 	vldr	s15, [r3]
 80030e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e6:	4b09      	ldr	r3, [pc, #36]	; (800310c <imuMahonyAHRSupdate+0x46c>)
 80030e8:	edc3 7a00 	vstr	s15, [r3]
 80030ec:	e01c      	b.n	8003128 <imuMahonyAHRSupdate+0x488>
 80030ee:	bf00      	nop
 80030f0:	200009e0 	.word	0x200009e0
 80030f4:	20000a40 	.word	0x20000a40
 80030f8:	3c23d70a 	.word	0x3c23d70a
 80030fc:	200009d8 	.word	0x200009d8
 8003100:	3eb2b8c2 	.word	0x3eb2b8c2
 8003104:	20000a20 	.word	0x20000a20
 8003108:	20000a24 	.word	0x20000a24
 800310c:	20000a28 	.word	0x20000a28
        }
    } else {
        integralFBx = 0.0f;    // prevent integral windup
 8003110:	4ba3      	ldr	r3, [pc, #652]	; (80033a0 <imuMahonyAHRSupdate+0x700>)
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
        integralFBy = 0.0f;
 8003118:	4ba2      	ldr	r3, [pc, #648]	; (80033a4 <imuMahonyAHRSupdate+0x704>)
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
        integralFBz = 0.0f;
 8003120:	4ba1      	ldr	r3, [pc, #644]	; (80033a8 <imuMahonyAHRSupdate+0x708>)
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
    }

    // Apply proportional and integral feedback
    gx += dcmKpGain * ex + integralFBx;
 8003128:	ed97 7a00 	vldr	s14, [r7]
 800312c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003134:	4b9a      	ldr	r3, [pc, #616]	; (80033a0 <imuMahonyAHRSupdate+0x700>)
 8003136:	edd3 7a00 	vldr	s15, [r3]
 800313a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800313e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003146:	edc7 7a08 	vstr	s15, [r7, #32]
    gy += dcmKpGain * ey + integralFBy;
 800314a:	ed97 7a00 	vldr	s14, [r7]
 800314e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003152:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003156:	4b93      	ldr	r3, [pc, #588]	; (80033a4 <imuMahonyAHRSupdate+0x704>)
 8003158:	edd3 7a00 	vldr	s15, [r3]
 800315c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003160:	ed97 7a07 	vldr	s14, [r7, #28]
 8003164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003168:	edc7 7a07 	vstr	s15, [r7, #28]
    gz += dcmKpGain * ez + integralFBz;
 800316c:	ed97 7a00 	vldr	s14, [r7]
 8003170:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003178:	4b8b      	ldr	r3, [pc, #556]	; (80033a8 <imuMahonyAHRSupdate+0x708>)
 800317a:	edd3 7a00 	vldr	s15, [r3]
 800317e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003182:	ed97 7a06 	vldr	s14, [r7, #24]
 8003186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800318a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integrate rate of change of quaternion
    gx *= (0.5f * dt);
 800318e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003192:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800319a:	ed97 7a08 	vldr	s14, [r7, #32]
 800319e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a2:	edc7 7a08 	vstr	s15, [r7, #32]
    gy *= (0.5f * dt);
 80031a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80031ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80031b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ba:	edc7 7a07 	vstr	s15, [r7, #28]
    gz *= (0.5f * dt);
 80031be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80031c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031ca:	ed97 7a06 	vldr	s14, [r7, #24]
 80031ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d2:	edc7 7a06 	vstr	s15, [r7, #24]

    quaternion buffer;
    buffer.w = q.w;
 80031d6:	4b75      	ldr	r3, [pc, #468]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	62bb      	str	r3, [r7, #40]	; 0x28
    buffer.x = q.x;
 80031dc:	4b73      	ldr	r3, [pc, #460]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    buffer.y = q.y;
 80031e2:	4b72      	ldr	r3, [pc, #456]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	633b      	str	r3, [r7, #48]	; 0x30
    buffer.z = q.z;
 80031e8:	4b70      	ldr	r3, [pc, #448]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	637b      	str	r3, [r7, #52]	; 0x34

    q.w += (-buffer.x * gx - buffer.y * gy - buffer.z * gz);
 80031ee:	4b6f      	ldr	r3, [pc, #444]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80031f0:	ed93 7a00 	vldr	s14, [r3]
 80031f4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80031f8:	eef1 6a67 	vneg.f32	s13, s15
 80031fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8003200:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003204:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8003208:	edd7 7a07 	vldr	s15, [r7, #28]
 800320c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003210:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003214:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8003218:	edd7 7a06 	vldr	s15, [r7, #24]
 800321c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003220:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003228:	4b60      	ldr	r3, [pc, #384]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 800322a:	edc3 7a00 	vstr	s15, [r3]
    q.x += (+buffer.w * gx + buffer.y * gz - buffer.z * gy);
 800322e:	4b5f      	ldr	r3, [pc, #380]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 8003230:	ed93 7a01 	vldr	s14, [r3, #4]
 8003234:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003238:	edd7 7a08 	vldr	s15, [r7, #32]
 800323c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003240:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8003244:	edd7 7a06 	vldr	s15, [r7, #24]
 8003248:	ee66 7a27 	vmul.f32	s15, s12, s15
 800324c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003250:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8003254:	edd7 7a07 	vldr	s15, [r7, #28]
 8003258:	ee66 7a27 	vmul.f32	s15, s12, s15
 800325c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003264:	4b51      	ldr	r3, [pc, #324]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 8003266:	edc3 7a01 	vstr	s15, [r3, #4]
    q.y += (+buffer.w * gy - buffer.x * gz + buffer.z * gx);
 800326a:	4b50      	ldr	r3, [pc, #320]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 800326c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003270:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003274:	edd7 7a07 	vldr	s15, [r7, #28]
 8003278:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800327c:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 8003280:	edd7 7a06 	vldr	s15, [r7, #24]
 8003284:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003288:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800328c:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8003290:	edd7 7a08 	vldr	s15, [r7, #32]
 8003294:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003298:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800329c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a0:	4b42      	ldr	r3, [pc, #264]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80032a2:	edc3 7a02 	vstr	s15, [r3, #8]
    q.z += (+buffer.w * gz + buffer.x * gy - buffer.y * gx);
 80032a6:	4b41      	ldr	r3, [pc, #260]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80032a8:	ed93 7a03 	vldr	s14, [r3, #12]
 80032ac:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80032b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80032b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032b8:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 80032bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80032c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80032c4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80032c8:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 80032cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80032d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80032d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80032d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032dc:	4b33      	ldr	r3, [pc, #204]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80032de:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalise quaternion
    float recipNorm = invSqrt(sq(q.w) + sq(q.x) + sq(q.y) + sq(q.z));
 80032e2:	4b32      	ldr	r3, [pc, #200]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80032e4:	ed93 7a00 	vldr	s14, [r3]
 80032e8:	4b30      	ldr	r3, [pc, #192]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80032ea:	edd3 7a00 	vldr	s15, [r3]
 80032ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032f2:	4b2e      	ldr	r3, [pc, #184]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80032f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80032f8:	4b2c      	ldr	r3, [pc, #176]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80032fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80032fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003302:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003306:	4b29      	ldr	r3, [pc, #164]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 8003308:	edd3 6a02 	vldr	s13, [r3, #8]
 800330c:	4b27      	ldr	r3, [pc, #156]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 800330e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003316:	ee37 7a27 	vadd.f32	s14, s14, s15
 800331a:	4b24      	ldr	r3, [pc, #144]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 800331c:	edd3 6a03 	vldr	s13, [r3, #12]
 8003320:	4b22      	ldr	r3, [pc, #136]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 8003322:	edd3 7a03 	vldr	s15, [r3, #12]
 8003326:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800332a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800332e:	eeb0 0a67 	vmov.f32	s0, s15
 8003332:	f7ff fc9f 	bl	8002c74 <invSqrt>
 8003336:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    q.w *= recipNorm;
 800333a:	4b1c      	ldr	r3, [pc, #112]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 800333c:	ed93 7a00 	vldr	s14, [r3]
 8003340:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003348:	4b18      	ldr	r3, [pc, #96]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 800334a:	edc3 7a00 	vstr	s15, [r3]
    q.x *= recipNorm;
 800334e:	4b17      	ldr	r3, [pc, #92]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 8003350:	ed93 7a01 	vldr	s14, [r3, #4]
 8003354:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335c:	4b13      	ldr	r3, [pc, #76]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 800335e:	edc3 7a01 	vstr	s15, [r3, #4]
    q.y *= recipNorm;
 8003362:	4b12      	ldr	r3, [pc, #72]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 8003364:	ed93 7a02 	vldr	s14, [r3, #8]
 8003368:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800336c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003370:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 8003372:	edc3 7a02 	vstr	s15, [r3, #8]
    q.z *= recipNorm;
 8003376:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 8003378:	ed93 7a03 	vldr	s14, [r3, #12]
 800337c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003384:	4b09      	ldr	r3, [pc, #36]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 8003386:	edc3 7a03 	vstr	s15, [r3, #12]

    // Pre-compute rotation matrix from quaternion
    imuComputeRotationMatrix();
 800338a:	f7ff fb03 	bl	8002994 <imuComputeRotationMatrix>

    attitudeIsEstablished = true;
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <imuMahonyAHRSupdate+0x710>)
 8003390:	2201      	movs	r2, #1
 8003392:	701a      	strb	r2, [r3, #0]
}
 8003394:	bf00      	nop
 8003396:	3778      	adds	r7, #120	; 0x78
 8003398:	46bd      	mov	sp, r7
 800339a:	ecbd 8b02 	vpop	{d8}
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20000a20 	.word	0x20000a20
 80033a4:	20000a24 	.word	0x20000a24
 80033a8:	20000a28 	.word	0x20000a28
 80033ac:	20000004 	.word	0x20000004
 80033b0:	200009d6 	.word	0x200009d6

080033b4 <imuUpdateEulerAngles>:

static void imuUpdateEulerAngles(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
    attitude.values.roll = lrintf(atan2_approx(rMat[2][1], rMat[2][2]) * (1800.0f / M_PIf));
 80033b8:	4b30      	ldr	r3, [pc, #192]	; (800347c <imuUpdateEulerAngles+0xc8>)
 80033ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80033be:	4b2f      	ldr	r3, [pc, #188]	; (800347c <imuUpdateEulerAngles+0xc8>)
 80033c0:	ed93 7a08 	vldr	s14, [r3, #32]
 80033c4:	eef0 0a47 	vmov.f32	s1, s14
 80033c8:	eeb0 0a67 	vmov.f32	s0, s15
 80033cc:	f7fe fb1e 	bl	8001a0c <atan2_approx>
 80033d0:	eef0 7a40 	vmov.f32	s15, s0
 80033d4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003480 <imuUpdateEulerAngles+0xcc>
 80033d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033dc:	eeb0 0a67 	vmov.f32	s0, s15
 80033e0:	f014 fcdc 	bl	8017d9c <lrintf>
 80033e4:	4603      	mov	r3, r0
 80033e6:	b21a      	sxth	r2, r3
 80033e8:	4b26      	ldr	r3, [pc, #152]	; (8003484 <imuUpdateEulerAngles+0xd0>)
 80033ea:	801a      	strh	r2, [r3, #0]
    attitude.values.pitch = lrintf(((0.5f * M_PIf) - acos_approx(-rMat[2][0])) * (1800.0f / M_PIf));
 80033ec:	4b23      	ldr	r3, [pc, #140]	; (800347c <imuUpdateEulerAngles+0xc8>)
 80033ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80033f2:	eef1 7a67 	vneg.f32	s15, s15
 80033f6:	eeb0 0a67 	vmov.f32	s0, s15
 80033fa:	f7fe fab3 	bl	8001964 <acos_approx>
 80033fe:	eef0 7a40 	vmov.f32	s15, s0
 8003402:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003488 <imuUpdateEulerAngles+0xd4>
 8003406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800340a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003480 <imuUpdateEulerAngles+0xcc>
 800340e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003412:	eeb0 0a67 	vmov.f32	s0, s15
 8003416:	f014 fcc1 	bl	8017d9c <lrintf>
 800341a:	4603      	mov	r3, r0
 800341c:	b21a      	sxth	r2, r3
 800341e:	4b19      	ldr	r3, [pc, #100]	; (8003484 <imuUpdateEulerAngles+0xd0>)
 8003420:	805a      	strh	r2, [r3, #2]
    attitude.values.yaw = lrintf((-atan2_approx(rMat[1][0], rMat[0][0]) * (1800.0f / M_PIf)));
 8003422:	4b16      	ldr	r3, [pc, #88]	; (800347c <imuUpdateEulerAngles+0xc8>)
 8003424:	edd3 7a03 	vldr	s15, [r3, #12]
 8003428:	4b14      	ldr	r3, [pc, #80]	; (800347c <imuUpdateEulerAngles+0xc8>)
 800342a:	ed93 7a00 	vldr	s14, [r3]
 800342e:	eef0 0a47 	vmov.f32	s1, s14
 8003432:	eeb0 0a67 	vmov.f32	s0, s15
 8003436:	f7fe fae9 	bl	8001a0c <atan2_approx>
 800343a:	eef0 7a40 	vmov.f32	s15, s0
 800343e:	eef1 7a67 	vneg.f32	s15, s15
 8003442:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003480 <imuUpdateEulerAngles+0xcc>
 8003446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800344a:	eeb0 0a67 	vmov.f32	s0, s15
 800344e:	f014 fca5 	bl	8017d9c <lrintf>
 8003452:	4603      	mov	r3, r0
 8003454:	b21a      	sxth	r2, r3
 8003456:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <imuUpdateEulerAngles+0xd0>)
 8003458:	809a      	strh	r2, [r3, #4]

    if (attitude.values.yaw < 0) {
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <imuUpdateEulerAngles+0xd0>)
 800345c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	da09      	bge.n	8003478 <imuUpdateEulerAngles+0xc4>
        attitude.values.yaw += 3600;
 8003464:	4b07      	ldr	r3, [pc, #28]	; (8003484 <imuUpdateEulerAngles+0xd0>)
 8003466:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800346a:	b29b      	uxth	r3, r3
 800346c:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8003470:	b29b      	uxth	r3, r3
 8003472:	b21a      	sxth	r2, r3
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <imuUpdateEulerAngles+0xd0>)
 8003476:	809a      	strh	r2, [r3, #4]
    }
}
 8003478:	bf00      	nop
 800347a:	bd80      	pop	{r7, pc}
 800347c:	200009e0 	.word	0x200009e0
 8003480:	440f3d4c 	.word	0x440f3d4c
 8003484:	200009d0 	.word	0x200009d0
 8003488:	3fc90fdb 	.word	0x3fc90fdb

0800348c <imuCalcKpGain>:

static float imuCalcKpGain(timeUs_t currentTimeUs, bool useAcc, float *gyroAverage)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	460b      	mov	r3, r1
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	72fb      	strb	r3, [r7, #11]
    static bool lastArmState = false;
    static timeUs_t gyroQuietPeriodTimeEnd = 0;
    static timeUs_t attitudeResetTimeEnd = 0;
    static bool attitudeResetCompleted = false;
    float ret;
    bool attitudeResetActive = false;
 800349a:	2300      	movs	r3, #0
 800349c:	74fb      	strb	r3, [r7, #19]

    const bool armState = false;
 800349e:	2300      	movs	r3, #0
 80034a0:	74bb      	strb	r3, [r7, #18]

    if (!armState) {
 80034a2:	7cbb      	ldrb	r3, [r7, #18]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d163      	bne.n	8003570 <imuCalcKpGain+0xe4>
        }

        // If gyro activity exceeds the threshold then restart the quiet period.
        // Also, if the attitude reset has been complete and there is subsequent gyro activity then
        // start the reset cycle again. This addresses the case where the pilot rights the craft after a crash.
        if ((attitudeResetTimeEnd > 0) || (gyroQuietPeriodTimeEnd > 0) || attitudeResetCompleted) {
 80034a8:	4b42      	ldr	r3, [pc, #264]	; (80035b4 <imuCalcKpGain+0x128>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d107      	bne.n	80034c0 <imuCalcKpGain+0x34>
 80034b0:	4b41      	ldr	r3, [pc, #260]	; (80035b8 <imuCalcKpGain+0x12c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d103      	bne.n	80034c0 <imuCalcKpGain+0x34>
 80034b8:	4b40      	ldr	r3, [pc, #256]	; (80035bc <imuCalcKpGain+0x130>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d030      	beq.n	8003522 <imuCalcKpGain+0x96>
            if ((fabsf(gyroAverage[X]) > ATTITUDE_RESET_GYRO_LIMIT)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	edd3 7a00 	vldr	s15, [r3]
 80034c6:	eef0 7ae7 	vabs.f32	s15, s15
 80034ca:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80034ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d6:	dc1c      	bgt.n	8003512 <imuCalcKpGain+0x86>
                || (fabsf(gyroAverage[Y]) > ATTITUDE_RESET_GYRO_LIMIT)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3304      	adds	r3, #4
 80034dc:	edd3 7a00 	vldr	s15, [r3]
 80034e0:	eef0 7ae7 	vabs.f32	s15, s15
 80034e4:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80034e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f0:	dc0f      	bgt.n	8003512 <imuCalcKpGain+0x86>
                || (fabsf(gyroAverage[Z]) > ATTITUDE_RESET_GYRO_LIMIT)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3308      	adds	r3, #8
 80034f6:	edd3 7a00 	vldr	s15, [r3]
 80034fa:	eef0 7ae7 	vabs.f32	s15, s15
 80034fe:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350a:	dc02      	bgt.n	8003512 <imuCalcKpGain+0x86>
                || (!useAcc)) {
 800350c:	7afb      	ldrb	r3, [r7, #11]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d107      	bne.n	8003522 <imuCalcKpGain+0x96>

                gyroQuietPeriodTimeEnd = currentTimeUs + ATTITUDE_RESET_QUIET_TIME;
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <imuCalcKpGain+0x134>)
 8003516:	4413      	add	r3, r2
 8003518:	4a27      	ldr	r2, [pc, #156]	; (80035b8 <imuCalcKpGain+0x12c>)
 800351a:	6013      	str	r3, [r2, #0]
                attitudeResetTimeEnd = 0;
 800351c:	4b25      	ldr	r3, [pc, #148]	; (80035b4 <imuCalcKpGain+0x128>)
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
            }
        }
        if (attitudeResetTimeEnd > 0) {        // Resetting the attitude estimation
 8003522:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <imuCalcKpGain+0x128>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d011      	beq.n	800354e <imuCalcKpGain+0xc2>
            if (currentTimeUs >= attitudeResetTimeEnd) {
 800352a:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <imuCalcKpGain+0x128>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	429a      	cmp	r2, r3
 8003532:	d309      	bcc.n	8003548 <imuCalcKpGain+0xbc>
                gyroQuietPeriodTimeEnd = 0;
 8003534:	4b20      	ldr	r3, [pc, #128]	; (80035b8 <imuCalcKpGain+0x12c>)
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
                attitudeResetTimeEnd = 0;
 800353a:	4b1e      	ldr	r3, [pc, #120]	; (80035b4 <imuCalcKpGain+0x128>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
                attitudeResetCompleted = true;
 8003540:	4b1e      	ldr	r3, [pc, #120]	; (80035bc <imuCalcKpGain+0x130>)
 8003542:	2201      	movs	r2, #1
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	e013      	b.n	8003570 <imuCalcKpGain+0xe4>
            } else {
                attitudeResetActive = true;
 8003548:	2301      	movs	r3, #1
 800354a:	74fb      	strb	r3, [r7, #19]
 800354c:	e010      	b.n	8003570 <imuCalcKpGain+0xe4>
            }
        } else if ((gyroQuietPeriodTimeEnd > 0) && (currentTimeUs >= gyroQuietPeriodTimeEnd)) {
 800354e:	4b1a      	ldr	r3, [pc, #104]	; (80035b8 <imuCalcKpGain+0x12c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00c      	beq.n	8003570 <imuCalcKpGain+0xe4>
 8003556:	4b18      	ldr	r3, [pc, #96]	; (80035b8 <imuCalcKpGain+0x12c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	429a      	cmp	r2, r3
 800355e:	d307      	bcc.n	8003570 <imuCalcKpGain+0xe4>
            // Start the high gain period to bring the estimation into convergence
            attitudeResetTimeEnd = currentTimeUs + ATTITUDE_RESET_ACTIVE_TIME;
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <imuCalcKpGain+0x138>)
 8003564:	4413      	add	r3, r2
 8003566:	4a13      	ldr	r2, [pc, #76]	; (80035b4 <imuCalcKpGain+0x128>)
 8003568:	6013      	str	r3, [r2, #0]
            gyroQuietPeriodTimeEnd = 0;
 800356a:	4b13      	ldr	r3, [pc, #76]	; (80035b8 <imuCalcKpGain+0x12c>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
        }
    }
    lastArmState = armState;
 8003570:	4a15      	ldr	r2, [pc, #84]	; (80035c8 <imuCalcKpGain+0x13c>)
 8003572:	7cbb      	ldrb	r3, [r7, #18]
 8003574:	7013      	strb	r3, [r2, #0]

    if (attitudeResetActive) {
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <imuCalcKpGain+0xf6>
        ret = ATTITUDE_RESET_KP_GAIN;
 800357c:	4b13      	ldr	r3, [pc, #76]	; (80035cc <imuCalcKpGain+0x140>)
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	e00d      	b.n	800359e <imuCalcKpGain+0x112>
    } else {
       ret = imuRuntimeConfig.dcm_kp;
 8003582:	4b13      	ldr	r3, [pc, #76]	; (80035d0 <imuCalcKpGain+0x144>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	617b      	str	r3, [r7, #20]
       if (!armState) {
 8003588:	7cbb      	ldrb	r3, [r7, #18]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d107      	bne.n	800359e <imuCalcKpGain+0x112>
          ret = ret * 10.0f; // Scale the kP to generally converge faster when disarmed.
 800358e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003592:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800359a:	edc7 7a05 	vstr	s15, [r7, #20]
       }
    }

    return ret;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	ee07 3a90 	vmov	s15, r3
}
 80035a4:	eeb0 0a67 	vmov.f32	s0, s15
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	20000a30 	.word	0x20000a30
 80035b8:	20000a34 	.word	0x20000a34
 80035bc:	20000a38 	.word	0x20000a38
 80035c0:	0003d090 	.word	0x0003d090
 80035c4:	0007a120 	.word	0x0007a120
 80035c8:	20000a2c 	.word	0x20000a2c
 80035cc:	41c80000 	.word	0x41c80000
 80035d0:	200009d8 	.word	0x200009d8

080035d4 <imuCalculateEstimatedAttitude>:

void imuCalculateEstimatedAttitude()
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	ed2d 8b08 	vpush	{d8-d11}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0
    static timeUs_t previousIMUUpdateTime;
    bool useAcc = false;
 80035de:	2300      	movs	r3, #0
 80035e0:	77fb      	strb	r3, [r7, #31]
    bool useMag = false;
 80035e2:	2300      	movs	r3, #0
 80035e4:	77bb      	strb	r3, [r7, #30]
    bool useCOG = true; // Whether or not correct yaw via imuMahonyAHRSupdate from our ground course
 80035e6:	2301      	movs	r3, #1
 80035e8:	777b      	strb	r3, [r7, #29]
    float courseOverGround = DECIDEGREES_TO_RADIANS(65535); // worst case
 80035ea:	4b35      	ldr	r3, [pc, #212]	; (80036c0 <imuCalculateEstimatedAttitude+0xec>)
 80035ec:	61bb      	str	r3, [r7, #24]

    const timeDelta_t deltaT = 10000;
 80035ee:	f242 7310 	movw	r3, #10000	; 0x2710
 80035f2:	617b      	str	r3, [r7, #20]
    timeUs_t currentTimeUs = previousIMUUpdateTime + deltaT;
 80035f4:	4b33      	ldr	r3, [pc, #204]	; (80036c4 <imuCalculateEstimatedAttitude+0xf0>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	4413      	add	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
    previousIMUUpdateTime = currentTimeUs;
 80035fe:	4a31      	ldr	r2, [pc, #196]	; (80036c4 <imuCalculateEstimatedAttitude+0xf0>)
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	6013      	str	r3, [r2, #0]

    useMag = true;
 8003604:	2301      	movs	r3, #1
 8003606:	77bb      	strb	r3, [r7, #30]

    float gyroAverage[XYZ_AXIS_COUNT];
    gyroGetAccumulationAverage(gyroAverage);
 8003608:	1d3b      	adds	r3, r7, #4
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff f8de 	bl	80027cc <gyroGetAccumulationAverage>

    if (accGetAccumulationAverage(accAverage)) {
 8003610:	482d      	ldr	r0, [pc, #180]	; (80036c8 <imuCalculateEstimatedAttitude+0xf4>)
 8003612:	f7fd fb7b 	bl	8000d0c <accGetAccumulationAverage>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d004      	beq.n	8003626 <imuCalculateEstimatedAttitude+0x52>
        useAcc = imuIsAccelerometerHealthy(accAverage);
 800361c:	482a      	ldr	r0, [pc, #168]	; (80036c8 <imuCalculateEstimatedAttitude+0xf4>)
 800361e:	f7ff fad9 	bl	8002bd4 <imuIsAccelerometerHealthy>
 8003622:	4603      	mov	r3, r0
 8003624:	77fb      	strb	r3, [r7, #31]
    }

    imuMahonyAHRSupdate(deltaT * 1e-6f,
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	ee07 3a90 	vmov	s15, r3
 800362c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003630:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80036cc <imuCalculateEstimatedAttitude+0xf8>
 8003634:	ee27 8a87 	vmul.f32	s16, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 8003638:	edd7 7a01 	vldr	s15, [r7, #4]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 800363c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80036d0 <imuCalculateEstimatedAttitude+0xfc>
 8003640:	ee67 8a87 	vmul.f32	s17, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 8003644:	edd7 7a02 	vldr	s15, [r7, #8]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 8003648:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80036d0 <imuCalculateEstimatedAttitude+0xfc>
 800364c:	ee27 9a87 	vmul.f32	s18, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 8003650:	edd7 7a03 	vldr	s15, [r7, #12]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 8003654:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80036d0 <imuCalculateEstimatedAttitude+0xfc>
 8003658:	ee67 9a87 	vmul.f32	s19, s15, s14
 800365c:	4b1a      	ldr	r3, [pc, #104]	; (80036c8 <imuCalculateEstimatedAttitude+0xf4>)
 800365e:	ed93 aa00 	vldr	s20, [r3]
 8003662:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <imuCalculateEstimatedAttitude+0xf4>)
 8003664:	edd3 aa01 	vldr	s21, [r3, #4]
 8003668:	4b17      	ldr	r3, [pc, #92]	; (80036c8 <imuCalculateEstimatedAttitude+0xf4>)
 800366a:	ed93 ba02 	vldr	s22, [r3, #8]
 800366e:	1d3a      	adds	r2, r7, #4
 8003670:	7ffb      	ldrb	r3, [r7, #31]
 8003672:	4619      	mov	r1, r3
 8003674:	6938      	ldr	r0, [r7, #16]
 8003676:	f7ff ff09 	bl	800348c <imuCalcKpGain>
 800367a:	eef0 7a40 	vmov.f32	s15, s0
 800367e:	7f7a      	ldrb	r2, [r7, #29]
 8003680:	7fb9      	ldrb	r1, [r7, #30]
 8003682:	7ffb      	ldrb	r3, [r7, #31]
 8003684:	eeb0 4a67 	vmov.f32	s8, s15
 8003688:	edd7 3a06 	vldr	s7, [r7, #24]
 800368c:	eeb0 3a4b 	vmov.f32	s6, s22
 8003690:	eef0 2a6a 	vmov.f32	s5, s21
 8003694:	eeb0 2a4a 	vmov.f32	s4, s20
 8003698:	4618      	mov	r0, r3
 800369a:	eef0 1a69 	vmov.f32	s3, s19
 800369e:	eeb0 1a49 	vmov.f32	s2, s18
 80036a2:	eef0 0a68 	vmov.f32	s1, s17
 80036a6:	eeb0 0a48 	vmov.f32	s0, s16
 80036aa:	f7ff faf9 	bl	8002ca0 <imuMahonyAHRSupdate>
                        useAcc, accAverage[X], accAverage[Y], accAverage[Z],
                        useMag,
                        useCOG, courseOverGround,  imuCalcKpGain(currentTimeUs, useAcc, gyroAverage));

    imuUpdateEulerAngles();
 80036ae:	f7ff fe81 	bl	80033b4 <imuUpdateEulerAngles>
}
 80036b2:	bf00      	nop
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	ecbd 8b08 	vpop	{d8-d11}
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	42e4c2a3 	.word	0x42e4c2a3
 80036c4:	20000a3c 	.word	0x20000a3c
 80036c8:	20000a04 	.word	0x20000a04
 80036cc:	358637bd 	.word	0x358637bd
 80036d0:	3c8efa35 	.word	0x3c8efa35

080036d4 <calculateThrottleAngleCorrection>:

static int calculateThrottleAngleCorrection(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	ed2d 8b02 	vpush	{d8}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
    /*
    * Use 0 as the throttle angle correction if we are inverted, vertical or with a
    * small angle < 0.86 deg
    * TODO: Define this small angle in config.
    */
    if (getCosTiltAngle() <= 0.015f) {
 80036de:	f7ff f8d1 	bl	8002884 <getCosTiltAngle>
 80036e2:	eef0 7a40 	vmov.f32	s15, s0
 80036e6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003774 <calculateThrottleAngleCorrection+0xa0>
 80036ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f2:	d801      	bhi.n	80036f8 <calculateThrottleAngleCorrection+0x24>
        return 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	e036      	b.n	8003766 <calculateThrottleAngleCorrection+0x92>
    }
    int angle = lrintf(acos_approx(getCosTiltAngle()) * throttleAngleScale);
 80036f8:	f7ff f8c4 	bl	8002884 <getCosTiltAngle>
 80036fc:	eef0 7a40 	vmov.f32	s15, s0
 8003700:	eeb0 0a67 	vmov.f32	s0, s15
 8003704:	f7fe f92e 	bl	8001964 <acos_approx>
 8003708:	eeb0 7a40 	vmov.f32	s14, s0
 800370c:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <calculateThrottleAngleCorrection+0xa4>)
 800370e:	edd3 7a00 	vldr	s15, [r3]
 8003712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003716:	eeb0 0a67 	vmov.f32	s0, s15
 800371a:	f014 fb3f 	bl	8017d9c <lrintf>
 800371e:	6078      	str	r0, [r7, #4]
    if (angle > 900)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003726:	dd02      	ble.n	800372e <calculateThrottleAngleCorrection+0x5a>
        angle = 900;
 8003728:	f44f 7361 	mov.w	r3, #900	; 0x384
 800372c:	607b      	str	r3, [r7, #4]
    return lrintf(throttleAngleValue * sin_approx(angle / (900.0f * M_PIf / 2.0f)));
 800372e:	4b13      	ldr	r3, [pc, #76]	; (800377c <calculateThrottleAngleCorrection+0xa8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	ee07 3a90 	vmov	s15, r3
 8003740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003744:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8003780 <calculateThrottleAngleCorrection+0xac>
 8003748:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800374c:	eeb0 0a47 	vmov.f32	s0, s14
 8003750:	f7fe f846 	bl	80017e0 <sin_approx>
 8003754:	eef0 7a40 	vmov.f32	s15, s0
 8003758:	ee68 7a27 	vmul.f32	s15, s16, s15
 800375c:	eeb0 0a67 	vmov.f32	s0, s15
 8003760:	f014 fb1c 	bl	8017d9c <lrintf>
 8003764:	4603      	mov	r3, r0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	ecbd 8b02 	vpop	{d8}
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	3c75c28f 	.word	0x3c75c28f
 8003778:	20000a10 	.word	0x20000a10
 800377c:	20000a14 	.word	0x20000a14
 8003780:	44b0b6ef 	.word	0x44b0b6ef

08003784 <mixerSetThrottleAngleCorrection>:

static void mixerSetThrottleAngleCorrection(int correctionValue) { }
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <imuCalculateThrottleAngleCorrection>:

void imuCalculateThrottleAngleCorrection(void) {
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
	// Update the throttle correction for angle and supply it to the mixer
	int throttleAngleCorrection = calculateThrottleAngleCorrection();
 800379e:	f7ff ff99 	bl	80036d4 <calculateThrottleAngleCorrection>
 80037a2:	6078      	str	r0, [r7, #4]
	mixerSetThrottleAngleCorrection(throttleAngleCorrection);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff ffed 	bl	8003784 <mixerSetThrottleAngleCorrection>
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <compassDetect>:
} compassConfig_t;

static compassConfig_t compassConfig;

static bool compassDetect(magDev_t *magDev, uint8_t *alignment)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
    *alignment = ALIGN_DEFAULT;  // may be overridden if target specifies MAG_*_ALIGN
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]

    magSensor_e magHardware = MAG_NONE;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]

    extDevice_t *dev = &magDev->dev;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3318      	adds	r3, #24
 80037cc:	60bb      	str	r3, [r7, #8]
    // Associate magnetometer bus with its device
    dev->bus = &magDev->bus;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	601a      	str	r2, [r3, #0]


    switch (compassConfig.mag_busType) {
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <compassDetect+0x8c>)
 80037da:	789b      	ldrb	r3, [r3, #2]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d10f      	bne.n	8003800 <compassDetect+0x4c>
    case BUS_TYPE_I2C:
        i2cBusSetInstance(dev, compassConfig.mag_i2c_device);
 80037e0:	4b17      	ldr	r3, [pc, #92]	; (8003840 <compassDetect+0x8c>)
 80037e2:	78db      	ldrb	r3, [r3, #3]
 80037e4:	4619      	mov	r1, r3
 80037e6:	68b8      	ldr	r0, [r7, #8]
 80037e8:	f7fd fc54 	bl	8001094 <i2cBusSetInstance>
        dev->busType_u.i2c.address = compassConfig.mag_i2c_address;
 80037ec:	4b14      	ldr	r3, [pc, #80]	; (8003840 <compassDetect+0x8c>)
 80037ee:	791a      	ldrb	r2, [r3, #4]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	711a      	strb	r2, [r3, #4]
        break;
 80037f4:	bf00      	nop
    case BUS_TYPE_SPI:
    default:
        return false;
    }

    switch (compassConfig.mag_hardware) {
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <compassDetect+0x8c>)
 80037f8:	785b      	ldrb	r3, [r3, #1]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d004      	beq.n	8003808 <compassDetect+0x54>
 80037fe:	e001      	b.n	8003804 <compassDetect+0x50>
        return false;
 8003800:	2300      	movs	r3, #0
 8003802:	e019      	b.n	8003838 <compassDetect+0x84>
    switch (compassConfig.mag_hardware) {
 8003804:	2b02      	cmp	r3, #2
 8003806:	d10e      	bne.n	8003826 <compassDetect+0x72>
    case MAG_DEFAULT:
    case MAG_HMC5883:
        if (dev->bus->busType == BUS_TYPE_I2C) {
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d103      	bne.n	800381a <compassDetect+0x66>
            dev->busType_u.i2c.address = compassConfig.mag_i2c_address;
 8003812:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <compassDetect+0x8c>)
 8003814:	791a      	ldrb	r2, [r3, #4]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	711a      	strb	r2, [r3, #4]
        }

        *alignment = MAG_HMC5883_ALIGN;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2208      	movs	r2, #8
 800381e:	701a      	strb	r2, [r3, #0]
        magHardware = MAG_HMC5883;
 8003820:	2302      	movs	r3, #2
 8003822:	73fb      	strb	r3, [r7, #15]
        break;
 8003824:	e002      	b.n	800382c <compassDetect+0x78>

    default:
        magHardware = MAG_NONE;
 8003826:	2301      	movs	r3, #1
 8003828:	73fb      	strb	r3, [r7, #15]
        break;
 800382a:	bf00      	nop
    }

    // MAG_MPU925X_AK8963 is an MPU925x configured as I2C passthrough to the built-in AK8963 magnetometer
    // Passthrough mode disables the gyro/acc part of the MPU, so we only want to detect this sensor if mag_hardware was explicitly set to MAG_MPU925X_AK8963
    if (magHardware == MAG_NONE) {
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <compassDetect+0x82>
        return false;
 8003832:	2300      	movs	r3, #0
 8003834:	e000      	b.n	8003838 <compassDetect+0x84>
    }

    return true;
 8003836:	2301      	movs	r3, #1
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20000b40 	.word	0x20000b40

08003844 <magInit>:


void magInit(sensorMagInitFuncPtr initFn, sensorMagReadFuncPtr readFn) {
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
	magDev.init = initFn;
 800384e:	4a16      	ldr	r2, [pc, #88]	; (80038a8 <magInit+0x64>)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	60d3      	str	r3, [r2, #12]
	magDev.read = readFn;
 8003854:	4a14      	ldr	r2, [pc, #80]	; (80038a8 <magInit+0x64>)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6113      	str	r3, [r2, #16]

	//TODO

    sensor_align_e alignment;

    if (!compassDetect(&magDev, &alignment)) {
 800385a:	f107 030f 	add.w	r3, r7, #15
 800385e:	4619      	mov	r1, r3
 8003860:	4811      	ldr	r0, [pc, #68]	; (80038a8 <magInit+0x64>)
 8003862:	f7ff ffa7 	bl	80037b4 <compassDetect>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d018      	beq.n	800389e <magInit+0x5a>
        return;
    }

    magDev.init(&magDev);
 800386c:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <magInit+0x64>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	480d      	ldr	r0, [pc, #52]	; (80038a8 <magInit+0x64>)
 8003872:	4798      	blx	r3
    doneInit = true;
 8003874:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <magInit+0x68>)
 8003876:	2201      	movs	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]

    magDev.magAlignment = alignment;
 800387a:	7bfa      	ldrb	r2, [r7, #15]
 800387c:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <magInit+0x64>)
 800387e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    if (compassConfig.mag_alignment != ALIGN_DEFAULT) {
 8003882:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <magInit+0x6c>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d004      	beq.n	8003894 <magInit+0x50>
        magDev.magAlignment = compassConfig.mag_alignment;
 800388a:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <magInit+0x6c>)
 800388c:	781a      	ldrb	r2, [r3, #0]
 800388e:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <magInit+0x64>)
 8003890:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    }

    buildRotationMatrixFromAlignment(&compassConfig.mag_customAlignment, &magDev.rotationMatrix);
 8003894:	4907      	ldr	r1, [pc, #28]	; (80038b4 <magInit+0x70>)
 8003896:	4808      	ldr	r0, [pc, #32]	; (80038b8 <magInit+0x74>)
 8003898:	f002 fc14 	bl	80060c4 <buildRotationMatrixFromAlignment>
 800389c:	e000      	b.n	80038a0 <magInit+0x5c>
        return;
 800389e:	bf00      	nop
}
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000a4c 	.word	0x20000a4c
 80038ac:	20000b3c 	.word	0x20000b3c
 80038b0:	20000b40 	.word	0x20000b40
 80038b4:	20000b10 	.word	0x20000b10
 80038b8:	20000b50 	.word	0x20000b50

080038bc <magUpdate>:

void magUpdate(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
    if (!magDev.read(&magDev)) {
 80038c2:	4b2c      	ldr	r3, [pc, #176]	; (8003974 <magUpdate+0xb8>)
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	482b      	ldr	r0, [pc, #172]	; (8003974 <magUpdate+0xb8>)
 80038c8:	4798      	blx	r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d04d      	beq.n	800396c <magUpdate+0xb0>
        return;
    }

    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80038d0:	2300      	movs	r3, #0
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	e00c      	b.n	80038f0 <magUpdate+0x34>
    	mag.magADC[axis] = magDev.magADC[axis];
 80038d6:	4a27      	ldr	r2, [pc, #156]	; (8003974 <magUpdate+0xb8>)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4925      	ldr	r1, [pc, #148]	; (8003978 <magUpdate+0xbc>)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3301      	adds	r3, #1
 80038ee:	607b      	str	r3, [r7, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	ddef      	ble.n	80038d6 <magUpdate+0x1a>
    }

    alignSensorViaRotation(mag.magADC, magDev.magAlignment);
 80038f6:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <magUpdate+0xb8>)
 80038f8:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80038fc:	4619      	mov	r1, r3
 80038fe:	481e      	ldr	r0, [pc, #120]	; (8003978 <magUpdate+0xbc>)
 8003900:	f002 fc72 	bl	80061e8 <alignSensorViaRotation>

    flightDynamicsTrims_t *magZero = &compassConfig.magZero;
 8003904:	4b1d      	ldr	r3, [pc, #116]	; (800397c <magUpdate+0xc0>)
 8003906:	603b      	str	r3, [r7, #0]
    if (doneInit) {              // we apply offset only once mag calibration is done
 8003908:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <magUpdate+0xc4>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d02e      	beq.n	800396e <magUpdate+0xb2>
        mag.magADC[X] -= magZero->raw[X];
 8003910:	4b19      	ldr	r3, [pc, #100]	; (8003978 <magUpdate+0xbc>)
 8003912:	ed93 7a00 	vldr	s14, [r3]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	f9b3 3000 	ldrsh.w	r3, [r3]
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003924:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003928:	4b13      	ldr	r3, [pc, #76]	; (8003978 <magUpdate+0xbc>)
 800392a:	edc3 7a00 	vstr	s15, [r3]
        mag.magADC[Y] -= magZero->raw[Y];
 800392e:	4b12      	ldr	r3, [pc, #72]	; (8003978 <magUpdate+0xbc>)
 8003930:	ed93 7a01 	vldr	s14, [r3, #4]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003946:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <magUpdate+0xbc>)
 8003948:	edc3 7a01 	vstr	s15, [r3, #4]
        mag.magADC[Z] -= magZero->raw[Z];
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <magUpdate+0xbc>)
 800394e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003958:	ee07 3a90 	vmov	s15, r3
 800395c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003960:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003964:	4b04      	ldr	r3, [pc, #16]	; (8003978 <magUpdate+0xbc>)
 8003966:	edc3 7a02 	vstr	s15, [r3, #8]
 800396a:	e000      	b.n	800396e <magUpdate+0xb2>
        return;
 800396c:	bf00      	nop
    }
}
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	20000a4c 	.word	0x20000a4c
 8003978:	20000a40 	.word	0x20000a40
 800397c:	20000b48 	.word	0x20000b48
 8003980:	20000b3c 	.word	0x20000b3c

08003984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003988:	f008 fa6e 	bl	800be68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800398c:	f000 f908 	bl	8003ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003990:	f000 f9d6 	bl	8003d40 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003994:	f000 f976 	bl	8003c84 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003998:	f000 f9a4 	bl	8003ce4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  /* initialization of control task */
  gyroInit(sensorGyroInit, sensorGyroRead);
 800399c:	4954      	ldr	r1, [pc, #336]	; (8003af0 <main+0x16c>)
 800399e:	4855      	ldr	r0, [pc, #340]	; (8003af4 <main+0x170>)
 80039a0:	f7fe fd04 	bl	80023ac <gyroInit>
  controlMotorInit();
 80039a4:	f7fd fba2 	bl	80010ec <controlMotorInit>

  /* initialization of attitude task */
  accInit(sensorAccInit, sensorAccRead);
 80039a8:	4953      	ldr	r1, [pc, #332]	; (8003af8 <main+0x174>)
 80039aa:	4854      	ldr	r0, [pc, #336]	; (8003afc <main+0x178>)
 80039ac:	f7fd f8c6 	bl	8000b3c <accInit>
  magInit(sensorMagInit, sensorMagRead);
 80039b0:	4953      	ldr	r1, [pc, #332]	; (8003b00 <main+0x17c>)
 80039b2:	4854      	ldr	r0, [pc, #336]	; (8003b04 <main+0x180>)
 80039b4:	f7ff ff46 	bl	8003844 <magInit>
  attitudeInit();
 80039b8:	f7fd f9fa 	bl	8000db0 <attitudeInit>

  /* initialization of altitude task */
  baroInit(sensorBaroInit, sensorBaroRead);
 80039bc:	4952      	ldr	r1, [pc, #328]	; (8003b08 <main+0x184>)
 80039be:	4853      	ldr	r0, [pc, #332]	; (8003b0c <main+0x188>)
 80039c0:	f7fd fb04 	bl	8000fcc <baroInit>

  /*Init dei sensori*/
  IKS01A2_ENV_SENSOR_Init(IKS01A2_LPS22HB_0,ENV_PRESSURE);
 80039c4:	2102      	movs	r1, #2
 80039c6:	2001      	movs	r0, #1
 80039c8:	f007 fbc8 	bl	800b15c <IKS01A2_ENV_SENSOR_Init>
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0,(MOTION_GYRO | MOTION_ACCELERO) );
 80039cc:	2103      	movs	r1, #3
 80039ce:	2000      	movs	r0, #0
 80039d0:	f007 fe80 	bl	800b6d4 <IKS01A2_MOTION_SENSOR_Init>
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_ACC_0,MOTION_ACCELERO);
 80039d4:	2102      	movs	r1, #2
 80039d6:	2001      	movs	r0, #1
 80039d8:	f007 fe7c 	bl	800b6d4 <IKS01A2_MOTION_SENSOR_Init>
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0,MOTION_MAGNETO);
 80039dc:	2104      	movs	r1, #4
 80039de:	2002      	movs	r0, #2
 80039e0:	f007 fe78 	bl	800b6d4 <IKS01A2_MOTION_SENSOR_Init>

  /*enable dei sensori*/
  IKS01A2_ENV_SENSOR_Enable(IKS01A2_LPS22HB_0,ENV_PRESSURE);
 80039e4:	2102      	movs	r1, #2
 80039e6:	2001      	movs	r0, #1
 80039e8:	f007 fc78 	bl	800b2dc <IKS01A2_ENV_SENSOR_Enable>
  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0,(MOTION_GYRO | MOTION_ACCELERO));
 80039ec:	2103      	movs	r1, #3
 80039ee:	2000      	movs	r0, #0
 80039f0:	f007 ff6c 	bl	800b8cc <IKS01A2_MOTION_SENSOR_Enable>
  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_ACC_0,MOTION_ACCELERO);
 80039f4:	2102      	movs	r1, #2
 80039f6:	2001      	movs	r0, #1
 80039f8:	f007 ff68 	bl	800b8cc <IKS01A2_MOTION_SENSOR_Enable>
  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0,MOTION_MAGNETO);
 80039fc:	2104      	movs	r1, #4
 80039fe:	2002      	movs	r0, #2
 8003a00:	f007 ff64 	bl	800b8cc <IKS01A2_MOTION_SENSOR_Enable>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003a04:	f00c fa22 	bl	800fe4c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Sem_I2C */
  Sem_I2CHandle = osSemaphoreNew(1, 1, &Sem_I2C_attributes);
 8003a08:	4a41      	ldr	r2, [pc, #260]	; (8003b10 <main+0x18c>)
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	2001      	movs	r0, #1
 8003a0e:	f00c fb5b 	bl	80100c8 <osSemaphoreNew>
 8003a12:	4603      	mov	r3, r0
 8003a14:	4a3f      	ldr	r2, [pc, #252]	; (8003b14 <main+0x190>)
 8003a16:	6013      	str	r3, [r2, #0]

  /* creation of Sem_LSM6DSL_Acc */
  Sem_LSM6DSL_AccHandle = osSemaphoreNew(1, 1, &Sem_LSM6DSL_Acc_attributes);
 8003a18:	4a3f      	ldr	r2, [pc, #252]	; (8003b18 <main+0x194>)
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	2001      	movs	r0, #1
 8003a1e:	f00c fb53 	bl	80100c8 <osSemaphoreNew>
 8003a22:	4603      	mov	r3, r0
 8003a24:	4a3d      	ldr	r2, [pc, #244]	; (8003b1c <main+0x198>)
 8003a26:	6013      	str	r3, [r2, #0]

  /* creation of Sem_LSM303AGR_Acc */
  Sem_LSM303AGR_AccHandle = osSemaphoreNew(1, 1, &Sem_LSM303AGR_Acc_attributes);
 8003a28:	4a3d      	ldr	r2, [pc, #244]	; (8003b20 <main+0x19c>)
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	f00c fb4b 	bl	80100c8 <osSemaphoreNew>
 8003a32:	4603      	mov	r3, r0
 8003a34:	4a3b      	ldr	r2, [pc, #236]	; (8003b24 <main+0x1a0>)
 8003a36:	6013      	str	r3, [r2, #0]

  /* creation of Sem_Mag */
  Sem_MagHandle = osSemaphoreNew(1, 1, &Sem_Mag_attributes);
 8003a38:	4a3b      	ldr	r2, [pc, #236]	; (8003b28 <main+0x1a4>)
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	2001      	movs	r0, #1
 8003a3e:	f00c fb43 	bl	80100c8 <osSemaphoreNew>
 8003a42:	4603      	mov	r3, r0
 8003a44:	4a39      	ldr	r2, [pc, #228]	; (8003b2c <main+0x1a8>)
 8003a46:	6013      	str	r3, [r2, #0]

  /* creation of Sem_Gyro */
  Sem_GyroHandle = osSemaphoreNew(1, 1, &Sem_Gyro_attributes);
 8003a48:	4a39      	ldr	r2, [pc, #228]	; (8003b30 <main+0x1ac>)
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	2001      	movs	r0, #1
 8003a4e:	f00c fb3b 	bl	80100c8 <osSemaphoreNew>
 8003a52:	4603      	mov	r3, r0
 8003a54:	4a37      	ldr	r2, [pc, #220]	; (8003b34 <main+0x1b0>)
 8003a56:	6013      	str	r3, [r2, #0]

  /* creation of Sem_Press */
  Sem_PressHandle = osSemaphoreNew(1, 1, &Sem_Press_attributes);
 8003a58:	4a37      	ldr	r2, [pc, #220]	; (8003b38 <main+0x1b4>)
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	2001      	movs	r0, #1
 8003a5e:	f00c fb33 	bl	80100c8 <osSemaphoreNew>
 8003a62:	4603      	mov	r3, r0
 8003a64:	4a35      	ldr	r2, [pc, #212]	; (8003b3c <main+0x1b8>)
 8003a66:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of tControlMotor */
  tControlMotorHandle = osThreadNew(startTaskControlMotor, NULL, &tControlMotor_attributes);
 8003a68:	4a35      	ldr	r2, [pc, #212]	; (8003b40 <main+0x1bc>)
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	4835      	ldr	r0, [pc, #212]	; (8003b44 <main+0x1c0>)
 8003a6e:	f00c fa57 	bl	800ff20 <osThreadNew>
 8003a72:	4603      	mov	r3, r0
 8003a74:	4a34      	ldr	r2, [pc, #208]	; (8003b48 <main+0x1c4>)
 8003a76:	6013      	str	r3, [r2, #0]

  /* creation of tAttitude */
  tAttitudeHandle = osThreadNew(startTaskAttitude, NULL, &tAttitude_attributes);
 8003a78:	4a34      	ldr	r2, [pc, #208]	; (8003b4c <main+0x1c8>)
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4834      	ldr	r0, [pc, #208]	; (8003b50 <main+0x1cc>)
 8003a7e:	f00c fa4f 	bl	800ff20 <osThreadNew>
 8003a82:	4603      	mov	r3, r0
 8003a84:	4a33      	ldr	r2, [pc, #204]	; (8003b54 <main+0x1d0>)
 8003a86:	6013      	str	r3, [r2, #0]

  /* creation of tAltitude */
  tAltitudeHandle = osThreadNew(startTaskAltitude, NULL, &tAltitude_attributes);
 8003a88:	4a33      	ldr	r2, [pc, #204]	; (8003b58 <main+0x1d4>)
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	4833      	ldr	r0, [pc, #204]	; (8003b5c <main+0x1d8>)
 8003a8e:	f00c fa47 	bl	800ff20 <osThreadNew>
 8003a92:	4603      	mov	r3, r0
 8003a94:	4a32      	ldr	r2, [pc, #200]	; (8003b60 <main+0x1dc>)
 8003a96:	6013      	str	r3, [r2, #0]

  /* creation of tRecoverAcc */
  tRecoverAccHandle = osThreadNew(StartRecoverAcc, NULL, &tRecoverAcc_attributes);
 8003a98:	4a32      	ldr	r2, [pc, #200]	; (8003b64 <main+0x1e0>)
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4832      	ldr	r0, [pc, #200]	; (8003b68 <main+0x1e4>)
 8003a9e:	f00c fa3f 	bl	800ff20 <osThreadNew>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	4a31      	ldr	r2, [pc, #196]	; (8003b6c <main+0x1e8>)
 8003aa6:	6013      	str	r3, [r2, #0]

  /* creation of tRecoverPress */
  tRecoverPressHandle = osThreadNew(StartRecoverPress, NULL, &tRecoverPress_attributes);
 8003aa8:	4a31      	ldr	r2, [pc, #196]	; (8003b70 <main+0x1ec>)
 8003aaa:	2100      	movs	r1, #0
 8003aac:	4831      	ldr	r0, [pc, #196]	; (8003b74 <main+0x1f0>)
 8003aae:	f00c fa37 	bl	800ff20 <osThreadNew>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	4a30      	ldr	r2, [pc, #192]	; (8003b78 <main+0x1f4>)
 8003ab6:	6013      	str	r3, [r2, #0]

  /* creation of tRecoverMag */
  tRecoverMagHandle = osThreadNew(StartRecoverMag, NULL, &tRecoverMag_attributes);
 8003ab8:	4a30      	ldr	r2, [pc, #192]	; (8003b7c <main+0x1f8>)
 8003aba:	2100      	movs	r1, #0
 8003abc:	4830      	ldr	r0, [pc, #192]	; (8003b80 <main+0x1fc>)
 8003abe:	f00c fa2f 	bl	800ff20 <osThreadNew>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	4a2f      	ldr	r2, [pc, #188]	; (8003b84 <main+0x200>)
 8003ac6:	6013      	str	r3, [r2, #0]

  /* creation of PrintData */
  PrintDataHandle = osThreadNew(StartPrintData, NULL, &PrintData_attributes);
 8003ac8:	4a2f      	ldr	r2, [pc, #188]	; (8003b88 <main+0x204>)
 8003aca:	2100      	movs	r1, #0
 8003acc:	482f      	ldr	r0, [pc, #188]	; (8003b8c <main+0x208>)
 8003ace:	f00c fa27 	bl	800ff20 <osThreadNew>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	4a2e      	ldr	r2, [pc, #184]	; (8003b90 <main+0x20c>)
 8003ad6:	6013      	str	r3, [r2, #0]

  /* creation of tRecoverGyro */
  tRecoverGyroHandle = osThreadNew(StartRecoverGyro, NULL, &tRecoverGyro_attributes);
 8003ad8:	4a2e      	ldr	r2, [pc, #184]	; (8003b94 <main+0x210>)
 8003ada:	2100      	movs	r1, #0
 8003adc:	482e      	ldr	r0, [pc, #184]	; (8003b98 <main+0x214>)
 8003ade:	f00c fa1f 	bl	800ff20 <osThreadNew>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	4a2d      	ldr	r2, [pc, #180]	; (8003b9c <main+0x218>)
 8003ae6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003ae8:	f00c f9e4 	bl	800feb4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003aec:	e7fe      	b.n	8003aec <main+0x168>
 8003aee:	bf00      	nop
 8003af0:	08003f21 	.word	0x08003f21
 8003af4:	08003f0d 	.word	0x08003f0d
 8003af8:	08003f89 	.word	0x08003f89
 8003afc:	08003f75 	.word	0x08003f75
 8003b00:	08004051 	.word	0x08004051
 8003b04:	0800403d 	.word	0x0800403d
 8003b08:	080040bd 	.word	0x080040bd
 8003b0c:	080040a1 	.word	0x080040a1
 8003b10:	080185c4 	.word	0x080185c4
 8003b14:	20001108 	.word	0x20001108
 8003b18:	080185d4 	.word	0x080185d4
 8003b1c:	2000110c 	.word	0x2000110c
 8003b20:	080185e4 	.word	0x080185e4
 8003b24:	20001110 	.word	0x20001110
 8003b28:	080185f4 	.word	0x080185f4
 8003b2c:	20001114 	.word	0x20001114
 8003b30:	08018604 	.word	0x08018604
 8003b34:	20001118 	.word	0x20001118
 8003b38:	08018614 	.word	0x08018614
 8003b3c:	2000111c 	.word	0x2000111c
 8003b40:	080184a4 	.word	0x080184a4
 8003b44:	08004109 	.word	0x08004109
 8003b48:	200010e8 	.word	0x200010e8
 8003b4c:	080184c8 	.word	0x080184c8
 8003b50:	08004121 	.word	0x08004121
 8003b54:	200010ec 	.word	0x200010ec
 8003b58:	080184ec 	.word	0x080184ec
 8003b5c:	0800413d 	.word	0x0800413d
 8003b60:	200010f0 	.word	0x200010f0
 8003b64:	08018510 	.word	0x08018510
 8003b68:	08004151 	.word	0x08004151
 8003b6c:	200010f4 	.word	0x200010f4
 8003b70:	08018534 	.word	0x08018534
 8003b74:	08004309 	.word	0x08004309
 8003b78:	200010f8 	.word	0x200010f8
 8003b7c:	08018558 	.word	0x08018558
 8003b80:	08004369 	.word	0x08004369
 8003b84:	200010fc 	.word	0x200010fc
 8003b88:	0801857c 	.word	0x0801857c
 8003b8c:	08004415 	.word	0x08004415
 8003b90:	20001100 	.word	0x20001100
 8003b94:	080185a0 	.word	0x080185a0
 8003b98:	08004789 	.word	0x08004789
 8003b9c:	20001104 	.word	0x20001104

08003ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b094      	sub	sp, #80	; 0x50
 8003ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ba6:	f107 031c 	add.w	r3, r7, #28
 8003baa:	2234      	movs	r2, #52	; 0x34
 8003bac:	2100      	movs	r1, #0
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f00f fe1d 	bl	80137ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bb4:	f107 0308 	add.w	r3, r7, #8
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	609a      	str	r2, [r3, #8]
 8003bc0:	60da      	str	r2, [r3, #12]
 8003bc2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003bc4:	f009 fcec 	bl	800d5a0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bc8:	4b2c      	ldr	r3, [pc, #176]	; (8003c7c <SystemClock_Config+0xdc>)
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	4a2b      	ldr	r2, [pc, #172]	; (8003c7c <SystemClock_Config+0xdc>)
 8003bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd4:	4b29      	ldr	r3, [pc, #164]	; (8003c7c <SystemClock_Config+0xdc>)
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	607b      	str	r3, [r7, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003be0:	4b27      	ldr	r3, [pc, #156]	; (8003c80 <SystemClock_Config+0xe0>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003be8:	4a25      	ldr	r2, [pc, #148]	; (8003c80 <SystemClock_Config+0xe0>)
 8003bea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	4b23      	ldr	r3, [pc, #140]	; (8003c80 <SystemClock_Config+0xe0>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003c00:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003c04:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c06:	2302      	movs	r3, #2
 8003c08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003c10:	2304      	movs	r3, #4
 8003c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003c14:	2360      	movs	r3, #96	; 0x60
 8003c16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c18:	2302      	movs	r3, #2
 8003c1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003c20:	2302      	movs	r3, #2
 8003c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c24:	f107 031c 	add.w	r3, r7, #28
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f009 fd19 	bl	800d660 <HAL_RCC_OscConfig>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003c34:	f000 fe34 	bl	80048a0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003c38:	f009 fcc2 	bl	800d5c0 <HAL_PWREx_EnableOverDrive>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003c42:	f000 fe2d 	bl	80048a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c46:	230f      	movs	r3, #15
 8003c48:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003c5c:	f107 0308 	add.w	r3, r7, #8
 8003c60:	2103      	movs	r1, #3
 8003c62:	4618      	mov	r0, r3
 8003c64:	f009 ffaa 	bl	800dbbc <HAL_RCC_ClockConfig>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8003c6e:	f000 fe17 	bl	80048a0 <Error_Handler>
  }
}
 8003c72:	bf00      	nop
 8003c74:	3750      	adds	r7, #80	; 0x50
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40007000 	.word	0x40007000

08003c84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003c88:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <MX_USART3_UART_Init+0x58>)
 8003c8a:	4a15      	ldr	r2, [pc, #84]	; (8003ce0 <MX_USART3_UART_Init+0x5c>)
 8003c8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003c8e:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <MX_USART3_UART_Init+0x58>)
 8003c90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003c96:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <MX_USART3_UART_Init+0x58>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003c9c:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <MX_USART3_UART_Init+0x58>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003ca2:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <MX_USART3_UART_Init+0x58>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <MX_USART3_UART_Init+0x58>)
 8003caa:	220c      	movs	r2, #12
 8003cac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cae:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <MX_USART3_UART_Init+0x58>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cb4:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <MX_USART3_UART_Init+0x58>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cba:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <MX_USART3_UART_Init+0x58>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <MX_USART3_UART_Init+0x58>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003cc6:	4805      	ldr	r0, [pc, #20]	; (8003cdc <MX_USART3_UART_Init+0x58>)
 8003cc8:	f00b f8d8 	bl	800ee7c <HAL_UART_Init>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003cd2:	f000 fde5 	bl	80048a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003cd6:	bf00      	nop
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20000b58 	.word	0x20000b58
 8003ce0:	40004800 	.word	0x40004800

08003ce4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003ce8:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003cea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003cee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003cf0:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003cf2:	2206      	movs	r2, #6
 8003cf4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003cf6:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003cfc:	4b0f      	ldr	r3, [pc, #60]	; (8003d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003d02:	4b0e      	ldr	r3, [pc, #56]	; (8003d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003d04:	2202      	movs	r2, #2
 8003d06:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003d08:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003d0e:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003d14:	4b09      	ldr	r3, [pc, #36]	; (8003d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003d1a:	4b08      	ldr	r3, [pc, #32]	; (8003d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003d20:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003d26:	4805      	ldr	r0, [pc, #20]	; (8003d3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003d28:	f009 faf1 	bl	800d30e <HAL_PCD_Init>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003d32:	f000 fdb5 	bl	80048a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003d36:	bf00      	nop
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20000be0 	.word	0x20000be0

08003d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08c      	sub	sp, #48	; 0x30
 8003d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d46:	f107 031c 	add.w	r3, r7, #28
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	605a      	str	r2, [r3, #4]
 8003d50:	609a      	str	r2, [r3, #8]
 8003d52:	60da      	str	r2, [r3, #12]
 8003d54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d56:	4b68      	ldr	r3, [pc, #416]	; (8003ef8 <MX_GPIO_Init+0x1b8>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	4a67      	ldr	r2, [pc, #412]	; (8003ef8 <MX_GPIO_Init+0x1b8>)
 8003d5c:	f043 0304 	orr.w	r3, r3, #4
 8003d60:	6313      	str	r3, [r2, #48]	; 0x30
 8003d62:	4b65      	ldr	r3, [pc, #404]	; (8003ef8 <MX_GPIO_Init+0x1b8>)
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	61bb      	str	r3, [r7, #24]
 8003d6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d6e:	4b62      	ldr	r3, [pc, #392]	; (8003ef8 <MX_GPIO_Init+0x1b8>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	4a61      	ldr	r2, [pc, #388]	; (8003ef8 <MX_GPIO_Init+0x1b8>)
 8003d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d78:	6313      	str	r3, [r2, #48]	; 0x30
 8003d7a:	4b5f      	ldr	r3, [pc, #380]	; (8003ef8 <MX_GPIO_Init+0x1b8>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d86:	4b5c      	ldr	r3, [pc, #368]	; (8003ef8 <MX_GPIO_Init+0x1b8>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	4a5b      	ldr	r2, [pc, #364]	; (8003ef8 <MX_GPIO_Init+0x1b8>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	6313      	str	r3, [r2, #48]	; 0x30
 8003d92:	4b59      	ldr	r3, [pc, #356]	; (8003ef8 <MX_GPIO_Init+0x1b8>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d9e:	4b56      	ldr	r3, [pc, #344]	; (8003ef8 <MX_GPIO_Init+0x1b8>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	4a55      	ldr	r2, [pc, #340]	; (8003ef8 <MX_GPIO_Init+0x1b8>)
 8003da4:	f043 0302 	orr.w	r3, r3, #2
 8003da8:	6313      	str	r3, [r2, #48]	; 0x30
 8003daa:	4b53      	ldr	r3, [pc, #332]	; (8003ef8 <MX_GPIO_Init+0x1b8>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003db6:	4b50      	ldr	r3, [pc, #320]	; (8003ef8 <MX_GPIO_Init+0x1b8>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	4a4f      	ldr	r2, [pc, #316]	; (8003ef8 <MX_GPIO_Init+0x1b8>)
 8003dbc:	f043 0308 	orr.w	r3, r3, #8
 8003dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc2:	4b4d      	ldr	r3, [pc, #308]	; (8003ef8 <MX_GPIO_Init+0x1b8>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	60bb      	str	r3, [r7, #8]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003dce:	4b4a      	ldr	r3, [pc, #296]	; (8003ef8 <MX_GPIO_Init+0x1b8>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	4a49      	ldr	r2, [pc, #292]	; (8003ef8 <MX_GPIO_Init+0x1b8>)
 8003dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dda:	4b47      	ldr	r3, [pc, #284]	; (8003ef8 <MX_GPIO_Init+0x1b8>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de2:	607b      	str	r3, [r7, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003de6:	2200      	movs	r2, #0
 8003de8:	f244 0181 	movw	r1, #16513	; 0x4081
 8003dec:	4843      	ldr	r0, [pc, #268]	; (8003efc <MX_GPIO_Init+0x1bc>)
 8003dee:	f008 fc27 	bl	800c640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003df2:	2200      	movs	r2, #0
 8003df4:	2140      	movs	r1, #64	; 0x40
 8003df6:	4842      	ldr	r0, [pc, #264]	; (8003f00 <MX_GPIO_Init+0x1c0>)
 8003df8:	f008 fc22 	bl	800c640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003dfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003e0c:	f107 031c 	add.w	r3, r7, #28
 8003e10:	4619      	mov	r1, r3
 8003e12:	483c      	ldr	r0, [pc, #240]	; (8003f04 <MX_GPIO_Init+0x1c4>)
 8003e14:	f008 f95c 	bl	800c0d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003e18:	2332      	movs	r3, #50	; 0x32
 8003e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e24:	2303      	movs	r3, #3
 8003e26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e28:	230b      	movs	r3, #11
 8003e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e2c:	f107 031c 	add.w	r3, r7, #28
 8003e30:	4619      	mov	r1, r3
 8003e32:	4834      	ldr	r0, [pc, #208]	; (8003f04 <MX_GPIO_Init+0x1c4>)
 8003e34:	f008 f94c 	bl	800c0d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003e38:	2386      	movs	r3, #134	; 0x86
 8003e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e44:	2303      	movs	r3, #3
 8003e46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e48:	230b      	movs	r3, #11
 8003e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e4c:	f107 031c 	add.w	r3, r7, #28
 8003e50:	4619      	mov	r1, r3
 8003e52:	482d      	ldr	r0, [pc, #180]	; (8003f08 <MX_GPIO_Init+0x1c8>)
 8003e54:	f008 f93c 	bl	800c0d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003e58:	f244 0381 	movw	r3, #16513	; 0x4081
 8003e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e66:	2300      	movs	r3, #0
 8003e68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e6a:	f107 031c 	add.w	r3, r7, #28
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4822      	ldr	r0, [pc, #136]	; (8003efc <MX_GPIO_Init+0x1bc>)
 8003e72:	f008 f92d 	bl	800c0d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003e76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e80:	2300      	movs	r3, #0
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e84:	2303      	movs	r3, #3
 8003e86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e88:	230b      	movs	r3, #11
 8003e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003e8c:	f107 031c 	add.w	r3, r7, #28
 8003e90:	4619      	mov	r1, r3
 8003e92:	481a      	ldr	r0, [pc, #104]	; (8003efc <MX_GPIO_Init+0x1bc>)
 8003e94:	f008 f91c 	bl	800c0d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003e98:	2340      	movs	r3, #64	; 0x40
 8003e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003ea8:	f107 031c 	add.w	r3, r7, #28
 8003eac:	4619      	mov	r1, r3
 8003eae:	4814      	ldr	r0, [pc, #80]	; (8003f00 <MX_GPIO_Init+0x1c0>)
 8003eb0:	f008 f90e 	bl	800c0d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003eb4:	2380      	movs	r3, #128	; 0x80
 8003eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003ec0:	f107 031c 	add.w	r3, r7, #28
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	480e      	ldr	r0, [pc, #56]	; (8003f00 <MX_GPIO_Init+0x1c0>)
 8003ec8:	f008 f902 	bl	800c0d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003ecc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eda:	2303      	movs	r3, #3
 8003edc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ede:	230b      	movs	r3, #11
 8003ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ee2:	f107 031c 	add.w	r3, r7, #28
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4805      	ldr	r0, [pc, #20]	; (8003f00 <MX_GPIO_Init+0x1c0>)
 8003eea:	f008 f8f1 	bl	800c0d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003eee:	bf00      	nop
 8003ef0:	3730      	adds	r7, #48	; 0x30
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	40020400 	.word	0x40020400
 8003f00:	40021800 	.word	0x40021800
 8003f04:	40020800 	.word	0x40020800
 8003f08:	40020000 	.word	0x40020000

08003f0c <sensorGyroInit>:
	}
	return len;
}
*/

static void sensorGyroInit(struct gyroDev_s *gyro) { }
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <sensorGyroRead>:

static bool sensorGyroRead(struct gyroDev_s *gyro) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
	if(osSemaphoreAcquire(Sem_GyroHandle, 0) == osOK){
 8003f28:	4b10      	ldr	r3, [pc, #64]	; (8003f6c <sensorGyroRead+0x4c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f00c f966 	bl	8010200 <osSemaphoreAcquire>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d113      	bne.n	8003f62 <sensorGyroRead+0x42>
		gyro->gyroADC[0] = VectGyro[0];
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	; (8003f70 <sensorGyroRead+0x50>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		gyro->gyroADC[1] = VectGyro[1];
 8003f44:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <sensorGyroRead+0x50>)
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		gyro->gyroADC[2] = VectGyro[2];
 8003f4e:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <sensorGyroRead+0x50>)
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		osSemaphoreRelease(Sem_GyroHandle);
 8003f58:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <sensorGyroRead+0x4c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f00c f9b5 	bl	80102cc <osSemaphoreRelease>
	}
	return true;
 8003f62:	2301      	movs	r3, #1
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20001118 	.word	0x20001118
 8003f70:	20001148 	.word	0x20001148

08003f74 <sensorAccInit>:

static void sensorAccInit(struct accDev_s *acc) { }
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <sensorAccRead>:

static bool sensorAccRead(struct accDev_s *acc) {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
	if(osSemaphoreAcquire(Sem_LSM303AGR_AccHandle, 0) == osOK){
 8003f90:	4b26      	ldr	r3, [pc, #152]	; (800402c <sensorAccRead+0xa4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2100      	movs	r1, #0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f00c f932 	bl	8010200 <osSemaphoreAcquire>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d13f      	bne.n	8004022 <sensorAccRead+0x9a>
		if(osSemaphoreAcquire(Sem_LSM6DSL_AccHandle, 0)==osOK){
 8003fa2:	4b23      	ldr	r3, [pc, #140]	; (8004030 <sensorAccRead+0xa8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f00c f929 	bl	8010200 <osSemaphoreAcquire>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d131      	bne.n	8004018 <sensorAccRead+0x90>
			acc->accADC[0] = (VectAcc_LSM303AGR[0]+VectAcc_LSM6DSL[0])/2;
 8003fb4:	4b1f      	ldr	r3, [pc, #124]	; (8004034 <sensorAccRead+0xac>)
 8003fb6:	ed93 7a00 	vldr	s14, [r3]
 8003fba:	4b1f      	ldr	r3, [pc, #124]	; (8004038 <sensorAccRead+0xb0>)
 8003fbc:	edd3 7a00 	vldr	s15, [r3]
 8003fc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fc4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003fc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	edc3 7a04 	vstr	s15, [r3, #16]
			acc->accADC[1] = (VectAcc_LSM303AGR[1]+VectAcc_LSM6DSL[1])/2;
 8003fd2:	4b18      	ldr	r3, [pc, #96]	; (8004034 <sensorAccRead+0xac>)
 8003fd4:	ed93 7a01 	vldr	s14, [r3, #4]
 8003fd8:	4b17      	ldr	r3, [pc, #92]	; (8004038 <sensorAccRead+0xb0>)
 8003fda:	edd3 7a01 	vldr	s15, [r3, #4]
 8003fde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fe2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003fe6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	edc3 7a05 	vstr	s15, [r3, #20]
			acc->accADC[2] = (VectAcc_LSM303AGR[2]+VectAcc_LSM6DSL[2])/2;
 8003ff0:	4b10      	ldr	r3, [pc, #64]	; (8004034 <sensorAccRead+0xac>)
 8003ff2:	ed93 7a02 	vldr	s14, [r3, #8]
 8003ff6:	4b10      	ldr	r3, [pc, #64]	; (8004038 <sensorAccRead+0xb0>)
 8003ff8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004000:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004004:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	edc3 7a06 	vstr	s15, [r3, #24]
			osSemaphoreRelease(Sem_LSM6DSL_AccHandle);
 800400e:	4b08      	ldr	r3, [pc, #32]	; (8004030 <sensorAccRead+0xa8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f00c f95a 	bl	80102cc <osSemaphoreRelease>
		}
		osSemaphoreRelease(Sem_LSM303AGR_AccHandle);
 8004018:	4b04      	ldr	r3, [pc, #16]	; (800402c <sensorAccRead+0xa4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f00c f955 	bl	80102cc <osSemaphoreRelease>
	}
	return true;
 8004022:	2301      	movs	r3, #1
}
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	20001110 	.word	0x20001110
 8004030:	2000110c 	.word	0x2000110c
 8004034:	20001120 	.word	0x20001120
 8004038:	2000112c 	.word	0x2000112c

0800403c <sensorMagInit>:

static void sensorMagInit(struct magDev_s *mag) { }
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <sensorMagRead>:

static bool sensorMagRead(struct magDev_s *mag) {
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
	if(osSemaphoreAcquire(Sem_MagHandle, 0)==osOK){
 8004058:	4b0f      	ldr	r3, [pc, #60]	; (8004098 <sensorMagRead+0x48>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2100      	movs	r1, #0
 800405e:	4618      	mov	r0, r3
 8004060:	f00c f8ce 	bl	8010200 <osSemaphoreAcquire>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d110      	bne.n	800408c <sensorMagRead+0x3c>
		mag->magADC[0] = VectMag[0];
 800406a:	4b0c      	ldr	r3, [pc, #48]	; (800409c <sensorMagRead+0x4c>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	601a      	str	r2, [r3, #0]
		mag->magADC[1] = VectMag[1];
 8004072:	4b0a      	ldr	r3, [pc, #40]	; (800409c <sensorMagRead+0x4c>)
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	605a      	str	r2, [r3, #4]
		mag->magADC[2] = VectMag[2];
 800407a:	4b08      	ldr	r3, [pc, #32]	; (800409c <sensorMagRead+0x4c>)
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	609a      	str	r2, [r3, #8]
		osSemaphoreRelease(Sem_MagHandle);
 8004082:	4b05      	ldr	r3, [pc, #20]	; (8004098 <sensorMagRead+0x48>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f00c f920 	bl	80102cc <osSemaphoreRelease>
	}
	return true;
 800408c:	2301      	movs	r3, #1
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20001114 	.word	0x20001114
 800409c:	2000113c 	.word	0x2000113c

080040a0 <sensorBaroInit>:

static void sensorBaroInit(struct baroDev_s *baro) {
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
	baro->baroADC = 0;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <sensorBaroRead>:

static bool sensorBaroRead(struct baroDev_s *baro) {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
	if(osSemaphoreAcquire(Sem_PressHandle, 0)== osOK){
 80040c4:	4b0e      	ldr	r3, [pc, #56]	; (8004100 <sensorBaroRead+0x44>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2100      	movs	r1, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	f00c f898 	bl	8010200 <osSemaphoreAcquire>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10e      	bne.n	80040f4 <sensorBaroRead+0x38>
		baro->baroADC = VectPress;
 80040d6:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <sensorBaroRead+0x48>)
 80040d8:	edd3 7a00 	vldr	s15, [r3]
 80040dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040e0:	ee17 2a90 	vmov	r2, s15
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		osSemaphoreRelease(Sem_PressHandle);
 80040ea:	4b05      	ldr	r3, [pc, #20]	; (8004100 <sensorBaroRead+0x44>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f00c f8ec 	bl	80102cc <osSemaphoreRelease>
	}
	return true;
 80040f4:	2301      	movs	r3, #1
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	2000111c 	.word	0x2000111c
 8004104:	20001138 	.word	0x20001138

08004108 <startTaskControlMotor>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startTaskControlMotor */
void startTaskControlMotor(void *argument)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	gyroUpdate();
 8004110:	f7fe faca 	bl	80026a8 <gyroUpdate>
	controlMotorUpdate();
 8004114:	f7fc fff0 	bl	80010f8 <controlMotorUpdate>
    osDelay(2);
 8004118:	2002      	movs	r0, #2
 800411a:	f00b ffa7 	bl	801006c <osDelay>
	gyroUpdate();
 800411e:	e7f7      	b.n	8004110 <startTaskControlMotor+0x8>

08004120 <startTaskAttitude>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTaskAttitude */
void startTaskAttitude(void *argument)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTaskAttitude */
  /* Infinite loop */
  for(;;)
  {
    accUpdate();
 8004128:	f7fc fd64 	bl	8000bf4 <accUpdate>
    magUpdate();
 800412c:	f7ff fbc6 	bl	80038bc <magUpdate>
    attitudeUpdate();
 8004130:	f7fc fe44 	bl	8000dbc <attitudeUpdate>
    osDelay(10);
 8004134:	200a      	movs	r0, #10
 8004136:	f00b ff99 	bl	801006c <osDelay>
    accUpdate();
 800413a:	e7f5      	b.n	8004128 <startTaskAttitude+0x8>

0800413c <startTaskAltitude>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTaskAltitude */
void startTaskAltitude(void *argument)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTaskAltitude */
  /* Infinite loop */
  for(;;)
  {
    baroUpdate();
 8004144:	f7fc ff7c 	bl	8001040 <baroUpdate>
    osDelay(25);
 8004148:	2019      	movs	r0, #25
 800414a:	f00b ff8f 	bl	801006c <osDelay>
    baroUpdate();
 800414e:	e7f9      	b.n	8004144 <startTaskAltitude+0x8>

08004150 <StartRecoverAcc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRecoverAcc */
void StartRecoverAcc(void *argument)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRecoverAcc */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreAcquire(Sem_I2CHandle, 0) == osOK){
 8004158:	4b63      	ldr	r3, [pc, #396]	; (80042e8 <StartRecoverAcc+0x198>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2100      	movs	r1, #0
 800415e:	4618      	mov	r0, r3
 8004160:	f00c f84e 	bl	8010200 <osSemaphoreAcquire>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <StartRecoverAcc+0x2e>
		  IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0,MOTION_ACCELERO,&LSM6DSL_Acc);
 800416a:	4a60      	ldr	r2, [pc, #384]	; (80042ec <StartRecoverAcc+0x19c>)
 800416c:	2102      	movs	r1, #2
 800416e:	2000      	movs	r0, #0
 8004170:	f007 fbee 	bl	800b950 <IKS01A2_MOTION_SENSOR_GetAxes>
		  osSemaphoreRelease(Sem_I2CHandle);
 8004174:	4b5c      	ldr	r3, [pc, #368]	; (80042e8 <StartRecoverAcc+0x198>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	f00c f8a7 	bl	80102cc <osSemaphoreRelease>
	  }
	  if(osSemaphoreAcquire(Sem_LSM6DSL_AccHandle, 0) == osOK){
 800417e:	4b5c      	ldr	r3, [pc, #368]	; (80042f0 <StartRecoverAcc+0x1a0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2100      	movs	r1, #0
 8004184:	4618      	mov	r0, r3
 8004186:	f00c f83b 	bl	8010200 <osSemaphoreAcquire>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d143      	bne.n	8004218 <StartRecoverAcc+0xc8>
		  VectAcc_LSM6DSL[0] = (((float)LSM6DSL_Acc.x) / 1000) * 9.81;
 8004190:	4b56      	ldr	r3, [pc, #344]	; (80042ec <StartRecoverAcc+0x19c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	ee07 3a90 	vmov	s15, r3
 8004198:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800419c:	eddf 6a55 	vldr	s13, [pc, #340]	; 80042f4 <StartRecoverAcc+0x1a4>
 80041a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80041a8:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80042e0 <StartRecoverAcc+0x190>
 80041ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80041b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80041b4:	4b50      	ldr	r3, [pc, #320]	; (80042f8 <StartRecoverAcc+0x1a8>)
 80041b6:	edc3 7a00 	vstr	s15, [r3]
		  VectAcc_LSM6DSL[1] = (((float)LSM6DSL_Acc.y) / 1000) * 9.81;
 80041ba:	4b4c      	ldr	r3, [pc, #304]	; (80042ec <StartRecoverAcc+0x19c>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	ee07 3a90 	vmov	s15, r3
 80041c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041c6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80042f4 <StartRecoverAcc+0x1a4>
 80041ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80041d2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80042e0 <StartRecoverAcc+0x190>
 80041d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80041da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80041de:	4b46      	ldr	r3, [pc, #280]	; (80042f8 <StartRecoverAcc+0x1a8>)
 80041e0:	edc3 7a01 	vstr	s15, [r3, #4]
		  VectAcc_LSM6DSL[2] = (((float)LSM6DSL_Acc.z) / 1000) * 9.81;
 80041e4:	4b41      	ldr	r3, [pc, #260]	; (80042ec <StartRecoverAcc+0x19c>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	ee07 3a90 	vmov	s15, r3
 80041ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041f0:	eddf 6a40 	vldr	s13, [pc, #256]	; 80042f4 <StartRecoverAcc+0x1a4>
 80041f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80041fc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80042e0 <StartRecoverAcc+0x190>
 8004200:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004204:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004208:	4b3b      	ldr	r3, [pc, #236]	; (80042f8 <StartRecoverAcc+0x1a8>)
 800420a:	edc3 7a02 	vstr	s15, [r3, #8]
		  osSemaphoreRelease(Sem_LSM6DSL_AccHandle);
 800420e:	4b38      	ldr	r3, [pc, #224]	; (80042f0 <StartRecoverAcc+0x1a0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f00c f85a 	bl	80102cc <osSemaphoreRelease>
	  }

	  if(osSemaphoreAcquire(Sem_I2CHandle, 0) == osOK){
 8004218:	4b33      	ldr	r3, [pc, #204]	; (80042e8 <StartRecoverAcc+0x198>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2100      	movs	r1, #0
 800421e:	4618      	mov	r0, r3
 8004220:	f00b ffee 	bl	8010200 <osSemaphoreAcquire>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <StartRecoverAcc+0xee>
		  IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_ACC_0,MOTION_ACCELERO,&LSM303AGR_Acc);
 800422a:	4a34      	ldr	r2, [pc, #208]	; (80042fc <StartRecoverAcc+0x1ac>)
 800422c:	2102      	movs	r1, #2
 800422e:	2001      	movs	r0, #1
 8004230:	f007 fb8e 	bl	800b950 <IKS01A2_MOTION_SENSOR_GetAxes>
		  osSemaphoreRelease(Sem_I2CHandle);
 8004234:	4b2c      	ldr	r3, [pc, #176]	; (80042e8 <StartRecoverAcc+0x198>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f00c f847 	bl	80102cc <osSemaphoreRelease>
	  }
	  if(osSemaphoreAcquire(Sem_LSM303AGR_AccHandle, 0) == osOK){
 800423e:	4b30      	ldr	r3, [pc, #192]	; (8004300 <StartRecoverAcc+0x1b0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2100      	movs	r1, #0
 8004244:	4618      	mov	r0, r3
 8004246:	f00b ffdb 	bl	8010200 <osSemaphoreAcquire>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d143      	bne.n	80042d8 <StartRecoverAcc+0x188>
		  VectAcc_LSM303AGR[0] = (((float)LSM303AGR_Acc.x )/ 1000) * 9.81;
 8004250:	4b2a      	ldr	r3, [pc, #168]	; (80042fc <StartRecoverAcc+0x1ac>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	ee07 3a90 	vmov	s15, r3
 8004258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800425c:	eddf 6a25 	vldr	s13, [pc, #148]	; 80042f4 <StartRecoverAcc+0x1a4>
 8004260:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004264:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004268:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 80042e0 <StartRecoverAcc+0x190>
 800426c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004270:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004274:	4b23      	ldr	r3, [pc, #140]	; (8004304 <StartRecoverAcc+0x1b4>)
 8004276:	edc3 7a00 	vstr	s15, [r3]
		  VectAcc_LSM303AGR[1] = (((float)LSM303AGR_Acc.y ) / 1000) * 9.81;
 800427a:	4b20      	ldr	r3, [pc, #128]	; (80042fc <StartRecoverAcc+0x1ac>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	ee07 3a90 	vmov	s15, r3
 8004282:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004286:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80042f4 <StartRecoverAcc+0x1a4>
 800428a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800428e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004292:	ed9f 6b13 	vldr	d6, [pc, #76]	; 80042e0 <StartRecoverAcc+0x190>
 8004296:	ee27 7b06 	vmul.f64	d7, d7, d6
 800429a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800429e:	4b19      	ldr	r3, [pc, #100]	; (8004304 <StartRecoverAcc+0x1b4>)
 80042a0:	edc3 7a01 	vstr	s15, [r3, #4]
		  VectAcc_LSM303AGR[2] = (((float)LSM303AGR_Acc.z ) / 1000) * 9.81;
 80042a4:	4b15      	ldr	r3, [pc, #84]	; (80042fc <StartRecoverAcc+0x1ac>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	ee07 3a90 	vmov	s15, r3
 80042ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042b0:	eddf 6a10 	vldr	s13, [pc, #64]	; 80042f4 <StartRecoverAcc+0x1a4>
 80042b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80042bc:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80042e0 <StartRecoverAcc+0x190>
 80042c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80042c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80042c8:	4b0e      	ldr	r3, [pc, #56]	; (8004304 <StartRecoverAcc+0x1b4>)
 80042ca:	edc3 7a02 	vstr	s15, [r3, #8]
		  osSemaphoreRelease(Sem_LSM303AGR_AccHandle);
 80042ce:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <StartRecoverAcc+0x1b0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f00b fffa 	bl	80102cc <osSemaphoreRelease>
	  }

    osDelay(10);
 80042d8:	200a      	movs	r0, #10
 80042da:	f00b fec7 	bl	801006c <osDelay>
	  if(osSemaphoreAcquire(Sem_I2CHandle, 0) == osOK){
 80042de:	e73b      	b.n	8004158 <StartRecoverAcc+0x8>
 80042e0:	51eb851f 	.word	0x51eb851f
 80042e4:	40239eb8 	.word	0x40239eb8
 80042e8:	20001108 	.word	0x20001108
 80042ec:	20001154 	.word	0x20001154
 80042f0:	2000110c 	.word	0x2000110c
 80042f4:	447a0000 	.word	0x447a0000
 80042f8:	2000112c 	.word	0x2000112c
 80042fc:	20001160 	.word	0x20001160
 8004300:	20001110 	.word	0x20001110
 8004304:	20001120 	.word	0x20001120

08004308 <StartRecoverPress>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRecoverPress */
void StartRecoverPress(void *argument)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRecoverPress */
  /* Infinite loop */
  for(;;)
  {
	if(osSemaphoreAcquire(Sem_I2CHandle, 0) == osOK){
 8004310:	4b12      	ldr	r3, [pc, #72]	; (800435c <StartRecoverPress+0x54>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2100      	movs	r1, #0
 8004316:	4618      	mov	r0, r3
 8004318:	f00b ff72 	bl	8010200 <osSemaphoreAcquire>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d117      	bne.n	8004352 <StartRecoverPress+0x4a>
		if(osSemaphoreAcquire(Sem_PressHandle, 0)== osOK){
 8004322:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <StartRecoverPress+0x58>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2100      	movs	r1, #0
 8004328:	4618      	mov	r0, r3
 800432a:	f00b ff69 	bl	8010200 <osSemaphoreAcquire>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d109      	bne.n	8004348 <StartRecoverPress+0x40>
			IKS01A2_ENV_SENSOR_GetValue(IKS01A2_LPS22HB_0,ENV_PRESSURE,&VectPress);
 8004334:	4a0b      	ldr	r2, [pc, #44]	; (8004364 <StartRecoverPress+0x5c>)
 8004336:	2102      	movs	r1, #2
 8004338:	2001      	movs	r0, #1
 800433a:	f007 f811 	bl	800b360 <IKS01A2_ENV_SENSOR_GetValue>
			osSemaphoreRelease(Sem_PressHandle);
 800433e:	4b08      	ldr	r3, [pc, #32]	; (8004360 <StartRecoverPress+0x58>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f00b ffc2 	bl	80102cc <osSemaphoreRelease>
		}
		osSemaphoreRelease(Sem_I2CHandle);
 8004348:	4b04      	ldr	r3, [pc, #16]	; (800435c <StartRecoverPress+0x54>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f00b ffbd 	bl	80102cc <osSemaphoreRelease>
	}
    osDelay(50);
 8004352:	2032      	movs	r0, #50	; 0x32
 8004354:	f00b fe8a 	bl	801006c <osDelay>
	if(osSemaphoreAcquire(Sem_I2CHandle, 0) == osOK){
 8004358:	e7da      	b.n	8004310 <StartRecoverPress+0x8>
 800435a:	bf00      	nop
 800435c:	20001108 	.word	0x20001108
 8004360:	2000111c 	.word	0x2000111c
 8004364:	20001138 	.word	0x20001138

08004368 <StartRecoverMag>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRecoverMag */
void StartRecoverMag(void *argument)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRecoverMag */
  /* Infinite loop */
  for(;;)
  {
	if(osSemaphoreAcquire(Sem_I2CHandle, 0)== osOK){
 8004370:	4b24      	ldr	r3, [pc, #144]	; (8004404 <StartRecoverMag+0x9c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2100      	movs	r1, #0
 8004376:	4618      	mov	r0, r3
 8004378:	f00b ff42 	bl	8010200 <osSemaphoreAcquire>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <StartRecoverMag+0x2e>
		IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0,MOTION_MAGNETO,&LSM303AGR_Mag);
 8004382:	4a21      	ldr	r2, [pc, #132]	; (8004408 <StartRecoverMag+0xa0>)
 8004384:	2104      	movs	r1, #4
 8004386:	2002      	movs	r0, #2
 8004388:	f007 fae2 	bl	800b950 <IKS01A2_MOTION_SENSOR_GetAxes>
		osSemaphoreRelease(Sem_I2CHandle);
 800438c:	4b1d      	ldr	r3, [pc, #116]	; (8004404 <StartRecoverMag+0x9c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f00b ff9b 	bl	80102cc <osSemaphoreRelease>
	}
	if(osSemaphoreAcquire(Sem_MagHandle, 0)== osOK){
 8004396:	4b1d      	ldr	r3, [pc, #116]	; (800440c <StartRecoverMag+0xa4>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2100      	movs	r1, #0
 800439c:	4618      	mov	r0, r3
 800439e:	f00b ff2f 	bl	8010200 <osSemaphoreAcquire>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d128      	bne.n	80043fa <StartRecoverMag+0x92>
		VectMag[0] = LSM303AGR_Mag.x * 100;
 80043a8:	4b17      	ldr	r3, [pc, #92]	; (8004408 <StartRecoverMag+0xa0>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2264      	movs	r2, #100	; 0x64
 80043ae:	fb02 f303 	mul.w	r3, r2, r3
 80043b2:	ee07 3a90 	vmov	s15, r3
 80043b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043ba:	4b15      	ldr	r3, [pc, #84]	; (8004410 <StartRecoverMag+0xa8>)
 80043bc:	edc3 7a00 	vstr	s15, [r3]
		VectMag[1] = LSM303AGR_Mag.y * 100;
 80043c0:	4b11      	ldr	r3, [pc, #68]	; (8004408 <StartRecoverMag+0xa0>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2264      	movs	r2, #100	; 0x64
 80043c6:	fb02 f303 	mul.w	r3, r2, r3
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043d2:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <StartRecoverMag+0xa8>)
 80043d4:	edc3 7a01 	vstr	s15, [r3, #4]
		VectMag[2] = LSM303AGR_Mag.z * 100;
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <StartRecoverMag+0xa0>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2264      	movs	r2, #100	; 0x64
 80043de:	fb02 f303 	mul.w	r3, r2, r3
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043ea:	4b09      	ldr	r3, [pc, #36]	; (8004410 <StartRecoverMag+0xa8>)
 80043ec:	edc3 7a02 	vstr	s15, [r3, #8]
		osSemaphoreRelease(Sem_MagHandle);
 80043f0:	4b06      	ldr	r3, [pc, #24]	; (800440c <StartRecoverMag+0xa4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f00b ff69 	bl	80102cc <osSemaphoreRelease>
	}
    osDelay(100);
 80043fa:	2064      	movs	r0, #100	; 0x64
 80043fc:	f00b fe36 	bl	801006c <osDelay>
	if(osSemaphoreAcquire(Sem_I2CHandle, 0)== osOK){
 8004400:	e7b6      	b.n	8004370 <StartRecoverMag+0x8>
 8004402:	bf00      	nop
 8004404:	20001108 	.word	0x20001108
 8004408:	2000116c 	.word	0x2000116c
 800440c:	20001114 	.word	0x20001114
 8004410:	2000113c 	.word	0x2000113c

08004414 <StartPrintData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrintData */
void StartPrintData(void *argument)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	f5ad 7d6e 	sub.w	sp, sp, #952	; 0x3b8
 800441a:	af04      	add	r7, sp, #16
 800441c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8004420:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8004424:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartPrintData */
  /* Infinite loop */
  for(;;)
  {
	 uint8_t MSG_Gyro[150] = {'\0'};
 8004426:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800442a:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	3304      	adds	r3, #4
 8004434:	2292      	movs	r2, #146	; 0x92
 8004436:	2100      	movs	r1, #0
 8004438:	4618      	mov	r0, r3
 800443a:	f00f f9d8 	bl	80137ee <memset>
	 uint8_t MSG_LSM6DSL_Acc[150] = {'\0'};
 800443e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8004442:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	3304      	adds	r3, #4
 800444c:	2292      	movs	r2, #146	; 0x92
 800444e:	2100      	movs	r1, #0
 8004450:	4618      	mov	r0, r3
 8004452:	f00f f9cc 	bl	80137ee <memset>
	 uint8_t MSG_LSM303AGR_Acc[150] = {'\0'};
 8004456:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800445a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	3304      	adds	r3, #4
 8004464:	2292      	movs	r2, #146	; 0x92
 8004466:	2100      	movs	r1, #0
 8004468:	4618      	mov	r0, r3
 800446a:	f00f f9c0 	bl	80137ee <memset>
	 uint8_t MSG_Mean_Acc[150] = {'\0'};
 800446e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8004472:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	3304      	adds	r3, #4
 800447c:	2292      	movs	r2, #146	; 0x92
 800447e:	2100      	movs	r1, #0
 8004480:	4618      	mov	r0, r3
 8004482:	f00f f9b4 	bl	80137ee <memset>
	 uint8_t MSG_Mag[150] = {'\0'};
 8004486:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800448a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	3304      	adds	r3, #4
 8004494:	2292      	movs	r2, #146	; 0x92
 8004496:	2100      	movs	r1, #0
 8004498:	4618      	mov	r0, r3
 800449a:	f00f f9a8 	bl	80137ee <memset>
	 uint8_t MSG_Press[150] = {'\0'};
 800449e:	2300      	movs	r3, #0
 80044a0:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 80044a4:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80044a8:	2292      	movs	r2, #146	; 0x92
 80044aa:	2100      	movs	r1, #0
 80044ac:	4618      	mov	r0, r3
 80044ae:	f00f f99e 	bl	80137ee <memset>
	if(osSemaphoreAcquire(Sem_PressHandle, 0)== osOK){
		printf("Barometer data  = %.1f in hPa\r\n\n", VectPress);
		osSemaphoreRelease(Sem_PressHandle);
	}
	*/
	  if(osSemaphoreAcquire(Sem_GyroHandle, 0)== osOK){
 80044b2:	4ba3      	ldr	r3, [pc, #652]	; (8004740 <StartPrintData+0x32c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2100      	movs	r1, #0
 80044b8:	4618      	mov	r0, r3
 80044ba:	f00b fea1 	bl	8010200 <osSemaphoreAcquire>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d125      	bne.n	8004510 <StartPrintData+0xfc>
		  sprintf(MSG_Gyro,"Gyroscope tridimensional data  x = %.2f,   y = %.2f,  z= %.2f in rad*sec^-1\r\n", VectGyro[0],VectGyro[1],VectGyro[2]);
 80044c4:	4b9f      	ldr	r3, [pc, #636]	; (8004744 <StartPrintData+0x330>)
 80044c6:	edd3 7a00 	vldr	s15, [r3]
 80044ca:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80044ce:	4b9d      	ldr	r3, [pc, #628]	; (8004744 <StartPrintData+0x330>)
 80044d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80044d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80044d8:	4b9a      	ldr	r3, [pc, #616]	; (8004744 <StartPrintData+0x330>)
 80044da:	edd3 6a02 	vldr	s13, [r3, #8]
 80044de:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80044e2:	f107 000c 	add.w	r0, r7, #12
 80044e6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80044ea:	ed8d 7b00 	vstr	d7, [sp]
 80044ee:	ec53 2b15 	vmov	r2, r3, d5
 80044f2:	4995      	ldr	r1, [pc, #596]	; (8004748 <StartPrintData+0x334>)
 80044f4:	f010 f8e0 	bl	80146b8 <siprintf>
		  HAL_UART_Transmit(&huart3, MSG_Gyro, sizeof(MSG_Gyro), 100);
 80044f8:	f107 010c 	add.w	r1, r7, #12
 80044fc:	2364      	movs	r3, #100	; 0x64
 80044fe:	2296      	movs	r2, #150	; 0x96
 8004500:	4892      	ldr	r0, [pc, #584]	; (800474c <StartPrintData+0x338>)
 8004502:	f00a fd09 	bl	800ef18 <HAL_UART_Transmit>
		  osSemaphoreRelease(Sem_GyroHandle);
 8004506:	4b8e      	ldr	r3, [pc, #568]	; (8004740 <StartPrintData+0x32c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f00b fede 	bl	80102cc <osSemaphoreRelease>
	  }
	  if(osSemaphoreAcquire(Sem_LSM6DSL_AccHandle, 0)== osOK){
 8004510:	4b8f      	ldr	r3, [pc, #572]	; (8004750 <StartPrintData+0x33c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2100      	movs	r1, #0
 8004516:	4618      	mov	r0, r3
 8004518:	f00b fe72 	bl	8010200 <osSemaphoreAcquire>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d125      	bne.n	800456e <StartPrintData+0x15a>
		  sprintf(MSG_LSM6DSL_Acc,"LSM6DSL Accelerometer tridimensional data x = %.2f,   y = %.2f,  z= %.2f  in m*sec^-2\r\n", VectAcc_LSM6DSL[0],VectAcc_LSM6DSL[1],VectAcc_LSM6DSL[2]);
 8004522:	4b8c      	ldr	r3, [pc, #560]	; (8004754 <StartPrintData+0x340>)
 8004524:	edd3 7a00 	vldr	s15, [r3]
 8004528:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800452c:	4b89      	ldr	r3, [pc, #548]	; (8004754 <StartPrintData+0x340>)
 800452e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004532:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004536:	4b87      	ldr	r3, [pc, #540]	; (8004754 <StartPrintData+0x340>)
 8004538:	edd3 6a02 	vldr	s13, [r3, #8]
 800453c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8004540:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8004544:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004548:	ed8d 7b00 	vstr	d7, [sp]
 800454c:	ec53 2b15 	vmov	r2, r3, d5
 8004550:	4981      	ldr	r1, [pc, #516]	; (8004758 <StartPrintData+0x344>)
 8004552:	f010 f8b1 	bl	80146b8 <siprintf>
		  HAL_UART_Transmit(&huart3, MSG_LSM6DSL_Acc, sizeof(MSG_LSM6DSL_Acc), 100);
 8004556:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800455a:	2364      	movs	r3, #100	; 0x64
 800455c:	2296      	movs	r2, #150	; 0x96
 800455e:	487b      	ldr	r0, [pc, #492]	; (800474c <StartPrintData+0x338>)
 8004560:	f00a fcda 	bl	800ef18 <HAL_UART_Transmit>
		  osSemaphoreRelease(Sem_LSM6DSL_AccHandle);
 8004564:	4b7a      	ldr	r3, [pc, #488]	; (8004750 <StartPrintData+0x33c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f00b feaf 	bl	80102cc <osSemaphoreRelease>
	  }
	  if(osSemaphoreAcquire(Sem_LSM303AGR_AccHandle, 0)== osOK){
 800456e:	4b7b      	ldr	r3, [pc, #492]	; (800475c <StartPrintData+0x348>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2100      	movs	r1, #0
 8004574:	4618      	mov	r0, r3
 8004576:	f00b fe43 	bl	8010200 <osSemaphoreAcquire>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d125      	bne.n	80045cc <StartPrintData+0x1b8>
		  sprintf(MSG_LSM303AGR_Acc,"LSM303AGR Accelerometer tridimensional data x = %.2f,    y = %.2f,     z = %.2f  in m*sec^-2\r\n", VectAcc_LSM303AGR[0],VectAcc_LSM303AGR[1],VectAcc_LSM303AGR[2]);
 8004580:	4b77      	ldr	r3, [pc, #476]	; (8004760 <StartPrintData+0x34c>)
 8004582:	edd3 7a00 	vldr	s15, [r3]
 8004586:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800458a:	4b75      	ldr	r3, [pc, #468]	; (8004760 <StartPrintData+0x34c>)
 800458c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004590:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004594:	4b72      	ldr	r3, [pc, #456]	; (8004760 <StartPrintData+0x34c>)
 8004596:	edd3 6a02 	vldr	s13, [r3, #8]
 800459a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800459e:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 80045a2:	ed8d 6b02 	vstr	d6, [sp, #8]
 80045a6:	ed8d 7b00 	vstr	d7, [sp]
 80045aa:	ec53 2b15 	vmov	r2, r3, d5
 80045ae:	496d      	ldr	r1, [pc, #436]	; (8004764 <StartPrintData+0x350>)
 80045b0:	f010 f882 	bl	80146b8 <siprintf>
		  HAL_UART_Transmit(&huart3, MSG_LSM303AGR_Acc, sizeof(MSG_LSM303AGR_Acc), 100);
 80045b4:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 80045b8:	2364      	movs	r3, #100	; 0x64
 80045ba:	2296      	movs	r2, #150	; 0x96
 80045bc:	4863      	ldr	r0, [pc, #396]	; (800474c <StartPrintData+0x338>)
 80045be:	f00a fcab 	bl	800ef18 <HAL_UART_Transmit>
		  osSemaphoreRelease(Sem_LSM303AGR_AccHandle);
 80045c2:	4b66      	ldr	r3, [pc, #408]	; (800475c <StartPrintData+0x348>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f00b fe80 	bl	80102cc <osSemaphoreRelease>
	  }
	  if(osSemaphoreAcquire(Sem_LSM303AGR_AccHandle, 0)== osOK){
 80045cc:	4b63      	ldr	r3, [pc, #396]	; (800475c <StartPrintData+0x348>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f00b fe14 	bl	8010200 <osSemaphoreAcquire>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d15a      	bne.n	8004694 <StartPrintData+0x280>
	  		if(osSemaphoreAcquire(Sem_LSM6DSL_AccHandle, 0)== osOK){
 80045de:	4b5c      	ldr	r3, [pc, #368]	; (8004750 <StartPrintData+0x33c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2100      	movs	r1, #0
 80045e4:	4618      	mov	r0, r3
 80045e6:	f00b fe0b 	bl	8010200 <osSemaphoreAcquire>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d14c      	bne.n	800468a <StartPrintData+0x276>
	  			float variable_append0 = (VectAcc_LSM303AGR[0]+VectAcc_LSM6DSL[0])/2;
 80045f0:	4b5b      	ldr	r3, [pc, #364]	; (8004760 <StartPrintData+0x34c>)
 80045f2:	ed93 7a00 	vldr	s14, [r3]
 80045f6:	4b57      	ldr	r3, [pc, #348]	; (8004754 <StartPrintData+0x340>)
 80045f8:	edd3 7a00 	vldr	s15, [r3]
 80045fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004600:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004604:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004608:	edc7 7ae9 	vstr	s15, [r7, #932]	; 0x3a4
	  			float variable_append1 = (VectAcc_LSM303AGR[1]+VectAcc_LSM6DSL[1])/2;
 800460c:	4b54      	ldr	r3, [pc, #336]	; (8004760 <StartPrintData+0x34c>)
 800460e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004612:	4b50      	ldr	r3, [pc, #320]	; (8004754 <StartPrintData+0x340>)
 8004614:	edd3 7a01 	vldr	s15, [r3, #4]
 8004618:	ee37 7a27 	vadd.f32	s14, s14, s15
 800461c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004620:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004624:	edc7 7ae8 	vstr	s15, [r7, #928]	; 0x3a0
	  			float variable_append2 = (VectAcc_LSM303AGR[2]+VectAcc_LSM6DSL[2])/2;
 8004628:	4b4d      	ldr	r3, [pc, #308]	; (8004760 <StartPrintData+0x34c>)
 800462a:	ed93 7a02 	vldr	s14, [r3, #8]
 800462e:	4b49      	ldr	r3, [pc, #292]	; (8004754 <StartPrintData+0x340>)
 8004630:	edd3 7a02 	vldr	s15, [r3, #8]
 8004634:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004638:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800463c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004640:	edc7 7ae7 	vstr	s15, [r7, #924]	; 0x39c
	  			sprintf(MSG_Mean_Acc,"Mean Accelerometer tridimensional data x = %.2f,   y = %.2f,     z = %.2f  in m*sec^-2\r\n", variable_append0, variable_append1, variable_append2);
 8004644:	edd7 7ae9 	vldr	s15, [r7, #932]	; 0x3a4
 8004648:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800464c:	edd7 7ae8 	vldr	s15, [r7, #928]	; 0x3a0
 8004650:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004654:	edd7 6ae7 	vldr	s13, [r7, #924]	; 0x39c
 8004658:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800465c:	f507 70ea 	add.w	r0, r7, #468	; 0x1d4
 8004660:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004664:	ed8d 7b00 	vstr	d7, [sp]
 8004668:	ec53 2b15 	vmov	r2, r3, d5
 800466c:	493e      	ldr	r1, [pc, #248]	; (8004768 <StartPrintData+0x354>)
 800466e:	f010 f823 	bl	80146b8 <siprintf>
	  			HAL_UART_Transmit(&huart3, MSG_Mean_Acc, sizeof(MSG_Mean_Acc), 100);
 8004672:	f507 71ea 	add.w	r1, r7, #468	; 0x1d4
 8004676:	2364      	movs	r3, #100	; 0x64
 8004678:	2296      	movs	r2, #150	; 0x96
 800467a:	4834      	ldr	r0, [pc, #208]	; (800474c <StartPrintData+0x338>)
 800467c:	f00a fc4c 	bl	800ef18 <HAL_UART_Transmit>
	  			osSemaphoreRelease(Sem_LSM6DSL_AccHandle);
 8004680:	4b33      	ldr	r3, [pc, #204]	; (8004750 <StartPrintData+0x33c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f00b fe21 	bl	80102cc <osSemaphoreRelease>
	  		}
	  		osSemaphoreRelease(Sem_LSM303AGR_AccHandle);
 800468a:	4b34      	ldr	r3, [pc, #208]	; (800475c <StartPrintData+0x348>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f00b fe1c 	bl	80102cc <osSemaphoreRelease>
	  }
	  if(osSemaphoreAcquire(Sem_MagHandle, 0)== osOK){
 8004694:	4b35      	ldr	r3, [pc, #212]	; (800476c <StartPrintData+0x358>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2100      	movs	r1, #0
 800469a:	4618      	mov	r0, r3
 800469c:	f00b fdb0 	bl	8010200 <osSemaphoreAcquire>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d125      	bne.n	80046f2 <StartPrintData+0x2de>
		  sprintf(MSG_Mag,"Magnetometer tridimensional data x = %.2f,   y = %.2f,  z= %.2f in MicroT\r\n", VectMag[0],VectMag[1],VectMag[2]);
 80046a6:	4b32      	ldr	r3, [pc, #200]	; (8004770 <StartPrintData+0x35c>)
 80046a8:	edd3 7a00 	vldr	s15, [r3]
 80046ac:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80046b0:	4b2f      	ldr	r3, [pc, #188]	; (8004770 <StartPrintData+0x35c>)
 80046b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80046b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80046ba:	4b2d      	ldr	r3, [pc, #180]	; (8004770 <StartPrintData+0x35c>)
 80046bc:	edd3 6a02 	vldr	s13, [r3, #8]
 80046c0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80046c4:	f507 701b 	add.w	r0, r7, #620	; 0x26c
 80046c8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80046cc:	ed8d 7b00 	vstr	d7, [sp]
 80046d0:	ec53 2b15 	vmov	r2, r3, d5
 80046d4:	4927      	ldr	r1, [pc, #156]	; (8004774 <StartPrintData+0x360>)
 80046d6:	f00f ffef 	bl	80146b8 <siprintf>
		  HAL_UART_Transmit(&huart3, MSG_Mag, sizeof(MSG_Mag), 100);
 80046da:	f507 711b 	add.w	r1, r7, #620	; 0x26c
 80046de:	2364      	movs	r3, #100	; 0x64
 80046e0:	2296      	movs	r2, #150	; 0x96
 80046e2:	481a      	ldr	r0, [pc, #104]	; (800474c <StartPrintData+0x338>)
 80046e4:	f00a fc18 	bl	800ef18 <HAL_UART_Transmit>
		  osSemaphoreRelease(Sem_MagHandle);
 80046e8:	4b20      	ldr	r3, [pc, #128]	; (800476c <StartPrintData+0x358>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f00b fded 	bl	80102cc <osSemaphoreRelease>
	  }
	  if(osSemaphoreAcquire(Sem_PressHandle, 0)== osOK){
 80046f2:	4b21      	ldr	r3, [pc, #132]	; (8004778 <StartPrintData+0x364>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2100      	movs	r1, #0
 80046f8:	4618      	mov	r0, r3
 80046fa:	f00b fd81 	bl	8010200 <osSemaphoreAcquire>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d117      	bne.n	8004734 <StartPrintData+0x320>
		  sprintf(MSG_Press,"Barometer data  = %.1f in hPa\r\n\n", VectPress);
 8004704:	4b1d      	ldr	r3, [pc, #116]	; (800477c <StartPrintData+0x368>)
 8004706:	edd3 7a00 	vldr	s15, [r3]
 800470a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800470e:	f507 7041 	add.w	r0, r7, #772	; 0x304
 8004712:	ec53 2b17 	vmov	r2, r3, d7
 8004716:	491a      	ldr	r1, [pc, #104]	; (8004780 <StartPrintData+0x36c>)
 8004718:	f00f ffce 	bl	80146b8 <siprintf>
		  HAL_UART_Transmit(&huart3, MSG_Press, sizeof(MSG_Press), 100);
 800471c:	f507 7141 	add.w	r1, r7, #772	; 0x304
 8004720:	2364      	movs	r3, #100	; 0x64
 8004722:	2296      	movs	r2, #150	; 0x96
 8004724:	4809      	ldr	r0, [pc, #36]	; (800474c <StartPrintData+0x338>)
 8004726:	f00a fbf7 	bl	800ef18 <HAL_UART_Transmit>
		  osSemaphoreRelease(Sem_PressHandle);
 800472a:	4b13      	ldr	r3, [pc, #76]	; (8004778 <StartPrintData+0x364>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f00b fdcc 	bl	80102cc <osSemaphoreRelease>
	  }
    osDelay(2000);
 8004734:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004738:	f00b fc98 	bl	801006c <osDelay>
  {
 800473c:	e673      	b.n	8004426 <StartPrintData+0x12>
 800473e:	bf00      	nop
 8004740:	20001118 	.word	0x20001118
 8004744:	20001148 	.word	0x20001148
 8004748:	080182b8 	.word	0x080182b8
 800474c:	20000b58 	.word	0x20000b58
 8004750:	2000110c 	.word	0x2000110c
 8004754:	2000112c 	.word	0x2000112c
 8004758:	08018308 	.word	0x08018308
 800475c:	20001110 	.word	0x20001110
 8004760:	20001120 	.word	0x20001120
 8004764:	08018360 	.word	0x08018360
 8004768:	080183c0 	.word	0x080183c0
 800476c:	20001114 	.word	0x20001114
 8004770:	2000113c 	.word	0x2000113c
 8004774:	0801841c 	.word	0x0801841c
 8004778:	2000111c 	.word	0x2000111c
 800477c:	20001138 	.word	0x20001138
 8004780:	08018468 	.word	0x08018468
 8004784:	00000000 	.word	0x00000000

08004788 <StartRecoverGyro>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRecoverGyro */
void StartRecoverGyro(void *argument)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRecoverGyro */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreAcquire(Sem_I2CHandle, 0)== osOK){
 8004790:	4b35      	ldr	r3, [pc, #212]	; (8004868 <StartRecoverGyro+0xe0>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2100      	movs	r1, #0
 8004796:	4618      	mov	r0, r3
 8004798:	f00b fd32 	bl	8010200 <osSemaphoreAcquire>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d109      	bne.n	80047b6 <StartRecoverGyro+0x2e>
		  IKS01A2_MOTION_SENSOR_GetAxesRaw(IKS01A2_LSM6DSL_0,MOTION_GYRO,&LSM6DSL_Gyro);
 80047a2:	4a32      	ldr	r2, [pc, #200]	; (800486c <StartRecoverGyro+0xe4>)
 80047a4:	2101      	movs	r1, #1
 80047a6:	2000      	movs	r0, #0
 80047a8:	f007 f916 	bl	800b9d8 <IKS01A2_MOTION_SENSOR_GetAxesRaw>
		  osSemaphoreRelease(Sem_I2CHandle);
 80047ac:	4b2e      	ldr	r3, [pc, #184]	; (8004868 <StartRecoverGyro+0xe0>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f00b fd8b 	bl	80102cc <osSemaphoreRelease>
	  }
	  if(osSemaphoreAcquire(Sem_GyroHandle, 0)== osOK){
 80047b6:	4b2e      	ldr	r3, [pc, #184]	; (8004870 <StartRecoverGyro+0xe8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2100      	movs	r1, #0
 80047bc:	4618      	mov	r0, r3
 80047be:	f00b fd1f 	bl	8010200 <osSemaphoreAcquire>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d146      	bne.n	8004856 <StartRecoverGyro+0xce>
		  VectGyro[0] = (((float)LSM6DSL_Gyro.x) * 100) * 0.0175;
 80047c8:	4b28      	ldr	r3, [pc, #160]	; (800486c <StartRecoverGyro+0xe4>)
 80047ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047d6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004874 <StartRecoverGyro+0xec>
 80047da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80047e2:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8004860 <StartRecoverGyro+0xd8>
 80047e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80047ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80047ee:	4b22      	ldr	r3, [pc, #136]	; (8004878 <StartRecoverGyro+0xf0>)
 80047f0:	edc3 7a00 	vstr	s15, [r3]
		  VectGyro[1] = (((float)LSM6DSL_Gyro.y) * 100) * 0.0175;
 80047f4:	4b1d      	ldr	r3, [pc, #116]	; (800486c <StartRecoverGyro+0xe4>)
 80047f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80047fa:	ee07 3a90 	vmov	s15, r3
 80047fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004802:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004874 <StartRecoverGyro+0xec>
 8004806:	ee67 7a87 	vmul.f32	s15, s15, s14
 800480a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800480e:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8004860 <StartRecoverGyro+0xd8>
 8004812:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004816:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800481a:	4b17      	ldr	r3, [pc, #92]	; (8004878 <StartRecoverGyro+0xf0>)
 800481c:	edc3 7a01 	vstr	s15, [r3, #4]
		  VectGyro[2] = (((float)LSM6DSL_Gyro.z) * 100) * 0.0175;
 8004820:	4b12      	ldr	r3, [pc, #72]	; (800486c <StartRecoverGyro+0xe4>)
 8004822:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800482e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004874 <StartRecoverGyro+0xec>
 8004832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004836:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800483a:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8004860 <StartRecoverGyro+0xd8>
 800483e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004842:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004846:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <StartRecoverGyro+0xf0>)
 8004848:	edc3 7a02 	vstr	s15, [r3, #8]
		  osSemaphoreRelease(Sem_GyroHandle);
 800484c:	4b08      	ldr	r3, [pc, #32]	; (8004870 <StartRecoverGyro+0xe8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f00b fd3b 	bl	80102cc <osSemaphoreRelease>
	  }
    osDelay(2);
 8004856:	2002      	movs	r0, #2
 8004858:	f00b fc08 	bl	801006c <osDelay>
	  if(osSemaphoreAcquire(Sem_I2CHandle, 0)== osOK){
 800485c:	e798      	b.n	8004790 <StartRecoverGyro+0x8>
 800485e:	bf00      	nop
 8004860:	1eb851ec 	.word	0x1eb851ec
 8004864:	3f91eb85 	.word	0x3f91eb85
 8004868:	20001108 	.word	0x20001108
 800486c:	20001178 	.word	0x20001178
 8004870:	20001118 	.word	0x20001118
 8004874:	42c80000 	.word	0x42c80000
 8004878:	20001148 	.word	0x20001148

0800487c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a04      	ldr	r2, [pc, #16]	; (800489c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d101      	bne.n	8004892 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800488e:	f007 faf9 	bl	800be84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004892:	bf00      	nop
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40010000 	.word	0x40010000

080048a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048a4:	b672      	cpsid	i
}
 80048a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048a8:	e7fe      	b.n	80048a8 <Error_Handler+0x8>

080048aa <constrain>:
#define DECIDEGREES_TO_RADIANS(angle) ((angle) / 10.0f * 0.0174532925f)
#define DEGREES_TO_DECIDEGREES(angle) ((angle) * 10)
#define DEGREES_TO_RADIANS(angle) ((angle) * 0.0174532925f)

static inline int constrain(int amt, int low, int high)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b085      	sub	sp, #20
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
    if (amt < low)
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	da01      	bge.n	80048c2 <constrain+0x18>
        return low;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	e006      	b.n	80048d0 <constrain+0x26>
    else if (amt > high)
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	dd01      	ble.n	80048ce <constrain+0x24>
        return high;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	e000      	b.n	80048d0 <constrain+0x26>
    else
        return amt;
 80048ce:	68fb      	ldr	r3, [r7, #12]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <constrainf>:

static inline float constrainf(float amt, float low, float high)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80048e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80048ea:	ed87 1a01 	vstr	s2, [r7, #4]
    if (amt < low)
 80048ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80048f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80048f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048fe:	d501      	bpl.n	8004904 <constrainf+0x28>
        return low;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	e00b      	b.n	800491c <constrainf+0x40>
    else if (amt > high)
 8004904:	ed97 7a03 	vldr	s14, [r7, #12]
 8004908:	edd7 7a01 	vldr	s15, [r7, #4]
 800490c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004914:	dd01      	ble.n	800491a <constrainf+0x3e>
        return high;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	e000      	b.n	800491c <constrainf+0x40>
    else
        return amt;
 800491a:	68fb      	ldr	r3, [r7, #12]
}
 800491c:	ee07 3a90 	vmov	s15, r3
 8004920:	eeb0 0a67 	vmov.f32	s0, s15
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <isUsingSticksForArming>:
static float applyActualRates(const int, float, const float);
typedef float (*applyRatesFn)(const int axis, float rcCommandf, const float rcCommandfAbs);
static applyRatesFn applyRates = applyActualRates;

static bool isUsingSticksForArming(void)
{
 800492e:	b480      	push	{r7}
 8004930:	af00      	add	r7, sp, #0
    return true;
 8004932:	2301      	movs	r3, #1
}
 8004934:	4618      	mov	r0, r3
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
	...

08004940 <pidAntiGravityEnabled>:

static bool pidAntiGravityEnabled(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
    return pidRuntime.antiGravityEnabled;
 8004944:	4b03      	ldr	r3, [pc, #12]	; (8004954 <pidAntiGravityEnabled+0x14>)
 8004946:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
}
 800494a:	4618      	mov	r0, r3
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	20001214 	.word	0x20001214

08004958 <pidSetTargetLooptime>:

static void pidSetTargetLooptime(uint32_t pidLooptime)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
    targetPidLooptime = pidLooptime;
 8004960:	4a0f      	ldr	r2, [pc, #60]	; (80049a0 <pidSetTargetLooptime+0x48>)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6013      	str	r3, [r2, #0]
    pidRuntime.dT = targetPidLooptime * 1e-6f;
 8004966:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <pidSetTargetLooptime+0x48>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004972:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80049a4 <pidSetTargetLooptime+0x4c>
 8004976:	ee67 7a87 	vmul.f32	s15, s15, s14
 800497a:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <pidSetTargetLooptime+0x50>)
 800497c:	edc3 7a00 	vstr	s15, [r3]
    pidRuntime.pidFrequency = 1.0f / pidRuntime.dT;
 8004980:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <pidSetTargetLooptime+0x50>)
 8004982:	ed93 7a00 	vldr	s14, [r3]
 8004986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800498a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498e:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <pidSetTargetLooptime+0x50>)
 8004990:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	20001460 	.word	0x20001460
 80049a4:	358637bd 	.word	0x358637bd
 80049a8:	20001214 	.word	0x20001214

080049ac <pidInitFilters>:

static void pidInitFilters(const pidProfile_t *pidProfile)
{
 80049ac:	b590      	push	{r4, r7, lr}
 80049ae:	b091      	sub	sp, #68	; 0x44
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
    if (targetPidLooptime == 0) {
 80049b4:	4bb0      	ldr	r3, [pc, #704]	; (8004c78 <pidInitFilters+0x2cc>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10f      	bne.n	80049dc <pidInitFilters+0x30>
        // no looptime set, so set all the filters to null
        pidRuntime.dtermNotchApplyFn = nullFilterApply;
 80049bc:	4baf      	ldr	r3, [pc, #700]	; (8004c7c <pidInitFilters+0x2d0>)
 80049be:	4ab0      	ldr	r2, [pc, #704]	; (8004c80 <pidInitFilters+0x2d4>)
 80049c0:	619a      	str	r2, [r3, #24]
        pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 80049c2:	4bae      	ldr	r3, [pc, #696]	; (8004c7c <pidInitFilters+0x2d0>)
 80049c4:	4aae      	ldr	r2, [pc, #696]	; (8004c80 <pidInitFilters+0x2d4>)
 80049c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        pidRuntime.dtermLowpass2ApplyFn = nullFilterApply;
 80049ca:	4bac      	ldr	r3, [pc, #688]	; (8004c7c <pidInitFilters+0x2d0>)
 80049cc:	4aac      	ldr	r2, [pc, #688]	; (8004c80 <pidInitFilters+0x2d4>)
 80049ce:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        pidRuntime.ptermYawLowpassApplyFn = nullFilterApply;
 80049d2:	4baa      	ldr	r3, [pc, #680]	; (8004c7c <pidInitFilters+0x2d0>)
 80049d4:	4aaa      	ldr	r2, [pc, #680]	; (8004c80 <pidInitFilters+0x2d4>)
 80049d6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        return;
 80049da:	e267      	b.n	8004eac <pidInitFilters+0x500>
    }

    const uint32_t pidFrequencyNyquist = pidRuntime.pidFrequency / 2; // No rounding needed
 80049dc:	4ba7      	ldr	r3, [pc, #668]	; (8004c7c <pidInitFilters+0x2d0>)
 80049de:	ed93 7a01 	vldr	s14, [r3, #4]
 80049e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80049e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ee:	ee17 3a90 	vmov	r3, s15
 80049f2:	617b      	str	r3, [r7, #20]

    uint16_t dTermNotchHz;
    if (pidProfile->dterm_notch_hz <= pidFrequencyNyquist) {
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	889b      	ldrh	r3, [r3, #4]
 80049f8:	461a      	mov	r2, r3
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d303      	bcc.n	8004a08 <pidInitFilters+0x5c>
        dTermNotchHz = pidProfile->dterm_notch_hz;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	889b      	ldrh	r3, [r3, #4]
 8004a04:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004a06:	e00a      	b.n	8004a1e <pidInitFilters+0x72>
    } else {
        if (pidProfile->dterm_notch_cutoff < pidFrequencyNyquist) {
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	88db      	ldrh	r3, [r3, #6]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d902      	bls.n	8004a1a <pidInitFilters+0x6e>
            dTermNotchHz = pidFrequencyNyquist;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004a18:	e001      	b.n	8004a1e <pidInitFilters+0x72>
        } else {
            dTermNotchHz = 0;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        }
    }

    if (dTermNotchHz != 0 && pidProfile->dterm_notch_cutoff != 0) {
 8004a1e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d03d      	beq.n	8004aa0 <pidInitFilters+0xf4>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	88db      	ldrh	r3, [r3, #6]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d039      	beq.n	8004aa0 <pidInitFilters+0xf4>
        pidRuntime.dtermNotchApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8004a2c:	4b93      	ldr	r3, [pc, #588]	; (8004c7c <pidInitFilters+0x2d0>)
 8004a2e:	4a95      	ldr	r2, [pc, #596]	; (8004c84 <pidInitFilters+0x2d8>)
 8004a30:	619a      	str	r2, [r3, #24]
        const float notchQ = filterGetNotchQ(dTermNotchHz, pidProfile->dterm_notch_cutoff);
 8004a32:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a34:	ee07 3a90 	vmov	s15, r3
 8004a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	88db      	ldrh	r3, [r3, #6]
 8004a40:	ee07 3a10 	vmov	s14, r3
 8004a44:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a48:	eef0 0a47 	vmov.f32	s1, s14
 8004a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8004a50:	f7fc fb5c 	bl	800110c <filterGetNotchQ>
 8004a54:	ed87 0a04 	vstr	s0, [r7, #16]
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004a58:	2300      	movs	r3, #0
 8004a5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a5c:	e01c      	b.n	8004a98 <pidInitFilters+0xec>
            biquadFilterInit(&pidRuntime.dtermNotch[axis], dTermNotchHz, targetPidLooptime, notchQ, FILTER_NOTCH, 1.0f);
 8004a5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	3318      	adds	r3, #24
 8004a6a:	4a84      	ldr	r2, [pc, #528]	; (8004c7c <pidInitFilters+0x2d0>)
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3304      	adds	r3, #4
 8004a70:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004a72:	ee07 2a90 	vmov	s15, r2
 8004a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7a:	4a7f      	ldr	r2, [pc, #508]	; (8004c78 <pidInitFilters+0x2cc>)
 8004a7c:	6811      	ldr	r1, [r2, #0]
 8004a7e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004a82:	2201      	movs	r2, #1
 8004a84:	edd7 0a04 	vldr	s1, [r7, #16]
 8004a88:	eeb0 0a67 	vmov.f32	s0, s15
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fc fbcf 	bl	8001230 <biquadFilterInit>
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	3301      	adds	r3, #1
 8004a96:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	dddf      	ble.n	8004a5e <pidInitFilters+0xb2>
    if (dTermNotchHz != 0 && pidProfile->dterm_notch_cutoff != 0) {
 8004a9e:	e002      	b.n	8004aa6 <pidInitFilters+0xfa>
        }
    } else {
        pidRuntime.dtermNotchApplyFn = nullFilterApply;
 8004aa0:	4b76      	ldr	r3, [pc, #472]	; (8004c7c <pidInitFilters+0x2d0>)
 8004aa2:	4a77      	ldr	r2, [pc, #476]	; (8004c80 <pidInitFilters+0x2d4>)
 8004aa4:	619a      	str	r2, [r3, #24]
    }

    //1st Dterm Lowpass Filter
    uint16_t dterm_lpf1_init_hz = pidProfile->dterm_lpf1_static_hz;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	885b      	ldrh	r3, [r3, #2]
 8004aaa:	81fb      	strh	r3, [r7, #14]

    if (dterm_lpf1_init_hz > 0) {
 8004aac:	89fb      	ldrh	r3, [r7, #14]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 80c6 	beq.w	8004c40 <pidInitFilters+0x294>
        switch (pidProfile->dterm_lpf1_type) {
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	f200 80bb 	bhi.w	8004c36 <pidInitFilters+0x28a>
 8004ac0:	a201      	add	r2, pc, #4	; (adr r2, 8004ac8 <pidInitFilters+0x11c>)
 8004ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac6:	bf00      	nop
 8004ac8:	08004ad9 	.word	0x08004ad9
 8004acc:	08004b2f 	.word	0x08004b2f
 8004ad0:	08004b8b 	.word	0x08004b8b
 8004ad4:	08004be1 	.word	0x08004be1
        case FILTER_PT1:
            pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)pt1FilterApply;
 8004ad8:	4b68      	ldr	r3, [pc, #416]	; (8004c7c <pidInitFilters+0x2d0>)
 8004ada:	4a6b      	ldr	r2, [pc, #428]	; (8004c88 <pidInitFilters+0x2dc>)
 8004adc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ae4:	e01f      	b.n	8004b26 <pidInitFilters+0x17a>
                pt1FilterInit(&pidRuntime.dtermLowpass[axis].pt1Filter, pt1FilterGain(dterm_lpf1_init_hz, pidRuntime.dT));
 8004ae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	3398      	adds	r3, #152	; 0x98
 8004af2:	4a62      	ldr	r2, [pc, #392]	; (8004c7c <pidInitFilters+0x2d0>)
 8004af4:	189c      	adds	r4, r3, r2
 8004af6:	89fb      	ldrh	r3, [r7, #14]
 8004af8:	ee07 3a90 	vmov	s15, r3
 8004afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b00:	4b5e      	ldr	r3, [pc, #376]	; (8004c7c <pidInitFilters+0x2d0>)
 8004b02:	ed93 7a00 	vldr	s14, [r3]
 8004b06:	eef0 0a47 	vmov.f32	s1, s14
 8004b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b0e:	f7fc fb2f 	bl	8001170 <pt1FilterGain>
 8004b12:	eef0 7a40 	vmov.f32	s15, s0
 8004b16:	eeb0 0a67 	vmov.f32	s0, s15
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	f7fc fb50 	bl	80011c0 <pt1FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b22:	3301      	adds	r3, #1
 8004b24:	637b      	str	r3, [r7, #52]	; 0x34
 8004b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	dddc      	ble.n	8004ae6 <pidInitFilters+0x13a>
            }
            break;
 8004b2c:	e08c      	b.n	8004c48 <pidInitFilters+0x29c>
        case FILTER_BIQUAD:
            if (pidProfile->dterm_lpf1_static_hz < pidFrequencyNyquist) {
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	885b      	ldrh	r3, [r3, #2]
 8004b32:	461a      	mov	r2, r3
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d922      	bls.n	8004b80 <pidInitFilters+0x1d4>
                pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8004b3a:	4b50      	ldr	r3, [pc, #320]	; (8004c7c <pidInitFilters+0x2d0>)
 8004b3c:	4a51      	ldr	r2, [pc, #324]	; (8004c84 <pidInitFilters+0x2d8>)
 8004b3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004b42:	2300      	movs	r3, #0
 8004b44:	633b      	str	r3, [r7, #48]	; 0x30
 8004b46:	e017      	b.n	8004b78 <pidInitFilters+0x1cc>
                    biquadFilterInitLPF(&pidRuntime.dtermLowpass[axis].biquadFilter, dterm_lpf1_init_hz, targetPidLooptime);
 8004b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	3398      	adds	r3, #152	; 0x98
 8004b54:	4a49      	ldr	r2, [pc, #292]	; (8004c7c <pidInitFilters+0x2d0>)
 8004b56:	4413      	add	r3, r2
 8004b58:	89fa      	ldrh	r2, [r7, #14]
 8004b5a:	ee07 2a90 	vmov	s15, r2
 8004b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b62:	4a45      	ldr	r2, [pc, #276]	; (8004c78 <pidInitFilters+0x2cc>)
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	4611      	mov	r1, r2
 8004b68:	eeb0 0a67 	vmov.f32	s0, s15
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fc fb8d 	bl	800128c <biquadFilterInitLPF>
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	3301      	adds	r3, #1
 8004b76:	633b      	str	r3, [r7, #48]	; 0x30
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	dde4      	ble.n	8004b48 <pidInitFilters+0x19c>
                }
            } else {
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
            }
            break;
 8004b7e:	e063      	b.n	8004c48 <pidInitFilters+0x29c>
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8004b80:	4b3e      	ldr	r3, [pc, #248]	; (8004c7c <pidInitFilters+0x2d0>)
 8004b82:	4a3f      	ldr	r2, [pc, #252]	; (8004c80 <pidInitFilters+0x2d4>)
 8004b84:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 8004b88:	e05e      	b.n	8004c48 <pidInitFilters+0x29c>
        case FILTER_PT2:
            pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)pt2FilterApply;
 8004b8a:	4b3c      	ldr	r3, [pc, #240]	; (8004c7c <pidInitFilters+0x2d0>)
 8004b8c:	4a3f      	ldr	r2, [pc, #252]	; (8004c8c <pidInitFilters+0x2e0>)
 8004b8e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004b92:	2300      	movs	r3, #0
 8004b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b96:	e01f      	b.n	8004bd8 <pidInitFilters+0x22c>
                pt2FilterInit(&pidRuntime.dtermLowpass[axis].pt2Filter, pt2FilterGain(dterm_lpf1_init_hz, pidRuntime.dT));
 8004b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	3398      	adds	r3, #152	; 0x98
 8004ba4:	4a35      	ldr	r2, [pc, #212]	; (8004c7c <pidInitFilters+0x2d0>)
 8004ba6:	189c      	adds	r4, r3, r2
 8004ba8:	89fb      	ldrh	r3, [r7, #14]
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb2:	4b32      	ldr	r3, [pc, #200]	; (8004c7c <pidInitFilters+0x2d0>)
 8004bb4:	ed93 7a00 	vldr	s14, [r3]
 8004bb8:	eef0 0a47 	vmov.f32	s1, s14
 8004bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8004bc0:	f7fc fcb6 	bl	8001530 <pt2FilterGain>
 8004bc4:	eef0 7a40 	vmov.f32	s15, s0
 8004bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8004bcc:	4620      	mov	r0, r4
 8004bce:	f7fc fcfd 	bl	80015cc <pt2FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	dddc      	ble.n	8004b98 <pidInitFilters+0x1ec>
            }
            break;
 8004bde:	e033      	b.n	8004c48 <pidInitFilters+0x29c>
        case FILTER_PT3:
            pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)pt3FilterApply;
 8004be0:	4b26      	ldr	r3, [pc, #152]	; (8004c7c <pidInitFilters+0x2d0>)
 8004be2:	4a2b      	ldr	r2, [pc, #172]	; (8004c90 <pidInitFilters+0x2e4>)
 8004be4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004be8:	2300      	movs	r3, #0
 8004bea:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bec:	e01f      	b.n	8004c2e <pidInitFilters+0x282>
                pt3FilterInit(&pidRuntime.dtermLowpass[axis].pt3Filter, pt3FilterGain(dterm_lpf1_init_hz, pidRuntime.dT));
 8004bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	3398      	adds	r3, #152	; 0x98
 8004bfa:	4a20      	ldr	r2, [pc, #128]	; (8004c7c <pidInitFilters+0x2d0>)
 8004bfc:	189c      	adds	r4, r3, r2
 8004bfe:	89fb      	ldrh	r3, [r7, #14]
 8004c00:	ee07 3a90 	vmov	s15, r3
 8004c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c08:	4b1c      	ldr	r3, [pc, #112]	; (8004c7c <pidInitFilters+0x2d0>)
 8004c0a:	ed93 7a00 	vldr	s14, [r3]
 8004c0e:	eef0 0a47 	vmov.f32	s1, s14
 8004c12:	eeb0 0a67 	vmov.f32	s0, s15
 8004c16:	f7fc fd2b 	bl	8001670 <pt3FilterGain>
 8004c1a:	eef0 7a40 	vmov.f32	s15, s0
 8004c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8004c22:	4620      	mov	r0, r4
 8004c24:	f7fc fd72 	bl	800170c <pt3FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	dddc      	ble.n	8004bee <pidInitFilters+0x242>
            }
            break;
 8004c34:	e008      	b.n	8004c48 <pidInitFilters+0x29c>
        default:
            pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8004c36:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <pidInitFilters+0x2d0>)
 8004c38:	4a11      	ldr	r2, [pc, #68]	; (8004c80 <pidInitFilters+0x2d4>)
 8004c3a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 8004c3e:	e003      	b.n	8004c48 <pidInitFilters+0x29c>
        }
    } else {
        pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8004c40:	4b0e      	ldr	r3, [pc, #56]	; (8004c7c <pidInitFilters+0x2d0>)
 8004c42:	4a0f      	ldr	r2, [pc, #60]	; (8004c80 <pidInitFilters+0x2d4>)
 8004c44:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    //2nd Dterm Lowpass Filter
    if (pidProfile->dterm_lpf2_static_hz > 0) {
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80e5 	beq.w	8004e1e <pidInitFilters+0x472>
        switch (pidProfile->dterm_lpf2_type) {
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	f200 80da 	bhi.w	8004e14 <pidInitFilters+0x468>
 8004c60:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <pidInitFilters+0x2bc>)
 8004c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c66:	bf00      	nop
 8004c68:	08004c95 	.word	0x08004c95
 8004c6c:	08004cf3 	.word	0x08004cf3
 8004c70:	08004d59 	.word	0x08004d59
 8004c74:	08004db7 	.word	0x08004db7
 8004c78:	20001460 	.word	0x20001460
 8004c7c:	20001214 	.word	0x20001214
 8004c80:	08001151 	.word	0x08001151
 8004c84:	080012bd 	.word	0x080012bd
 8004c88:	080011e7 	.word	0x080011e7
 8004c8c:	080015fb 	.word	0x080015fb
 8004c90:	08001743 	.word	0x08001743
        case FILTER_PT1:
            pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)pt1FilterApply;
 8004c94:	4b87      	ldr	r3, [pc, #540]	; (8004eb4 <pidInitFilters+0x508>)
 8004c96:	4a88      	ldr	r2, [pc, #544]	; (8004eb8 <pidInitFilters+0x50c>)
 8004c98:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca0:	e023      	b.n	8004cea <pidInitFilters+0x33e>
                pt1FilterInit(&pidRuntime.dtermLowpass2[axis].pt1Filter, pt1FilterGain(pidProfile->dterm_lpf2_static_hz, pidRuntime.dT));
 8004ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004cb0:	4a80      	ldr	r2, [pc, #512]	; (8004eb4 <pidInitFilters+0x508>)
 8004cb2:	4413      	add	r3, r2
 8004cb4:	1d1c      	adds	r4, r3, #4
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004cbc:	ee07 3a90 	vmov	s15, r3
 8004cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc4:	4b7b      	ldr	r3, [pc, #492]	; (8004eb4 <pidInitFilters+0x508>)
 8004cc6:	ed93 7a00 	vldr	s14, [r3]
 8004cca:	eef0 0a47 	vmov.f32	s1, s14
 8004cce:	eeb0 0a67 	vmov.f32	s0, s15
 8004cd2:	f7fc fa4d 	bl	8001170 <pt1FilterGain>
 8004cd6:	eef0 7a40 	vmov.f32	s15, s0
 8004cda:	eeb0 0a67 	vmov.f32	s0, s15
 8004cde:	4620      	mov	r0, r4
 8004ce0:	f7fc fa6e 	bl	80011c0 <pt1FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	ddd8      	ble.n	8004ca2 <pidInitFilters+0x2f6>
            }
            break;
 8004cf0:	e099      	b.n	8004e26 <pidInitFilters+0x47a>
        case FILTER_BIQUAD:
            if (pidProfile->dterm_lpf2_static_hz < pidFrequencyNyquist) {
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d926      	bls.n	8004d4e <pidInitFilters+0x3a2>
                pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8004d00:	4b6c      	ldr	r3, [pc, #432]	; (8004eb4 <pidInitFilters+0x508>)
 8004d02:	4a6e      	ldr	r2, [pc, #440]	; (8004ebc <pidInitFilters+0x510>)
 8004d04:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004d08:	2300      	movs	r3, #0
 8004d0a:	623b      	str	r3, [r7, #32]
 8004d0c:	e01b      	b.n	8004d46 <pidInitFilters+0x39a>
                    biquadFilterInitLPF(&pidRuntime.dtermLowpass2[axis].biquadFilter, pidProfile->dterm_lpf2_static_hz, targetPidLooptime);
 8004d0e:	6a3a      	ldr	r2, [r7, #32]
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004d1c:	4a65      	ldr	r2, [pc, #404]	; (8004eb4 <pidInitFilters+0x508>)
 8004d1e:	4413      	add	r3, r2
 8004d20:	1d1a      	adds	r2, r3, #4
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004d28:	ee07 3a90 	vmov	s15, r3
 8004d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d30:	4b63      	ldr	r3, [pc, #396]	; (8004ec0 <pidInitFilters+0x514>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4619      	mov	r1, r3
 8004d36:	eeb0 0a67 	vmov.f32	s0, s15
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	f7fc faa6 	bl	800128c <biquadFilterInitLPF>
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	3301      	adds	r3, #1
 8004d44:	623b      	str	r3, [r7, #32]
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	dde0      	ble.n	8004d0e <pidInitFilters+0x362>
                }
            } else {
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
            }
            break;
 8004d4c:	e06b      	b.n	8004e26 <pidInitFilters+0x47a>
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8004d4e:	4b59      	ldr	r3, [pc, #356]	; (8004eb4 <pidInitFilters+0x508>)
 8004d50:	4a5c      	ldr	r2, [pc, #368]	; (8004ec4 <pidInitFilters+0x518>)
 8004d52:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 8004d56:	e066      	b.n	8004e26 <pidInitFilters+0x47a>
        case FILTER_PT2:
            pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)pt2FilterApply;
 8004d58:	4b56      	ldr	r3, [pc, #344]	; (8004eb4 <pidInitFilters+0x508>)
 8004d5a:	4a5b      	ldr	r2, [pc, #364]	; (8004ec8 <pidInitFilters+0x51c>)
 8004d5c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004d60:	2300      	movs	r3, #0
 8004d62:	61fb      	str	r3, [r7, #28]
 8004d64:	e023      	b.n	8004dae <pidInitFilters+0x402>
                pt2FilterInit(&pidRuntime.dtermLowpass2[axis].pt2Filter, pt2FilterGain(pidProfile->dterm_lpf2_static_hz, pidRuntime.dT));
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004d74:	4a4f      	ldr	r2, [pc, #316]	; (8004eb4 <pidInitFilters+0x508>)
 8004d76:	4413      	add	r3, r2
 8004d78:	1d1c      	adds	r4, r3, #4
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004d80:	ee07 3a90 	vmov	s15, r3
 8004d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d88:	4b4a      	ldr	r3, [pc, #296]	; (8004eb4 <pidInitFilters+0x508>)
 8004d8a:	ed93 7a00 	vldr	s14, [r3]
 8004d8e:	eef0 0a47 	vmov.f32	s1, s14
 8004d92:	eeb0 0a67 	vmov.f32	s0, s15
 8004d96:	f7fc fbcb 	bl	8001530 <pt2FilterGain>
 8004d9a:	eef0 7a40 	vmov.f32	s15, s0
 8004d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8004da2:	4620      	mov	r0, r4
 8004da4:	f7fc fc12 	bl	80015cc <pt2FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	3301      	adds	r3, #1
 8004dac:	61fb      	str	r3, [r7, #28]
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	ddd8      	ble.n	8004d66 <pidInitFilters+0x3ba>
            }
            break;
 8004db4:	e037      	b.n	8004e26 <pidInitFilters+0x47a>
        case FILTER_PT3:
            pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)pt3FilterApply;
 8004db6:	4b3f      	ldr	r3, [pc, #252]	; (8004eb4 <pidInitFilters+0x508>)
 8004db8:	4a44      	ldr	r2, [pc, #272]	; (8004ecc <pidInitFilters+0x520>)
 8004dba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61bb      	str	r3, [r7, #24]
 8004dc2:	e023      	b.n	8004e0c <pidInitFilters+0x460>
                pt3FilterInit(&pidRuntime.dtermLowpass2[axis].pt3Filter, pt3FilterGain(pidProfile->dterm_lpf2_static_hz, pidRuntime.dT));
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004dd2:	4a38      	ldr	r2, [pc, #224]	; (8004eb4 <pidInitFilters+0x508>)
 8004dd4:	4413      	add	r3, r2
 8004dd6:	1d1c      	adds	r4, r3, #4
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de6:	4b33      	ldr	r3, [pc, #204]	; (8004eb4 <pidInitFilters+0x508>)
 8004de8:	ed93 7a00 	vldr	s14, [r3]
 8004dec:	eef0 0a47 	vmov.f32	s1, s14
 8004df0:	eeb0 0a67 	vmov.f32	s0, s15
 8004df4:	f7fc fc3c 	bl	8001670 <pt3FilterGain>
 8004df8:	eef0 7a40 	vmov.f32	s15, s0
 8004dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8004e00:	4620      	mov	r0, r4
 8004e02:	f7fc fc83 	bl	800170c <pt3FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	61bb      	str	r3, [r7, #24]
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	ddd8      	ble.n	8004dc4 <pidInitFilters+0x418>
            }
            break;
 8004e12:	e008      	b.n	8004e26 <pidInitFilters+0x47a>
        default:
            pidRuntime.dtermLowpass2ApplyFn = nullFilterApply;
 8004e14:	4b27      	ldr	r3, [pc, #156]	; (8004eb4 <pidInitFilters+0x508>)
 8004e16:	4a2b      	ldr	r2, [pc, #172]	; (8004ec4 <pidInitFilters+0x518>)
 8004e18:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            break;
 8004e1c:	e003      	b.n	8004e26 <pidInitFilters+0x47a>
        }
    } else {
        pidRuntime.dtermLowpass2ApplyFn = nullFilterApply;
 8004e1e:	4b25      	ldr	r3, [pc, #148]	; (8004eb4 <pidInitFilters+0x508>)
 8004e20:	4a28      	ldr	r2, [pc, #160]	; (8004ec4 <pidInitFilters+0x518>)
 8004e22:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    }

    if (pidProfile->yaw_lowpass_hz == 0) {
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d104      	bne.n	8004e38 <pidInitFilters+0x48c>
        pidRuntime.ptermYawLowpassApplyFn = nullFilterApply;
 8004e2e:	4b21      	ldr	r3, [pc, #132]	; (8004eb4 <pidInitFilters+0x508>)
 8004e30:	4a24      	ldr	r2, [pc, #144]	; (8004ec4 <pidInitFilters+0x518>)
 8004e32:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 8004e36:	e019      	b.n	8004e6c <pidInitFilters+0x4c0>
    } else {
        pidRuntime.ptermYawLowpassApplyFn = (filterApplyFnPtr)pt1FilterApply;
 8004e38:	4b1e      	ldr	r3, [pc, #120]	; (8004eb4 <pidInitFilters+0x508>)
 8004e3a:	4a1f      	ldr	r2, [pc, #124]	; (8004eb8 <pidInitFilters+0x50c>)
 8004e3c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        pt1FilterInit(&pidRuntime.ptermYawLowpass, pt1FilterGain(pidProfile->yaw_lowpass_hz, pidRuntime.dT));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	ee07 3a90 	vmov	s15, r3
 8004e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4c:	4b19      	ldr	r3, [pc, #100]	; (8004eb4 <pidInitFilters+0x508>)
 8004e4e:	ed93 7a00 	vldr	s14, [r3]
 8004e52:	eef0 0a47 	vmov.f32	s1, s14
 8004e56:	eeb0 0a67 	vmov.f32	s0, s15
 8004e5a:	f7fc f989 	bl	8001170 <pt1FilterGain>
 8004e5e:	eef0 7a40 	vmov.f32	s15, s0
 8004e62:	eeb0 0a67 	vmov.f32	s0, s15
 8004e66:	481a      	ldr	r0, [pc, #104]	; (8004ed0 <pidInitFilters+0x524>)
 8004e68:	f7fc f9aa 	bl	80011c0 <pt1FilterInit>
    }

    pt1FilterInit(&pidRuntime.antiGravityThrottleLpf, pt1FilterGain(ANTI_GRAVITY_THROTTLE_FILTER_CUTOFF, pidRuntime.dT));
 8004e6c:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <pidInitFilters+0x508>)
 8004e6e:	edd3 7a00 	vldr	s15, [r3]
 8004e72:	eef0 0a67 	vmov.f32	s1, s15
 8004e76:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8004e7a:	f7fc f979 	bl	8001170 <pt1FilterGain>
 8004e7e:	eef0 7a40 	vmov.f32	s15, s0
 8004e82:	eeb0 0a67 	vmov.f32	s0, s15
 8004e86:	4813      	ldr	r0, [pc, #76]	; (8004ed4 <pidInitFilters+0x528>)
 8004e88:	f7fc f99a 	bl	80011c0 <pt1FilterInit>
    pt1FilterInit(&pidRuntime.antiGravitySmoothLpf, pt1FilterGain(ANTI_GRAVITY_SMOOTH_FILTER_CUTOFF, pidRuntime.dT));
 8004e8c:	4b09      	ldr	r3, [pc, #36]	; (8004eb4 <pidInitFilters+0x508>)
 8004e8e:	edd3 7a00 	vldr	s15, [r3]
 8004e92:	eef0 0a67 	vmov.f32	s1, s15
 8004e96:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004e9a:	f7fc f969 	bl	8001170 <pt1FilterGain>
 8004e9e:	eef0 7a40 	vmov.f32	s15, s0
 8004ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ea6:	480c      	ldr	r0, [pc, #48]	; (8004ed8 <pidInitFilters+0x52c>)
 8004ea8:	f7fc f98a 	bl	80011c0 <pt1FilterInit>
}
 8004eac:	3744      	adds	r7, #68	; 0x44
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd90      	pop	{r4, r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20001214 	.word	0x20001214
 8004eb8:	080011e7 	.word	0x080011e7
 8004ebc:	080012bd 	.word	0x080012bd
 8004ec0:	20001460 	.word	0x20001460
 8004ec4:	08001151 	.word	0x08001151
 8004ec8:	080015fb 	.word	0x080015fb
 8004ecc:	08001743 	.word	0x08001743
 8004ed0:	200013a4 	.word	0x200013a4
 8004ed4:	200013b0 	.word	0x200013b0
 8004ed8:	200013b8 	.word	0x200013b8

08004edc <pidInitConfig>:

static void pidInitConfig(const pidProfile_t *pidProfile)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
    for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	e069      	b.n	8004fbe <pidInitConfig+0xe2>
        pidRuntime.pidCoefficient[axis].Kp = PTERM_SCALE * pidProfile->pid[axis].P;
 8004eea:	6879      	ldr	r1, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	4413      	add	r3, r2
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	440b      	add	r3, r1
 8004ef8:	3308      	adds	r3, #8
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	ee07 3a90 	vmov	s15, r3
 8004f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f04:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8005238 <pidInitConfig+0x35c>
 8004f08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f0c:	4acb      	ldr	r2, [pc, #812]	; (800523c <pidInitConfig+0x360>)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	331c      	adds	r3, #28
 8004f12:	011b      	lsls	r3, r3, #4
 8004f14:	4413      	add	r3, r2
 8004f16:	edc3 7a00 	vstr	s15, [r3]
        pidRuntime.pidCoefficient[axis].Ki = ITERM_SCALE * pidProfile->pid[axis].I;
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	4413      	add	r3, r2
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	440b      	add	r3, r1
 8004f28:	3309      	adds	r3, #9
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	ee07 3a90 	vmov	s15, r3
 8004f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f34:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8005240 <pidInitConfig+0x364>
 8004f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f3c:	4abf      	ldr	r2, [pc, #764]	; (800523c <pidInitConfig+0x360>)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	331c      	adds	r3, #28
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	4413      	add	r3, r2
 8004f46:	3304      	adds	r3, #4
 8004f48:	edc3 7a00 	vstr	s15, [r3]
        pidRuntime.pidCoefficient[axis].Kd = DTERM_SCALE * pidProfile->pid[axis].D;
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4613      	mov	r3, r2
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	4413      	add	r3, r2
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	440b      	add	r3, r1
 8004f5a:	330a      	adds	r3, #10
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	ee07 3a90 	vmov	s15, r3
 8004f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f66:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8005244 <pidInitConfig+0x368>
 8004f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f6e:	4ab3      	ldr	r2, [pc, #716]	; (800523c <pidInitConfig+0x360>)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004f7a:	edc3 7a00 	vstr	s15, [r3]
        pidRuntime.pidCoefficient[axis].Kf = FEEDFORWARD_SCALE * (pidProfile->pid[axis].F / 100.0f);
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	4613      	mov	r3, r2
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	4413      	add	r3, r2
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	440b      	add	r3, r1
 8004f8c:	330c      	adds	r3, #12
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	ee07 3a90 	vmov	s15, r3
 8004f94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f98:	eddf 6aab 	vldr	s13, [pc, #684]	; 8005248 <pidInitConfig+0x36c>
 8004f9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fa0:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 800524c <pidInitConfig+0x370>
 8004fa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fa8:	4aa4      	ldr	r2, [pc, #656]	; (800523c <pidInitConfig+0x360>)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	011b      	lsls	r3, r3, #4
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8004fb4:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	dd92      	ble.n	8004eea <pidInitConfig+0xe>
    }
    {
        pidRuntime.pidCoefficient[FD_YAW].Ki *= 2.5f;
 8004fc4:	4b9d      	ldr	r3, [pc, #628]	; (800523c <pidInitConfig+0x360>)
 8004fc6:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 8004fca:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8004fce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fd2:	4b9a      	ldr	r3, [pc, #616]	; (800523c <pidInitConfig+0x360>)
 8004fd4:	edc3 7a79 	vstr	s15, [r3, #484]	; 0x1e4
    }
    pidRuntime.levelGain = pidProfile->pid[PID_LEVEL].P / 10.0f;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	7e9b      	ldrb	r3, [r3, #26]
 8004fdc:	ee07 3a90 	vmov	s15, r3
 8004fe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fe4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004fe8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fec:	4b93      	ldr	r3, [pc, #588]	; (800523c <pidInitConfig+0x360>)
 8004fee:	edc3 7a7c 	vstr	s15, [r3, #496]	; 0x1f0
    pidRuntime.horizonGain = pidProfile->pid[PID_LEVEL].I / 10.0f;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	7edb      	ldrb	r3, [r3, #27]
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ffe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005006:	4b8d      	ldr	r3, [pc, #564]	; (800523c <pidInitConfig+0x360>)
 8005008:	edc3 7a7d 	vstr	s15, [r3, #500]	; 0x1f4
    pidRuntime.horizonTransition = (float)pidProfile->pid[PID_LEVEL].D;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	7f1b      	ldrb	r3, [r3, #28]
 8005010:	ee07 3a90 	vmov	s15, r3
 8005014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005018:	4b88      	ldr	r3, [pc, #544]	; (800523c <pidInitConfig+0x360>)
 800501a:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
    pidRuntime.horizonTiltExpertMode = pidProfile->horizon_tilt_expert_mode;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005024:	4b85      	ldr	r3, [pc, #532]	; (800523c <pidInitConfig+0x360>)
 8005026:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
    pidRuntime.horizonCutoffDegrees = (175 - pidProfile->horizon_tilt_effect) * 1.8f;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005030:	f1c3 03af 	rsb	r3, r3, #175	; 0xaf
 8005034:	ee07 3a90 	vmov	s15, r3
 8005038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800503c:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8005250 <pidInitConfig+0x374>
 8005040:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005044:	4b7d      	ldr	r3, [pc, #500]	; (800523c <pidInitConfig+0x360>)
 8005046:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
    pidRuntime.horizonFactorRatio = (100 - pidProfile->horizon_tilt_effect) * 0.01f;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005050:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8005054:	ee07 3a90 	vmov	s15, r3
 8005058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800505c:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8005254 <pidInitConfig+0x378>
 8005060:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005064:	4b75      	ldr	r3, [pc, #468]	; (800523c <pidInitConfig+0x360>)
 8005066:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
    pidRuntime.maxVelocity[FD_ROLL] = pidRuntime.maxVelocity[FD_PITCH] = pidProfile->rateAccelLimit * 100 * pidRuntime.dT;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800506e:	461a      	mov	r2, r3
 8005070:	2364      	movs	r3, #100	; 0x64
 8005072:	fb02 f303 	mul.w	r3, r2, r3
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800507e:	4b6f      	ldr	r3, [pc, #444]	; (800523c <pidInitConfig+0x360>)
 8005080:	edd3 7a00 	vldr	s15, [r3]
 8005084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005088:	4b6c      	ldr	r3, [pc, #432]	; (800523c <pidInitConfig+0x360>)
 800508a:	edc3 7a83 	vstr	s15, [r3, #524]	; 0x20c
 800508e:	4b6b      	ldr	r3, [pc, #428]	; (800523c <pidInitConfig+0x360>)
 8005090:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005094:	4a69      	ldr	r2, [pc, #420]	; (800523c <pidInitConfig+0x360>)
 8005096:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
    pidRuntime.maxVelocity[FD_YAW] = pidProfile->yawRateAccelLimit * 100 * pidRuntime.dT;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800509e:	461a      	mov	r2, r3
 80050a0:	2364      	movs	r3, #100	; 0x64
 80050a2:	fb02 f303 	mul.w	r3, r2, r3
 80050a6:	ee07 3a90 	vmov	s15, r3
 80050aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050ae:	4b63      	ldr	r3, [pc, #396]	; (800523c <pidInitConfig+0x360>)
 80050b0:	edd3 7a00 	vldr	s15, [r3]
 80050b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b8:	4b60      	ldr	r3, [pc, #384]	; (800523c <pidInitConfig+0x360>)
 80050ba:	edc3 7a84 	vstr	s15, [r3, #528]	; 0x210
    pidRuntime.itermWindupPointInv = 1.0f;
 80050be:	4b5f      	ldr	r3, [pc, #380]	; (800523c <pidInitConfig+0x360>)
 80050c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80050c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (pidProfile->itermWindupPointPercent < 100) {
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80050ce:	2b63      	cmp	r3, #99	; 0x63
 80050d0:	d819      	bhi.n	8005106 <pidInitConfig+0x22a>
        const float itermWindupPoint = pidProfile->itermWindupPointPercent / 100.0f;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80050d8:	ee07 3a90 	vmov	s15, r3
 80050dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050e0:	eddf 6a59 	vldr	s13, [pc, #356]	; 8005248 <pidInitConfig+0x36c>
 80050e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050e8:	edc7 7a02 	vstr	s15, [r7, #8]
        pidRuntime.itermWindupPointInv = 1.0f / (1.0f - itermWindupPoint);
 80050ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80050f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80050f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005100:	4b4e      	ldr	r3, [pc, #312]	; (800523c <pidInitConfig+0x360>)
 8005102:	edc3 7a85 	vstr	s15, [r3, #532]	; 0x214
    }
    pidRuntime.itermAcceleratorGain = pidProfile->itermAcceleratorGain;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800510a:	4b4c      	ldr	r3, [pc, #304]	; (800523c <pidInitConfig+0x360>)
 800510c:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
    pidRuntime.crashTimeLimitUs = pidProfile->crash_time * 1000;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005116:	461a      	mov	r2, r3
 8005118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800511c:	fb02 f303 	mul.w	r3, r2, r3
 8005120:	4a46      	ldr	r2, [pc, #280]	; (800523c <pidInitConfig+0x360>)
 8005122:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
    pidRuntime.crashTimeDelayUs = pidProfile->crash_delay * 1000;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800512c:	461a      	mov	r2, r3
 800512e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005132:	fb02 f303 	mul.w	r3, r2, r3
 8005136:	4a41      	ldr	r2, [pc, #260]	; (800523c <pidInitConfig+0x360>)
 8005138:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
    pidRuntime.crashRecoveryAngleDeciDegrees = pidProfile->crash_recovery_angle * 10;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005142:	461a      	mov	r2, r3
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	461a      	mov	r2, r3
 800514e:	4b3b      	ldr	r3, [pc, #236]	; (800523c <pidInitConfig+0x360>)
 8005150:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    pidRuntime.crashRecoveryRate = pidProfile->crash_recovery_rate;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800515a:	ee07 3a90 	vmov	s15, r3
 800515e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005162:	4b36      	ldr	r3, [pc, #216]	; (800523c <pidInitConfig+0x360>)
 8005164:	edc3 7a8b 	vstr	s15, [r3, #556]	; 0x22c
    pidRuntime.crashGyroThreshold = pidProfile->crash_gthreshold;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800516c:	ee07 3a90 	vmov	s15, r3
 8005170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005174:	4b31      	ldr	r3, [pc, #196]	; (800523c <pidInitConfig+0x360>)
 8005176:	edc3 7a8c 	vstr	s15, [r3, #560]	; 0x230
    pidRuntime.crashDtermThreshold = pidProfile->crash_dthreshold;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005186:	4b2d      	ldr	r3, [pc, #180]	; (800523c <pidInitConfig+0x360>)
 8005188:	edc3 7a8d 	vstr	s15, [r3, #564]	; 0x234
    pidRuntime.crashSetpointThreshold = pidProfile->crash_setpoint_threshold;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005190:	ee07 3a90 	vmov	s15, r3
 8005194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005198:	4b28      	ldr	r3, [pc, #160]	; (800523c <pidInitConfig+0x360>)
 800519a:	edc3 7a8e 	vstr	s15, [r3, #568]	; 0x238
    pidRuntime.crashLimitYaw = pidProfile->crash_limit_yaw;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051a4:	ee07 3a90 	vmov	s15, r3
 80051a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ac:	4b23      	ldr	r3, [pc, #140]	; (800523c <pidInitConfig+0x360>)
 80051ae:	edc3 7a8f 	vstr	s15, [r3, #572]	; 0x23c
    pidRuntime.itermLimit = pidProfile->itermLimit;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80051b8:	ee07 3a90 	vmov	s15, r3
 80051bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c0:	4b1e      	ldr	r3, [pc, #120]	; (800523c <pidInitConfig+0x360>)
 80051c2:	edc3 7a90 	vstr	s15, [r3, #576]	; 0x240
    pidRuntime.itermRotation = pidProfile->iterm_rotation;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 80051cc:	4b1b      	ldr	r3, [pc, #108]	; (800523c <pidInitConfig+0x360>)
 80051ce:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
    pidRuntime.antiGravityMode = pidProfile->antiGravityMode;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80051d8:	4b18      	ldr	r3, [pc, #96]	; (800523c <pidInitConfig+0x360>)
 80051da:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
    // Calculate the anti-gravity value that will trigger the OSD display.
    // For classic AG it's either 1.0 for off and > 1.0 for on.
    // For the new AG it's a continuous floating value so we want to trigger the OSD
    // display when it exceeds 25% of its possible range. This gives a useful indication
    // of AG activity without excessive display.
    pidRuntime.antiGravityOsdCutoff = 0.0f;
 80051de:	4b17      	ldr	r3, [pc, #92]	; (800523c <pidInitConfig+0x360>)
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    if (pidRuntime.antiGravityMode == ANTI_GRAVITY_SMOOTH) {
 80051e8:	4b14      	ldr	r3, [pc, #80]	; (800523c <pidInitConfig+0x360>)
 80051ea:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d116      	bne.n	8005220 <pidInitConfig+0x344>
        pidRuntime.antiGravityOsdCutoff += (pidRuntime.itermAcceleratorGain / 1000.0f) * 0.25f;
 80051f2:	4b12      	ldr	r3, [pc, #72]	; (800523c <pidInitConfig+0x360>)
 80051f4:	ed93 7a6b 	vldr	s14, [r3, #428]	; 0x1ac
 80051f8:	4b10      	ldr	r3, [pc, #64]	; (800523c <pidInitConfig+0x360>)
 80051fa:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005206:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8005258 <pidInitConfig+0x37c>
 800520a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800520e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8005212:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800521a:	4b08      	ldr	r3, [pc, #32]	; (800523c <pidInitConfig+0x360>)
 800521c:	edc3 7a6b 	vstr	s15, [r3, #428]	; 0x1ac
    }

    pidRuntime.levelRaceMode = pidProfile->level_race_mode;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
 8005226:	4b05      	ldr	r3, [pc, #20]	; (800523c <pidInitConfig+0x360>)
 8005228:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
}
 800522c:	bf00      	nop
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	3d0330d7 	.word	0x3d0330d7
 800523c:	20001214 	.word	0x20001214
 8005240:	3e7a3f03 	.word	0x3e7a3f03
 8005244:	3a0aac97 	.word	0x3a0aac97
 8005248:	42c80000 	.word	0x42c80000
 800524c:	3c615875 	.word	0x3c615875
 8005250:	3fe66666 	.word	0x3fe66666
 8005254:	3c23d70a 	.word	0x3c23d70a
 8005258:	447a0000 	.word	0x447a0000

0800525c <resetPidProfile>:

static void resetPidProfile(pidProfile_t *pidProfile)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
    RESET_CONFIG(pidProfile_t, pidProfile,
 8005264:	2294      	movs	r2, #148	; 0x94
 8005266:	4907      	ldr	r1, [pc, #28]	; (8005284 <resetPidProfile+0x28>)
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f00e fab2 	bl	80137d2 <memcpy>
        .simplified_pitch_pi_gain = SIMPLIFIED_TUNING_DEFAULT,
        .simplified_dterm_filter = true,
        .simplified_dterm_filter_multiplier = SIMPLIFIED_TUNING_DEFAULT,
    );

    pidProfile->pid[PID_ROLL].D = 30;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	221e      	movs	r2, #30
 8005272:	729a      	strb	r2, [r3, #10]
    pidProfile->pid[PID_PITCH].D = 32;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2220      	movs	r2, #32
 8005278:	741a      	strb	r2, [r3, #16]
}
 800527a:	bf00      	nop
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	08018624 	.word	0x08018624

08005288 <pidInit>:

void pidInit(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
	resetPidProfile(currentPidProfile);
 800528e:	4b2c      	ldr	r3, [pc, #176]	; (8005340 <pidInit+0xb8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff ffe2 	bl	800525c <resetPidProfile>
    pidSetTargetLooptime(gyro.targetLooptime);
 8005298:	4b2a      	ldr	r3, [pc, #168]	; (8005344 <pidInit+0xbc>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff fb5b 	bl	8004958 <pidSetTargetLooptime>
    pidInitFilters(currentPidProfile);
 80052a2:	4b27      	ldr	r3, [pc, #156]	; (8005340 <pidInit+0xb8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7ff fb80 	bl	80049ac <pidInitFilters>
    pidInitConfig(currentPidProfile);
 80052ac:	4b24      	ldr	r3, [pc, #144]	; (8005340 <pidInit+0xb8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff fe13 	bl	8004edc <pidInitConfig>
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80052b6:	2300      	movs	r3, #0
 80052b8:	607b      	str	r3, [r7, #4]
 80052ba:	e038      	b.n	800532e <pidInit+0xa6>
        pidData[axis].P = 0.0f;
 80052bc:	4922      	ldr	r1, [pc, #136]	; (8005348 <pidInit+0xc0>)
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	4613      	mov	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4413      	add	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	440b      	add	r3, r1
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
        pidData[axis].I = 0.0f;
 80052d0:	491d      	ldr	r1, [pc, #116]	; (8005348 <pidInit+0xc0>)
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	4613      	mov	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	3304      	adds	r3, #4
 80052e0:	f04f 0200 	mov.w	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
        pidData[axis].D = 0.0f;
 80052e6:	4918      	ldr	r1, [pc, #96]	; (8005348 <pidInit+0xc0>)
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	4613      	mov	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	440b      	add	r3, r1
 80052f4:	3308      	adds	r3, #8
 80052f6:	f04f 0200 	mov.w	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
        pidData[axis].F = 0.0f;
 80052fc:	4912      	ldr	r1, [pc, #72]	; (8005348 <pidInit+0xc0>)
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	330c      	adds	r3, #12
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	601a      	str	r2, [r3, #0]
        pidData[axis].Sum = 0.0f;
 8005312:	490d      	ldr	r1, [pc, #52]	; (8005348 <pidInit+0xc0>)
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	4613      	mov	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	440b      	add	r3, r1
 8005320:	3310      	adds	r3, #16
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3301      	adds	r3, #1
 800532c:	607b      	str	r3, [r7, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b02      	cmp	r3, #2
 8005332:	ddc3      	ble.n	80052bc <pidInit+0x34>
    }
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	2000003c 	.word	0x2000003c
 8005344:	20000614 	.word	0x20000614
 8005348:	20001470 	.word	0x20001470

0800534c <rotateItermAndAxisError>:

static void rotateItermAndAxisError()
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08a      	sub	sp, #40	; 0x28
 8005350:	af00      	add	r7, sp, #0
    if (pidRuntime.itermRotation
 8005352:	4b35      	ldr	r3, [pc, #212]	; (8005428 <rotateItermAndAxisError+0xdc>)
 8005354:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8005358:	2b00      	cmp	r3, #0
 800535a:	d060      	beq.n	800541e <rotateItermAndAxisError+0xd2>
        ) {
        const float gyroToAngle = pidRuntime.dT * RAD;
 800535c:	4b32      	ldr	r3, [pc, #200]	; (8005428 <rotateItermAndAxisError+0xdc>)
 800535e:	edd3 7a00 	vldr	s15, [r3]
 8005362:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800542c <rotateItermAndAxisError+0xe0>
 8005366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800536a:	edc7 7a06 	vstr	s15, [r7, #24]
        float rotationRads[XYZ_AXIS_COUNT];
        for (int i = FD_ROLL; i <= FD_YAW; i++) {
 800536e:	2300      	movs	r3, #0
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
 8005372:	e015      	b.n	80053a0 <rotateItermAndAxisError+0x54>
            rotationRads[i] = gyro.gyroADCf[i] * gyroToAngle;
 8005374:	4a2e      	ldr	r2, [pc, #184]	; (8005430 <rotateItermAndAxisError+0xe4>)
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	3306      	adds	r3, #6
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	3304      	adds	r3, #4
 8005380:	ed93 7a00 	vldr	s14, [r3]
 8005384:	edd7 7a06 	vldr	s15, [r7, #24]
 8005388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	3328      	adds	r3, #40	; 0x28
 8005392:	443b      	add	r3, r7
 8005394:	3b1c      	subs	r3, #28
 8005396:	edc3 7a00 	vstr	s15, [r3]
        for (int i = FD_ROLL; i <= FD_YAW; i++) {
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	3301      	adds	r3, #1
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	dde6      	ble.n	8005374 <rotateItermAndAxisError+0x28>
        }
        if (pidRuntime.itermRotation) {
 80053a6:	4b20      	ldr	r3, [pc, #128]	; (8005428 <rotateItermAndAxisError+0xdc>)
 80053a8:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d036      	beq.n	800541e <rotateItermAndAxisError+0xd2>
            float v[XYZ_AXIS_COUNT];
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 80053b0:	2300      	movs	r3, #0
 80053b2:	623b      	str	r3, [r7, #32]
 80053b4:	e011      	b.n	80053da <rotateItermAndAxisError+0x8e>
                v[i] = pidData[i].I;
 80053b6:	491f      	ldr	r1, [pc, #124]	; (8005434 <rotateItermAndAxisError+0xe8>)
 80053b8:	6a3a      	ldr	r2, [r7, #32]
 80053ba:	4613      	mov	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	440b      	add	r3, r1
 80053c4:	3304      	adds	r3, #4
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	3328      	adds	r3, #40	; 0x28
 80053ce:	443b      	add	r3, r7
 80053d0:	3b28      	subs	r3, #40	; 0x28
 80053d2:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	3301      	adds	r3, #1
 80053d8:	623b      	str	r3, [r7, #32]
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	ddea      	ble.n	80053b6 <rotateItermAndAxisError+0x6a>
            }
            rotateVector(v, rotationRads);
 80053e0:	f107 020c 	add.w	r2, r7, #12
 80053e4:	463b      	mov	r3, r7
 80053e6:	4611      	mov	r1, r2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fc fbd9 	bl	8001ba0 <rotateVector>
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 80053ee:	2300      	movs	r3, #0
 80053f0:	61fb      	str	r3, [r7, #28]
 80053f2:	e011      	b.n	8005418 <rotateItermAndAxisError+0xcc>
                pidData[i].I = v[i];
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	3328      	adds	r3, #40	; 0x28
 80053fa:	443b      	add	r3, r7
 80053fc:	3b28      	subs	r3, #40	; 0x28
 80053fe:	6819      	ldr	r1, [r3, #0]
 8005400:	480c      	ldr	r0, [pc, #48]	; (8005434 <rotateItermAndAxisError+0xe8>)
 8005402:	69fa      	ldr	r2, [r7, #28]
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4403      	add	r3, r0
 800540e:	3304      	adds	r3, #4
 8005410:	6019      	str	r1, [r3, #0]
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	3301      	adds	r3, #1
 8005416:	61fb      	str	r3, [r7, #28]
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	2b02      	cmp	r3, #2
 800541c:	ddea      	ble.n	80053f4 <rotateItermAndAxisError+0xa8>
            }
        }
    }
}
 800541e:	bf00      	nop
 8005420:	3728      	adds	r7, #40	; 0x28
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20001214 	.word	0x20001214
 800542c:	3c8efa35 	.word	0x3c8efa35
 8005430:	20000614 	.word	0x20000614
 8005434:	20001470 	.word	0x20001470

08005438 <getSetpointRate>:

static float getSetpointRate(int axis)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
    return rawSetpoint[axis];
 8005440:	4a06      	ldr	r2, [pc, #24]	; (800545c <getSetpointRate+0x24>)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	ee07 3a90 	vmov	s15, r3
}
 800544e:	eeb0 0a67 	vmov.f32	s0, s15
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	20001464 	.word	0x20001464

08005460 <accelerationLimit>:

static float accelerationLimit(int axis, float currentPidSetpoint)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	ed87 0a00 	vstr	s0, [r7]
    static float previousSetpoint[XYZ_AXIS_COUNT];
    const float currentVelocity = currentPidSetpoint - previousSetpoint[axis];
 800546c:	4a29      	ldr	r2, [pc, #164]	; (8005514 <accelerationLimit+0xb4>)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	edd3 7a00 	vldr	s15, [r3]
 8005478:	ed97 7a00 	vldr	s14, [r7]
 800547c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005480:	edc7 7a03 	vstr	s15, [r7, #12]

    if (fabsf(currentVelocity) > pidRuntime.maxVelocity[axis]) {
 8005484:	edd7 7a03 	vldr	s15, [r7, #12]
 8005488:	eeb0 7ae7 	vabs.f32	s14, s15
 800548c:	4a22      	ldr	r2, [pc, #136]	; (8005518 <accelerationLimit+0xb8>)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3382      	adds	r3, #130	; 0x82
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	edd3 7a00 	vldr	s15, [r3]
 800549a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800549e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a2:	dd27      	ble.n	80054f4 <accelerationLimit+0x94>
        currentPidSetpoint = (currentVelocity > 0) ? previousSetpoint[axis] + pidRuntime.maxVelocity[axis] : previousSetpoint[axis] - pidRuntime.maxVelocity[axis];
 80054a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80054a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b0:	dd0f      	ble.n	80054d2 <accelerationLimit+0x72>
 80054b2:	4a18      	ldr	r2, [pc, #96]	; (8005514 <accelerationLimit+0xb4>)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	ed93 7a00 	vldr	s14, [r3]
 80054be:	4a16      	ldr	r2, [pc, #88]	; (8005518 <accelerationLimit+0xb8>)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3382      	adds	r3, #130	; 0x82
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	edd3 7a00 	vldr	s15, [r3]
 80054cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054d0:	e00e      	b.n	80054f0 <accelerationLimit+0x90>
 80054d2:	4a10      	ldr	r2, [pc, #64]	; (8005514 <accelerationLimit+0xb4>)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	ed93 7a00 	vldr	s14, [r3]
 80054de:	4a0e      	ldr	r2, [pc, #56]	; (8005518 <accelerationLimit+0xb8>)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3382      	adds	r3, #130	; 0x82
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	edd3 7a00 	vldr	s15, [r3]
 80054ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054f0:	edc7 7a00 	vstr	s15, [r7]
    }

    previousSetpoint[axis] = currentPidSetpoint;
 80054f4:	4a07      	ldr	r2, [pc, #28]	; (8005514 <accelerationLimit+0xb4>)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	601a      	str	r2, [r3, #0]
    return currentPidSetpoint;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	ee07 3a90 	vmov	s15, r3
}
 8005506:	eeb0 0a67 	vmov.f32	s0, s15
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	20001558 	.word	0x20001558
 8005518:	20001214 	.word	0x20001214

0800551c <pidResetIterm>:

static void pidResetIterm(void)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < 3; axis++) {
 8005522:	2300      	movs	r3, #0
 8005524:	607b      	str	r3, [r7, #4]
 8005526:	e00d      	b.n	8005544 <pidResetIterm+0x28>
        pidData[axis].I = 0.0f;
 8005528:	490b      	ldr	r1, [pc, #44]	; (8005558 <pidResetIterm+0x3c>)
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	440b      	add	r3, r1
 8005536:	3304      	adds	r3, #4
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < 3; axis++) {
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3301      	adds	r3, #1
 8005542:	607b      	str	r3, [r7, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b02      	cmp	r3, #2
 8005548:	ddee      	ble.n	8005528 <pidResetIterm+0xc>
    }
}
 800554a:	bf00      	nop
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	20001470 	.word	0x20001470

0800555c <pidController>:

void pidController(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b09c      	sub	sp, #112	; 0x70
 8005560:	af00      	add	r7, sp, #0
    static float previousGyroRateDterm[XYZ_AXIS_COUNT];

    const float tpaFactorKp = pidRuntime.tpaFactor;
 8005562:	4bbd      	ldr	r3, [pc, #756]	; (8005858 <pidController+0x2fc>)
 8005564:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8005568:	65bb      	str	r3, [r7, #88]	; 0x58

    const bool launchControlActive = false;
 800556a:	2300      	movs	r3, #0
 800556c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Dynamic i component,
    if ((pidRuntime.antiGravityMode == ANTI_GRAVITY_SMOOTH) && pidRuntime.antiGravityEnabled) {
 8005570:	4bb9      	ldr	r3, [pc, #740]	; (8005858 <pidController+0x2fc>)
 8005572:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 8005576:	2b00      	cmp	r3, #0
 8005578:	d140      	bne.n	80055fc <pidController+0xa0>
 800557a:	4bb7      	ldr	r3, [pc, #732]	; (8005858 <pidController+0x2fc>)
 800557c:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 8005580:	2b00      	cmp	r3, #0
 8005582:	d03b      	beq.n	80055fc <pidController+0xa0>
        // traditional itermAccelerator factor for iTerm
        pidRuntime.itermAccelerator = pidRuntime.antiGravityThrottleHpf * 0.01f * pidRuntime.itermAcceleratorGain;
 8005584:	4bb4      	ldr	r3, [pc, #720]	; (8005858 <pidController+0x2fc>)
 8005586:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 800558a:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800585c <pidController+0x300>
 800558e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005592:	4bb1      	ldr	r3, [pc, #708]	; (8005858 <pidController+0x2fc>)
 8005594:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 8005598:	ee07 3a90 	vmov	s15, r3
 800559c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a4:	4bac      	ldr	r3, [pc, #688]	; (8005858 <pidController+0x2fc>)
 80055a6:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8
        // users AG Gain changes P boost
        pidRuntime.antiGravityPBoost *= pidRuntime.itermAcceleratorGain;
 80055aa:	4bab      	ldr	r3, [pc, #684]	; (8005858 <pidController+0x2fc>)
 80055ac:	ed93 7a6d 	vldr	s14, [r3, #436]	; 0x1b4
 80055b0:	4ba9      	ldr	r3, [pc, #676]	; (8005858 <pidController+0x2fc>)
 80055b2:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 80055b6:	ee07 3a90 	vmov	s15, r3
 80055ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c2:	4ba5      	ldr	r3, [pc, #660]	; (8005858 <pidController+0x2fc>)
 80055c4:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4
        // add some percentage of that slower, longer acting P boost factor to prolong AG effect on iTerm
        pidRuntime.itermAccelerator += pidRuntime.antiGravityPBoost * 0.05f;
 80055c8:	4ba3      	ldr	r3, [pc, #652]	; (8005858 <pidController+0x2fc>)
 80055ca:	ed93 7a6e 	vldr	s14, [r3, #440]	; 0x1b8
 80055ce:	4ba2      	ldr	r3, [pc, #648]	; (8005858 <pidController+0x2fc>)
 80055d0:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 80055d4:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8005860 <pidController+0x304>
 80055d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80055dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055e0:	4b9d      	ldr	r3, [pc, #628]	; (8005858 <pidController+0x2fc>)
 80055e2:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8
        // set the final P boost amount
        pidRuntime.antiGravityPBoost *= 0.02f;
 80055e6:	4b9c      	ldr	r3, [pc, #624]	; (8005858 <pidController+0x2fc>)
 80055e8:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 80055ec:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8005864 <pidController+0x308>
 80055f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055f4:	4b98      	ldr	r3, [pc, #608]	; (8005858 <pidController+0x2fc>)
 80055f6:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4
 80055fa:	e004      	b.n	8005606 <pidController+0xaa>
    } else {
        pidRuntime.antiGravityPBoost = 0.0f;
 80055fc:	4b96      	ldr	r3, [pc, #600]	; (8005858 <pidController+0x2fc>)
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    }

    float agGain = pidRuntime.dT * pidRuntime.itermAccelerator * AG_KI;
 8005606:	4b94      	ldr	r3, [pc, #592]	; (8005858 <pidController+0x2fc>)
 8005608:	ed93 7a00 	vldr	s14, [r3]
 800560c:	4b92      	ldr	r3, [pc, #584]	; (8005858 <pidController+0x2fc>)
 800560e:	edd3 7a6e 	vldr	s15, [r3, #440]	; 0x1b8
 8005612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005616:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8005868 <pidController+0x30c>
 800561a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800561e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

    // gradually scale back integration when above windup point
    float dynCi = pidRuntime.dT;
 8005622:	4b8d      	ldr	r3, [pc, #564]	; (8005858 <pidController+0x2fc>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (pidRuntime.itermWindupPointInv > 1.0f) {
 8005628:	4b8b      	ldr	r3, [pc, #556]	; (8005858 <pidController+0x2fc>)
 800562a:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 800562e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800563a:	dd1b      	ble.n	8005674 <pidController+0x118>
        dynCi *= constrainf((1.0f - motorMixRange) * pidRuntime.itermWindupPointInv, 0.0f, 1.0f);
 800563c:	4b8b      	ldr	r3, [pc, #556]	; (800586c <pidController+0x310>)
 800563e:	edd3 7a00 	vldr	s15, [r3]
 8005642:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005646:	ee37 7a67 	vsub.f32	s14, s14, s15
 800564a:	4b83      	ldr	r3, [pc, #524]	; (8005858 <pidController+0x2fc>)
 800564c:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 8005650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005654:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005658:	eddf 0a85 	vldr	s1, [pc, #532]	; 8005870 <pidController+0x314>
 800565c:	eeb0 0a67 	vmov.f32	s0, s15
 8005660:	f7ff f93c 	bl	80048dc <constrainf>
 8005664:	eeb0 7a40 	vmov.f32	s14, s0
 8005668:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800566c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005670:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Precalculate gyro data for D-term here, this allows loop unrolling
    float gyroRateDterm[XYZ_AXIS_COUNT];
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8005674:	2300      	movs	r3, #0
 8005676:	66bb      	str	r3, [r7, #104]	; 0x68
 8005678:	e06e      	b.n	8005758 <pidController+0x1fc>
        gyroRateDterm[axis] = gyro.gyroADCf[axis];
 800567a:	4a7e      	ldr	r2, [pc, #504]	; (8005874 <pidController+0x318>)
 800567c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800567e:	3306      	adds	r3, #6
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	3304      	adds	r3, #4
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	3370      	adds	r3, #112	; 0x70
 800568e:	443b      	add	r3, r7
 8005690:	3b6c      	subs	r3, #108	; 0x6c
 8005692:	601a      	str	r2, [r3, #0]

        gyroRateDterm[axis] = pidRuntime.dtermNotchApplyFn((filter_t *) &pidRuntime.dtermNotch[axis], gyroRateDterm[axis]);
 8005694:	4b70      	ldr	r3, [pc, #448]	; (8005858 <pidController+0x2fc>)
 8005696:	6999      	ldr	r1, [r3, #24]
 8005698:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800569a:	4613      	mov	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	3318      	adds	r3, #24
 80056a4:	4a6c      	ldr	r2, [pc, #432]	; (8005858 <pidController+0x2fc>)
 80056a6:	4413      	add	r3, r2
 80056a8:	1d1a      	adds	r2, r3, #4
 80056aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	3370      	adds	r3, #112	; 0x70
 80056b0:	443b      	add	r3, r7
 80056b2:	3b6c      	subs	r3, #108	; 0x6c
 80056b4:	edd3 7a00 	vldr	s15, [r3]
 80056b8:	eeb0 0a67 	vmov.f32	s0, s15
 80056bc:	4610      	mov	r0, r2
 80056be:	4788      	blx	r1
 80056c0:	eef0 7a40 	vmov.f32	s15, s0
 80056c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	3370      	adds	r3, #112	; 0x70
 80056ca:	443b      	add	r3, r7
 80056cc:	3b6c      	subs	r3, #108	; 0x6c
 80056ce:	edc3 7a00 	vstr	s15, [r3]
        gyroRateDterm[axis] = pidRuntime.dtermLowpassApplyFn((filter_t *) &pidRuntime.dtermLowpass[axis], gyroRateDterm[axis]);
 80056d2:	4b61      	ldr	r3, [pc, #388]	; (8005858 <pidController+0x2fc>)
 80056d4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80056d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	3398      	adds	r3, #152	; 0x98
 80056e4:	4a5c      	ldr	r2, [pc, #368]	; (8005858 <pidController+0x2fc>)
 80056e6:	441a      	add	r2, r3
 80056e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	3370      	adds	r3, #112	; 0x70
 80056ee:	443b      	add	r3, r7
 80056f0:	3b6c      	subs	r3, #108	; 0x6c
 80056f2:	edd3 7a00 	vldr	s15, [r3]
 80056f6:	eeb0 0a67 	vmov.f32	s0, s15
 80056fa:	4610      	mov	r0, r2
 80056fc:	4788      	blx	r1
 80056fe:	eef0 7a40 	vmov.f32	s15, s0
 8005702:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	3370      	adds	r3, #112	; 0x70
 8005708:	443b      	add	r3, r7
 800570a:	3b6c      	subs	r3, #108	; 0x6c
 800570c:	edc3 7a00 	vstr	s15, [r3]
        gyroRateDterm[axis] = pidRuntime.dtermLowpass2ApplyFn((filter_t *) &pidRuntime.dtermLowpass2[axis], gyroRateDterm[axis]);
 8005710:	4b51      	ldr	r3, [pc, #324]	; (8005858 <pidController+0x2fc>)
 8005712:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 8005716:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005724:	4a4c      	ldr	r2, [pc, #304]	; (8005858 <pidController+0x2fc>)
 8005726:	4413      	add	r3, r2
 8005728:	1d1a      	adds	r2, r3, #4
 800572a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	3370      	adds	r3, #112	; 0x70
 8005730:	443b      	add	r3, r7
 8005732:	3b6c      	subs	r3, #108	; 0x6c
 8005734:	edd3 7a00 	vldr	s15, [r3]
 8005738:	eeb0 0a67 	vmov.f32	s0, s15
 800573c:	4610      	mov	r0, r2
 800573e:	4788      	blx	r1
 8005740:	eef0 7a40 	vmov.f32	s15, s0
 8005744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	3370      	adds	r3, #112	; 0x70
 800574a:	443b      	add	r3, r7
 800574c:	3b6c      	subs	r3, #108	; 0x6c
 800574e:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8005752:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005754:	3301      	adds	r3, #1
 8005756:	66bb      	str	r3, [r7, #104]	; 0x68
 8005758:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800575a:	2b02      	cmp	r3, #2
 800575c:	dd8d      	ble.n	800567a <pidController+0x11e>
    }

    rotateItermAndAxisError();
 800575e:	f7ff fdf5 	bl	800534c <rotateItermAndAxisError>

    // ----------PID controller----------
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8005762:	2300      	movs	r3, #0
 8005764:	667b      	str	r3, [r7, #100]	; 0x64
 8005766:	e1e4      	b.n	8005b32 <pidController+0x5d6>

        float currentPidSetpoint = getSetpointRate(axis);
 8005768:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800576a:	f7ff fe65 	bl	8005438 <getSetpointRate>
 800576e:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
        if (pidRuntime.maxVelocity[axis]) {
 8005772:	4a39      	ldr	r2, [pc, #228]	; (8005858 <pidController+0x2fc>)
 8005774:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005776:	3382      	adds	r3, #130	; 0x82
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	edd3 7a00 	vldr	s15, [r3]
 8005780:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005788:	d006      	beq.n	8005798 <pidController+0x23c>
            currentPidSetpoint = accelerationLimit(axis, currentPidSetpoint);
 800578a:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 800578e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8005790:	f7ff fe66 	bl	8005460 <accelerationLimit>
 8005794:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
        // Yaw control is GYRO based, direct sticks control is applied to rate PID
        // When Race Mode is active PITCH control is also GYRO based in level or horizon mode


        // -----calculate error rate
        const float gyroRate = gyro.gyroADCf[axis]; // Process variable from gyro output in deg/sec
 8005798:	4a36      	ldr	r2, [pc, #216]	; (8005874 <pidController+0x318>)
 800579a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800579c:	3306      	adds	r3, #6
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	3304      	adds	r3, #4
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	64fb      	str	r3, [r7, #76]	; 0x4c
        float errorRate = currentPidSetpoint - gyroRate; // r - y
 80057a8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80057ac:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80057b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057b4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        const float previousIterm = pidData[axis].I;
 80057b8:	492f      	ldr	r1, [pc, #188]	; (8005878 <pidController+0x31c>)
 80057ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	3304      	adds	r3, #4
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	647b      	str	r3, [r7, #68]	; 0x44
        float itermErrorRate = errorRate;
 80057cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ce:	643b      	str	r3, [r7, #64]	; 0x40
        // --------low-level gyro-based PID based on 2DOF PID controller. ----------
        // 2-DOF PID controller with optional filter on derivative term.
        // b = 1 and only c (feedforward weight) can be tuned (amount derivative on measurement or error).

        // -----calculate P component
        pidData[axis].P = pidRuntime.pidCoefficient[axis].Kp * errorRate * tpaFactorKp;
 80057d0:	4a21      	ldr	r2, [pc, #132]	; (8005858 <pidController+0x2fc>)
 80057d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057d4:	331c      	adds	r3, #28
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	4413      	add	r3, r2
 80057da:	ed93 7a00 	vldr	s14, [r3]
 80057de:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80057e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057e6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80057ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ee:	4922      	ldr	r1, [pc, #136]	; (8005878 <pidController+0x31c>)
 80057f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80057f2:	4613      	mov	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	440b      	add	r3, r1
 80057fc:	edc3 7a00 	vstr	s15, [r3]
        if (axis == FD_YAW) {
 8005800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005802:	2b02      	cmp	r3, #2
 8005804:	d11a      	bne.n	800583c <pidController+0x2e0>
            pidData[axis].P = pidRuntime.ptermYawLowpassApplyFn((filter_t *) &pidRuntime.ptermYawLowpass, pidData[axis].P);
 8005806:	4b14      	ldr	r3, [pc, #80]	; (8005858 <pidController+0x2fc>)
 8005808:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 800580c:	481a      	ldr	r0, [pc, #104]	; (8005878 <pidController+0x31c>)
 800580e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005810:	4613      	mov	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4403      	add	r3, r0
 800581a:	edd3 7a00 	vldr	s15, [r3]
 800581e:	eeb0 0a67 	vmov.f32	s0, s15
 8005822:	4816      	ldr	r0, [pc, #88]	; (800587c <pidController+0x320>)
 8005824:	4788      	blx	r1
 8005826:	eef0 7a40 	vmov.f32	s15, s0
 800582a:	4913      	ldr	r1, [pc, #76]	; (8005878 <pidController+0x31c>)
 800582c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800582e:	4613      	mov	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	440b      	add	r3, r1
 8005838:	edc3 7a00 	vstr	s15, [r3]

        // -----calculate I component
        float Ki;
        float axisDynCi;
        {
            Ki = pidRuntime.pidCoefficient[axis].Ki;
 800583c:	4a06      	ldr	r2, [pc, #24]	; (8005858 <pidController+0x2fc>)
 800583e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005840:	331c      	adds	r3, #28
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	4413      	add	r3, r2
 8005846:	3304      	adds	r3, #4
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	63fb      	str	r3, [r7, #60]	; 0x3c
            axisDynCi = (axis == FD_YAW) ? dynCi : pidRuntime.dT; // only apply windup protection to yaw
 800584c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800584e:	2b02      	cmp	r3, #2
 8005850:	d016      	beq.n	8005880 <pidController+0x324>
 8005852:	4b01      	ldr	r3, [pc, #4]	; (8005858 <pidController+0x2fc>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	e014      	b.n	8005882 <pidController+0x326>
 8005858:	20001214 	.word	0x20001214
 800585c:	3c23d70a 	.word	0x3c23d70a
 8005860:	3d4ccccd 	.word	0x3d4ccccd
 8005864:	3ca3d70a 	.word	0x3ca3d70a
 8005868:	41acb227 	.word	0x41acb227
 800586c:	200014ac 	.word	0x200014ac
 8005870:	00000000 	.word	0x00000000
 8005874:	20000614 	.word	0x20000614
 8005878:	20001470 	.word	0x20001470
 800587c:	200013a4 	.word	0x200013a4
 8005880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005882:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        pidData[axis].I = constrainf(previousIterm + (Ki * axisDynCi + agGain) * itermErrorRate, -pidRuntime.itermLimit, pidRuntime.itermLimit);
 8005884:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005888:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800588c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005890:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005894:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005898:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800589c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058a0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80058a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058a8:	4baa      	ldr	r3, [pc, #680]	; (8005b54 <pidController+0x5f8>)
 80058aa:	edd3 7a90 	vldr	s15, [r3, #576]	; 0x240
 80058ae:	eef1 7a67 	vneg.f32	s15, s15
 80058b2:	4ba8      	ldr	r3, [pc, #672]	; (8005b54 <pidController+0x5f8>)
 80058b4:	edd3 6a90 	vldr	s13, [r3, #576]	; 0x240
 80058b8:	eeb0 1a66 	vmov.f32	s2, s13
 80058bc:	eef0 0a67 	vmov.f32	s1, s15
 80058c0:	eeb0 0a47 	vmov.f32	s0, s14
 80058c4:	f7ff f80a 	bl	80048dc <constrainf>
 80058c8:	eef0 7a40 	vmov.f32	s15, s0
 80058cc:	49a2      	ldr	r1, [pc, #648]	; (8005b58 <pidController+0x5fc>)
 80058ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80058d0:	4613      	mov	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	440b      	add	r3, r1
 80058da:	3304      	adds	r3, #4
 80058dc:	edc3 7a00 	vstr	s15, [r3]

        // -----calculate pidSetpointDelta
        float pidSetpointDelta = 0;
 80058e0:	f04f 0300 	mov.w	r3, #0
 80058e4:	637b      	str	r3, [r7, #52]	; 0x34
        pidRuntime.previousPidSetpoint[axis] = currentPidSetpoint;
 80058e6:	4a9b      	ldr	r2, [pc, #620]	; (8005b54 <pidController+0x5f8>)
 80058e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ea:	3302      	adds	r3, #2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	3304      	adds	r3, #4
 80058f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058f4:	601a      	str	r2, [r3, #0]

        // -----calculate D component
        // disable D if launch control is active
        if ((pidRuntime.pidCoefficient[axis].Kd > 0) && !launchControlActive) {
 80058f6:	4a97      	ldr	r2, [pc, #604]	; (8005b54 <pidController+0x5f8>)
 80058f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8005902:	edd3 7a00 	vldr	s15, [r3]
 8005906:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800590a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800590e:	dd43      	ble.n	8005998 <pidController+0x43c>
 8005910:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005914:	2b00      	cmp	r3, #0
 8005916:	d13f      	bne.n	8005998 <pidController+0x43c>
            // dT is fixed and calculated from the target PID loop time
            // This is done to avoid DTerm spikes that occur with dynamically
            // calculated deltaT whenever another task causes the PID
            // loop execution to be delayed.
            const float delta =
                - (gyroRateDterm[axis] - previousGyroRateDterm[axis]) * pidRuntime.pidFrequency;
 8005918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	3370      	adds	r3, #112	; 0x70
 800591e:	443b      	add	r3, r7
 8005920:	3b6c      	subs	r3, #108	; 0x6c
 8005922:	ed93 7a00 	vldr	s14, [r3]
 8005926:	4a8d      	ldr	r2, [pc, #564]	; (8005b5c <pidController+0x600>)
 8005928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	edd3 7a00 	vldr	s15, [r3]
 8005932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005936:	eeb1 7a67 	vneg.f32	s14, s15
 800593a:	4b86      	ldr	r3, [pc, #536]	; (8005b54 <pidController+0x5f8>)
 800593c:	edd3 7a01 	vldr	s15, [r3, #4]
            const float delta =
 8005940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005944:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            float preTpaD = pidRuntime.pidCoefficient[axis].Kd * delta;
 8005948:	4a82      	ldr	r2, [pc, #520]	; (8005b54 <pidController+0x5f8>)
 800594a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	4413      	add	r3, r2
 8005950:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8005954:	edd3 7a00 	vldr	s15, [r3]
 8005958:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800595c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005960:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

            pidData[axis].D = preTpaD * pidRuntime.tpaFactor;
 8005964:	4b7b      	ldr	r3, [pc, #492]	; (8005b54 <pidController+0x5f8>)
 8005966:	ed93 7a92 	vldr	s14, [r3, #584]	; 0x248
 800596a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800596e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005972:	4979      	ldr	r1, [pc, #484]	; (8005b58 <pidController+0x5fc>)
 8005974:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	440b      	add	r3, r1
 8005980:	3308      	adds	r3, #8
 8005982:	edc3 7a00 	vstr	s15, [r3]

            // Log the value of D pre application of TPA
            preTpaD *= D_LPF_FILT_SCALE;
 8005986:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800598a:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800598e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005992:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        if ((pidRuntime.pidCoefficient[axis].Kd > 0) && !launchControlActive) {
 8005996:	e00a      	b.n	80059ae <pidController+0x452>

        } else {
            pidData[axis].D = 0;
 8005998:	496f      	ldr	r1, [pc, #444]	; (8005b58 <pidController+0x5fc>)
 800599a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	440b      	add	r3, r1
 80059a6:	3308      	adds	r3, #8
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	601a      	str	r2, [r3, #0]

        }

        previousGyroRateDterm[axis] = gyroRateDterm[axis];
 80059ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	3370      	adds	r3, #112	; 0x70
 80059b4:	443b      	add	r3, r7
 80059b6:	3b6c      	subs	r3, #108	; 0x6c
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	4968      	ldr	r1, [pc, #416]	; (8005b5c <pidController+0x600>)
 80059bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	440b      	add	r3, r1
 80059c2:	601a      	str	r2, [r3, #0]

        // -----calculate feedforward component

        // no feedforward in launch control
        float feedforwardGain = launchControlActive ? 0.0f : pidRuntime.pidCoefficient[axis].Kf;
 80059c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d107      	bne.n	80059dc <pidController+0x480>
 80059cc:	4a61      	ldr	r2, [pc, #388]	; (8005b54 <pidController+0x5f8>)
 80059ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059d0:	011b      	lsls	r3, r3, #4
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	e001      	b.n	80059e0 <pidController+0x484>
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	62bb      	str	r3, [r7, #40]	; 0x28
        if (feedforwardGain > 0) {
 80059e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80059e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ee:	dd17      	ble.n	8005a20 <pidController+0x4c4>
            // halve feedforward in Level mode since stick sensitivity is weaker by about half
            feedforwardGain *= 1.0f;
            // transition now calculated in feedforward.c when new RC data arrives
            float feedForward = feedforwardGain * pidSetpointDelta * pidRuntime.pidFrequency;
 80059f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80059f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80059f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059fc:	4b55      	ldr	r3, [pc, #340]	; (8005b54 <pidController+0x5f8>)
 80059fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a06:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

            pidData[axis].F = feedForward;
 8005a0a:	4953      	ldr	r1, [pc, #332]	; (8005b58 <pidController+0x5fc>)
 8005a0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a0e:	4613      	mov	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	440b      	add	r3, r1
 8005a18:	330c      	adds	r3, #12
 8005a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	e00a      	b.n	8005a36 <pidController+0x4da>
       } else {
            pidData[axis].F = 0;
 8005a20:	494d      	ldr	r1, [pc, #308]	; (8005b58 <pidController+0x5fc>)
 8005a22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	440b      	add	r3, r1
 8005a2e:	330c      	adds	r3, #12
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]
        }

        // P boost at the end of throttle chop
        // attenuate effect if turning more than 50 deg/s, half at 100 deg/s
        float agBoostAttenuator = fabsf(currentPidSetpoint) / 50.0f;
 8005a36:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005a3a:	eeb0 7ae7 	vabs.f32	s14, s15
 8005a3e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005b60 <pidController+0x604>
 8005a42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a46:	edc7 7a08 	vstr	s15, [r7, #32]
        agBoostAttenuator = MAX(agBoostAttenuator, 1.0f);
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	61fb      	str	r3, [r7, #28]
 8005a4e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005a52:	61bb      	str	r3, [r7, #24]
 8005a54:	ed97 7a07 	vldr	s14, [r7, #28]
 8005a58:	edd7 7a06 	vldr	s15, [r7, #24]
 8005a5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a64:	dd01      	ble.n	8005a6a <pidController+0x50e>
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	e000      	b.n	8005a6c <pidController+0x510>
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	623b      	str	r3, [r7, #32]
        const float agBoost = 1.0f + (pidRuntime.antiGravityPBoost / agBoostAttenuator);
 8005a6e:	4b39      	ldr	r3, [pc, #228]	; (8005b54 <pidController+0x5f8>)
 8005a70:	edd3 6a6d 	vldr	s13, [r3, #436]	; 0x1b4
 8005a74:	ed97 7a08 	vldr	s14, [r7, #32]
 8005a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a84:	edc7 7a05 	vstr	s15, [r7, #20]
        if (axis != FD_YAW) {
 8005a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d015      	beq.n	8005aba <pidController+0x55e>
            pidData[axis].P *= agBoost;
 8005a8e:	4932      	ldr	r1, [pc, #200]	; (8005b58 <pidController+0x5fc>)
 8005a90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a92:	4613      	mov	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	440b      	add	r3, r1
 8005a9c:	ed93 7a00 	vldr	s14, [r3]
 8005aa0:	edd7 7a05 	vldr	s15, [r7, #20]
 8005aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa8:	492b      	ldr	r1, [pc, #172]	; (8005b58 <pidController+0x5fc>)
 8005aaa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005aac:	4613      	mov	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	440b      	add	r3, r1
 8005ab6:	edc3 7a00 	vstr	s15, [r3]
        }

        const float pidSum = pidData[axis].P + pidData[axis].I + pidData[axis].D + pidData[axis].F;
 8005aba:	4927      	ldr	r1, [pc, #156]	; (8005b58 <pidController+0x5fc>)
 8005abc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005abe:	4613      	mov	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	440b      	add	r3, r1
 8005ac8:	ed93 7a00 	vldr	s14, [r3]
 8005acc:	4922      	ldr	r1, [pc, #136]	; (8005b58 <pidController+0x5fc>)
 8005ace:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	440b      	add	r3, r1
 8005ada:	3304      	adds	r3, #4
 8005adc:	edd3 7a00 	vldr	s15, [r3]
 8005ae0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ae4:	491c      	ldr	r1, [pc, #112]	; (8005b58 <pidController+0x5fc>)
 8005ae6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ae8:	4613      	mov	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	440b      	add	r3, r1
 8005af2:	3308      	adds	r3, #8
 8005af4:	edd3 7a00 	vldr	s15, [r3]
 8005af8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005afc:	4916      	ldr	r1, [pc, #88]	; (8005b58 <pidController+0x5fc>)
 8005afe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b00:	4613      	mov	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	440b      	add	r3, r1
 8005b0a:	330c      	adds	r3, #12
 8005b0c:	edd3 7a00 	vldr	s15, [r3]
 8005b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b14:	edc7 7a04 	vstr	s15, [r7, #16]
        {
            pidData[axis].Sum = pidSum;
 8005b18:	490f      	ldr	r1, [pc, #60]	; (8005b58 <pidController+0x5fc>)
 8005b1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	3310      	adds	r3, #16
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	601a      	str	r2, [r3, #0]
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8005b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b2e:	3301      	adds	r3, #1
 8005b30:	667b      	str	r3, [r7, #100]	; 0x64
 8005b32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	f77f ae17 	ble.w	8005768 <pidController+0x20c>
        }
    }

    // Disable PID control if at zero throttle or if gyro overflow detected
    // This may look very innefficient, but it is done on purpose to always show real CPU usage as in flight
    if (!pidRuntime.pidStabilisationEnabled || gyroOverflowDetected()) {
 8005b3a:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <pidController+0x5f8>)
 8005b3c:	7a1b      	ldrb	r3, [r3, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d004      	beq.n	8005b4c <pidController+0x5f0>
 8005b42:	f7fc fe97 	bl	8002874 <gyroOverflowDetected>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d048      	beq.n	8005bde <pidController+0x682>
        for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b50:	e041      	b.n	8005bd6 <pidController+0x67a>
 8005b52:	bf00      	nop
 8005b54:	20001214 	.word	0x20001214
 8005b58:	20001470 	.word	0x20001470
 8005b5c:	20001564 	.word	0x20001564
 8005b60:	42480000 	.word	0x42480000
            pidData[axis].P = 0;
 8005b64:	4924      	ldr	r1, [pc, #144]	; (8005bf8 <pidController+0x69c>)
 8005b66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b68:	4613      	mov	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	440b      	add	r3, r1
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]
            pidData[axis].I = 0;
 8005b78:	491f      	ldr	r1, [pc, #124]	; (8005bf8 <pidController+0x69c>)
 8005b7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	440b      	add	r3, r1
 8005b86:	3304      	adds	r3, #4
 8005b88:	f04f 0200 	mov.w	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]
            pidData[axis].D = 0;
 8005b8e:	491a      	ldr	r1, [pc, #104]	; (8005bf8 <pidController+0x69c>)
 8005b90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b92:	4613      	mov	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	440b      	add	r3, r1
 8005b9c:	3308      	adds	r3, #8
 8005b9e:	f04f 0200 	mov.w	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]
            pidData[axis].F = 0;
 8005ba4:	4914      	ldr	r1, [pc, #80]	; (8005bf8 <pidController+0x69c>)
 8005ba6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ba8:	4613      	mov	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	440b      	add	r3, r1
 8005bb2:	330c      	adds	r3, #12
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]

            pidData[axis].Sum = 0;
 8005bba:	490f      	ldr	r1, [pc, #60]	; (8005bf8 <pidController+0x69c>)
 8005bbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	440b      	add	r3, r1
 8005bc8:	3310      	adds	r3, #16
 8005bca:	f04f 0200 	mov.w	r2, #0
 8005bce:	601a      	str	r2, [r3, #0]
        for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8005bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	ddc3      	ble.n	8005b64 <pidController+0x608>
 8005bdc:	e007      	b.n	8005bee <pidController+0x692>
        }
    } else if (pidRuntime.zeroThrottleItermReset) {
 8005bde:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <pidController+0x6a0>)
 8005be0:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <pidController+0x692>
        pidResetIterm();
 8005be8:	f7ff fc98 	bl	800551c <pidResetIterm>
    }
}
 8005bec:	e7ff      	b.n	8005bee <pidController+0x692>
 8005bee:	bf00      	nop
 8005bf0:	3770      	adds	r7, #112	; 0x70
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20001470 	.word	0x20001470
 8005bfc:	20001214 	.word	0x20001214

08005c00 <pidSetItermAccelerator>:


static void pidSetItermAccelerator(float newItermAccelerator)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	ed87 0a01 	vstr	s0, [r7, #4]
    pidRuntime.itermAccelerator = newItermAccelerator;
 8005c0a:	4a05      	ldr	r2, [pc, #20]	; (8005c20 <pidSetItermAccelerator+0x20>)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
}
 8005c12:	bf00      	nop
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	20001214 	.word	0x20001214

08005c24 <checkForThrottleErrorResetState>:

static void checkForThrottleErrorResetState(uint16_t rxRefreshRate)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	80fb      	strh	r3, [r7, #6]
    static int index;
    static int16_t rcCommandThrottlePrevious[THROTTLE_BUFFER_MAX];

    const int rxRefreshRateMs = rxRefreshRate / 1000;
 8005c2e:	88fb      	ldrh	r3, [r7, #6]
 8005c30:	4a35      	ldr	r2, [pc, #212]	; (8005d08 <checkForThrottleErrorResetState+0xe4>)
 8005c32:	fba2 2303 	umull	r2, r3, r2, r3
 8005c36:	099b      	lsrs	r3, r3, #6
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	617b      	str	r3, [r7, #20]
    const int indexMax = constrain(THROTTLE_DELTA_MS / rxRefreshRateMs, 1, THROTTLE_BUFFER_MAX);
 8005c3c:	2264      	movs	r2, #100	; 0x64
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	fb92 f3f3 	sdiv	r3, r2, r3
 8005c44:	2214      	movs	r2, #20
 8005c46:	2101      	movs	r1, #1
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fe fe2e 	bl	80048aa <constrain>
 8005c4e:	6138      	str	r0, [r7, #16]
    const int16_t throttleVelocityThreshold =  currentPidProfile->itermThrottleThreshold / 2;
 8005c50:	4b2e      	ldr	r3, [pc, #184]	; (8005d0c <checkForThrottleErrorResetState+0xe8>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c56:	085b      	lsrs	r3, r3, #1
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	81fb      	strh	r3, [r7, #14]

    rcCommandThrottlePrevious[index++] = rcCommand[THROTTLE];
 8005c5c:	4b2c      	ldr	r3, [pc, #176]	; (8005d10 <checkForThrottleErrorResetState+0xec>)
 8005c5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005c62:	4b2c      	ldr	r3, [pc, #176]	; (8005d14 <checkForThrottleErrorResetState+0xf0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	1c5a      	adds	r2, r3, #1
 8005c68:	492a      	ldr	r1, [pc, #168]	; (8005d14 <checkForThrottleErrorResetState+0xf0>)
 8005c6a:	600a      	str	r2, [r1, #0]
 8005c6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c70:	ee17 2a90 	vmov	r2, s15
 8005c74:	b211      	sxth	r1, r2
 8005c76:	4a28      	ldr	r2, [pc, #160]	; (8005d18 <checkForThrottleErrorResetState+0xf4>)
 8005c78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    if (index >= indexMax) {
 8005c7c:	4b25      	ldr	r3, [pc, #148]	; (8005d14 <checkForThrottleErrorResetState+0xf0>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	dc02      	bgt.n	8005c8c <checkForThrottleErrorResetState+0x68>
        index = 0;
 8005c86:	4b23      	ldr	r3, [pc, #140]	; (8005d14 <checkForThrottleErrorResetState+0xf0>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]
    }

    const int16_t rcCommandSpeed = rcCommand[THROTTLE] - rcCommandThrottlePrevious[index];
 8005c8c:	4b20      	ldr	r3, [pc, #128]	; (8005d10 <checkForThrottleErrorResetState+0xec>)
 8005c8e:	ed93 7a03 	vldr	s14, [r3, #12]
 8005c92:	4b20      	ldr	r3, [pc, #128]	; (8005d14 <checkForThrottleErrorResetState+0xf0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a20      	ldr	r2, [pc, #128]	; (8005d18 <checkForThrottleErrorResetState+0xf4>)
 8005c98:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005c9c:	ee07 3a90 	vmov	s15, r3
 8005ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ca8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cac:	ee17 3a90 	vmov	r3, s15
 8005cb0:	81bb      	strh	r3, [r7, #12]

    if (currentPidProfile->antiGravityMode == ANTI_GRAVITY_STEP) {
 8005cb2:	4b16      	ldr	r3, [pc, #88]	; (8005d0c <checkForThrottleErrorResetState+0xe8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d120      	bne.n	8005d00 <checkForThrottleErrorResetState+0xdc>
        if (ABS(rcCommandSpeed) > throttleVelocityThreshold) {
 8005cbe:	89bb      	ldrh	r3, [r7, #12]
 8005cc0:	817b      	strh	r3, [r7, #10]
 8005cc2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	bfb8      	it	lt
 8005cca:	425b      	neglt	r3, r3
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	dd0f      	ble.n	8005cf8 <checkForThrottleErrorResetState+0xd4>
            pidSetItermAccelerator(CONVERT_PARAMETER_TO_FLOAT(currentPidProfile->itermAcceleratorGain));
 8005cd8:	4b0c      	ldr	r3, [pc, #48]	; (8005d0c <checkForThrottleErrorResetState+0xe8>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ce6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005d1c <checkForThrottleErrorResetState+0xf8>
 8005cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cee:	eeb0 0a67 	vmov.f32	s0, s15
 8005cf2:	f7ff ff85 	bl	8005c00 <pidSetItermAccelerator>
        } else {
            pidSetItermAccelerator(0.0f);
        }
    }
}
 8005cf6:	e003      	b.n	8005d00 <checkForThrottleErrorResetState+0xdc>
            pidSetItermAccelerator(0.0f);
 8005cf8:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8005d20 <checkForThrottleErrorResetState+0xfc>
 8005cfc:	f7ff ff80 	bl	8005c00 <pidSetItermAccelerator>
}
 8005d00:	bf00      	nop
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	10624dd3 	.word	0x10624dd3
 8005d0c:	2000003c 	.word	0x2000003c
 8005d10:	200014b0 	.word	0x200014b0
 8005d14:	20001570 	.word	0x20001570
 8005d18:	20001574 	.word	0x20001574
 8005d1c:	3a83126f 	.word	0x3a83126f
 8005d20:	00000000 	.word	0x00000000

08005d24 <applyActualRates>:

static float applyActualRates(const int axis, float rcCommandf, const float rcCommandfAbs)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08a      	sub	sp, #40	; 0x28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005d30:	edc7 0a01 	vstr	s1, [r7, #4]
    float expof = currentControlRateProfile->rcExpo[axis] / 100.0f;
 8005d34:	4b40      	ldr	r3, [pc, #256]	; (8005e38 <applyActualRates+0x114>)
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	3306      	adds	r3, #6
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	ee07 3a90 	vmov	s15, r3
 8005d44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d48:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005e3c <applyActualRates+0x118>
 8005d4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d50:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    expof = rcCommandfAbs * (powf(rcCommandf, 5) * expof + rcCommandf * (1 - expof));
 8005d54:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8005d58:	ed97 0a02 	vldr	s0, [r7, #8]
 8005d5c:	f012 f878 	bl	8017e50 <powf>
 8005d60:	eeb0 7a40 	vmov.f32	s14, s0
 8005d64:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005d68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d70:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005d74:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005d78:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d84:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d8c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    const float centerSensitivity = currentControlRateProfile->rcRates[axis] * 10.0f;
 8005d90:	4b29      	ldr	r3, [pc, #164]	; (8005e38 <applyActualRates+0x114>)
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	4413      	add	r3, r2
 8005d98:	3303      	adds	r3, #3
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	ee07 3a90 	vmov	s15, r3
 8005da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005da4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005da8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005dac:	edc7 7a08 	vstr	s15, [r7, #32]
    const float stickMovement = MAX(0, currentControlRateProfile->rates[axis] * 10.0f - centerSensitivity);
 8005db0:	2300      	movs	r3, #0
 8005db2:	61fb      	str	r3, [r7, #28]
 8005db4:	4b20      	ldr	r3, [pc, #128]	; (8005e38 <applyActualRates+0x114>)
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4413      	add	r3, r2
 8005dbc:	3309      	adds	r3, #9
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	ee07 3a90 	vmov	s15, r3
 8005dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dc8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005dcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005dd0:	edd7 7a08 	vldr	s15, [r7, #32]
 8005dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dd8:	edc7 7a06 	vstr	s15, [r7, #24]
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005de6:	ed97 7a06 	vldr	s14, [r7, #24]
 8005dea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df2:	d505      	bpl.n	8005e00 <applyActualRates+0xdc>
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	ee07 3a90 	vmov	s15, r3
 8005dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dfe:	e001      	b.n	8005e04 <applyActualRates+0xe0>
 8005e00:	edd7 7a06 	vldr	s15, [r7, #24]
 8005e04:	edc7 7a05 	vstr	s15, [r7, #20]
    const float angleRate = rcCommandf * centerSensitivity + stickMovement * expof;
 8005e08:	ed97 7a02 	vldr	s14, [r7, #8]
 8005e0c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005e10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e14:	edd7 6a05 	vldr	s13, [r7, #20]
 8005e18:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005e1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e24:	edc7 7a04 	vstr	s15, [r7, #16]

    return angleRate;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	ee07 3a90 	vmov	s15, r3
}
 8005e2e:	eeb0 0a67 	vmov.f32	s0, s15
 8005e32:	3728      	adds	r7, #40	; 0x28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	2000004c 	.word	0x2000004c
 8005e3c:	42c80000 	.word	0x42c80000

08005e40 <scaleRawSetpointToFpvCamAngle>:

static void scaleRawSetpointToFpvCamAngle(void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
    //recalculate sin/cos only when rxConfig()->fpvCamAngleDegrees changed
    static float cosFactor = 1.0;
    static float sinFactor = 0.0;

    float roll = rawSetpoint[ROLL];
 8005e46:	4b22      	ldr	r3, [pc, #136]	; (8005ed0 <scaleRawSetpointToFpvCamAngle+0x90>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	607b      	str	r3, [r7, #4]
    float yaw = rawSetpoint[YAW];
 8005e4c:	4b20      	ldr	r3, [pc, #128]	; (8005ed0 <scaleRawSetpointToFpvCamAngle+0x90>)
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	603b      	str	r3, [r7, #0]
    rawSetpoint[ROLL] = constrainf(roll * cosFactor -  yaw * sinFactor, -SETPOINT_RATE_LIMIT * 1.0f, SETPOINT_RATE_LIMIT * 1.0f);
 8005e52:	4b20      	ldr	r3, [pc, #128]	; (8005ed4 <scaleRawSetpointToFpvCamAngle+0x94>)
 8005e54:	ed93 7a00 	vldr	s14, [r3]
 8005e58:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e60:	4b1d      	ldr	r3, [pc, #116]	; (8005ed8 <scaleRawSetpointToFpvCamAngle+0x98>)
 8005e62:	edd3 6a00 	vldr	s13, [r3]
 8005e66:	edd7 7a00 	vldr	s15, [r7]
 8005e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e72:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8005edc <scaleRawSetpointToFpvCamAngle+0x9c>
 8005e76:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8005ee0 <scaleRawSetpointToFpvCamAngle+0xa0>
 8005e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e7e:	f7fe fd2d 	bl	80048dc <constrainf>
 8005e82:	eef0 7a40 	vmov.f32	s15, s0
 8005e86:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <scaleRawSetpointToFpvCamAngle+0x90>)
 8005e88:	edc3 7a00 	vstr	s15, [r3]
    rawSetpoint[YAW]  = constrainf(yaw  * cosFactor + roll * sinFactor, -SETPOINT_RATE_LIMIT * 1.0f, SETPOINT_RATE_LIMIT * 1.0f);
 8005e8c:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <scaleRawSetpointToFpvCamAngle+0x94>)
 8005e8e:	ed93 7a00 	vldr	s14, [r3]
 8005e92:	edd7 7a00 	vldr	s15, [r7]
 8005e96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e9a:	4b0f      	ldr	r3, [pc, #60]	; (8005ed8 <scaleRawSetpointToFpvCamAngle+0x98>)
 8005e9c:	edd3 6a00 	vldr	s13, [r3]
 8005ea0:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ea4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005eac:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8005edc <scaleRawSetpointToFpvCamAngle+0x9c>
 8005eb0:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8005ee0 <scaleRawSetpointToFpvCamAngle+0xa0>
 8005eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8005eb8:	f7fe fd10 	bl	80048dc <constrainf>
 8005ebc:	eef0 7a40 	vmov.f32	s15, s0
 8005ec0:	4b03      	ldr	r3, [pc, #12]	; (8005ed0 <scaleRawSetpointToFpvCamAngle+0x90>)
 8005ec2:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8005ec6:	bf00      	nop
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	20001464 	.word	0x20001464
 8005ed4:	20000054 	.word	0x20000054
 8005ed8:	2000159c 	.word	0x2000159c
 8005edc:	44f9c000 	.word	0x44f9c000
 8005ee0:	c4f9c000 	.word	0xc4f9c000

08005ee4 <resetYawAxis>:

static void resetYawAxis(void)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	af00      	add	r7, sp, #0
    rcCommand[YAW] = 0;
 8005ee8:	4b06      	ldr	r3, [pc, #24]	; (8005f04 <resetYawAxis+0x20>)
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	609a      	str	r2, [r3, #8]
    setpointRate[YAW] = 0;
 8005ef0:	4b05      	ldr	r3, [pc, #20]	; (8005f08 <resetYawAxis+0x24>)
 8005ef2:	f04f 0200 	mov.w	r2, #0
 8005ef6:	609a      	str	r2, [r3, #8]
}
 8005ef8:	bf00      	nop
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	200014b0 	.word	0x200014b0
 8005f08:	20001508 	.word	0x20001508

08005f0c <pidIncUpdateCounter>:

void pidIncUpdateCounter(void) {
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
	if (pidUpdateCounter % activePidLoopDenom == 0) {
 8005f10:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <pidIncUpdateCounter+0x38>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	4a0c      	ldr	r2, [pc, #48]	; (8005f48 <pidIncUpdateCounter+0x3c>)
 8005f16:	7812      	ldrb	r2, [r2, #0]
 8005f18:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f1c:	fb01 f202 	mul.w	r2, r1, r2
 8005f20:	1a9b      	subs	r3, r3, r2
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d102      	bne.n	8005f2e <pidIncUpdateCounter+0x22>
		pidUpdateCounter = 0;
 8005f28:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <pidIncUpdateCounter+0x38>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	701a      	strb	r2, [r3, #0]
	}
	pidUpdateCounter++;
 8005f2e:	4b05      	ldr	r3, [pc, #20]	; (8005f44 <pidIncUpdateCounter+0x38>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	3301      	adds	r3, #1
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	4b03      	ldr	r3, [pc, #12]	; (8005f44 <pidIncUpdateCounter+0x38>)
 8005f38:	701a      	strb	r2, [r3, #0]
}
 8005f3a:	bf00      	nop
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	2000117e 	.word	0x2000117e
 8005f48:	20000000 	.word	0x20000000

08005f4c <processRcCommand>:


void processRcCommand(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
    // If we're armed, at minimum throttle, and we do arming via the
    // sticks, do not process yaw input from the rx.  We do this so the
    // motors do not spin up while we are trying to arm or disarm.
    // Allow yaw control for tricopters if the user wants the servo to move even when unarmed.
    if (isUsingSticksForArming() && rcData[THROTTLE] <= 1050) {
 8005f52:	f7fe fcec 	bl	800492e <isUsingSticksForArming>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00b      	beq.n	8005f74 <processRcCommand+0x28>
 8005f5c:	4b4c      	ldr	r3, [pc, #304]	; (8006090 <processRcCommand+0x144>)
 8005f5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005f62:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8006094 <processRcCommand+0x148>
 8005f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f6e:	d801      	bhi.n	8005f74 <processRcCommand+0x28>
        resetYawAxis();
 8005f70:	f7ff ffb8 	bl	8005ee4 <resetYawAxis>
    }

    if (isRxDataNew) {
 8005f74:	4b48      	ldr	r3, [pc, #288]	; (8006098 <processRcCommand+0x14c>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <processRcCommand+0x36>
        newRxDataForFF = true;
 8005f7c:	4b47      	ldr	r3, [pc, #284]	; (800609c <processRcCommand+0x150>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	701a      	strb	r2, [r3, #0]
    }

    if (isRxDataNew && pidAntiGravityEnabled()) {
 8005f82:	4b45      	ldr	r3, [pc, #276]	; (8006098 <processRcCommand+0x14c>)
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d009      	beq.n	8005f9e <processRcCommand+0x52>
 8005f8a:	f7fe fcd9 	bl	8004940 <pidAntiGravityEnabled>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d004      	beq.n	8005f9e <processRcCommand+0x52>
        checkForThrottleErrorResetState(currentRxRefreshRate);
 8005f94:	4b42      	ldr	r3, [pc, #264]	; (80060a0 <processRcCommand+0x154>)
 8005f96:	881b      	ldrh	r3, [r3, #0]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff fe43 	bl	8005c24 <checkForThrottleErrorResetState>
    }

    if (isRxDataNew) {
 8005f9e:	4b3e      	ldr	r3, [pc, #248]	; (8006098 <processRcCommand+0x14c>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d06c      	beq.n	8006080 <processRcCommand+0x134>
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	e064      	b.n	8006076 <processRcCommand+0x12a>
            float angleRate;

            {
                // scale rcCommandf to range [-1.0, 1.0]
                float rcCommandf;
                if (axis == FD_YAW) {
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d10d      	bne.n	8005fce <processRcCommand+0x82>
                    rcCommandf = rcCommand[axis] / rcCommandYawDivider;
 8005fb2:	4a3c      	ldr	r2, [pc, #240]	; (80060a4 <processRcCommand+0x158>)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	edd3 6a00 	vldr	s13, [r3]
 8005fbe:	4b3a      	ldr	r3, [pc, #232]	; (80060a8 <processRcCommand+0x15c>)
 8005fc0:	ed93 7a00 	vldr	s14, [r3]
 8005fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fc8:	edc7 7a02 	vstr	s15, [r7, #8]
 8005fcc:	e00c      	b.n	8005fe8 <processRcCommand+0x9c>
                } else {
                    rcCommandf = rcCommand[axis] / rcCommandDivider;
 8005fce:	4a35      	ldr	r2, [pc, #212]	; (80060a4 <processRcCommand+0x158>)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	edd3 6a00 	vldr	s13, [r3]
 8005fda:	4b34      	ldr	r3, [pc, #208]	; (80060ac <processRcCommand+0x160>)
 8005fdc:	ed93 7a00 	vldr	s14, [r3]
 8005fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fe4:	edc7 7a02 	vstr	s15, [r7, #8]
                }

                rcDeflection[axis] = rcCommandf;
 8005fe8:	4a31      	ldr	r2, [pc, #196]	; (80060b0 <processRcCommand+0x164>)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	601a      	str	r2, [r3, #0]
                const float rcCommandfAbs = fabsf(rcCommandf);
 8005ff4:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ff8:	eef0 7ae7 	vabs.f32	s15, s15
 8005ffc:	edc7 7a01 	vstr	s15, [r7, #4]
                rcDeflectionAbs[axis] = rcCommandfAbs;
 8006000:	4a2c      	ldr	r2, [pc, #176]	; (80060b4 <processRcCommand+0x168>)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	601a      	str	r2, [r3, #0]

                angleRate = applyRates(axis, rcCommandf, rcCommandfAbs);
 800600c:	4b2a      	ldr	r3, [pc, #168]	; (80060b8 <processRcCommand+0x16c>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	edd7 0a01 	vldr	s1, [r7, #4]
 8006014:	ed97 0a02 	vldr	s0, [r7, #8]
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	4798      	blx	r3
 800601c:	ed87 0a00 	vstr	s0, [r7]

            }
            rawSetpoint[axis] = constrainf(angleRate, -1.0f * currentControlRateProfile->rate_limit[axis], 1.0f * currentControlRateProfile->rate_limit[axis]);
 8006020:	4b26      	ldr	r3, [pc, #152]	; (80060bc <processRcCommand+0x170>)
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3308      	adds	r3, #8
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	4413      	add	r3, r2
 800602c:	885b      	ldrh	r3, [r3, #2]
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006036:	eef1 7a67 	vneg.f32	s15, s15
 800603a:	4b20      	ldr	r3, [pc, #128]	; (80060bc <processRcCommand+0x170>)
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3308      	adds	r3, #8
 8006042:	005b      	lsls	r3, r3, #1
 8006044:	4413      	add	r3, r2
 8006046:	885b      	ldrh	r3, [r3, #2]
 8006048:	ee07 3a10 	vmov	s14, r3
 800604c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006050:	eeb0 1a47 	vmov.f32	s2, s14
 8006054:	eef0 0a67 	vmov.f32	s1, s15
 8006058:	ed97 0a00 	vldr	s0, [r7]
 800605c:	f7fe fc3e 	bl	80048dc <constrainf>
 8006060:	eef0 7a40 	vmov.f32	s15, s0
 8006064:	4a16      	ldr	r2, [pc, #88]	; (80060c0 <processRcCommand+0x174>)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	edc3 7a00 	vstr	s15, [r3]
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	3301      	adds	r3, #1
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2b02      	cmp	r3, #2
 800607a:	dd97      	ble.n	8005fac <processRcCommand+0x60>
        }
        scaleRawSetpointToFpvCamAngle();
 800607c:	f7ff fee0 	bl	8005e40 <scaleRawSetpointToFpvCamAngle>
    }

    isRxDataNew = false;
 8006080:	4b05      	ldr	r3, [pc, #20]	; (8006098 <processRcCommand+0x14c>)
 8006082:	2200      	movs	r2, #0
 8006084:	701a      	strb	r2, [r3, #0]
}
 8006086:	bf00      	nop
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	200014c0 	.word	0x200014c0
 8006094:	44834000 	.word	0x44834000
 8006098:	2000152c 	.word	0x2000152c
 800609c:	2000152d 	.word	0x2000152d
 80060a0:	20000048 	.word	0x20000048
 80060a4:	200014b0 	.word	0x200014b0
 80060a8:	20000044 	.word	0x20000044
 80060ac:	20000040 	.word	0x20000040
 80060b0:	20001514 	.word	0x20001514
 80060b4:	20001520 	.word	0x20001520
 80060b8:	20000050 	.word	0x20000050
 80060bc:	2000004c 	.word	0x2000004c
 80060c0:	20001464 	.word	0x20001464

080060c4 <buildRotationMatrixFromAlignment>:

#include <string.h>
#include "sensor_align.h"

void buildRotationMatrixFromAlignment(const sensorAlignment_t* sensorAlignment, fp_rotationMatrix_t* rm)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
    fp_angles_t rotationAngles;
    rotationAngles.angles.roll  = DECIDEGREES_TO_RADIANS(sensorAlignment->roll);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060d4:	ee07 3a90 	vmov	s15, r3
 80060d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060dc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80060e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060e4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006148 <buildRotationMatrixFromAlignment+0x84>
 80060e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060ec:	edc7 7a03 	vstr	s15, [r7, #12]
    rotationAngles.angles.pitch = DECIDEGREES_TO_RADIANS(sensorAlignment->pitch);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060fe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006102:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006106:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006148 <buildRotationMatrixFromAlignment+0x84>
 800610a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800610e:	edc7 7a04 	vstr	s15, [r7, #16]
    rotationAngles.angles.yaw   = DECIDEGREES_TO_RADIANS(sensorAlignment->yaw);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006118:	ee07 3a90 	vmov	s15, r3
 800611c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006120:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006124:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006128:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006148 <buildRotationMatrixFromAlignment+0x84>
 800612c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006130:	edc7 7a05 	vstr	s15, [r7, #20]

    buildRotationMatrix(&rotationAngles, rm);
 8006134:	f107 030c 	add.w	r3, r7, #12
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f7fb fd9a 	bl	8001c74 <buildRotationMatrix>
}
 8006140:	bf00      	nop
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	3c8efa35 	.word	0x3c8efa35

0800614c <buildAlignmentFromStandardAlignment>:

void buildAlignmentFromStandardAlignment(sensorAlignment_t* sensorAlignment, sensor_align_e alignment)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	70fb      	strb	r3, [r7, #3]
    if (alignment == ALIGN_CUSTOM || alignment == ALIGN_DEFAULT) {
 8006158:	78fb      	ldrb	r3, [r7, #3]
 800615a:	2b09      	cmp	r3, #9
 800615c:	d03f      	beq.n	80061de <buildAlignmentFromStandardAlignment+0x92>
 800615e:	78fb      	ldrb	r3, [r7, #3]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d03c      	beq.n	80061de <buildAlignmentFromStandardAlignment+0x92>
        return;
    }

    uint8_t alignmentBits = ALIGNMENT_TO_BITMASK(alignment);
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	3b01      	subs	r3, #1
 8006168:	b2db      	uxtb	r3, r3
 800616a:	b25b      	sxtb	r3, r3
 800616c:	f003 0303 	and.w	r3, r3, #3
 8006170:	b25a      	sxtb	r2, r3
 8006172:	78fb      	ldrb	r3, [r7, #3]
 8006174:	3b01      	subs	r3, #1
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	b25b      	sxtb	r3, r3
 800617a:	f003 0308 	and.w	r3, r3, #8
 800617e:	b25b      	sxtb	r3, r3
 8006180:	4313      	orrs	r3, r2
 8006182:	b25b      	sxtb	r3, r3
 8006184:	72fb      	strb	r3, [r7, #11]

    memset(sensorAlignment, 0x00, sizeof(sensorAlignment_t));
 8006186:	2206      	movs	r2, #6
 8006188:	2100      	movs	r1, #0
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f00d fb2f 	bl	80137ee <memset>

    for (int axis = 0; axis < FLIGHT_DYNAMICS_INDEX_COUNT; axis++) {
 8006190:	2300      	movs	r3, #0
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	e01f      	b.n	80061d6 <buildAlignmentFromStandardAlignment+0x8a>
        sensorAlignment->raw[axis] = DEGREES_TO_DECIDEGREES(90) * ALIGNMENT_AXIS_ROTATIONS(alignmentBits, axis);
 8006196:	7afa      	ldrb	r2, [r7, #11]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f1c3 0302 	rsb	r3, r3, #2
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	2103      	movs	r1, #3
 80061a2:	fa01 f303 	lsl.w	r3, r1, r3
 80061a6:	401a      	ands	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f1c3 0302 	rsb	r3, r3, #2
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	fa42 f303 	asr.w	r3, r2, r3
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	0112      	lsls	r2, r2, #4
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	461a      	mov	r2, r3
 80061be:	0112      	lsls	r2, r2, #4
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	b219      	sxth	r1, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int axis = 0; axis < FLIGHT_DYNAMICS_INDEX_COUNT; axis++) {
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	3301      	adds	r3, #1
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	dddc      	ble.n	8006196 <buildAlignmentFromStandardAlignment+0x4a>
 80061dc:	e000      	b.n	80061e0 <buildAlignmentFromStandardAlignment+0x94>
        return;
 80061de:	bf00      	nop
    }
}
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <alignSensorViaRotation>:

void alignSensorViaRotation(float *dest, uint8_t rotation)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	460b      	mov	r3, r1
 80061f2:	70fb      	strb	r3, [r7, #3]
    const float x = dest[X];
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	617b      	str	r3, [r7, #20]
    const float y = dest[Y];
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	613b      	str	r3, [r7, #16]
    const float z = dest[Z];
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	60fb      	str	r3, [r7, #12]

    switch (rotation) {
 8006206:	78fb      	ldrb	r3, [r7, #3]
 8006208:	3b02      	subs	r3, #2
 800620a:	2b06      	cmp	r3, #6
 800620c:	d810      	bhi.n	8006230 <alignSensorViaRotation+0x48>
 800620e:	a201      	add	r2, pc, #4	; (adr r2, 8006214 <alignSensorViaRotation+0x2c>)
 8006210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006214:	08006249 	.word	0x08006249
 8006218:	08006269 	.word	0x08006269
 800621c:	08006291 	.word	0x08006291
 8006220:	080062b1 	.word	0x080062b1
 8006224:	080062d9 	.word	0x080062d9
 8006228:	080062f9 	.word	0x080062f9
 800622c:	08006321 	.word	0x08006321
    default:
    case CW0_DEG:
        dest[X] = x;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	601a      	str	r2, [r3, #0]
        dest[Y] = y;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3304      	adds	r3, #4
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	601a      	str	r2, [r3, #0]
        dest[Z] = z;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3308      	adds	r3, #8
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	601a      	str	r2, [r3, #0]
        break;
 8006246:	e083      	b.n	8006350 <alignSensorViaRotation+0x168>
    case CW90_DEG:
        dest[X] = y;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	601a      	str	r2, [r3, #0]
        dest[Y] = -x;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	3304      	adds	r3, #4
 8006252:	edd7 7a05 	vldr	s15, [r7, #20]
 8006256:	eef1 7a67 	vneg.f32	s15, s15
 800625a:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = z;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	3308      	adds	r3, #8
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	601a      	str	r2, [r3, #0]
        break;
 8006266:	e073      	b.n	8006350 <alignSensorViaRotation+0x168>
    case CW180_DEG:
        dest[X] = -x;
 8006268:	edd7 7a05 	vldr	s15, [r7, #20]
 800626c:	eef1 7a67 	vneg.f32	s15, s15
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = -y;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3304      	adds	r3, #4
 800627a:	edd7 7a04 	vldr	s15, [r7, #16]
 800627e:	eef1 7a67 	vneg.f32	s15, s15
 8006282:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = z;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3308      	adds	r3, #8
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	601a      	str	r2, [r3, #0]
        break;
 800628e:	e05f      	b.n	8006350 <alignSensorViaRotation+0x168>
    case CW270_DEG:
        dest[X] = -y;
 8006290:	edd7 7a04 	vldr	s15, [r7, #16]
 8006294:	eef1 7a67 	vneg.f32	s15, s15
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = x;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3304      	adds	r3, #4
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	601a      	str	r2, [r3, #0]
        dest[Z] = z;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3308      	adds	r3, #8
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	601a      	str	r2, [r3, #0]
        break;
 80062ae:	e04f      	b.n	8006350 <alignSensorViaRotation+0x168>
    case CW0_DEG_FLIP:
        dest[X] = -x;
 80062b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80062b4:	eef1 7a67 	vneg.f32	s15, s15
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = y;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	3304      	adds	r3, #4
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	601a      	str	r2, [r3, #0]
        dest[Z] = -z;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	3308      	adds	r3, #8
 80062ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80062ce:	eef1 7a67 	vneg.f32	s15, s15
 80062d2:	edc3 7a00 	vstr	s15, [r3]
        break;
 80062d6:	e03b      	b.n	8006350 <alignSensorViaRotation+0x168>
    case CW90_DEG_FLIP:
        dest[X] = y;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	601a      	str	r2, [r3, #0]
        dest[Y] = x;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	3304      	adds	r3, #4
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	601a      	str	r2, [r3, #0]
        dest[Z] = -z;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	3308      	adds	r3, #8
 80062ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80062ee:	eef1 7a67 	vneg.f32	s15, s15
 80062f2:	edc3 7a00 	vstr	s15, [r3]
        break;
 80062f6:	e02b      	b.n	8006350 <alignSensorViaRotation+0x168>
    case CW180_DEG_FLIP:
        dest[X] = x;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	601a      	str	r2, [r3, #0]
        dest[Y] = -y;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3304      	adds	r3, #4
 8006302:	edd7 7a04 	vldr	s15, [r7, #16]
 8006306:	eef1 7a67 	vneg.f32	s15, s15
 800630a:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = -z;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	3308      	adds	r3, #8
 8006312:	edd7 7a03 	vldr	s15, [r7, #12]
 8006316:	eef1 7a67 	vneg.f32	s15, s15
 800631a:	edc3 7a00 	vstr	s15, [r3]
        break;
 800631e:	e017      	b.n	8006350 <alignSensorViaRotation+0x168>
    case CW270_DEG_FLIP:
        dest[X] = -y;
 8006320:	edd7 7a04 	vldr	s15, [r7, #16]
 8006324:	eef1 7a67 	vneg.f32	s15, s15
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = -x;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	3304      	adds	r3, #4
 8006332:	edd7 7a05 	vldr	s15, [r7, #20]
 8006336:	eef1 7a67 	vneg.f32	s15, s15
 800633a:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = -z;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	3308      	adds	r3, #8
 8006342:	edd7 7a03 	vldr	s15, [r7, #12]
 8006346:	eef1 7a67 	vneg.f32	s15, s15
 800634a:	edc3 7a00 	vstr	s15, [r3]
        break;
 800634e:	bf00      	nop
    }
}
 8006350:	bf00      	nop
 8006352:	371c      	adds	r7, #28
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006362:	4b11      	ldr	r3, [pc, #68]	; (80063a8 <HAL_MspInit+0x4c>)
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	4a10      	ldr	r2, [pc, #64]	; (80063a8 <HAL_MspInit+0x4c>)
 8006368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800636c:	6413      	str	r3, [r2, #64]	; 0x40
 800636e:	4b0e      	ldr	r3, [pc, #56]	; (80063a8 <HAL_MspInit+0x4c>)
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006376:	607b      	str	r3, [r7, #4]
 8006378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800637a:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <HAL_MspInit+0x4c>)
 800637c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637e:	4a0a      	ldr	r2, [pc, #40]	; (80063a8 <HAL_MspInit+0x4c>)
 8006380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006384:	6453      	str	r3, [r2, #68]	; 0x44
 8006386:	4b08      	ldr	r3, [pc, #32]	; (80063a8 <HAL_MspInit+0x4c>)
 8006388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800638e:	603b      	str	r3, [r7, #0]
 8006390:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006392:	2200      	movs	r2, #0
 8006394:	210f      	movs	r1, #15
 8006396:	f06f 0001 	mvn.w	r0, #1
 800639a:	f005 fe6f 	bl	800c07c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800639e:	bf00      	nop
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	40023800 	.word	0x40023800

080063ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b0ae      	sub	sp, #184	; 0xb8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80063b8:	2200      	movs	r2, #0
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	605a      	str	r2, [r3, #4]
 80063be:	609a      	str	r2, [r3, #8]
 80063c0:	60da      	str	r2, [r3, #12]
 80063c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80063c4:	f107 0314 	add.w	r3, r7, #20
 80063c8:	2290      	movs	r2, #144	; 0x90
 80063ca:	2100      	movs	r1, #0
 80063cc:	4618      	mov	r0, r3
 80063ce:	f00d fa0e 	bl	80137ee <memset>
  if(huart->Instance==USART3)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a22      	ldr	r2, [pc, #136]	; (8006460 <HAL_UART_MspInit+0xb4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d13c      	bne.n	8006456 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80063dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80063e2:	2300      	movs	r3, #0
 80063e4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80063e6:	f107 0314 	add.w	r3, r7, #20
 80063ea:	4618      	mov	r0, r3
 80063ec:	f007 fe3e 	bl	800e06c <HAL_RCCEx_PeriphCLKConfig>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80063f6:	f7fe fa53 	bl	80048a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80063fa:	4b1a      	ldr	r3, [pc, #104]	; (8006464 <HAL_UART_MspInit+0xb8>)
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	4a19      	ldr	r2, [pc, #100]	; (8006464 <HAL_UART_MspInit+0xb8>)
 8006400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006404:	6413      	str	r3, [r2, #64]	; 0x40
 8006406:	4b17      	ldr	r3, [pc, #92]	; (8006464 <HAL_UART_MspInit+0xb8>)
 8006408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800640e:	613b      	str	r3, [r7, #16]
 8006410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006412:	4b14      	ldr	r3, [pc, #80]	; (8006464 <HAL_UART_MspInit+0xb8>)
 8006414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006416:	4a13      	ldr	r2, [pc, #76]	; (8006464 <HAL_UART_MspInit+0xb8>)
 8006418:	f043 0308 	orr.w	r3, r3, #8
 800641c:	6313      	str	r3, [r2, #48]	; 0x30
 800641e:	4b11      	ldr	r3, [pc, #68]	; (8006464 <HAL_UART_MspInit+0xb8>)
 8006420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006422:	f003 0308 	and.w	r3, r3, #8
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800642a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800642e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006432:	2302      	movs	r3, #2
 8006434:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006438:	2300      	movs	r3, #0
 800643a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800643e:	2303      	movs	r3, #3
 8006440:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006444:	2307      	movs	r3, #7
 8006446:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800644a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800644e:	4619      	mov	r1, r3
 8006450:	4805      	ldr	r0, [pc, #20]	; (8006468 <HAL_UART_MspInit+0xbc>)
 8006452:	f005 fe3d 	bl	800c0d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006456:	bf00      	nop
 8006458:	37b8      	adds	r7, #184	; 0xb8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	40004800 	.word	0x40004800
 8006464:	40023800 	.word	0x40023800
 8006468:	40020c00 	.word	0x40020c00

0800646c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b0ae      	sub	sp, #184	; 0xb8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006474:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	605a      	str	r2, [r3, #4]
 800647e:	609a      	str	r2, [r3, #8]
 8006480:	60da      	str	r2, [r3, #12]
 8006482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006484:	f107 0314 	add.w	r3, r7, #20
 8006488:	2290      	movs	r2, #144	; 0x90
 800648a:	2100      	movs	r1, #0
 800648c:	4618      	mov	r0, r3
 800648e:	f00d f9ae 	bl	80137ee <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800649a:	d159      	bne.n	8006550 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800649c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80064a0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80064a8:	f107 0314 	add.w	r3, r7, #20
 80064ac:	4618      	mov	r0, r3
 80064ae:	f007 fddd 	bl	800e06c <HAL_RCCEx_PeriphCLKConfig>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80064b8:	f7fe f9f2 	bl	80048a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064bc:	4b26      	ldr	r3, [pc, #152]	; (8006558 <HAL_PCD_MspInit+0xec>)
 80064be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c0:	4a25      	ldr	r2, [pc, #148]	; (8006558 <HAL_PCD_MspInit+0xec>)
 80064c2:	f043 0301 	orr.w	r3, r3, #1
 80064c6:	6313      	str	r3, [r2, #48]	; 0x30
 80064c8:	4b23      	ldr	r3, [pc, #140]	; (8006558 <HAL_PCD_MspInit+0xec>)
 80064ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	613b      	str	r3, [r7, #16]
 80064d2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80064d4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80064d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064dc:	2302      	movs	r3, #2
 80064de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064e8:	2303      	movs	r3, #3
 80064ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80064ee:	230a      	movs	r3, #10
 80064f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80064f8:	4619      	mov	r1, r3
 80064fa:	4818      	ldr	r0, [pc, #96]	; (800655c <HAL_PCD_MspInit+0xf0>)
 80064fc:	f005 fde8 	bl	800c0d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006504:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006508:	2300      	movs	r3, #0
 800650a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800650e:	2300      	movs	r3, #0
 8006510:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006514:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006518:	4619      	mov	r1, r3
 800651a:	4810      	ldr	r0, [pc, #64]	; (800655c <HAL_PCD_MspInit+0xf0>)
 800651c:	f005 fdd8 	bl	800c0d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006520:	4b0d      	ldr	r3, [pc, #52]	; (8006558 <HAL_PCD_MspInit+0xec>)
 8006522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006524:	4a0c      	ldr	r2, [pc, #48]	; (8006558 <HAL_PCD_MspInit+0xec>)
 8006526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800652a:	6353      	str	r3, [r2, #52]	; 0x34
 800652c:	4b0a      	ldr	r3, [pc, #40]	; (8006558 <HAL_PCD_MspInit+0xec>)
 800652e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4b07      	ldr	r3, [pc, #28]	; (8006558 <HAL_PCD_MspInit+0xec>)
 800653a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653c:	4a06      	ldr	r2, [pc, #24]	; (8006558 <HAL_PCD_MspInit+0xec>)
 800653e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006542:	6453      	str	r3, [r2, #68]	; 0x44
 8006544:	4b04      	ldr	r3, [pc, #16]	; (8006558 <HAL_PCD_MspInit+0xec>)
 8006546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800654c:	60bb      	str	r3, [r7, #8]
 800654e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8006550:	bf00      	nop
 8006552:	37b8      	adds	r7, #184	; 0xb8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	40023800 	.word	0x40023800
 800655c:	40020000 	.word	0x40020000

08006560 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08c      	sub	sp, #48	; 0x30
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800656c:	2300      	movs	r3, #0
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006570:	4b2e      	ldr	r3, [pc, #184]	; (800662c <HAL_InitTick+0xcc>)
 8006572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006574:	4a2d      	ldr	r2, [pc, #180]	; (800662c <HAL_InitTick+0xcc>)
 8006576:	f043 0301 	orr.w	r3, r3, #1
 800657a:	6453      	str	r3, [r2, #68]	; 0x44
 800657c:	4b2b      	ldr	r3, [pc, #172]	; (800662c <HAL_InitTick+0xcc>)
 800657e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	60bb      	str	r3, [r7, #8]
 8006586:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006588:	f107 020c 	add.w	r2, r7, #12
 800658c:	f107 0310 	add.w	r3, r7, #16
 8006590:	4611      	mov	r1, r2
 8006592:	4618      	mov	r0, r3
 8006594:	f007 fd38 	bl	800e008 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006598:	f007 fd22 	bl	800dfe0 <HAL_RCC_GetPCLK2Freq>
 800659c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800659e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a0:	4a23      	ldr	r2, [pc, #140]	; (8006630 <HAL_InitTick+0xd0>)
 80065a2:	fba2 2303 	umull	r2, r3, r2, r3
 80065a6:	0c9b      	lsrs	r3, r3, #18
 80065a8:	3b01      	subs	r3, #1
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80065ac:	4b21      	ldr	r3, [pc, #132]	; (8006634 <HAL_InitTick+0xd4>)
 80065ae:	4a22      	ldr	r2, [pc, #136]	; (8006638 <HAL_InitTick+0xd8>)
 80065b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80065b2:	4b20      	ldr	r3, [pc, #128]	; (8006634 <HAL_InitTick+0xd4>)
 80065b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80065b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80065ba:	4a1e      	ldr	r2, [pc, #120]	; (8006634 <HAL_InitTick+0xd4>)
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80065c0:	4b1c      	ldr	r3, [pc, #112]	; (8006634 <HAL_InitTick+0xd4>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065c6:	4b1b      	ldr	r3, [pc, #108]	; (8006634 <HAL_InitTick+0xd4>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065cc:	4b19      	ldr	r3, [pc, #100]	; (8006634 <HAL_InitTick+0xd4>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80065d2:	4818      	ldr	r0, [pc, #96]	; (8006634 <HAL_InitTick+0xd4>)
 80065d4:	f008 f972 	bl	800e8bc <HAL_TIM_Base_Init>
 80065d8:	4603      	mov	r3, r0
 80065da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80065de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d11b      	bne.n	800661e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80065e6:	4813      	ldr	r0, [pc, #76]	; (8006634 <HAL_InitTick+0xd4>)
 80065e8:	f008 f9ca 	bl	800e980 <HAL_TIM_Base_Start_IT>
 80065ec:	4603      	mov	r3, r0
 80065ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80065f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d111      	bne.n	800661e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80065fa:	2019      	movs	r0, #25
 80065fc:	f005 fd5a 	bl	800c0b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b0f      	cmp	r3, #15
 8006604:	d808      	bhi.n	8006618 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8006606:	2200      	movs	r2, #0
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	2019      	movs	r0, #25
 800660c:	f005 fd36 	bl	800c07c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006610:	4a0a      	ldr	r2, [pc, #40]	; (800663c <HAL_InitTick+0xdc>)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	e002      	b.n	800661e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800661e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006622:	4618      	mov	r0, r3
 8006624:	3730      	adds	r7, #48	; 0x30
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	40023800 	.word	0x40023800
 8006630:	431bde83 	.word	0x431bde83
 8006634:	200015a0 	.word	0x200015a0
 8006638:	40010000 	.word	0x40010000
 800663c:	200001b4 	.word	0x200001b4

08006640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006640:	b480      	push	{r7}
 8006642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006644:	e7fe      	b.n	8006644 <NMI_Handler+0x4>

08006646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006646:	b480      	push	{r7}
 8006648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800664a:	e7fe      	b.n	800664a <HardFault_Handler+0x4>

0800664c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006650:	e7fe      	b.n	8006650 <MemManage_Handler+0x4>

08006652 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006652:	b480      	push	{r7}
 8006654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006656:	e7fe      	b.n	8006656 <BusFault_Handler+0x4>

08006658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006658:	b480      	push	{r7}
 800665a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800665c:	e7fe      	b.n	800665c <UsageFault_Handler+0x4>

0800665e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800665e:	b480      	push	{r7}
 8006660:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006662:	bf00      	nop
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006670:	4802      	ldr	r0, [pc, #8]	; (800667c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006672:	f008 f9fd 	bl	800ea70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006676:	bf00      	nop
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	200015a0 	.word	0x200015a0

08006680 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8006686:	2300      	movs	r3, #0
 8006688:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800668a:	4b19      	ldr	r3, [pc, #100]	; (80066f0 <BSP_I2C1_Init+0x70>)
 800668c:	4a19      	ldr	r2, [pc, #100]	; (80066f4 <BSP_I2C1_Init+0x74>)
 800668e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8006690:	4b19      	ldr	r3, [pc, #100]	; (80066f8 <BSP_I2C1_Init+0x78>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	1c5a      	adds	r2, r3, #1
 8006696:	4918      	ldr	r1, [pc, #96]	; (80066f8 <BSP_I2C1_Init+0x78>)
 8006698:	600a      	str	r2, [r1, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d122      	bne.n	80066e4 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800669e:	4814      	ldr	r0, [pc, #80]	; (80066f0 <BSP_I2C1_Init+0x70>)
 80066a0:	f006 faea 	bl	800cc78 <HAL_I2C_GetState>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d11c      	bne.n	80066e4 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80066aa:	4811      	ldr	r0, [pc, #68]	; (80066f0 <BSP_I2C1_Init+0x70>)
 80066ac:	f000 f8fe 	bl	80068ac <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d116      	bne.n	80066e4 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80066b6:	480e      	ldr	r0, [pc, #56]	; (80066f0 <BSP_I2C1_Init+0x70>)
 80066b8:	f000 f8b4 	bl	8006824 <MX_I2C1_Init>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d003      	beq.n	80066ca <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80066c2:	f06f 0307 	mvn.w	r3, #7
 80066c6:	607b      	str	r3, [r7, #4]
 80066c8:	e00c      	b.n	80066e4 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80066ca:	2100      	movs	r1, #0
 80066cc:	4808      	ldr	r0, [pc, #32]	; (80066f0 <BSP_I2C1_Init+0x70>)
 80066ce:	f006 fd87 	bl	800d1e0 <HAL_I2CEx_ConfigAnalogFilter>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80066d8:	f06f 0307 	mvn.w	r3, #7
 80066dc:	607b      	str	r3, [r7, #4]
 80066de:	e001      	b.n	80066e4 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80066e0:	2300      	movs	r3, #0
 80066e2:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80066e4:	687b      	ldr	r3, [r7, #4]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	200015ec 	.word	0x200015ec
 80066f4:	40005400 	.word	0x40005400
 80066f8:	20001640 	.word	0x20001640

080066fc <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8006702:	2300      	movs	r3, #0
 8006704:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8006706:	4b0f      	ldr	r3, [pc, #60]	; (8006744 <BSP_I2C1_DeInit+0x48>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d014      	beq.n	8006738 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800670e:	4b0d      	ldr	r3, [pc, #52]	; (8006744 <BSP_I2C1_DeInit+0x48>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	3b01      	subs	r3, #1
 8006714:	4a0b      	ldr	r2, [pc, #44]	; (8006744 <BSP_I2C1_DeInit+0x48>)
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <BSP_I2C1_DeInit+0x48>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10b      	bne.n	8006738 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8006720:	4809      	ldr	r0, [pc, #36]	; (8006748 <BSP_I2C1_DeInit+0x4c>)
 8006722:	f000 f925 	bl	8006970 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8006726:	4808      	ldr	r0, [pc, #32]	; (8006748 <BSP_I2C1_DeInit+0x4c>)
 8006728:	f006 f834 	bl	800c794 <HAL_I2C_DeInit>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8006732:	f06f 0307 	mvn.w	r3, #7
 8006736:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8006738:	687b      	ldr	r3, [r7, #4]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20001640 	.word	0x20001640
 8006748:	200015ec 	.word	0x200015ec

0800674c <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b08a      	sub	sp, #40	; 0x28
 8006750:	af04      	add	r7, sp, #16
 8006752:	60ba      	str	r2, [r7, #8]
 8006754:	461a      	mov	r2, r3
 8006756:	4603      	mov	r3, r0
 8006758:	81fb      	strh	r3, [r7, #14]
 800675a:	460b      	mov	r3, r1
 800675c:	81bb      	strh	r3, [r7, #12]
 800675e:	4613      	mov	r3, r2
 8006760:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8006762:	2300      	movs	r3, #0
 8006764:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8006766:	89ba      	ldrh	r2, [r7, #12]
 8006768:	89f9      	ldrh	r1, [r7, #14]
 800676a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800676e:	9302      	str	r3, [sp, #8]
 8006770:	88fb      	ldrh	r3, [r7, #6]
 8006772:	9301      	str	r3, [sp, #4]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	2301      	movs	r3, #1
 800677a:	480c      	ldr	r0, [pc, #48]	; (80067ac <BSP_I2C1_WriteReg+0x60>)
 800677c:	f006 f84e 	bl	800c81c <HAL_I2C_Mem_Write>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00c      	beq.n	80067a0 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8006786:	4809      	ldr	r0, [pc, #36]	; (80067ac <BSP_I2C1_WriteReg+0x60>)
 8006788:	f006 fa84 	bl	800cc94 <HAL_I2C_GetError>
 800678c:	4603      	mov	r3, r0
 800678e:	2b04      	cmp	r3, #4
 8006790:	d103      	bne.n	800679a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8006792:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8006796:	617b      	str	r3, [r7, #20]
 8006798:	e002      	b.n	80067a0 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800679a:	f06f 0303 	mvn.w	r3, #3
 800679e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80067a0:	697b      	ldr	r3, [r7, #20]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3718      	adds	r7, #24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	200015ec 	.word	0x200015ec

080067b0 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08a      	sub	sp, #40	; 0x28
 80067b4:	af04      	add	r7, sp, #16
 80067b6:	60ba      	str	r2, [r7, #8]
 80067b8:	461a      	mov	r2, r3
 80067ba:	4603      	mov	r3, r0
 80067bc:	81fb      	strh	r3, [r7, #14]
 80067be:	460b      	mov	r3, r1
 80067c0:	81bb      	strh	r3, [r7, #12]
 80067c2:	4613      	mov	r3, r2
 80067c4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80067c6:	2300      	movs	r3, #0
 80067c8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80067ca:	89ba      	ldrh	r2, [r7, #12]
 80067cc:	89f9      	ldrh	r1, [r7, #14]
 80067ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067d2:	9302      	str	r3, [sp, #8]
 80067d4:	88fb      	ldrh	r3, [r7, #6]
 80067d6:	9301      	str	r3, [sp, #4]
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	2301      	movs	r3, #1
 80067de:	480c      	ldr	r0, [pc, #48]	; (8006810 <BSP_I2C1_ReadReg+0x60>)
 80067e0:	f006 f930 	bl	800ca44 <HAL_I2C_Mem_Read>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00c      	beq.n	8006804 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80067ea:	4809      	ldr	r0, [pc, #36]	; (8006810 <BSP_I2C1_ReadReg+0x60>)
 80067ec:	f006 fa52 	bl	800cc94 <HAL_I2C_GetError>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b04      	cmp	r3, #4
 80067f4:	d103      	bne.n	80067fe <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80067f6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	e002      	b.n	8006804 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80067fe:	f06f 0303 	mvn.w	r3, #3
 8006802:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8006804:	697b      	ldr	r3, [r7, #20]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	200015ec 	.word	0x200015ec

08006814 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006818:	f005 fb48 	bl	800beac <HAL_GetTick>
 800681c:	4603      	mov	r3, r0
}
 800681e:	4618      	mov	r0, r3
 8006820:	bd80      	pop	{r7, pc}
	...

08006824 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800682c:	2300      	movs	r3, #0
 800682e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a1c      	ldr	r2, [pc, #112]	; (80068a4 <MX_I2C1_Init+0x80>)
 8006834:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x20303E5D;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a1b      	ldr	r2, [pc, #108]	; (80068a8 <MX_I2C1_Init+0x84>)
 800683a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f005 ff04 	bl	800c674 <HAL_I2C_Init>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006876:	2100      	movs	r1, #0
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f006 fcb1 	bl	800d1e0 <HAL_I2CEx_ConfigAnalogFilter>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8006888:	2100      	movs	r1, #0
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f006 fcf3 	bl	800d276 <HAL_I2CEx_ConfigDigitalFilter>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800689a:	7bfb      	ldrb	r3, [r7, #15]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	40005400 	.word	0x40005400
 80068a8:	20303e5d 	.word	0x20303e5d

080068ac <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b0ae      	sub	sp, #184	; 0xb8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80068b4:	f107 0314 	add.w	r3, r7, #20
 80068b8:	2290      	movs	r2, #144	; 0x90
 80068ba:	2100      	movs	r1, #0
 80068bc:	4618      	mov	r0, r3
 80068be:	f00c ff96 	bl	80137ee <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80068c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068c6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80068c8:	2300      	movs	r3, #0
 80068ca:	67bb      	str	r3, [r7, #120]	; 0x78
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80068cc:	f107 0314 	add.w	r3, r7, #20
 80068d0:	4618      	mov	r0, r3
 80068d2:	f007 fbcb 	bl	800e06c <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068d6:	4b24      	ldr	r3, [pc, #144]	; (8006968 <I2C1_MspInit+0xbc>)
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	4a23      	ldr	r2, [pc, #140]	; (8006968 <I2C1_MspInit+0xbc>)
 80068dc:	f043 0302 	orr.w	r3, r3, #2
 80068e0:	6313      	str	r3, [r2, #48]	; 0x30
 80068e2:	4b21      	ldr	r3, [pc, #132]	; (8006968 <I2C1_MspInit+0xbc>)
 80068e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	613b      	str	r3, [r7, #16]
 80068ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80068ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80068f6:	2312      	movs	r3, #18
 80068f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068fc:	2300      	movs	r3, #0
 80068fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006902:	2303      	movs	r3, #3
 8006904:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8006908:	2304      	movs	r3, #4
 800690a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800690e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006912:	4619      	mov	r1, r3
 8006914:	4815      	ldr	r0, [pc, #84]	; (800696c <I2C1_MspInit+0xc0>)
 8006916:	f005 fbdb 	bl	800c0d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800691a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800691e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006922:	2312      	movs	r3, #18
 8006924:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006928:	2300      	movs	r3, #0
 800692a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800692e:	2303      	movs	r3, #3
 8006930:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8006934:	2304      	movs	r3, #4
 8006936:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800693a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800693e:	4619      	mov	r1, r3
 8006940:	480a      	ldr	r0, [pc, #40]	; (800696c <I2C1_MspInit+0xc0>)
 8006942:	f005 fbc5 	bl	800c0d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006946:	4b08      	ldr	r3, [pc, #32]	; (8006968 <I2C1_MspInit+0xbc>)
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	4a07      	ldr	r2, [pc, #28]	; (8006968 <I2C1_MspInit+0xbc>)
 800694c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006950:	6413      	str	r3, [r2, #64]	; 0x40
 8006952:	4b05      	ldr	r3, [pc, #20]	; (8006968 <I2C1_MspInit+0xbc>)
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800695e:	bf00      	nop
 8006960:	37b8      	adds	r7, #184	; 0xb8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	40023800 	.word	0x40023800
 800696c:	40020400 	.word	0x40020400

08006970 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Disable Peripheral clock */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8006978:	4b09      	ldr	r3, [pc, #36]	; (80069a0 <I2C1_MspDeInit+0x30>)
 800697a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697c:	4a08      	ldr	r2, [pc, #32]	; (80069a0 <I2C1_MspDeInit+0x30>)
 800697e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006982:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8006984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006988:	4806      	ldr	r0, [pc, #24]	; (80069a4 <I2C1_MspDeInit+0x34>)
 800698a:	f005 fd4d 	bl	800c428 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800698e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006992:	4804      	ldr	r0, [pc, #16]	; (80069a4 <I2C1_MspDeInit+0x34>)
 8006994:	f005 fd48 	bl	800c428 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8006998:	bf00      	nop
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	40023800 	.word	0x40023800
 80069a4:	40020400 	.word	0x40020400

080069a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80069a8:	b480      	push	{r7}
 80069aa:	af00      	add	r7, sp, #0
	return 1;
 80069ac:	2301      	movs	r3, #1
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <_kill>:

int _kill(int pid, int sig)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80069c2:	f00c fde3 	bl	801358c <__errno>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2216      	movs	r2, #22
 80069ca:	601a      	str	r2, [r3, #0]
	return -1;
 80069cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <_exit>:

void _exit (int status)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80069e0:	f04f 31ff 	mov.w	r1, #4294967295
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7ff ffe7 	bl	80069b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80069ea:	e7fe      	b.n	80069ea <_exit+0x12>

080069ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069f8:	2300      	movs	r3, #0
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	e00a      	b.n	8006a14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80069fe:	f3af 8000 	nop.w
 8006a02:	4601      	mov	r1, r0
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	60ba      	str	r2, [r7, #8]
 8006a0a:	b2ca      	uxtb	r2, r1
 8006a0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	3301      	adds	r3, #1
 8006a12:	617b      	str	r3, [r7, #20]
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	dbf0      	blt.n	80069fe <_read+0x12>
	}

return len;
 8006a1c:	687b      	ldr	r3, [r7, #4]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b086      	sub	sp, #24
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	60f8      	str	r0, [r7, #12]
 8006a2e:	60b9      	str	r1, [r7, #8]
 8006a30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a32:	2300      	movs	r3, #0
 8006a34:	617b      	str	r3, [r7, #20]
 8006a36:	e009      	b.n	8006a4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	1c5a      	adds	r2, r3, #1
 8006a3c:	60ba      	str	r2, [r7, #8]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	dbf1      	blt.n	8006a38 <_write+0x12>
	}
	return len;
 8006a54:	687b      	ldr	r3, [r7, #4]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3718      	adds	r7, #24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <_close>:

int _close(int file)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
	return -1;
 8006a66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b083      	sub	sp, #12
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a86:	605a      	str	r2, [r3, #4]
	return 0;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <_isatty>:

int _isatty(int file)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b083      	sub	sp, #12
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
	return 1;
 8006a9e:	2301      	movs	r3, #1
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
	return 0;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
	...

08006ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ad0:	4a14      	ldr	r2, [pc, #80]	; (8006b24 <_sbrk+0x5c>)
 8006ad2:	4b15      	ldr	r3, [pc, #84]	; (8006b28 <_sbrk+0x60>)
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006adc:	4b13      	ldr	r3, [pc, #76]	; (8006b2c <_sbrk+0x64>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d102      	bne.n	8006aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006ae4:	4b11      	ldr	r3, [pc, #68]	; (8006b2c <_sbrk+0x64>)
 8006ae6:	4a12      	ldr	r2, [pc, #72]	; (8006b30 <_sbrk+0x68>)
 8006ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006aea:	4b10      	ldr	r3, [pc, #64]	; (8006b2c <_sbrk+0x64>)
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4413      	add	r3, r2
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d207      	bcs.n	8006b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006af8:	f00c fd48 	bl	801358c <__errno>
 8006afc:	4603      	mov	r3, r0
 8006afe:	220c      	movs	r2, #12
 8006b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006b02:	f04f 33ff 	mov.w	r3, #4294967295
 8006b06:	e009      	b.n	8006b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006b08:	4b08      	ldr	r3, [pc, #32]	; (8006b2c <_sbrk+0x64>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006b0e:	4b07      	ldr	r3, [pc, #28]	; (8006b2c <_sbrk+0x64>)
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4413      	add	r3, r2
 8006b16:	4a05      	ldr	r2, [pc, #20]	; (8006b2c <_sbrk+0x64>)
 8006b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	20080000 	.word	0x20080000
 8006b28:	00000400 	.word	0x00000400
 8006b2c:	20001644 	.word	0x20001644
 8006b30:	200061e8 	.word	0x200061e8

08006b34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006b34:	b480      	push	{r7}
 8006b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b38:	4b06      	ldr	r3, [pc, #24]	; (8006b54 <SystemInit+0x20>)
 8006b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3e:	4a05      	ldr	r2, [pc, #20]	; (8006b54 <SystemInit+0x20>)
 8006b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006b48:	bf00      	nop
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	e000ed00 	.word	0xe000ed00

08006b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006b5c:	480d      	ldr	r0, [pc, #52]	; (8006b94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006b5e:	490e      	ldr	r1, [pc, #56]	; (8006b98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006b60:	4a0e      	ldr	r2, [pc, #56]	; (8006b9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b64:	e002      	b.n	8006b6c <LoopCopyDataInit>

08006b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b6a:	3304      	adds	r3, #4

08006b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b70:	d3f9      	bcc.n	8006b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b72:	4a0b      	ldr	r2, [pc, #44]	; (8006ba0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006b74:	4c0b      	ldr	r4, [pc, #44]	; (8006ba4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b78:	e001      	b.n	8006b7e <LoopFillZerobss>

08006b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b7c:	3204      	adds	r2, #4

08006b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b80:	d3fb      	bcc.n	8006b7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006b82:	f7ff ffd7 	bl	8006b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b86:	f00c fdfd 	bl	8013784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b8a:	f7fc fefb 	bl	8003984 <main>
  bx  lr    
 8006b8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006b90:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8006b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006b98:	20000394 	.word	0x20000394
  ldr r2, =_sidata
 8006b9c:	08018e00 	.word	0x08018e00
  ldr r2, =_sbss
 8006ba0:	20000394 	.word	0x20000394
  ldr r4, =_ebss
 8006ba4:	200061e4 	.word	0x200061e4

08006ba8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006ba8:	e7fe      	b.n	8006ba8 <ADC_IRQHandler>
	...

08006bac <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d103      	bne.n	8006bc4 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8006bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc0:	60fb      	str	r3, [r7, #12]
 8006bc2:	e034      	b.n	8006c2e <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	7b1a      	ldrb	r2, [r3, #12]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	691a      	ldr	r2, [r3, #16]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	695a      	ldr	r2, [r3, #20]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	699a      	ldr	r2, [r3, #24]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a0e      	ldr	r2, [pc, #56]	; (8006c38 <HTS221_RegisterBusIO+0x8c>)
 8006c00:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a0d      	ldr	r2, [pc, #52]	; (8006c3c <HTS221_RegisterBusIO+0x90>)
 8006c06:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	69da      	ldr	r2, [r3, #28]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d004      	beq.n	8006c28 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4798      	blx	r3
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	e002      	b.n	8006c2e <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8006c28:	f04f 33ff 	mov.w	r3, #4294967295
 8006c2c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	0800726b 	.word	0x0800726b
 8006c3c:	080072cd 	.word	0x080072cd

08006c40 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d108      	bne.n	8006c64 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 faa4 	bl	80071a0 <HTS221_Initialize>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8006c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c62:	e004      	b.n	8006c6e <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b082      	sub	sp, #8
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d111      	bne.n	8006cac <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f878 	bl	8006d7e <HTS221_HUM_Disable>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8006c94:	f04f 33ff 	mov.w	r3, #4294967295
 8006c98:	e00d      	b.n	8006cb6 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f95f 	bl	8006f5e <HTS221_TEMP_Disable>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d002      	beq.n	8006cac <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8006ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8006caa:	e004      	b.n	8006cb6 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b082      	sub	sp, #8
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	3320      	adds	r3, #32
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 fc28 	bl	8007524 <hts221_device_id_get>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8006cda:	f04f 33ff 	mov.w	r3, #4294967295
 8006cde:	e000      	b.n	8006ce2 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
	...

08006cec <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2201      	movs	r2, #1
 8006d06:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	4a07      	ldr	r2, [pc, #28]	; (8006d30 <HTS221_GetCapabilities+0x44>)
 8006d12:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	4a06      	ldr	r2, [pc, #24]	; (8006d30 <HTS221_GetCapabilities+0x44>)
 8006d18:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	f04f 0200 	mov.w	r2, #0
 8006d20:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	41480000 	.word	0x41480000

08006d34 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d101      	bne.n	8006d4a <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	e015      	b.n	8006d76 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10b      	bne.n	8006d6c <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3320      	adds	r3, #32
 8006d58:	2101      	movs	r1, #1
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 fbf3 	bl	8007546 <hts221_power_on_set>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d002      	beq.n	8006d6c <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8006d66:	f04f 33ff 	mov.w	r3, #4294967295
 8006d6a:	e004      	b.n	8006d76 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b082      	sub	sp, #8
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	e015      	b.n	8006dc0 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10b      	bne.n	8006db6 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	3320      	adds	r3, #32
 8006da2:	2100      	movs	r1, #0
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 fbce 	bl	8007546 <hts221_power_on_set>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8006db0:	f04f 33ff 	mov.w	r3, #4294967295
 8006db4:	e004      	b.n	8006dc0 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f96f 	bl	80070b8 <HTS221_GetOutputDataRate>
 8006dda:	4603      	mov	r3, r0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8006df0:	ed97 0a00 	vldr	s0, [r7]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f9a3 	bl	8007140 <HTS221_SetOutputDataRate>
 8006dfa:	4603      	mov	r3, r0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b088      	sub	sp, #32
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3320      	adds	r3, #32
 8006e12:	f107 020c 	add.w	r2, r7, #12
 8006e16:	4611      	mov	r1, r2
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 fc58 	bl	80076ce <hts221_hum_adc_point_0_get>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8006e24:	f04f 33ff 	mov.w	r3, #4294967295
 8006e28:	e06b      	b.n	8006f02 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f103 0220 	add.w	r2, r3, #32
 8006e30:	f107 030c 	add.w	r3, r7, #12
 8006e34:	3304      	adds	r3, #4
 8006e36:	4619      	mov	r1, r3
 8006e38:	4610      	mov	r0, r2
 8006e3a:	f000 fbaa 	bl	8007592 <hts221_hum_rh_point_0_get>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8006e44:	f04f 33ff 	mov.w	r3, #4294967295
 8006e48:	e05b      	b.n	8006f02 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f103 0220 	add.w	r2, r3, #32
 8006e50:	f107 030c 	add.w	r3, r7, #12
 8006e54:	3308      	adds	r3, #8
 8006e56:	4619      	mov	r1, r3
 8006e58:	4610      	mov	r0, r2
 8006e5a:	f000 fc5c 	bl	8007716 <hts221_hum_adc_point_1_get>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8006e64:	f04f 33ff 	mov.w	r3, #4294967295
 8006e68:	e04b      	b.n	8006f02 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f103 0220 	add.w	r2, r3, #32
 8006e70:	f107 030c 	add.w	r3, r7, #12
 8006e74:	330c      	adds	r3, #12
 8006e76:	4619      	mov	r1, r3
 8006e78:	4610      	mov	r0, r2
 8006e7a:	f000 fba8 	bl	80075ce <hts221_hum_rh_point_1_get>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8006e84:	f04f 33ff 	mov.w	r3, #4294967295
 8006e88:	e03b      	b.n	8006f02 <HTS221_HUM_GetHumidity+0xfe>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3320      	adds	r3, #32
 8006e92:	f107 021c 	add.w	r2, r7, #28
 8006e96:	4611      	mov	r1, r2
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 fafd 	bl	8007498 <hts221_humidity_raw_get>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d002      	beq.n	8006eaa <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8006ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea8:	e02b      	b.n	8006f02 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8006eaa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006eae:	ee07 3a90 	vmov	s15, r3
 8006eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006eb6:	f107 030c 	add.w	r3, r7, #12
 8006eba:	eeb0 0a67 	vmov.f32	s0, s15
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 f99a 	bl	80071f8 <Linear_Interpolation>
 8006ec4:	eef0 7a40 	vmov.f32	s15, s0
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	edd3 7a00 	vldr	s15, [r3]
 8006ed4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006edc:	d503      	bpl.n	8006ee6 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	f04f 0200 	mov.w	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	edd3 7a00 	vldr	s15, [r3]
 8006eec:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006f0c <HTS221_HUM_GetHumidity+0x108>
 8006ef0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ef8:	dd02      	ble.n	8006f00 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	4a04      	ldr	r2, [pc, #16]	; (8006f10 <HTS221_HUM_GetHumidity+0x10c>)
 8006efe:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3720      	adds	r7, #32
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	42c80000 	.word	0x42c80000
 8006f10:	42c80000 	.word	0x42c80000

08006f14 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d101      	bne.n	8006f2a <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	e015      	b.n	8006f56 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10b      	bne.n	8006f4c <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3320      	adds	r3, #32
 8006f38:	2101      	movs	r1, #1
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fb03 	bl	8007546 <hts221_power_on_set>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d002      	beq.n	8006f4c <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8006f46:	f04f 33ff 	mov.w	r3, #4294967295
 8006f4a:	e004      	b.n	8006f56 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b082      	sub	sp, #8
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	e015      	b.n	8006fa0 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10b      	bne.n	8006f96 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	3320      	adds	r3, #32
 8006f82:	2100      	movs	r1, #0
 8006f84:	4618      	mov	r0, r3
 8006f86:	f000 fade 	bl	8007546 <hts221_power_on_set>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d002      	beq.n	8006f96 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8006f90:	f04f 33ff 	mov.w	r3, #4294967295
 8006f94:	e004      	b.n	8006fa0 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f87f 	bl	80070b8 <HTS221_GetOutputDataRate>
 8006fba:	4603      	mov	r3, r0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8006fd0:	ed97 0a00 	vldr	s0, [r7]
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f8b3 	bl	8007140 <HTS221_SetOutputDataRate>
 8006fda:	4603      	mov	r3, r0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b088      	sub	sp, #32
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	3320      	adds	r3, #32
 8006ff2:	f107 020c 	add.w	r2, r7, #12
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 fbb0 	bl	800775e <hts221_temp_adc_point_0_get>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d002      	beq.n	800700a <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8007004:	f04f 33ff 	mov.w	r3, #4294967295
 8007008:	e052      	b.n	80070b0 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f103 0220 	add.w	r2, r3, #32
 8007010:	f107 030c 	add.w	r3, r7, #12
 8007014:	3304      	adds	r3, #4
 8007016:	4619      	mov	r1, r3
 8007018:	4610      	mov	r0, r2
 800701a:	f000 faf6 	bl	800760a <hts221_temp_deg_point_0_get>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8007024:	f04f 33ff 	mov.w	r3, #4294967295
 8007028:	e042      	b.n	80070b0 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f103 0220 	add.w	r2, r3, #32
 8007030:	f107 030c 	add.w	r3, r7, #12
 8007034:	3308      	adds	r3, #8
 8007036:	4619      	mov	r1, r3
 8007038:	4610      	mov	r0, r2
 800703a:	f000 fbb4 	bl	80077a6 <hts221_temp_adc_point_1_get>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8007044:	f04f 33ff 	mov.w	r3, #4294967295
 8007048:	e032      	b.n	80070b0 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f103 0220 	add.w	r2, r3, #32
 8007050:	f107 030c 	add.w	r3, r7, #12
 8007054:	330c      	adds	r3, #12
 8007056:	4619      	mov	r1, r3
 8007058:	4610      	mov	r0, r2
 800705a:	f000 fb07 	bl	800766c <hts221_temp_deg_point_1_get>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8007064:	f04f 33ff 	mov.w	r3, #4294967295
 8007068:	e022      	b.n	80070b0 <HTS221_TEMP_GetTemperature+0xcc>
 800706a:	2300      	movs	r3, #0
 800706c:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	3320      	adds	r3, #32
 8007072:	f107 021c 	add.w	r2, r7, #28
 8007076:	4611      	mov	r1, r2
 8007078:	4618      	mov	r0, r3
 800707a:	f000 fa30 	bl	80074de <hts221_temperature_raw_get>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8007084:	f04f 33ff 	mov.w	r3, #4294967295
 8007088:	e012      	b.n	80070b0 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 800708a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007096:	f107 030c 	add.w	r3, r7, #12
 800709a:	eeb0 0a67 	vmov.f32	s0, s15
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 f8aa 	bl	80071f8 <Linear_Interpolation>
 80070a4:	eef0 7a40 	vmov.f32	s15, s0
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3720      	adds	r7, #32
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	3320      	adds	r3, #32
 80070ca:	f107 020b 	add.w	r2, r7, #11
 80070ce:	4611      	mov	r1, r2
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 f983 	bl	80073dc <hts221_data_rate_get>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d002      	beq.n	80070e2 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 80070dc:	f04f 33ff 	mov.w	r3, #4294967295
 80070e0:	e025      	b.n	800712e <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 80070e2:	7afb      	ldrb	r3, [r7, #11]
 80070e4:	2b03      	cmp	r3, #3
 80070e6:	d81d      	bhi.n	8007124 <HTS221_GetOutputDataRate+0x6c>
 80070e8:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <HTS221_GetOutputDataRate+0x38>)
 80070ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ee:	bf00      	nop
 80070f0:	08007101 	.word	0x08007101
 80070f4:	0800710b 	.word	0x0800710b
 80070f8:	08007115 	.word	0x08007115
 80070fc:	0800711d 	.word	0x0800711d
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	f04f 0200 	mov.w	r2, #0
 8007106:	601a      	str	r2, [r3, #0]
      break;
 8007108:	e010      	b.n	800712c <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007110:	601a      	str	r2, [r3, #0]
      break;
 8007112:	e00b      	b.n	800712c <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	4a08      	ldr	r2, [pc, #32]	; (8007138 <HTS221_GetOutputDataRate+0x80>)
 8007118:	601a      	str	r2, [r3, #0]
      break;
 800711a:	e007      	b.n	800712c <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	4a07      	ldr	r2, [pc, #28]	; (800713c <HTS221_GetOutputDataRate+0x84>)
 8007120:	601a      	str	r2, [r3, #0]
      break;
 8007122:	e003      	b.n	800712c <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8007124:	f04f 33ff 	mov.w	r3, #4294967295
 8007128:	60fb      	str	r3, [r7, #12]
      break;
 800712a:	bf00      	nop
  }

  return ret;
 800712c:	68fb      	ldr	r3, [r7, #12]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	40e00000 	.word	0x40e00000
 800713c:	41480000 	.word	0x41480000

08007140 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 800714c:	edd7 7a00 	vldr	s15, [r7]
 8007150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800715c:	d801      	bhi.n	8007162 <HTS221_SetOutputDataRate+0x22>
 800715e:	2301      	movs	r3, #1
 8007160:	e00b      	b.n	800717a <HTS221_SetOutputDataRate+0x3a>
 8007162:	edd7 7a00 	vldr	s15, [r7]
 8007166:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800716a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800716e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007172:	d801      	bhi.n	8007178 <HTS221_SetOutputDataRate+0x38>
 8007174:	2302      	movs	r3, #2
 8007176:	e000      	b.n	800717a <HTS221_SetOutputDataRate+0x3a>
 8007178:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 800717a:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3320      	adds	r3, #32
 8007180:	7bfa      	ldrb	r2, [r7, #15]
 8007182:	4611      	mov	r1, r2
 8007184:	4618      	mov	r0, r3
 8007186:	f000 f902 	bl	800738e <hts221_data_rate_set>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8007190:	f04f 33ff 	mov.w	r3, #4294967295
 8007194:	e000      	b.n	8007198 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3320      	adds	r3, #32
 80071ac:	2100      	movs	r1, #0
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 f9c9 	bl	8007546 <hts221_power_on_set>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80071ba:	f04f 33ff 	mov.w	r3, #4294967295
 80071be:	e017      	b.n	80071f0 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3320      	adds	r3, #32
 80071c4:	2101      	movs	r1, #1
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 f940 	bl	800744c <hts221_block_data_update_set>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80071d2:	f04f 33ff 	mov.w	r3, #4294967295
 80071d6:	e00b      	b.n	80071f0 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80071d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7ff ffaf 	bl	8007140 <HTS221_SetOutputDataRate>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 80071e8:	f04f 33ff 	mov.w	r3, #4294967295
 80071ec:	e000      	b.n	80071f0 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	ed93 7a03 	vldr	s14, [r3, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007210:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007214:	edd7 7a00 	vldr	s15, [r7]
 8007218:	ee27 7a27 	vmul.f32	s14, s14, s15
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	edd3 6a02 	vldr	s13, [r3, #8]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	edd3 7a01 	vldr	s15, [r3, #4]
 8007228:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	ed93 6a00 	vldr	s12, [r3]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	edd3 7a03 	vldr	s15, [r3, #12]
 8007238:	ee66 7a27 	vmul.f32	s15, s12, s15
 800723c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007240:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	edd3 6a02 	vldr	s13, [r3, #8]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	edd3 7a00 	vldr	s15, [r3]
 8007250:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007254:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007258:	eef0 7a66 	vmov.f32	s15, s13
}
 800725c:	eeb0 0a67 	vmov.f32	s0, s15
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800726a:	b590      	push	{r4, r7, lr}
 800726c:	b087      	sub	sp, #28
 800726e:	af00      	add	r7, sp, #0
 8007270:	60f8      	str	r0, [r7, #12]
 8007272:	607a      	str	r2, [r7, #4]
 8007274:	461a      	mov	r2, r3
 8007276:	460b      	mov	r3, r1
 8007278:	72fb      	strb	r3, [r7, #11]
 800727a:	4613      	mov	r3, r2
 800727c:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10e      	bne.n	80072a8 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	695c      	ldr	r4, [r3, #20]
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	7b1b      	ldrb	r3, [r3, #12]
 8007292:	b298      	uxth	r0, r3
 8007294:	7afb      	ldrb	r3, [r7, #11]
 8007296:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800729a:	b2db      	uxtb	r3, r3
 800729c:	b299      	uxth	r1, r3
 800729e:	893b      	ldrh	r3, [r7, #8]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	47a0      	blx	r4
 80072a4:	4603      	mov	r3, r0
 80072a6:	e00d      	b.n	80072c4 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	695c      	ldr	r4, [r3, #20]
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	7b1b      	ldrb	r3, [r3, #12]
 80072b0:	b298      	uxth	r0, r3
 80072b2:	7afb      	ldrb	r3, [r7, #11]
 80072b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	b299      	uxth	r1, r3
 80072bc:	893b      	ldrh	r3, [r7, #8]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	47a0      	blx	r4
 80072c2:	4603      	mov	r3, r0
  }
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	371c      	adds	r7, #28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd90      	pop	{r4, r7, pc}

080072cc <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80072cc:	b590      	push	{r4, r7, lr}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	607a      	str	r2, [r7, #4]
 80072d6:	461a      	mov	r2, r3
 80072d8:	460b      	mov	r3, r1
 80072da:	72fb      	strb	r3, [r7, #11]
 80072dc:	4613      	mov	r3, r2
 80072de:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10e      	bne.n	800730a <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	691c      	ldr	r4, [r3, #16]
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	7b1b      	ldrb	r3, [r3, #12]
 80072f4:	b298      	uxth	r0, r3
 80072f6:	7afb      	ldrb	r3, [r7, #11]
 80072f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	b299      	uxth	r1, r3
 8007300:	893b      	ldrh	r3, [r7, #8]
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	47a0      	blx	r4
 8007306:	4603      	mov	r3, r0
 8007308:	e00d      	b.n	8007326 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	691c      	ldr	r4, [r3, #16]
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	7b1b      	ldrb	r3, [r3, #12]
 8007312:	b298      	uxth	r0, r3
 8007314:	7afb      	ldrb	r3, [r7, #11]
 8007316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800731a:	b2db      	uxtb	r3, r3
 800731c:	b299      	uxth	r1, r3
 800731e:	893b      	ldrh	r3, [r7, #8]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	47a0      	blx	r4
 8007324:	4603      	mov	r3, r0
  }
}
 8007326:	4618      	mov	r0, r3
 8007328:	371c      	adds	r7, #28
 800732a:	46bd      	mov	sp, r7
 800732c:	bd90      	pop	{r4, r7, pc}

0800732e <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800732e:	b590      	push	{r4, r7, lr}
 8007330:	b087      	sub	sp, #28
 8007332:	af00      	add	r7, sp, #0
 8007334:	60f8      	str	r0, [r7, #12]
 8007336:	607a      	str	r2, [r7, #4]
 8007338:	461a      	mov	r2, r3
 800733a:	460b      	mov	r3, r1
 800733c:	72fb      	strb	r3, [r7, #11]
 800733e:	4613      	mov	r3, r2
 8007340:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	685c      	ldr	r4, [r3, #4]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	68d8      	ldr	r0, [r3, #12]
 800734a:	893b      	ldrh	r3, [r7, #8]
 800734c:	7af9      	ldrb	r1, [r7, #11]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	47a0      	blx	r4
 8007352:	6178      	str	r0, [r7, #20]

  return ret;
 8007354:	697b      	ldr	r3, [r7, #20]
}
 8007356:	4618      	mov	r0, r3
 8007358:	371c      	adds	r7, #28
 800735a:	46bd      	mov	sp, r7
 800735c:	bd90      	pop	{r4, r7, pc}

0800735e <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800735e:	b590      	push	{r4, r7, lr}
 8007360:	b087      	sub	sp, #28
 8007362:	af00      	add	r7, sp, #0
 8007364:	60f8      	str	r0, [r7, #12]
 8007366:	607a      	str	r2, [r7, #4]
 8007368:	461a      	mov	r2, r3
 800736a:	460b      	mov	r3, r1
 800736c:	72fb      	strb	r3, [r7, #11]
 800736e:	4613      	mov	r3, r2
 8007370:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681c      	ldr	r4, [r3, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	68d8      	ldr	r0, [r3, #12]
 800737a:	893b      	ldrh	r3, [r7, #8]
 800737c:	7af9      	ldrb	r1, [r7, #11]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	47a0      	blx	r4
 8007382:	6178      	str	r0, [r7, #20]

  return ret;
 8007384:	697b      	ldr	r3, [r7, #20]
}
 8007386:	4618      	mov	r0, r3
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	bd90      	pop	{r4, r7, pc}

0800738e <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b084      	sub	sp, #16
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	460b      	mov	r3, r1
 8007398:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800739a:	f107 0208 	add.w	r2, r7, #8
 800739e:	2301      	movs	r3, #1
 80073a0:	2120      	movs	r1, #32
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7ff ffc3 	bl	800732e <hts221_read_reg>
 80073a8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10f      	bne.n	80073d0 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80073b0:	78fb      	ldrb	r3, [r7, #3]
 80073b2:	f003 0303 	and.w	r3, r3, #3
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	7a3b      	ldrb	r3, [r7, #8]
 80073ba:	f362 0301 	bfi	r3, r2, #0, #2
 80073be:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80073c0:	f107 0208 	add.w	r2, r7, #8
 80073c4:	2301      	movs	r3, #1
 80073c6:	2120      	movs	r1, #32
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7ff ffc8 	bl	800735e <hts221_write_reg>
 80073ce:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80073d0:	68fb      	ldr	r3, [r7, #12]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80073e6:	f107 0208 	add.w	r2, r7, #8
 80073ea:	2301      	movs	r3, #1
 80073ec:	2120      	movs	r1, #32
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f7ff ff9d 	bl	800732e <hts221_read_reg>
 80073f4:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80073f6:	7a3b      	ldrb	r3, [r7, #8]
 80073f8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d81a      	bhi.n	8007438 <hts221_data_rate_get+0x5c>
 8007402:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <hts221_data_rate_get+0x2c>)
 8007404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007408:	08007419 	.word	0x08007419
 800740c:	08007421 	.word	0x08007421
 8007410:	08007429 	.word	0x08007429
 8007414:	08007431 	.word	0x08007431
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	2200      	movs	r2, #0
 800741c:	701a      	strb	r2, [r3, #0]
      break;
 800741e:	e00f      	b.n	8007440 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	2201      	movs	r2, #1
 8007424:	701a      	strb	r2, [r3, #0]
      break;
 8007426:	e00b      	b.n	8007440 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	2202      	movs	r2, #2
 800742c:	701a      	strb	r2, [r3, #0]
      break;
 800742e:	e007      	b.n	8007440 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	2203      	movs	r2, #3
 8007434:	701a      	strb	r2, [r3, #0]
      break;
 8007436:	e003      	b.n	8007440 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2204      	movs	r2, #4
 800743c:	701a      	strb	r2, [r3, #0]
      break;
 800743e:	bf00      	nop
  }

  return ret;
 8007440:	68fb      	ldr	r3, [r7, #12]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop

0800744c <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	460b      	mov	r3, r1
 8007456:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8007458:	f107 0208 	add.w	r2, r7, #8
 800745c:	2301      	movs	r3, #1
 800745e:	2120      	movs	r1, #32
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7ff ff64 	bl	800732e <hts221_read_reg>
 8007466:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10f      	bne.n	800748e <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800746e:	78fb      	ldrb	r3, [r7, #3]
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	b2da      	uxtb	r2, r3
 8007476:	7a3b      	ldrb	r3, [r7, #8]
 8007478:	f362 0382 	bfi	r3, r2, #2, #1
 800747c:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800747e:	f107 0208 	add.w	r2, r7, #8
 8007482:	2301      	movs	r3, #1
 8007484:	2120      	movs	r1, #32
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7ff ff69 	bl	800735e <hts221_write_reg>
 800748c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800748e:	68fb      	ldr	r3, [r7, #12]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80074a2:	f107 0208 	add.w	r2, r7, #8
 80074a6:	2302      	movs	r3, #2
 80074a8:	2128      	movs	r1, #40	; 0x28
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7ff ff3f 	bl	800732e <hts221_read_reg>
 80074b0:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80074b2:	7a7b      	ldrb	r3, [r7, #9]
 80074b4:	b21a      	sxth	r2, r3
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	7a3b      	ldrb	r3, [r7, #8]
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	4413      	add	r3, r2
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	b21a      	sxth	r2, r3
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	801a      	strh	r2, [r3, #0]

  return ret;
 80074d4:	68fb      	ldr	r3, [r7, #12]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b084      	sub	sp, #16
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80074e8:	f107 0208 	add.w	r2, r7, #8
 80074ec:	2302      	movs	r3, #2
 80074ee:	212a      	movs	r1, #42	; 0x2a
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f7ff ff1c 	bl	800732e <hts221_read_reg>
 80074f6:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80074f8:	7a7b      	ldrb	r3, [r7, #9]
 80074fa:	b21a      	sxth	r2, r3
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007506:	b29b      	uxth	r3, r3
 8007508:	021b      	lsls	r3, r3, #8
 800750a:	b29a      	uxth	r2, r3
 800750c:	7a3b      	ldrb	r3, [r7, #8]
 800750e:	b29b      	uxth	r3, r3
 8007510:	4413      	add	r3, r2
 8007512:	b29b      	uxth	r3, r3
 8007514:	b21a      	sxth	r2, r3
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	801a      	strh	r2, [r3, #0]

  return ret;
 800751a:	68fb      	ldr	r3, [r7, #12]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800752e:	2301      	movs	r3, #1
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	210f      	movs	r1, #15
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff fefa 	bl	800732e <hts221_read_reg>
 800753a:	60f8      	str	r0, [r7, #12]

  return ret;
 800753c:	68fb      	ldr	r3, [r7, #12]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	460b      	mov	r3, r1
 8007550:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8007552:	f107 0208 	add.w	r2, r7, #8
 8007556:	2301      	movs	r3, #1
 8007558:	2120      	movs	r1, #32
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7ff fee7 	bl	800732e <hts221_read_reg>
 8007560:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10f      	bne.n	8007588 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8007568:	78fb      	ldrb	r3, [r7, #3]
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	b2da      	uxtb	r2, r3
 8007570:	7a3b      	ldrb	r3, [r7, #8]
 8007572:	f362 13c7 	bfi	r3, r2, #7, #1
 8007576:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8007578:	f107 0208 	add.w	r2, r7, #8
 800757c:	2301      	movs	r3, #1
 800757e:	2120      	movs	r1, #32
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7ff feec 	bl	800735e <hts221_write_reg>
 8007586:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007588:	68fb      	ldr	r3, [r7, #12]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 800759c:	f107 020b 	add.w	r2, r7, #11
 80075a0:	2301      	movs	r3, #1
 80075a2:	2130      	movs	r1, #48	; 0x30
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f7ff fec2 	bl	800732e <hts221_read_reg>
 80075aa:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80075ac:	7afb      	ldrb	r3, [r7, #11]
 80075ae:	ee07 3a90 	vmov	s15, r3
 80075b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80075ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80075c4:	68fb      	ldr	r3, [r7, #12]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b084      	sub	sp, #16
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80075d8:	f107 020b 	add.w	r2, r7, #11
 80075dc:	2301      	movs	r3, #1
 80075de:	2131      	movs	r1, #49	; 0x31
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7ff fea4 	bl	800732e <hts221_read_reg>
 80075e6:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80075e8:	7afb      	ldrb	r3, [r7, #11]
 80075ea:	ee07 3a90 	vmov	s15, r3
 80075ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075f2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80075f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8007600:	68fb      	ldr	r3, [r7, #12]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b086      	sub	sp, #24
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8007614:	f107 020f 	add.w	r2, r7, #15
 8007618:	2301      	movs	r3, #1
 800761a:	2132      	movs	r1, #50	; 0x32
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7ff fe86 	bl	800732e <hts221_read_reg>
 8007622:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d11b      	bne.n	8007662 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 800762a:	f107 0210 	add.w	r2, r7, #16
 800762e:	2301      	movs	r3, #1
 8007630:	2135      	movs	r1, #53	; 0x35
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7ff fe7b 	bl	800732e <hts221_read_reg>
 8007638:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 800763a:	7c3b      	ldrb	r3, [r7, #16]
 800763c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007640:	b2db      	uxtb	r3, r3
 8007642:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8007644:	7cfb      	ldrb	r3, [r7, #19]
 8007646:	021b      	lsls	r3, r3, #8
 8007648:	7bfa      	ldrb	r2, [r7, #15]
 800764a:	4413      	add	r3, r2
 800764c:	ee07 3a90 	vmov	s15, r3
 8007650:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007654:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8007658:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8007662:	697b      	ldr	r3, [r7, #20]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8007676:	f107 020f 	add.w	r2, r7, #15
 800767a:	2301      	movs	r3, #1
 800767c:	2133      	movs	r1, #51	; 0x33
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7ff fe55 	bl	800732e <hts221_read_reg>
 8007684:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d11b      	bne.n	80076c4 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 800768c:	f107 0210 	add.w	r2, r7, #16
 8007690:	2301      	movs	r3, #1
 8007692:	2135      	movs	r1, #53	; 0x35
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7ff fe4a 	bl	800732e <hts221_read_reg>
 800769a:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 800769c:	7c3b      	ldrb	r3, [r7, #16]
 800769e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80076a6:	7cfb      	ldrb	r3, [r7, #19]
 80076a8:	021b      	lsls	r3, r3, #8
 80076aa:	7bfa      	ldrb	r2, [r7, #15]
 80076ac:	4413      	add	r3, r2
 80076ae:	ee07 3a90 	vmov	s15, r3
 80076b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076b6:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80076ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80076c4:	697b      	ldr	r3, [r7, #20]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 80076d8:	f107 0208 	add.w	r2, r7, #8
 80076dc:	2302      	movs	r3, #2
 80076de:	2136      	movs	r1, #54	; 0x36
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7ff fe24 	bl	800732e <hts221_read_reg>
 80076e6:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80076e8:	7a7b      	ldrb	r3, [r7, #9]
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	021b      	lsls	r3, r3, #8
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	7a3b      	ldrb	r3, [r7, #8]
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	4413      	add	r3, r2
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80076fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800770c:	68fb      	ldr	r3, [r7, #12]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8007720:	f107 0208 	add.w	r2, r7, #8
 8007724:	2302      	movs	r3, #2
 8007726:	213a      	movs	r1, #58	; 0x3a
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7ff fe00 	bl	800732e <hts221_read_reg>
 800772e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8007730:	7a7b      	ldrb	r3, [r7, #9]
 8007732:	b29b      	uxth	r3, r3
 8007734:	021b      	lsls	r3, r3, #8
 8007736:	b29a      	uxth	r2, r3
 8007738:	7a3b      	ldrb	r3, [r7, #8]
 800773a:	b29b      	uxth	r3, r3
 800773c:	4413      	add	r3, r2
 800773e:	b29b      	uxth	r3, r3
 8007740:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8007742:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007746:	ee07 3a90 	vmov	s15, r3
 800774a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8007754:	68fb      	ldr	r3, [r7, #12]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8007768:	f107 0208 	add.w	r2, r7, #8
 800776c:	2302      	movs	r3, #2
 800776e:	213c      	movs	r1, #60	; 0x3c
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff fddc 	bl	800732e <hts221_read_reg>
 8007776:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8007778:	7a7b      	ldrb	r3, [r7, #9]
 800777a:	b29b      	uxth	r3, r3
 800777c:	021b      	lsls	r3, r3, #8
 800777e:	b29a      	uxth	r2, r3
 8007780:	7a3b      	ldrb	r3, [r7, #8]
 8007782:	b29b      	uxth	r3, r3
 8007784:	4413      	add	r3, r2
 8007786:	b29b      	uxth	r3, r3
 8007788:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800778a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800778e:	ee07 3a90 	vmov	s15, r3
 8007792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800779c:	68fb      	ldr	r3, [r7, #12]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b084      	sub	sp, #16
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 80077b0:	f107 0208 	add.w	r2, r7, #8
 80077b4:	2302      	movs	r3, #2
 80077b6:	213e      	movs	r1, #62	; 0x3e
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff fdb8 	bl	800732e <hts221_read_reg>
 80077be:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80077c0:	7a7b      	ldrb	r3, [r7, #9]
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	021b      	lsls	r3, r3, #8
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	7a3b      	ldrb	r3, [r7, #8]
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	4413      	add	r3, r2
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80077d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80077d6:	ee07 3a90 	vmov	s15, r3
 80077da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80077e4:	68fb      	ldr	r3, [r7, #12]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
	...

080077f0 <LPS22HB_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d103      	bne.n	800780c <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8007804:	f04f 33ff 	mov.w	r3, #4294967295
 8007808:	60fb      	str	r3, [r7, #12]
 800780a:	e051      	b.n	80078b0 <LPS22HB_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	689a      	ldr	r2, [r3, #8]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	7b1a      	ldrb	r2, [r3, #12]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	691a      	ldr	r2, [r3, #16]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	695a      	ldr	r2, [r3, #20]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	699a      	ldr	r2, [r3, #24]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a1d      	ldr	r2, [pc, #116]	; (80078bc <LPS22HB_RegisterBusIO+0xcc>)
 8007848:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a1c      	ldr	r2, [pc, #112]	; (80078c0 <LPS22HB_RegisterBusIO+0xd0>)
 800784e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	69da      	ldr	r2, [r3, #28]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d103      	bne.n	800786e <LPS22HB_RegisterBusIO+0x7e>
    {
      ret = LPS22HB_ERROR;
 8007866:	f04f 33ff 	mov.w	r3, #4294967295
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	e020      	b.n	80078b0 <LPS22HB_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4798      	blx	r3
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <LPS22HB_RegisterBusIO+0x92>
    {
      ret = LPS22HB_ERROR;
 800787a:	f04f 33ff 	mov.w	r3, #4294967295
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	e016      	b.n	80078b0 <LPS22HB_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	2b02      	cmp	r3, #2
 8007888:	d112      	bne.n	80078b0 <LPS22HB_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10d      	bne.n	80078b0 <LPS22HB_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8007894:	2301      	movs	r3, #1
 8007896:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8007898:	7afb      	ldrb	r3, [r7, #11]
 800789a:	461a      	mov	r2, r3
 800789c:	2110      	movs	r1, #16
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f9df 	bl	8007c62 <LPS22HB_Write_Reg>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d002      	beq.n	80078b0 <LPS22HB_RegisterBusIO+0xc0>
          {
            ret = LPS22HB_ERROR;
 80078aa:	f04f 33ff 	mov.w	r3, #4294967295
 80078ae:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80078b0:	68fb      	ldr	r3, [r7, #12]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	08007f23 	.word	0x08007f23
 80078c0:	08007fa9 	.word	0x08007fa9

080078c4 <LPS22HB_Init>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d108      	bne.n	80078e8 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 faca 	bl	8007e70 <LPS22HB_Initialize>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d002      	beq.n	80078e8 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 80078e2:	f04f 33ff 	mov.w	r3, #4294967295
 80078e6:	e004      	b.n	80078f2 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HB_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <LPS22HB_DeInit>:
  * @brief  Deinitialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b082      	sub	sp, #8
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007908:	2b01      	cmp	r3, #1
 800790a:	d111      	bne.n	8007930 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f877 	bl	8007a00 <LPS22HB_PRESS_Disable>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8007918:	f04f 33ff 	mov.w	r3, #4294967295
 800791c:	e00d      	b.n	800793a <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f918 	bl	8007b54 <LPS22HB_TEMP_Disable>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d002      	beq.n	8007930 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 800792a:	f04f 33ff 	mov.w	r3, #4294967295
 800792e:	e004      	b.n	800793a <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HB_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <LPS22HB_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b082      	sub	sp, #8
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	3320      	adds	r3, #32
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	4618      	mov	r0, r3
 8007954:	f000 fcd0 	bl	80082f8 <lps22hb_device_id_get>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d002      	beq.n	8007964 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 800795e:	f04f 33ff 	mov.w	r3, #4294967295
 8007962:	e000      	b.n	8007966 <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
	...

08007970 <LPS22HB_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HB sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2200      	movs	r2, #0
 800797e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	2201      	movs	r2, #1
 8007984:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	2201      	movs	r2, #1
 800798a:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2200      	movs	r2, #0
 8007990:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	4a05      	ldr	r2, [pc, #20]	; (80079b4 <LPS22HB_GetCapabilities+0x44>)
 800799e:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	4a04      	ldr	r2, [pc, #16]	; (80079b4 <LPS22HB_GetCapabilities+0x44>)
 80079a4:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr
 80079b4:	42960000 	.word	0x42960000

080079b8 <LPS22HB_PRESS_Enable>:
  * @brief  Enable the LPS22HB pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d101      	bne.n	80079ce <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	e014      	b.n	80079f8 <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f103 0220 	add.w	r2, r3, #32
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80079da:	4619      	mov	r1, r3
 80079dc:	4610      	mov	r0, r2
 80079de:	f000 fbd5 	bl	800818c <lps22hb_data_rate_set>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d002      	beq.n	80079ee <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 80079e8:	f04f 33ff 	mov.w	r3, #4294967295
 80079ec:	e004      	b.n	80079f8 <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HB_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <LPS22HB_PRESS_Disable>:
  * @brief  Disable the LPS22HB pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	e024      	b.n	8007a60 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d11a      	bne.n	8007a56 <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f103 0220 	add.w	r2, r3, #32
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	3333      	adds	r3, #51	; 0x33
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	f000 fbd3 	bl	80081d8 <lps22hb_data_rate_get>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8007a38:	f04f 33ff 	mov.w	r3, #4294967295
 8007a3c:	e010      	b.n	8007a60 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	3320      	adds	r3, #32
 8007a42:	2100      	movs	r1, #0
 8007a44:	4618      	mov	r0, r3
 8007a46:	f000 fba1 	bl	800818c <lps22hb_data_rate_set>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d002      	beq.n	8007a56 <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8007a50:	f04f 33ff 	mov.w	r3, #4294967295
 8007a54:	e004      	b.n	8007a60 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HB_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <LPS22HB_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f90f 	bl	8007c98 <LPS22HB_GetOutputDataRate>
 8007a7a:	4603      	mov	r3, r0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <LPS22HB_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d106      	bne.n	8007aa8 <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8007a9a:	ed97 0a00 	vldr	s0, [r7]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f94e 	bl	8007d40 <LPS22HB_SetOutputDataRate_When_Enabled>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	e005      	b.n	8007ab4 <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8007aa8:	ed97 0a00 	vldr	s0, [r7]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f99f 	bl	8007df0 <LPS22HB_SetOutputDataRate_When_Disabled>
 8007ab2:	4603      	mov	r3, r0
  }
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <LPS22HB_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8007ac6:	f107 030c 	add.w	r3, r7, #12
 8007aca:	2204      	movs	r2, #4
 8007acc:	2100      	movs	r1, #0
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f00b fe8d 	bl	80137ee <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	3320      	adds	r3, #32
 8007ad8:	f107 020c 	add.w	r2, r7, #12
 8007adc:	4611      	mov	r1, r2
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 fbbe 	bl	8008260 <lps22hb_pressure_raw_get>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d002      	beq.n	8007af0 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8007aea:	f04f 33ff 	mov.w	r3, #4294967295
 8007aee:	e009      	b.n	8007b04 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 facc 	bl	8008090 <lps22hb_from_lsb_to_hpa>
 8007af8:	eef0 7a40 	vmov.f32	s15, s0
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <LPS22HB_TEMP_Enable>:
  * @brief  Enable the LPS22HB temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d101      	bne.n	8007b22 <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e014      	b.n	8007b4c <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f103 0220 	add.w	r2, r3, #32
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8007b2e:	4619      	mov	r1, r3
 8007b30:	4610      	mov	r0, r2
 8007b32:	f000 fb2b 	bl	800818c <lps22hb_data_rate_set>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8007b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b40:	e004      	b.n	8007b4c <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HB_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <LPS22HB_TEMP_Disable>:
  * @brief  Disable the LPS22HB temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d101      	bne.n	8007b6a <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	e024      	b.n	8007bb4 <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d11a      	bne.n	8007baa <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f103 0220 	add.w	r2, r3, #32
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	3333      	adds	r3, #51	; 0x33
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4610      	mov	r0, r2
 8007b82:	f000 fb29 	bl	80081d8 <lps22hb_data_rate_get>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d002      	beq.n	8007b92 <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8007b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b90:	e010      	b.n	8007bb4 <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3320      	adds	r3, #32
 8007b96:	2100      	movs	r1, #0
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 faf7 	bl	800818c <lps22hb_data_rate_set>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8007ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba8:	e004      	b.n	8007bb4 <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HB_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <LPS22HB_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f865 	bl	8007c98 <LPS22HB_GetOutputDataRate>
 8007bce:	4603      	mov	r3, r0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <LPS22HB_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d106      	bne.n	8007bfc <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8007bee:	ed97 0a00 	vldr	s0, [r7]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f8a4 	bl	8007d40 <LPS22HB_SetOutputDataRate_When_Enabled>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	e005      	b.n	8007c08 <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8007bfc:	ed97 0a00 	vldr	s0, [r7]
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f8f5 	bl	8007df0 <LPS22HB_SetOutputDataRate_When_Disabled>
 8007c06:	4603      	mov	r3, r0
  }
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <LPS22HB_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8007c1a:	f107 030c 	add.w	r3, r7, #12
 8007c1e:	2202      	movs	r2, #2
 8007c20:	2100      	movs	r1, #0
 8007c22:	4618      	mov	r0, r3
 8007c24:	f00b fde3 	bl	80137ee <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HB_OK)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	3320      	adds	r3, #32
 8007c2c:	f107 020c 	add.w	r2, r7, #12
 8007c30:	4611      	mov	r1, r2
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 fb3d 	bl	80082b2 <lps22hb_temperature_raw_get>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d002      	beq.n	8007c44 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 8007c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c42:	e00a      	b.n	8007c5a <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 8007c44:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 fa39 	bl	80080c0 <lps22hb_from_lsb_to_degc>
 8007c4e:	eef0 7a40 	vmov.f32	s15, s0
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <LPS22HB_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b082      	sub	sp, #8
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	70fb      	strb	r3, [r7, #3]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f103 0020 	add.w	r0, r3, #32
 8007c78:	1cba      	adds	r2, r7, #2
 8007c7a:	78f9      	ldrb	r1, [r7, #3]
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	f000 f9ee 	bl	800805e <lps22hb_write_reg>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d002      	beq.n	8007c8e <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8007c88:	f04f 33ff 	mov.w	r3, #4294967295
 8007c8c:	e000      	b.n	8007c90 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <LPS22HB_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	3320      	adds	r3, #32
 8007caa:	f107 020b 	add.w	r2, r7, #11
 8007cae:	4611      	mov	r1, r2
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f000 fa91 	bl	80081d8 <lps22hb_data_rate_get>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d002      	beq.n	8007cc2 <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 8007cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc0:	e031      	b.n	8007d26 <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 8007cc2:	7afb      	ldrb	r3, [r7, #11]
 8007cc4:	2b05      	cmp	r3, #5
 8007cc6:	d829      	bhi.n	8007d1c <LPS22HB_GetOutputDataRate+0x84>
 8007cc8:	a201      	add	r2, pc, #4	; (adr r2, 8007cd0 <LPS22HB_GetOutputDataRate+0x38>)
 8007cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cce:	bf00      	nop
 8007cd0:	08007ce9 	.word	0x08007ce9
 8007cd4:	08007cf3 	.word	0x08007cf3
 8007cd8:	08007cfd 	.word	0x08007cfd
 8007cdc:	08007d05 	.word	0x08007d05
 8007ce0:	08007d0d 	.word	0x08007d0d
 8007ce4:	08007d15 	.word	0x08007d15
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	f04f 0200 	mov.w	r2, #0
 8007cee:	601a      	str	r2, [r3, #0]
      break;
 8007cf0:	e018      	b.n	8007d24 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007cf8:	601a      	str	r2, [r3, #0]
      break;
 8007cfa:	e013      	b.n	8007d24 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	4a0c      	ldr	r2, [pc, #48]	; (8007d30 <LPS22HB_GetOutputDataRate+0x98>)
 8007d00:	601a      	str	r2, [r3, #0]
      break;
 8007d02:	e00f      	b.n	8007d24 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	4a0b      	ldr	r2, [pc, #44]	; (8007d34 <LPS22HB_GetOutputDataRate+0x9c>)
 8007d08:	601a      	str	r2, [r3, #0]
      break;
 8007d0a:	e00b      	b.n	8007d24 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	4a0a      	ldr	r2, [pc, #40]	; (8007d38 <LPS22HB_GetOutputDataRate+0xa0>)
 8007d10:	601a      	str	r2, [r3, #0]
      break;
 8007d12:	e007      	b.n	8007d24 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	4a09      	ldr	r2, [pc, #36]	; (8007d3c <LPS22HB_GetOutputDataRate+0xa4>)
 8007d18:	601a      	str	r2, [r3, #0]
      break;
 8007d1a:	e003      	b.n	8007d24 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 8007d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d20:	60fb      	str	r3, [r7, #12]
      break;
 8007d22:	bf00      	nop
  }

  return ret;
 8007d24:	68fb      	ldr	r3, [r7, #12]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	41200000 	.word	0x41200000
 8007d34:	41c80000 	.word	0x41c80000
 8007d38:	42480000 	.word	0x42480000
 8007d3c:	42960000 	.word	0x42960000

08007d40 <LPS22HB_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8007d4c:	edd7 7a00 	vldr	s15, [r7]
 8007d50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d5c:	d801      	bhi.n	8007d62 <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e021      	b.n	8007da6 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8007d62:	edd7 7a00 	vldr	s15, [r7]
 8007d66:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d72:	d801      	bhi.n	8007d78 <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 8007d74:	2302      	movs	r3, #2
 8007d76:	e016      	b.n	8007da6 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8007d78:	edd7 7a00 	vldr	s15, [r7]
 8007d7c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8007d80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d88:	d801      	bhi.n	8007d8e <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e00b      	b.n	8007da6 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8007d8e:	edd7 7a00 	vldr	s15, [r7]
 8007d92:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8007dec <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 8007d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d9e:	d801      	bhi.n	8007da4 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8007da0:	2304      	movs	r3, #4
 8007da2:	e000      	b.n	8007da6 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8007da4:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8007da6:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	3320      	adds	r3, #32
 8007dac:	7bfa      	ldrb	r2, [r7, #15]
 8007dae:	4611      	mov	r1, r2
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 f9eb 	bl	800818c <lps22hb_data_rate_set>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d002      	beq.n	8007dc2 <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 8007dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc0:	e00f      	b.n	8007de2 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f103 0220 	add.w	r2, r3, #32
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3333      	adds	r3, #51	; 0x33
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4610      	mov	r0, r2
 8007dd0:	f000 fa02 	bl	80081d8 <lps22hb_data_rate_get>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d002      	beq.n	8007de0 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 8007dda:	f04f 33ff 	mov.w	r3, #4294967295
 8007dde:	e000      	b.n	8007de2 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	42480000 	.word	0x42480000

08007df0 <LPS22HB_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8007dfc:	edd7 7a00 	vldr	s15, [r7]
 8007e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e0c:	d801      	bhi.n	8007e12 <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e021      	b.n	8007e56 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8007e12:	edd7 7a00 	vldr	s15, [r7]
 8007e16:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e22:	d801      	bhi.n	8007e28 <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 8007e24:	2302      	movs	r3, #2
 8007e26:	e016      	b.n	8007e56 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8007e28:	edd7 7a00 	vldr	s15, [r7]
 8007e2c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8007e30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e38:	d801      	bhi.n	8007e3e <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e00b      	b.n	8007e56 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8007e3e:	edd7 7a00 	vldr	s15, [r7]
 8007e42:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8007e6c <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 8007e46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e4e:	d801      	bhi.n	8007e54 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8007e50:	2304      	movs	r3, #4
 8007e52:	e000      	b.n	8007e56 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8007e54:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	42480000 	.word	0x42480000

08007e70 <LPS22HB_Initialize>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	3320      	adds	r3, #32
 8007e7c:	2101      	movs	r1, #1
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 fa4b 	bl	800831a <lps22hb_low_power_set>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d002      	beq.n	8007e90 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 8007e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e8e:	e044      	b.n	8007f1a <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	3320      	adds	r3, #32
 8007e94:	2100      	movs	r1, #0
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 f978 	bl	800818c <lps22hb_data_rate_set>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8007ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea6:	e038      	b.n	8007f1a <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3320      	adds	r3, #32
 8007eac:	2102      	movs	r1, #2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 f946 	bl	8008140 <lps22hb_low_pass_filter_mode_set>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d002      	beq.n	8007ec0 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 8007eba:	f04f 33ff 	mov.w	r3, #4294967295
 8007ebe:	e02c      	b.n	8007f1a <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	3320      	adds	r3, #32
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 f914 	bl	80080f4 <lps22hb_block_data_update_set>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d002      	beq.n	8007ed8 <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8007ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed6:	e020      	b.n	8007f1a <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10b      	bne.n	8007ef8 <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3320      	adds	r3, #32
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 fa3d 	bl	8008366 <lps22hb_auto_add_inc_set>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00e      	beq.n	8007f10 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8007ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef6:	e010      	b.n	8007f1a <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	3320      	adds	r3, #32
 8007efc:	2101      	movs	r1, #1
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 fa31 	bl	8008366 <lps22hb_auto_add_inc_set>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8007f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f0e:	e004      	b.n	8007f1a <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2203      	movs	r2, #3
 8007f14:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HB_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007f22:	b590      	push	{r4, r7, lr}
 8007f24:	b089      	sub	sp, #36	; 0x24
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	607a      	str	r2, [r7, #4]
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	460b      	mov	r3, r1
 8007f30:	72fb      	strb	r3, [r7, #11]
 8007f32:	4613      	mov	r3, r2
 8007f34:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d121      	bne.n	8007f8a <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8007f46:	2300      	movs	r3, #0
 8007f48:	83fb      	strh	r3, [r7, #30]
 8007f4a:	e018      	b.n	8007f7e <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	695c      	ldr	r4, [r3, #20]
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	7b1b      	ldrb	r3, [r3, #12]
 8007f54:	b298      	uxth	r0, r3
 8007f56:	7afb      	ldrb	r3, [r7, #11]
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	8bfb      	ldrh	r3, [r7, #30]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	b299      	uxth	r1, r3
 8007f60:	8bfb      	ldrh	r3, [r7, #30]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	441a      	add	r2, r3
 8007f66:	2301      	movs	r3, #1
 8007f68:	47a0      	blx	r4
 8007f6a:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d002      	beq.n	8007f78 <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8007f72:	f04f 33ff 	mov.w	r3, #4294967295
 8007f76:	e013      	b.n	8007fa0 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8007f78:	8bfb      	ldrh	r3, [r7, #30]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	83fb      	strh	r3, [r7, #30]
 8007f7e:	8bfa      	ldrh	r2, [r7, #30]
 8007f80:	893b      	ldrh	r3, [r7, #8]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d3e2      	bcc.n	8007f4c <ReadRegWrap+0x2a>
      }
    }

    return ret;
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	e00a      	b.n	8007fa0 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	695c      	ldr	r4, [r3, #20]
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	7b1b      	ldrb	r3, [r3, #12]
 8007f92:	b298      	uxth	r0, r3
 8007f94:	7afb      	ldrb	r3, [r7, #11]
 8007f96:	b299      	uxth	r1, r3
 8007f98:	893b      	ldrh	r3, [r7, #8]
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	47a0      	blx	r4
 8007f9e:	4603      	mov	r3, r0
  }
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3724      	adds	r7, #36	; 0x24
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd90      	pop	{r4, r7, pc}

08007fa8 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007fa8:	b590      	push	{r4, r7, lr}
 8007faa:	b089      	sub	sp, #36	; 0x24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	607a      	str	r2, [r7, #4]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	72fb      	strb	r3, [r7, #11]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d121      	bne.n	8008010 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8007fcc:	2300      	movs	r3, #0
 8007fce:	83fb      	strh	r3, [r7, #30]
 8007fd0:	e018      	b.n	8008004 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	691c      	ldr	r4, [r3, #16]
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	7b1b      	ldrb	r3, [r3, #12]
 8007fda:	b298      	uxth	r0, r3
 8007fdc:	7afb      	ldrb	r3, [r7, #11]
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	8bfb      	ldrh	r3, [r7, #30]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	b299      	uxth	r1, r3
 8007fe6:	8bfb      	ldrh	r3, [r7, #30]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	441a      	add	r2, r3
 8007fec:	2301      	movs	r3, #1
 8007fee:	47a0      	blx	r4
 8007ff0:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d002      	beq.n	8007ffe <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8007ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ffc:	e013      	b.n	8008026 <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8007ffe:	8bfb      	ldrh	r3, [r7, #30]
 8008000:	3301      	adds	r3, #1
 8008002:	83fb      	strh	r3, [r7, #30]
 8008004:	8bfa      	ldrh	r2, [r7, #30]
 8008006:	893b      	ldrh	r3, [r7, #8]
 8008008:	429a      	cmp	r2, r3
 800800a:	d3e2      	bcc.n	8007fd2 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	e00a      	b.n	8008026 <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	691c      	ldr	r4, [r3, #16]
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	7b1b      	ldrb	r3, [r3, #12]
 8008018:	b298      	uxth	r0, r3
 800801a:	7afb      	ldrb	r3, [r7, #11]
 800801c:	b299      	uxth	r1, r3
 800801e:	893b      	ldrh	r3, [r7, #8]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	47a0      	blx	r4
 8008024:	4603      	mov	r3, r0
  }
}
 8008026:	4618      	mov	r0, r3
 8008028:	3724      	adds	r7, #36	; 0x24
 800802a:	46bd      	mov	sp, r7
 800802c:	bd90      	pop	{r4, r7, pc}

0800802e <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800802e:	b590      	push	{r4, r7, lr}
 8008030:	b087      	sub	sp, #28
 8008032:	af00      	add	r7, sp, #0
 8008034:	60f8      	str	r0, [r7, #12]
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	461a      	mov	r2, r3
 800803a:	460b      	mov	r3, r1
 800803c:	72fb      	strb	r3, [r7, #11]
 800803e:	4613      	mov	r3, r2
 8008040:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	685c      	ldr	r4, [r3, #4]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	68d8      	ldr	r0, [r3, #12]
 800804a:	893b      	ldrh	r3, [r7, #8]
 800804c:	7af9      	ldrb	r1, [r7, #11]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	47a0      	blx	r4
 8008052:	6178      	str	r0, [r7, #20]

  return ret;
 8008054:	697b      	ldr	r3, [r7, #20]
}
 8008056:	4618      	mov	r0, r3
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	bd90      	pop	{r4, r7, pc}

0800805e <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800805e:	b590      	push	{r4, r7, lr}
 8008060:	b087      	sub	sp, #28
 8008062:	af00      	add	r7, sp, #0
 8008064:	60f8      	str	r0, [r7, #12]
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	461a      	mov	r2, r3
 800806a:	460b      	mov	r3, r1
 800806c:	72fb      	strb	r3, [r7, #11]
 800806e:	4613      	mov	r3, r2
 8008070:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681c      	ldr	r4, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	68d8      	ldr	r0, [r3, #12]
 800807a:	893b      	ldrh	r3, [r7, #8]
 800807c:	7af9      	ldrb	r1, [r7, #11]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	47a0      	blx	r4
 8008082:	6178      	str	r0, [r7, #20]

  return ret;
 8008084:	697b      	ldr	r3, [r7, #20]
}
 8008086:	4618      	mov	r0, r3
 8008088:	371c      	adds	r7, #28
 800808a:	46bd      	mov	sp, r7
 800808c:	bd90      	pop	{r4, r7, pc}
	...

08008090 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080a2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80080bc <lps22hb_from_lsb_to_hpa+0x2c>
 80080a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80080aa:	eef0 7a66 	vmov.f32	s15, s13
}
 80080ae:	eeb0 0a67 	vmov.f32	s0, s15
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	49800000 	.word	0x49800000

080080c0 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	4603      	mov	r3, r0
 80080c8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 80080ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80080ce:	ee07 3a90 	vmov	s15, r3
 80080d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080d6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80080f0 <lps22hb_from_lsb_to_degc+0x30>
 80080da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80080de:	eef0 7a66 	vmov.f32	s15, s13
}
 80080e2:	eeb0 0a67 	vmov.f32	s0, s15
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	42c80000 	.word	0x42c80000

080080f4 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	460b      	mov	r3, r1
 80080fe:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8008100:	f107 0208 	add.w	r2, r7, #8
 8008104:	2301      	movs	r3, #1
 8008106:	2110      	movs	r1, #16
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7ff ff90 	bl	800802e <lps22hb_read_reg>
 800810e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10f      	bne.n	8008136 <lps22hb_block_data_update_set+0x42>
  {
    ctrl_reg1.bdu = val;
 8008116:	78fb      	ldrb	r3, [r7, #3]
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	b2da      	uxtb	r2, r3
 800811e:	7a3b      	ldrb	r3, [r7, #8]
 8008120:	f362 0341 	bfi	r3, r2, #1, #1
 8008124:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8008126:	f107 0208 	add.w	r2, r7, #8
 800812a:	2301      	movs	r3, #1
 800812c:	2110      	movs	r1, #16
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7ff ff95 	bl	800805e <lps22hb_write_reg>
 8008134:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008136:	68fb      	ldr	r3, [r7, #12]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	460b      	mov	r3, r1
 800814a:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800814c:	f107 0208 	add.w	r2, r7, #8
 8008150:	2301      	movs	r3, #1
 8008152:	2110      	movs	r1, #16
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f7ff ff6a 	bl	800802e <lps22hb_read_reg>
 800815a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10f      	bne.n	8008182 <lps22hb_low_pass_filter_mode_set+0x42>
  {
    ctrl_reg1.lpfp = (uint8_t)val;
 8008162:	78fb      	ldrb	r3, [r7, #3]
 8008164:	f003 0303 	and.w	r3, r3, #3
 8008168:	b2da      	uxtb	r2, r3
 800816a:	7a3b      	ldrb	r3, [r7, #8]
 800816c:	f362 0383 	bfi	r3, r2, #2, #2
 8008170:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8008172:	f107 0208 	add.w	r2, r7, #8
 8008176:	2301      	movs	r3, #1
 8008178:	2110      	movs	r1, #16
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7ff ff6f 	bl	800805e <lps22hb_write_reg>
 8008180:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008182:	68fb      	ldr	r3, [r7, #12]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	460b      	mov	r3, r1
 8008196:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8008198:	f107 0208 	add.w	r2, r7, #8
 800819c:	2301      	movs	r3, #1
 800819e:	2110      	movs	r1, #16
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff ff44 	bl	800802e <lps22hb_read_reg>
 80081a6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10f      	bne.n	80081ce <lps22hb_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 80081ae:	78fb      	ldrb	r3, [r7, #3]
 80081b0:	f003 0307 	and.w	r3, r3, #7
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	7a3b      	ldrb	r3, [r7, #8]
 80081b8:	f362 1306 	bfi	r3, r2, #4, #3
 80081bc:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80081be:	f107 0208 	add.w	r2, r7, #8
 80081c2:	2301      	movs	r3, #1
 80081c4:	2110      	movs	r1, #16
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f7ff ff49 	bl	800805e <lps22hb_write_reg>
 80081cc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80081ce:	68fb      	ldr	r3, [r7, #12]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80081e2:	f107 0208 	add.w	r2, r7, #8
 80081e6:	2301      	movs	r3, #1
 80081e8:	2110      	movs	r1, #16
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7ff ff1f 	bl	800802e <lps22hb_read_reg>
 80081f0:	60f8      	str	r0, [r7, #12]

  switch (ctrl_reg1.odr)
 80081f2:	7a3b      	ldrb	r3, [r7, #8]
 80081f4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b05      	cmp	r3, #5
 80081fc:	d826      	bhi.n	800824c <lps22hb_data_rate_get+0x74>
 80081fe:	a201      	add	r2, pc, #4	; (adr r2, 8008204 <lps22hb_data_rate_get+0x2c>)
 8008200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008204:	0800821d 	.word	0x0800821d
 8008208:	08008225 	.word	0x08008225
 800820c:	0800822d 	.word	0x0800822d
 8008210:	08008235 	.word	0x08008235
 8008214:	0800823d 	.word	0x0800823d
 8008218:	08008245 	.word	0x08008245
  {
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	2200      	movs	r2, #0
 8008220:	701a      	strb	r2, [r3, #0]
      break;
 8008222:	e017      	b.n	8008254 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	2201      	movs	r2, #1
 8008228:	701a      	strb	r2, [r3, #0]
      break;
 800822a:	e013      	b.n	8008254 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	2202      	movs	r2, #2
 8008230:	701a      	strb	r2, [r3, #0]
      break;
 8008232:	e00f      	b.n	8008254 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	2203      	movs	r2, #3
 8008238:	701a      	strb	r2, [r3, #0]
      break;
 800823a:	e00b      	b.n	8008254 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	2204      	movs	r2, #4
 8008240:	701a      	strb	r2, [r3, #0]
      break;
 8008242:	e007      	b.n	8008254 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	2205      	movs	r2, #5
 8008248:	701a      	strb	r2, [r3, #0]
      break;
 800824a:	e003      	b.n	8008254 <lps22hb_data_rate_get+0x7c>

    default:
      *val = LPS22HB_ODR_1_Hz;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	2201      	movs	r2, #1
 8008250:	701a      	strb	r2, [r3, #0]
      break;
 8008252:	bf00      	nop
  }

  return ret;
 8008254:	68fb      	ldr	r3, [r7, #12]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop

08008260 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 800826a:	f107 0208 	add.w	r2, r7, #8
 800826e:	2303      	movs	r3, #3
 8008270:	2128      	movs	r1, #40	; 0x28
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7ff fedb 	bl	800802e <lps22hb_read_reg>
 8008278:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800827a:	7abb      	ldrb	r3, [r7, #10]
 800827c:	461a      	mov	r2, r3
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	021b      	lsls	r3, r3, #8
 8008288:	7a7a      	ldrb	r2, [r7, #9]
 800828a:	441a      	add	r2, r3
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	021b      	lsls	r3, r3, #8
 8008296:	7a3a      	ldrb	r2, [r7, #8]
 8008298:	441a      	add	r2, r3
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	021a      	lsls	r2, r3, #8
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	601a      	str	r2, [r3, #0]

  return ret;
 80082a8:	68fb      	ldr	r3, [r7, #12]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	6039      	str	r1, [r7, #0]
  uint8_t reg[2];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) reg, 2);
 80082bc:	f107 0208 	add.w	r2, r7, #8
 80082c0:	2302      	movs	r3, #2
 80082c2:	212b      	movs	r1, #43	; 0x2b
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7ff feb2 	bl	800802e <lps22hb_read_reg>
 80082ca:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 80082cc:	7a7b      	ldrb	r3, [r7, #9]
 80082ce:	b21a      	sxth	r2, r3
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082da:	b29b      	uxth	r3, r3
 80082dc:	021b      	lsls	r3, r3, #8
 80082de:	b29a      	uxth	r2, r3
 80082e0:	7a3b      	ldrb	r3, [r7, #8]
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	4413      	add	r3, r2
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	b21a      	sxth	r2, r3
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	801a      	strh	r2, [r3, #0]

  return ret;
 80082ee:	68fb      	ldr	r3, [r7, #12]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 8008302:	2301      	movs	r3, #1
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	210f      	movs	r1, #15
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f7ff fe90 	bl	800802e <lps22hb_read_reg>
 800830e:	60f8      	str	r0, [r7, #12]

  return ret;
 8008310:	68fb      	ldr	r3, [r7, #12]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	460b      	mov	r3, r1
 8008324:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 8008326:	f107 0208 	add.w	r2, r7, #8
 800832a:	2301      	movs	r3, #1
 800832c:	211a      	movs	r1, #26
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7ff fe7d 	bl	800802e <lps22hb_read_reg>
 8008334:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10f      	bne.n	800835c <lps22hb_low_power_set+0x42>
  {
    res_conf.lc_en = val;
 800833c:	78fb      	ldrb	r3, [r7, #3]
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	b2da      	uxtb	r2, r3
 8008344:	7a3b      	ldrb	r3, [r7, #8]
 8008346:	f362 0300 	bfi	r3, r2, #0, #1
 800834a:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 800834c:	f107 0208 	add.w	r2, r7, #8
 8008350:	2301      	movs	r3, #1
 8008352:	211a      	movs	r1, #26
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7ff fe82 	bl	800805e <lps22hb_write_reg>
 800835a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800835c:	68fb      	ldr	r3, [r7, #12]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b084      	sub	sp, #16
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	460b      	mov	r3, r1
 8008370:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8008372:	f107 0208 	add.w	r2, r7, #8
 8008376:	2301      	movs	r3, #1
 8008378:	2111      	movs	r1, #17
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7ff fe57 	bl	800802e <lps22hb_read_reg>
 8008380:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10f      	bne.n	80083a8 <lps22hb_auto_add_inc_set+0x42>
  {
    ctrl_reg2.if_add_inc = val;
 8008388:	78fb      	ldrb	r3, [r7, #3]
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	b2da      	uxtb	r2, r3
 8008390:	7a3b      	ldrb	r3, [r7, #8]
 8008392:	f362 1304 	bfi	r3, r2, #4, #1
 8008396:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8008398:	f107 0208 	add.w	r2, r7, #8
 800839c:	2301      	movs	r3, #1
 800839e:	2111      	movs	r1, #17
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f7ff fe5c 	bl	800805e <lps22hb_write_reg>
 80083a6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80083a8:	68fb      	ldr	r3, [r7, #12]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
	...

080083b4 <LSM303AGR_ACC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d103      	bne.n	80083d0 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80083c8:	f04f 33ff 	mov.w	r3, #4294967295
 80083cc:	60fb      	str	r3, [r7, #12]
 80083ce:	e051      	b.n	8008474 <LSM303AGR_ACC_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	685a      	ldr	r2, [r3, #4]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	689a      	ldr	r2, [r3, #8]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	7b1a      	ldrb	r2, [r3, #12]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	691a      	ldr	r2, [r3, #16]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	695a      	ldr	r2, [r3, #20]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	699a      	ldr	r2, [r3, #24]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a1d      	ldr	r2, [pc, #116]	; (8008480 <LSM303AGR_ACC_RegisterBusIO+0xcc>)
 800840c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteAccRegWrap;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a1c      	ldr	r2, [pc, #112]	; (8008484 <LSM303AGR_ACC_RegisterBusIO+0xd0>)
 8008412:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	69da      	ldr	r2, [r3, #28]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d103      	bne.n	8008432 <LSM303AGR_ACC_RegisterBusIO+0x7e>
    {
      ret = LSM303AGR_ERROR;
 800842a:	f04f 33ff 	mov.w	r3, #4294967295
 800842e:	60fb      	str	r3, [r7, #12]
 8008430:	e020      	b.n	8008474 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4798      	blx	r3
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d003      	beq.n	8008446 <LSM303AGR_ACC_RegisterBusIO+0x92>
    {
      ret = LSM303AGR_ERROR;
 800843e:	f04f 33ff 	mov.w	r3, #4294967295
 8008442:	60fb      	str	r3, [r7, #12]
 8008444:	e016      	b.n	8008474 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d112      	bne.n	8008474 <LSM303AGR_ACC_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10d      	bne.n	8008474 <LSM303AGR_ACC_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8008458:	2301      	movs	r3, #1
 800845a:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 800845c:	7afb      	ldrb	r3, [r7, #11]
 800845e:	461a      	mov	r2, r3
 8008460:	2123      	movs	r1, #35	; 0x23
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fb55 	bl	8008b12 <LSM303AGR_ACC_Write_Reg>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d002      	beq.n	8008474 <LSM303AGR_ACC_RegisterBusIO+0xc0>
          {
            return LSM303AGR_ERROR;
 800846e:	f04f 33ff 	mov.w	r3, #4294967295
 8008472:	e000      	b.n	8008476 <LSM303AGR_ACC_RegisterBusIO+0xc2>
        }
      }
    }
  }

  return ret;
 8008474:	68fb      	ldr	r3, [r7, #12]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	08009321 	.word	0x08009321
 8008484:	08009383 	.word	0x08009383

08008488 <LSM303AGR_ACC_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	3320      	adds	r3, #32
 8008494:	2101      	movs	r1, #1
 8008496:	4618      	mov	r0, r3
 8008498:	f001 f94a 	bl	8009730 <lsm303agr_xl_block_data_update_set>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80084a2:	f04f 33ff 	mov.w	r3, #4294967295
 80084a6:	e02c      	b.n	8008502 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3320      	adds	r3, #32
 80084ac:	2100      	movs	r1, #0
 80084ae:	4618      	mov	r0, r3
 80084b0:	f001 faed 	bl	8009a8e <lsm303agr_xl_fifo_mode_set>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d002      	beq.n	80084c0 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80084ba:	f04f 33ff 	mov.w	r3, #4294967295
 80084be:	e020      	b.n	8008502 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2205      	movs	r2, #5
 80084c4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	3320      	adds	r3, #32
 80084cc:	2100      	movs	r1, #0
 80084ce:	4618      	mov	r0, r3
 80084d0:	f001 f84e 	bl	8009570 <lsm303agr_xl_data_rate_set>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d002      	beq.n	80084e0 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 80084da:	f04f 33ff 	mov.w	r3, #4294967295
 80084de:	e010      	b.n	8008502 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	3320      	adds	r3, #32
 80084e4:	2100      	movs	r1, #0
 80084e6:	4618      	mov	r0, r3
 80084e8:	f001 f8c4 	bl	8009674 <lsm303agr_xl_full_scale_set>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d002      	beq.n	80084f8 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 80084f2:	f04f 33ff 	mov.w	r3, #4294967295
 80084f6:	e004      	b.n	8008502 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <LSM303AGR_ACC_DeInit>:
  * @brief  Deinitialize the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b082      	sub	sp, #8
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f87c 	bl	8008610 <LSM303AGR_ACC_Disable>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d002      	beq.n	8008524 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 800851e:	f04f 33ff 	mov.w	r3, #4294967295
 8008522:	e008      	b.n	8008536 <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  pObj->is_initialized = 0;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <LSM303AGR_ACC_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b082      	sub	sp, #8
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	3320      	adds	r3, #32
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	4618      	mov	r0, r3
 8008550:	f001 fa55 	bl	80099fe <lsm303agr_xl_device_id_get>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d002      	beq.n	8008560 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 800855a:	f04f 33ff 	mov.w	r3, #4294967295
 800855e:	e000      	b.n	8008562 <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <LSM303AGR_ACC_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
  * @retval Component status
  */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2201      	movs	r2, #1
 800857a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	2200      	movs	r2, #0
 8008580:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2200      	movs	r2, #0
 8008586:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2200      	movs	r2, #0
 800858c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2200      	movs	r2, #0
 8008592:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	2210      	movs	r2, #16
 8008598:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2200      	movs	r2, #0
 800859e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	f04f 0200 	mov.w	r2, #0
 80085a6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	4a06      	ldr	r2, [pc, #24]	; (80085c4 <LSM303AGR_ACC_GetCapabilities+0x58>)
 80085ac:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	f04f 0200 	mov.w	r2, #0
 80085b4:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr
 80085c4:	43c80000 	.word	0x43c80000

080085c8 <LSM303AGR_ACC_Enable>:
  * @brief  Enable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d101      	bne.n	80085de <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	e014      	b.n	8008608 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f103 0220 	add.w	r2, r3, #32
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80085ea:	4619      	mov	r1, r3
 80085ec:	4610      	mov	r0, r2
 80085ee:	f000 ffbf 	bl	8009570 <lsm303agr_xl_data_rate_set>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 80085f8:	f04f 33ff 	mov.w	r3, #4294967295
 80085fc:	e004      	b.n	8008608 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <LSM303AGR_ACC_Disable>:
  * @brief  Disable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800861e:	2b00      	cmp	r3, #0
 8008620:	d101      	bne.n	8008626 <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	e01f      	b.n	8008666 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f103 0220 	add.w	r2, r3, #32
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	3332      	adds	r3, #50	; 0x32
 8008630:	4619      	mov	r1, r3
 8008632:	4610      	mov	r0, r2
 8008634:	f000 ffc2 	bl	80095bc <lsm303agr_xl_data_rate_get>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d002      	beq.n	8008644 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 800863e:	f04f 33ff 	mov.w	r3, #4294967295
 8008642:	e010      	b.n	8008666 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3320      	adds	r3, #32
 8008648:	2100      	movs	r1, #0
 800864a:	4618      	mov	r0, r3
 800864c:	f000 ff90 	bl	8009570 <lsm303agr_xl_data_rate_set>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8008656:	f04f 33ff 	mov.w	r3, #4294967295
 800865a:	e004      	b.n	8008666 <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <LSM303AGR_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	3320      	adds	r3, #32
 8008680:	f107 020b 	add.w	r2, r7, #11
 8008684:	4611      	mov	r1, r2
 8008686:	4618      	mov	r0, r3
 8008688:	f000 ff3e 	bl	8009508 <lsm303agr_xl_operating_mode_get>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d002      	beq.n	8008698 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8008692:	f04f 33ff 	mov.w	r3, #4294967295
 8008696:	e031      	b.n	80086fc <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8008698:	7afb      	ldrb	r3, [r7, #11]
 800869a:	2b02      	cmp	r3, #2
 800869c:	d01a      	beq.n	80086d4 <LSM303AGR_ACC_GetSensitivity+0x66>
 800869e:	2b02      	cmp	r3, #2
 80086a0:	dc22      	bgt.n	80086e8 <LSM303AGR_ACC_GetSensitivity+0x7a>
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d002      	beq.n	80086ac <LSM303AGR_ACC_GetSensitivity+0x3e>
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d00a      	beq.n	80086c0 <LSM303AGR_ACC_GetSensitivity+0x52>
 80086aa:	e01d      	b.n	80086e8 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fca8 	bl	8009004 <LSM303AGR_ACC_GetSensitivityHR>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d01a      	beq.n	80086f0 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 80086ba:	f04f 33ff 	mov.w	r3, #4294967295
 80086be:	e01d      	b.n	80086fc <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fce4 	bl	8009090 <LSM303AGR_ACC_GetSensitivityNM>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d012      	beq.n	80086f4 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 80086ce:	f04f 33ff 	mov.w	r3, #4294967295
 80086d2:	e013      	b.n	80086fc <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fd20 	bl	800911c <LSM303AGR_ACC_GetSensitivityLP>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00a      	beq.n	80086f8 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 80086e2:	f04f 33ff 	mov.w	r3, #4294967295
 80086e6:	e009      	b.n	80086fc <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 80086e8:	f04f 33ff 	mov.w	r3, #4294967295
 80086ec:	60fb      	str	r3, [r7, #12]
      break;
 80086ee:	e004      	b.n	80086fa <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80086f0:	bf00      	nop
 80086f2:	e002      	b.n	80086fa <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80086f4:	bf00      	nop
 80086f6:	e000      	b.n	80086fa <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80086f8:	bf00      	nop
  }

  return ret;
 80086fa:	68fb      	ldr	r3, [r7, #12]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <LSM303AGR_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	3320      	adds	r3, #32
 8008716:	f107 020b 	add.w	r2, r7, #11
 800871a:	4611      	mov	r1, r2
 800871c:	4618      	mov	r0, r3
 800871e:	f000 fef3 	bl	8009508 <lsm303agr_xl_operating_mode_get>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8008728:	f04f 33ff 	mov.w	r3, #4294967295
 800872c:	e09d      	b.n	800886a <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	3320      	adds	r3, #32
 8008732:	f107 020a 	add.w	r2, r7, #10
 8008736:	4611      	mov	r1, r2
 8008738:	4618      	mov	r0, r3
 800873a:	f000 ff3f 	bl	80095bc <lsm303agr_xl_data_rate_get>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8008744:	f04f 33ff 	mov.w	r3, #4294967295
 8008748:	e08f      	b.n	800886a <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 800874a:	7afb      	ldrb	r3, [r7, #11]
 800874c:	2b02      	cmp	r3, #2
 800874e:	d147      	bne.n	80087e0 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 8008750:	7abb      	ldrb	r3, [r7, #10]
 8008752:	2b09      	cmp	r3, #9
 8008754:	d840      	bhi.n	80087d8 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8008756:	a201      	add	r2, pc, #4	; (adr r2, 800875c <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8008758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875c:	08008785 	.word	0x08008785
 8008760:	0800878f 	.word	0x0800878f
 8008764:	08008799 	.word	0x08008799
 8008768:	080087a1 	.word	0x080087a1
 800876c:	080087a9 	.word	0x080087a9
 8008770:	080087b1 	.word	0x080087b1
 8008774:	080087b9 	.word	0x080087b9
 8008778:	080087c1 	.word	0x080087c1
 800877c:	080087c9 	.word	0x080087c9
 8008780:	080087d1 	.word	0x080087d1
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	f04f 0200 	mov.w	r2, #0
 800878a:	601a      	str	r2, [r3, #0]
        break;
 800878c:	e06c      	b.n	8008868 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008794:	601a      	str	r2, [r3, #0]
        break;
 8008796:	e067      	b.n	8008868 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	4a36      	ldr	r2, [pc, #216]	; (8008874 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 800879c:	601a      	str	r2, [r3, #0]
        break;
 800879e:	e063      	b.n	8008868 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	4a35      	ldr	r2, [pc, #212]	; (8008878 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 80087a4:	601a      	str	r2, [r3, #0]
        break;
 80087a6:	e05f      	b.n	8008868 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	4a34      	ldr	r2, [pc, #208]	; (800887c <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 80087ac:	601a      	str	r2, [r3, #0]
        break;
 80087ae:	e05b      	b.n	8008868 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	4a33      	ldr	r2, [pc, #204]	; (8008880 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 80087b4:	601a      	str	r2, [r3, #0]
        break;
 80087b6:	e057      	b.n	8008868 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	4a32      	ldr	r2, [pc, #200]	; (8008884 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 80087bc:	601a      	str	r2, [r3, #0]
        break;
 80087be:	e053      	b.n	8008868 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	4a31      	ldr	r2, [pc, #196]	; (8008888 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 80087c4:	601a      	str	r2, [r3, #0]
        break;
 80087c6:	e04f      	b.n	8008868 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	4a30      	ldr	r2, [pc, #192]	; (800888c <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 80087cc:	601a      	str	r2, [r3, #0]
        break;
 80087ce:	e04b      	b.n	8008868 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	4a2f      	ldr	r2, [pc, #188]	; (8008890 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 80087d4:	601a      	str	r2, [r3, #0]
        break;
 80087d6:	e047      	b.n	8008868 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 80087d8:	f04f 33ff 	mov.w	r3, #4294967295
 80087dc:	60fb      	str	r3, [r7, #12]
        break;
 80087de:	e043      	b.n	8008868 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 80087e0:	7abb      	ldrb	r3, [r7, #10]
 80087e2:	2b09      	cmp	r3, #9
 80087e4:	d83c      	bhi.n	8008860 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 80087e6:	a201      	add	r2, pc, #4	; (adr r2, 80087ec <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 80087e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ec:	08008815 	.word	0x08008815
 80087f0:	0800881f 	.word	0x0800881f
 80087f4:	08008829 	.word	0x08008829
 80087f8:	08008831 	.word	0x08008831
 80087fc:	08008839 	.word	0x08008839
 8008800:	08008841 	.word	0x08008841
 8008804:	08008849 	.word	0x08008849
 8008808:	08008851 	.word	0x08008851
 800880c:	08008861 	.word	0x08008861
 8008810:	08008859 	.word	0x08008859
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	f04f 0200 	mov.w	r2, #0
 800881a:	601a      	str	r2, [r3, #0]
        break;
 800881c:	e024      	b.n	8008868 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008824:	601a      	str	r2, [r3, #0]
        break;
 8008826:	e01f      	b.n	8008868 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	4a12      	ldr	r2, [pc, #72]	; (8008874 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 800882c:	601a      	str	r2, [r3, #0]
        break;
 800882e:	e01b      	b.n	8008868 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	4a11      	ldr	r2, [pc, #68]	; (8008878 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8008834:	601a      	str	r2, [r3, #0]
        break;
 8008836:	e017      	b.n	8008868 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	4a10      	ldr	r2, [pc, #64]	; (800887c <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 800883c:	601a      	str	r2, [r3, #0]
        break;
 800883e:	e013      	b.n	8008868 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	4a0f      	ldr	r2, [pc, #60]	; (8008880 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8008844:	601a      	str	r2, [r3, #0]
        break;
 8008846:	e00f      	b.n	8008868 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	4a0e      	ldr	r2, [pc, #56]	; (8008884 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 800884c:	601a      	str	r2, [r3, #0]
        break;
 800884e:	e00b      	b.n	8008868 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	4a0d      	ldr	r2, [pc, #52]	; (8008888 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8008854:	601a      	str	r2, [r3, #0]
        break;
 8008856:	e007      	b.n	8008868 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	4a0e      	ldr	r2, [pc, #56]	; (8008894 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 800885c:	601a      	str	r2, [r3, #0]
        break;
 800885e:	e003      	b.n	8008868 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8008860:	f04f 33ff 	mov.w	r3, #4294967295
 8008864:	60fb      	str	r3, [r7, #12]
        break;
 8008866:	bf00      	nop
    }
  }

  return ret;
 8008868:	68fb      	ldr	r3, [r7, #12]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	41200000 	.word	0x41200000
 8008878:	41c80000 	.word	0x41c80000
 800887c:	42480000 	.word	0x42480000
 8008880:	42c80000 	.word	0x42c80000
 8008884:	43480000 	.word	0x43480000
 8008888:	43c80000 	.word	0x43c80000
 800888c:	44ca8000 	.word	0x44ca8000
 8008890:	45a80000 	.word	0x45a80000
 8008894:	44a80000 	.word	0x44a80000

08008898 <LSM303AGR_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d106      	bne.n	80088bc <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80088ae:	ed97 0a00 	vldr	s0, [r7]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fc78 	bl	80091a8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 80088b8:	4603      	mov	r3, r0
 80088ba:	e005      	b.n	80088c8 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80088bc:	ed97 0a00 	vldr	s0, [r7]
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fcd3 	bl	800926c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 80088c6:	4603      	mov	r3, r0
  }
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <LSM303AGR_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	3320      	adds	r3, #32
 80088e2:	f107 020b 	add.w	r2, r7, #11
 80088e6:	4611      	mov	r1, r2
 80088e8:	4618      	mov	r0, r3
 80088ea:	f000 fee9 	bl	80096c0 <lsm303agr_xl_full_scale_get>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d002      	beq.n	80088fa <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 80088f4:	f04f 33ff 	mov.w	r3, #4294967295
 80088f8:	e023      	b.n	8008942 <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80088fa:	7afb      	ldrb	r3, [r7, #11]
 80088fc:	2b03      	cmp	r3, #3
 80088fe:	d81b      	bhi.n	8008938 <LSM303AGR_ACC_GetFullScale+0x68>
 8008900:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <LSM303AGR_ACC_GetFullScale+0x38>)
 8008902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008906:	bf00      	nop
 8008908:	08008919 	.word	0x08008919
 800890c:	08008921 	.word	0x08008921
 8008910:	08008929 	.word	0x08008929
 8008914:	08008931 	.word	0x08008931
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	2202      	movs	r2, #2
 800891c:	601a      	str	r2, [r3, #0]
      break;
 800891e:	e00f      	b.n	8008940 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	2204      	movs	r2, #4
 8008924:	601a      	str	r2, [r3, #0]
      break;
 8008926:	e00b      	b.n	8008940 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2208      	movs	r2, #8
 800892c:	601a      	str	r2, [r3, #0]
      break;
 800892e:	e007      	b.n	8008940 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	2210      	movs	r2, #16
 8008934:	601a      	str	r2, [r3, #0]
      break;
 8008936:	e003      	b.n	8008940 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8008938:	f04f 33ff 	mov.w	r3, #4294967295
 800893c:	60fb      	str	r3, [r7, #12]
      break;
 800893e:	bf00      	nop
  }

  return ret;
 8008940:	68fb      	ldr	r3, [r7, #12]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop

0800894c <LSM303AGR_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2b02      	cmp	r3, #2
 800895a:	dd0b      	ble.n	8008974 <LSM303AGR_ACC_SetFullScale+0x28>
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2b04      	cmp	r3, #4
 8008960:	dd06      	ble.n	8008970 <LSM303AGR_ACC_SetFullScale+0x24>
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b08      	cmp	r3, #8
 8008966:	dc01      	bgt.n	800896c <LSM303AGR_ACC_SetFullScale+0x20>
 8008968:	2302      	movs	r3, #2
 800896a:	e004      	b.n	8008976 <LSM303AGR_ACC_SetFullScale+0x2a>
 800896c:	2303      	movs	r3, #3
 800896e:	e002      	b.n	8008976 <LSM303AGR_ACC_SetFullScale+0x2a>
 8008970:	2301      	movs	r3, #1
 8008972:	e000      	b.n	8008976 <LSM303AGR_ACC_SetFullScale+0x2a>
 8008974:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8008976:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	3320      	adds	r3, #32
 800897c:	7bfa      	ldrb	r2, [r7, #15]
 800897e:	4611      	mov	r1, r2
 8008980:	4618      	mov	r0, r3
 8008982:	f000 fe77 	bl	8009674 <lsm303agr_xl_full_scale_set>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 800898c:	f04f 33ff 	mov.w	r3, #4294967295
 8008990:	e000      	b.n	8008994 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <LSM303AGR_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b088      	sub	sp, #32
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 80089a6:	2301      	movs	r3, #1
 80089a8:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	3320      	adds	r3, #32
 80089b2:	f107 020f 	add.w	r2, r7, #15
 80089b6:	4611      	mov	r1, r2
 80089b8:	4618      	mov	r0, r3
 80089ba:	f000 fda5 	bl	8009508 <lsm303agr_xl_operating_mode_get>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 80089c4:	f04f 33ff 	mov.w	r3, #4294967295
 80089c8:	e04a      	b.n	8008a60 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d00c      	beq.n	80089ea <LSM303AGR_ACC_GetAxesRaw+0x4e>
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	dc0e      	bgt.n	80089f2 <LSM303AGR_ACC_GetAxesRaw+0x56>
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d002      	beq.n	80089de <LSM303AGR_ACC_GetAxesRaw+0x42>
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d003      	beq.n	80089e4 <LSM303AGR_ACC_GetAxesRaw+0x48>
 80089dc:	e009      	b.n	80089f2 <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 80089de:	2310      	movs	r3, #16
 80089e0:	83fb      	strh	r3, [r7, #30]
      break;
 80089e2:	e00a      	b.n	80089fa <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 80089e4:	2340      	movs	r3, #64	; 0x40
 80089e6:	83fb      	strh	r3, [r7, #30]
      break;
 80089e8:	e007      	b.n	80089fa <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 80089ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089ee:	83fb      	strh	r3, [r7, #30]
      break;
 80089f0:	e003      	b.n	80089fa <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 80089f2:	f04f 33ff 	mov.w	r3, #4294967295
 80089f6:	61bb      	str	r3, [r7, #24]
      break;
 80089f8:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a00:	d101      	bne.n	8008a06 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	e02c      	b.n	8008a60 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	3320      	adds	r3, #32
 8008a0a:	f107 0210 	add.w	r2, r7, #16
 8008a0e:	4611      	mov	r1, r2
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 feb3 	bl	800977c <lsm303agr_acceleration_raw_get>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 8008a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a20:	e01e      	b.n	8008a60 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8008a22:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008a26:	461a      	mov	r2, r3
 8008a28:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008a2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8008a30:	b21a      	sxth	r2, r3
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8008a36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008a40:	fb92 f3f3 	sdiv	r3, r2, r3
 8008a44:	b21a      	sxth	r2, r3
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8008a4a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008a54:	fb92 f3f3 	sdiv	r3, r2, r3
 8008a58:	b21a      	sxth	r2, r3
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	809a      	strh	r2, [r3, #4]

  return ret;
 8008a5e:	69bb      	ldr	r3, [r7, #24]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3720      	adds	r7, #32
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <LSM303AGR_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b086      	sub	sp, #24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8008a72:	f04f 0300 	mov.w	r3, #0
 8008a76:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8008a78:	f107 0310 	add.w	r3, r7, #16
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7ff ff8c 	bl	800899c <LSM303AGR_ACC_GetAxesRaw>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d002      	beq.n	8008a90 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8008a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a8e:	e03c      	b.n	8008b0a <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8008a90:	f107 030c 	add.w	r3, r7, #12
 8008a94:	4619      	mov	r1, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f7ff fde9 	bl	800866e <LSM303AGR_ACC_GetSensitivity>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d002      	beq.n	8008aa8 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8008aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa6:	e030      	b.n	8008b0a <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8008aa8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008aac:	ee07 3a90 	vmov	s15, r3
 8008ab0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008ab4:	edd7 7a03 	vldr	s15, [r7, #12]
 8008ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008abc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ac0:	ee17 2a90 	vmov	r2, s15
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8008ac8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008acc:	ee07 3a90 	vmov	s15, r3
 8008ad0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008ad4:	edd7 7a03 	vldr	s15, [r7, #12]
 8008ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ae0:	ee17 2a90 	vmov	r2, s15
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8008ae8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008aec:	ee07 3a90 	vmov	s15, r3
 8008af0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008af4:	edd7 7a03 	vldr	s15, [r7, #12]
 8008af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008afc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b00:	ee17 2a90 	vmov	r2, s15
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3718      	adds	r7, #24
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <LSM303AGR_ACC_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b082      	sub	sp, #8
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	70fb      	strb	r3, [r7, #3]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f103 0020 	add.w	r0, r3, #32
 8008b28:	1cba      	adds	r2, r7, #2
 8008b2a:	78f9      	ldrb	r1, [r7, #3]
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	f000 fcd3 	bl	80094d8 <lsm303agr_write_reg>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8008b38:	f04f 33ff 	mov.w	r3, #4294967295
 8008b3c:	e000      	b.n	8008b40 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <LSM303AGR_MAG_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d103      	bne.n	8008b64 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8008b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b60:	60fb      	str	r3, [r7, #12]
 8008b62:	e04b      	b.n	8008bfc <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	689a      	ldr	r2, [r3, #8]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	7b1a      	ldrb	r2, [r3, #12]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	691a      	ldr	r2, [r3, #16]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	695a      	ldr	r2, [r3, #20]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	699a      	ldr	r2, [r3, #24]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a1a      	ldr	r2, [pc, #104]	; (8008c08 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8008ba0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a19      	ldr	r2, [pc, #100]	; (8008c0c <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8008ba6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d103      	bne.n	8008bbe <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8008bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8008bba:	60fb      	str	r3, [r7, #12]
 8008bbc:	e01e      	b.n	8008bfc <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4798      	blx	r3
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8008bca:	f04f 33ff 	mov.w	r3, #4294967295
 8008bce:	60fb      	str	r3, [r7, #12]
 8008bd0:	e014      	b.n	8008bfc <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d010      	beq.n	8008bfc <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10b      	bne.n	8008bfc <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	3320      	adds	r3, #32
 8008be8:	2101      	movs	r1, #1
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 ff75 	bl	8009ada <lsm303agr_mag_i2c_interface_set>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d002      	beq.n	8008bfc <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8008bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8008bfa:	e000      	b.n	8008bfe <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	080093e5 	.word	0x080093e5
 8008c0c:	08009447 	.word	0x08009447

08008c10 <LSM303AGR_MAG_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3320      	adds	r3, #32
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 fe7c 	bl	800991c <lsm303agr_mag_block_data_update_set>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d002      	beq.n	8008c30 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8008c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c2e:	e028      	b.n	8008c82 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	3320      	adds	r3, #32
 8008c34:	2102      	movs	r1, #2
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 fdeb 	bl	8009812 <lsm303agr_mag_operating_mode_set>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d002      	beq.n	8008c48 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8008c42:	f04f 33ff 	mov.w	r3, #4294967295
 8008c46:	e01c      	b.n	8008c82 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	3320      	adds	r3, #32
 8008c4c:	2103      	movs	r1, #3
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 fe05 	bl	800985e <lsm303agr_mag_data_rate_set>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8008c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c5e:	e010      	b.n	8008c82 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	3320      	adds	r3, #32
 8008c64:	2100      	movs	r1, #0
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 feeb 	bl	8009a42 <lsm303agr_mag_self_test_set>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d002      	beq.n	8008c78 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8008c72:	f04f 33ff 	mov.w	r3, #4294967295
 8008c76:	e004      	b.n	8008c82 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <LSM303AGR_MAG_DeInit>:
  * @brief  Deinitialize the LSM303AGR magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b082      	sub	sp, #8
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 f874 	bl	8008d80 <LSM303AGR_MAG_Disable>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8008c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca2:	e004      	b.n	8008cae <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <LSM303AGR_MAG_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b082      	sub	sp, #8
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	3320      	adds	r3, #32
 8008cc4:	6839      	ldr	r1, [r7, #0]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 feaa 	bl	8009a20 <lsm303agr_mag_device_id_get>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d002      	beq.n	8008cd8 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8008cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd6:	e000      	b.n	8008cda <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3708      	adds	r7, #8
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
	...

08008ce4 <LSM303AGR_MAG_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	2200      	movs	r2, #0
 8008d04:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	2232      	movs	r2, #50	; 0x32
 8008d16:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	f04f 0200 	mov.w	r2, #0
 8008d1e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	f04f 0200 	mov.w	r2, #0
 8008d26:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	4a04      	ldr	r2, [pc, #16]	; (8008d3c <LSM303AGR_MAG_GetCapabilities+0x58>)
 8008d2c:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	42c80000 	.word	0x42c80000

08008d40 <LSM303AGR_MAG_Enable>:
  * @brief Enable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d101      	bne.n	8008d56 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	e010      	b.n	8008d78 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	3320      	adds	r3, #32
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f000 fd58 	bl	8009812 <lsm303agr_mag_operating_mode_set>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d002      	beq.n	8008d6e <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8008d68:	f04f 33ff 	mov.w	r3, #4294967295
 8008d6c:	e004      	b.n	8008d78 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <LSM303AGR_MAG_Disable>:
  * @brief Disable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	e010      	b.n	8008db8 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	3320      	adds	r3, #32
 8008d9a:	2102      	movs	r1, #2
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f000 fd38 	bl	8009812 <lsm303agr_mag_operating_mode_set>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d002      	beq.n	8008dae <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8008da8:	f04f 33ff 	mov.w	r3, #4294967295
 8008dac:	e004      	b.n	8008db8 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3708      	adds	r7, #8
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <LSM303AGR_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8008dd0:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <LSM303AGR_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	3320      	adds	r3, #32
 8008df2:	f107 020b 	add.w	r2, r7, #11
 8008df6:	4611      	mov	r1, r2
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 fd57 	bl	80098ac <lsm303agr_mag_data_rate_get>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d002      	beq.n	8008e0a <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8008e04:	f04f 33ff 	mov.w	r3, #4294967295
 8008e08:	e023      	b.n	8008e52 <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8008e0a:	7afb      	ldrb	r3, [r7, #11]
 8008e0c:	2b03      	cmp	r3, #3
 8008e0e:	d81b      	bhi.n	8008e48 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8008e10:	a201      	add	r2, pc, #4	; (adr r2, 8008e18 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 8008e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e16:	bf00      	nop
 8008e18:	08008e29 	.word	0x08008e29
 8008e1c:	08008e31 	.word	0x08008e31
 8008e20:	08008e39 	.word	0x08008e39
 8008e24:	08008e41 	.word	0x08008e41
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	4a0c      	ldr	r2, [pc, #48]	; (8008e5c <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8008e2c:	601a      	str	r2, [r3, #0]
      break;
 8008e2e:	e00f      	b.n	8008e50 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	4a0b      	ldr	r2, [pc, #44]	; (8008e60 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8008e34:	601a      	str	r2, [r3, #0]
      break;
 8008e36:	e00b      	b.n	8008e50 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	4a0a      	ldr	r2, [pc, #40]	; (8008e64 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8008e3c:	601a      	str	r2, [r3, #0]
      break;
 8008e3e:	e007      	b.n	8008e50 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	4a09      	ldr	r2, [pc, #36]	; (8008e68 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8008e44:	601a      	str	r2, [r3, #0]
      break;
 8008e46:	e003      	b.n	8008e50 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8008e48:	f04f 33ff 	mov.w	r3, #4294967295
 8008e4c:	60fb      	str	r3, [r7, #12]
      break;
 8008e4e:	bf00      	nop
  }

  return ret;
 8008e50:	68fb      	ldr	r3, [r7, #12]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	41200000 	.word	0x41200000
 8008e60:	41a00000 	.word	0x41a00000
 8008e64:	42480000 	.word	0x42480000
 8008e68:	42c80000 	.word	0x42c80000

08008e6c <LSM303AGR_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8008e78:	edd7 7a00 	vldr	s15, [r7]
 8008e7c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e88:	d801      	bhi.n	8008e8e <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	e016      	b.n	8008ebc <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8008e8e:	edd7 7a00 	vldr	s15, [r7]
 8008e92:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e9e:	d801      	bhi.n	8008ea4 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e00b      	b.n	8008ebc <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8008ea4:	edd7 7a00 	vldr	s15, [r7]
 8008ea8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8008ee4 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8008eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eb4:	d801      	bhi.n	8008eba <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8008eb6:	2302      	movs	r3, #2
 8008eb8:	e000      	b.n	8008ebc <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8008eba:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8008ebc:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	3320      	adds	r3, #32
 8008ec2:	7bfa      	ldrb	r2, [r7, #15]
 8008ec4:	4611      	mov	r1, r2
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 fcc9 	bl	800985e <lsm303agr_mag_data_rate_set>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d002      	beq.n	8008ed8 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8008ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed6:	e000      	b.n	8008eda <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	42480000 	.word	0x42480000

08008ee8 <LSM303AGR_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	2232      	movs	r2, #50	; 0x32
 8008ef6:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	370c      	adds	r7, #12
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <LSM303AGR_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b083      	sub	sp, #12
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <LSM303AGR_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3320      	adds	r3, #32
 8008f2c:	f107 0208 	add.w	r2, r7, #8
 8008f30:	4611      	mov	r1, r2
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 fd18 	bl	8009968 <lsm303agr_magnetic_raw_get>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d002      	beq.n	8008f44 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8008f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f42:	e00c      	b.n	8008f5e <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8008f44:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8008f4c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8008f54:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <LSM303AGR_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b086      	sub	sp, #24
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	3320      	adds	r3, #32
 8008f74:	f107 0210 	add.w	r2, r7, #16
 8008f78:	4611      	mov	r1, r2
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 fcf4 	bl	8009968 <lsm303agr_magnetic_raw_get>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d002      	beq.n	8008f8c <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8008f86:	f04f 33ff 	mov.w	r3, #4294967295
 8008f8a:	e036      	b.n	8008ffa <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8008f8c:	f107 030c 	add.w	r3, r7, #12
 8008f90:	4619      	mov	r1, r3
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f7ff ff14 	bl	8008dc0 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8008f98:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008f9c:	ee07 3a90 	vmov	s15, r3
 8008fa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008fa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8008fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fb0:	ee17 2a90 	vmov	r2, s15
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8008fb8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008fbc:	ee07 3a90 	vmov	s15, r3
 8008fc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008fc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8008fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fd0:	ee17 2a90 	vmov	r2, s15
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8008fd8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008fdc:	ee07 3a90 	vmov	s15, r3
 8008fe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008fe4:	edd7 7a03 	vldr	s15, [r7, #12]
 8008fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ff0:	ee17 2a90 	vmov	r2, s15
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
	...

08009004 <LSM303AGR_ACC_GetSensitivityHR>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	3320      	adds	r3, #32
 8009016:	f107 020b 	add.w	r2, r7, #11
 800901a:	4611      	mov	r1, r2
 800901c:	4618      	mov	r0, r3
 800901e:	f000 fb4f 	bl	80096c0 <lsm303agr_xl_full_scale_get>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d002      	beq.n	800902e <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8009028:	f04f 33ff 	mov.w	r3, #4294967295
 800902c:	e023      	b.n	8009076 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800902e:	7afb      	ldrb	r3, [r7, #11]
 8009030:	2b03      	cmp	r3, #3
 8009032:	d81b      	bhi.n	800906c <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8009034:	a201      	add	r2, pc, #4	; (adr r2, 800903c <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8009036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903a:	bf00      	nop
 800903c:	0800904d 	.word	0x0800904d
 8009040:	08009055 	.word	0x08009055
 8009044:	0800905d 	.word	0x0800905d
 8009048:	08009065 	.word	0x08009065
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	4a0c      	ldr	r2, [pc, #48]	; (8009080 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8009050:	601a      	str	r2, [r3, #0]
      break;
 8009052:	e00f      	b.n	8009074 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	4a0b      	ldr	r2, [pc, #44]	; (8009084 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8009058:	601a      	str	r2, [r3, #0]
      break;
 800905a:	e00b      	b.n	8009074 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	4a0a      	ldr	r2, [pc, #40]	; (8009088 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8009060:	601a      	str	r2, [r3, #0]
      break;
 8009062:	e007      	b.n	8009074 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	4a09      	ldr	r2, [pc, #36]	; (800908c <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8009068:	601a      	str	r2, [r3, #0]
      break;
 800906a:	e003      	b.n	8009074 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800906c:	f04f 33ff 	mov.w	r3, #4294967295
 8009070:	60fb      	str	r3, [r7, #12]
      break;
 8009072:	bf00      	nop
  }

  return ret;
 8009074:	68fb      	ldr	r3, [r7, #12]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	3f7ae148 	.word	0x3f7ae148
 8009084:	3ff9999a 	.word	0x3ff9999a
 8009088:	4079999a 	.word	0x4079999a
 800908c:	413b851f 	.word	0x413b851f

08009090 <LSM303AGR_ACC_GetSensitivityNM>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800909a:	2300      	movs	r3, #0
 800909c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	3320      	adds	r3, #32
 80090a2:	f107 020b 	add.w	r2, r7, #11
 80090a6:	4611      	mov	r1, r2
 80090a8:	4618      	mov	r0, r3
 80090aa:	f000 fb09 	bl	80096c0 <lsm303agr_xl_full_scale_get>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d002      	beq.n	80090ba <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 80090b4:	f04f 33ff 	mov.w	r3, #4294967295
 80090b8:	e023      	b.n	8009102 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80090ba:	7afb      	ldrb	r3, [r7, #11]
 80090bc:	2b03      	cmp	r3, #3
 80090be:	d81b      	bhi.n	80090f8 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 80090c0:	a201      	add	r2, pc, #4	; (adr r2, 80090c8 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 80090c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c6:	bf00      	nop
 80090c8:	080090d9 	.word	0x080090d9
 80090cc:	080090e1 	.word	0x080090e1
 80090d0:	080090e9 	.word	0x080090e9
 80090d4:	080090f1 	.word	0x080090f1
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	4a0c      	ldr	r2, [pc, #48]	; (800910c <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 80090dc:	601a      	str	r2, [r3, #0]
      break;
 80090de:	e00f      	b.n	8009100 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	4a0b      	ldr	r2, [pc, #44]	; (8009110 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 80090e4:	601a      	str	r2, [r3, #0]
      break;
 80090e6:	e00b      	b.n	8009100 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	4a0a      	ldr	r2, [pc, #40]	; (8009114 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 80090ec:	601a      	str	r2, [r3, #0]
      break;
 80090ee:	e007      	b.n	8009100 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	4a09      	ldr	r2, [pc, #36]	; (8009118 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 80090f4:	601a      	str	r2, [r3, #0]
      break;
 80090f6:	e003      	b.n	8009100 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80090f8:	f04f 33ff 	mov.w	r3, #4294967295
 80090fc:	60fb      	str	r3, [r7, #12]
      break;
 80090fe:	bf00      	nop
  }

  return ret;
 8009100:	68fb      	ldr	r3, [r7, #12]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	4079999a 	.word	0x4079999a
 8009110:	40fa3d71 	.word	0x40fa3d71
 8009114:	417a147b 	.word	0x417a147b
 8009118:	423b999a 	.word	0x423b999a

0800911c <LSM303AGR_ACC_GetSensitivityLP>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	3320      	adds	r3, #32
 800912e:	f107 020b 	add.w	r2, r7, #11
 8009132:	4611      	mov	r1, r2
 8009134:	4618      	mov	r0, r3
 8009136:	f000 fac3 	bl	80096c0 <lsm303agr_xl_full_scale_get>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8009140:	f04f 33ff 	mov.w	r3, #4294967295
 8009144:	e023      	b.n	800918e <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8009146:	7afb      	ldrb	r3, [r7, #11]
 8009148:	2b03      	cmp	r3, #3
 800914a:	d81b      	bhi.n	8009184 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 800914c:	a201      	add	r2, pc, #4	; (adr r2, 8009154 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 800914e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009152:	bf00      	nop
 8009154:	08009165 	.word	0x08009165
 8009158:	0800916d 	.word	0x0800916d
 800915c:	08009175 	.word	0x08009175
 8009160:	0800917d 	.word	0x0800917d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	4a0c      	ldr	r2, [pc, #48]	; (8009198 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8009168:	601a      	str	r2, [r3, #0]
      break;
 800916a:	e00f      	b.n	800918c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	4a0b      	ldr	r2, [pc, #44]	; (800919c <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8009170:	601a      	str	r2, [r3, #0]
      break;
 8009172:	e00b      	b.n	800918c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	4a0a      	ldr	r2, [pc, #40]	; (80091a0 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8009178:	601a      	str	r2, [r3, #0]
      break;
 800917a:	e007      	b.n	800918c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	4a09      	ldr	r2, [pc, #36]	; (80091a4 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8009180:	601a      	str	r2, [r3, #0]
      break;
 8009182:	e003      	b.n	800918c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8009184:	f04f 33ff 	mov.w	r3, #4294967295
 8009188:	60fb      	str	r3, [r7, #12]
      break;
 800918a:	bf00      	nop
  }

  return ret;
 800918c:	68fb      	ldr	r3, [r7, #12]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	417a147b 	.word	0x417a147b
 800919c:	41fa147b 	.word	0x41fa147b
 80091a0:	427a147b 	.word	0x427a147b
 80091a4:	433b947b 	.word	0x433b947b

080091a8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80091b4:	edd7 7a00 	vldr	s15, [r7]
 80091b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091c4:	d801      	bhi.n	80091ca <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 80091c6:	2301      	movs	r3, #1
 80091c8:	e037      	b.n	800923a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80091ca:	edd7 7a00 	vldr	s15, [r7]
 80091ce:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80091d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091da:	d801      	bhi.n	80091e0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 80091dc:	2302      	movs	r3, #2
 80091de:	e02c      	b.n	800923a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80091e0:	edd7 7a00 	vldr	s15, [r7]
 80091e4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80091e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091f0:	d801      	bhi.n	80091f6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80091f2:	2303      	movs	r3, #3
 80091f4:	e021      	b.n	800923a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80091f6:	edd7 7a00 	vldr	s15, [r7]
 80091fa:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009260 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 80091fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009206:	d801      	bhi.n	800920c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8009208:	2304      	movs	r3, #4
 800920a:	e016      	b.n	800923a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800920c:	edd7 7a00 	vldr	s15, [r7]
 8009210:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8009264 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8009214:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800921c:	d801      	bhi.n	8009222 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800921e:	2305      	movs	r3, #5
 8009220:	e00b      	b.n	800923a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8009222:	edd7 7a00 	vldr	s15, [r7]
 8009226:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009268 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 800922a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800922e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009232:	d801      	bhi.n	8009238 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8009234:	2306      	movs	r3, #6
 8009236:	e000      	b.n	800923a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8009238:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 800923a:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	3320      	adds	r3, #32
 8009240:	7bfa      	ldrb	r2, [r7, #15]
 8009242:	4611      	mov	r1, r2
 8009244:	4618      	mov	r0, r3
 8009246:	f000 f993 	bl	8009570 <lsm303agr_xl_data_rate_set>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d002      	beq.n	8009256 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8009250:	f04f 33ff 	mov.w	r3, #4294967295
 8009254:	e000      	b.n	8009258 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	42480000 	.word	0x42480000
 8009264:	42c80000 	.word	0x42c80000
 8009268:	43480000 	.word	0x43480000

0800926c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8009278:	edd7 7a00 	vldr	s15, [r7]
 800927c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009288:	d801      	bhi.n	800928e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 800928a:	2301      	movs	r3, #1
 800928c:	e037      	b.n	80092fe <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800928e:	edd7 7a00 	vldr	s15, [r7]
 8009292:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8009296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800929a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800929e:	d801      	bhi.n	80092a4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 80092a0:	2302      	movs	r3, #2
 80092a2:	e02c      	b.n	80092fe <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80092a4:	edd7 7a00 	vldr	s15, [r7]
 80092a8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80092ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b4:	d801      	bhi.n	80092ba <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80092b6:	2303      	movs	r3, #3
 80092b8:	e021      	b.n	80092fe <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80092ba:	edd7 7a00 	vldr	s15, [r7]
 80092be:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8009314 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 80092c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ca:	d801      	bhi.n	80092d0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 80092cc:	2304      	movs	r3, #4
 80092ce:	e016      	b.n	80092fe <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80092d0:	edd7 7a00 	vldr	s15, [r7]
 80092d4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009318 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 80092d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092e0:	d801      	bhi.n	80092e6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80092e2:	2305      	movs	r3, #5
 80092e4:	e00b      	b.n	80092fe <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80092e6:	edd7 7a00 	vldr	s15, [r7]
 80092ea:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800931c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 80092ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092f6:	d801      	bhi.n	80092fc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 80092f8:	2306      	movs	r3, #6
 80092fa:	e000      	b.n	80092fe <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80092fc:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	370c      	adds	r7, #12
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	42480000 	.word	0x42480000
 8009318:	42c80000 	.word	0x42c80000
 800931c:	43480000 	.word	0x43480000

08009320 <ReadAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009320:	b590      	push	{r4, r7, lr}
 8009322:	b087      	sub	sp, #28
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	607a      	str	r2, [r7, #4]
 800932a:	461a      	mov	r2, r3
 800932c:	460b      	mov	r3, r1
 800932e:	72fb      	strb	r3, [r7, #11]
 8009330:	4613      	mov	r3, r2
 8009332:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10e      	bne.n	800935e <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	695c      	ldr	r4, [r3, #20]
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	7b1b      	ldrb	r3, [r3, #12]
 8009348:	b298      	uxth	r0, r3
 800934a:	7afb      	ldrb	r3, [r7, #11]
 800934c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009350:	b2db      	uxtb	r3, r3
 8009352:	b299      	uxth	r1, r3
 8009354:	893b      	ldrh	r3, [r7, #8]
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	47a0      	blx	r4
 800935a:	4603      	mov	r3, r0
 800935c:	e00d      	b.n	800937a <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	695c      	ldr	r4, [r3, #20]
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	7b1b      	ldrb	r3, [r3, #12]
 8009366:	b298      	uxth	r0, r3
 8009368:	7afb      	ldrb	r3, [r7, #11]
 800936a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800936e:	b2db      	uxtb	r3, r3
 8009370:	b299      	uxth	r1, r3
 8009372:	893b      	ldrh	r3, [r7, #8]
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	47a0      	blx	r4
 8009378:	4603      	mov	r3, r0
  }
}
 800937a:	4618      	mov	r0, r3
 800937c:	371c      	adds	r7, #28
 800937e:	46bd      	mov	sp, r7
 8009380:	bd90      	pop	{r4, r7, pc}

08009382 <WriteAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009382:	b590      	push	{r4, r7, lr}
 8009384:	b087      	sub	sp, #28
 8009386:	af00      	add	r7, sp, #0
 8009388:	60f8      	str	r0, [r7, #12]
 800938a:	607a      	str	r2, [r7, #4]
 800938c:	461a      	mov	r2, r3
 800938e:	460b      	mov	r3, r1
 8009390:	72fb      	strb	r3, [r7, #11]
 8009392:	4613      	mov	r3, r2
 8009394:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d10e      	bne.n	80093c0 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	691c      	ldr	r4, [r3, #16]
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	7b1b      	ldrb	r3, [r3, #12]
 80093aa:	b298      	uxth	r0, r3
 80093ac:	7afb      	ldrb	r3, [r7, #11]
 80093ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	b299      	uxth	r1, r3
 80093b6:	893b      	ldrh	r3, [r7, #8]
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	47a0      	blx	r4
 80093bc:	4603      	mov	r3, r0
 80093be:	e00d      	b.n	80093dc <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	691c      	ldr	r4, [r3, #16]
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	7b1b      	ldrb	r3, [r3, #12]
 80093c8:	b298      	uxth	r0, r3
 80093ca:	7afb      	ldrb	r3, [r7, #11]
 80093cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	b299      	uxth	r1, r3
 80093d4:	893b      	ldrh	r3, [r7, #8]
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	47a0      	blx	r4
 80093da:	4603      	mov	r3, r0
  }
}
 80093dc:	4618      	mov	r0, r3
 80093de:	371c      	adds	r7, #28
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd90      	pop	{r4, r7, pc}

080093e4 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80093e4:	b590      	push	{r4, r7, lr}
 80093e6:	b087      	sub	sp, #28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	607a      	str	r2, [r7, #4]
 80093ee:	461a      	mov	r2, r3
 80093f0:	460b      	mov	r3, r1
 80093f2:	72fb      	strb	r3, [r7, #11]
 80093f4:	4613      	mov	r3, r2
 80093f6:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d10e      	bne.n	8009422 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	695c      	ldr	r4, [r3, #20]
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	7b1b      	ldrb	r3, [r3, #12]
 800940c:	b298      	uxth	r0, r3
 800940e:	7afb      	ldrb	r3, [r7, #11]
 8009410:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009414:	b2db      	uxtb	r3, r3
 8009416:	b299      	uxth	r1, r3
 8009418:	893b      	ldrh	r3, [r7, #8]
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	47a0      	blx	r4
 800941e:	4603      	mov	r3, r0
 8009420:	e00d      	b.n	800943e <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	695c      	ldr	r4, [r3, #20]
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	7b1b      	ldrb	r3, [r3, #12]
 800942a:	b298      	uxth	r0, r3
 800942c:	7afb      	ldrb	r3, [r7, #11]
 800942e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009432:	b2db      	uxtb	r3, r3
 8009434:	b299      	uxth	r1, r3
 8009436:	893b      	ldrh	r3, [r7, #8]
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	47a0      	blx	r4
 800943c:	4603      	mov	r3, r0
  }
}
 800943e:	4618      	mov	r0, r3
 8009440:	371c      	adds	r7, #28
 8009442:	46bd      	mov	sp, r7
 8009444:	bd90      	pop	{r4, r7, pc}

08009446 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009446:	b590      	push	{r4, r7, lr}
 8009448:	b087      	sub	sp, #28
 800944a:	af00      	add	r7, sp, #0
 800944c:	60f8      	str	r0, [r7, #12]
 800944e:	607a      	str	r2, [r7, #4]
 8009450:	461a      	mov	r2, r3
 8009452:	460b      	mov	r3, r1
 8009454:	72fb      	strb	r3, [r7, #11]
 8009456:	4613      	mov	r3, r2
 8009458:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10e      	bne.n	8009484 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	691c      	ldr	r4, [r3, #16]
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	7b1b      	ldrb	r3, [r3, #12]
 800946e:	b298      	uxth	r0, r3
 8009470:	7afb      	ldrb	r3, [r7, #11]
 8009472:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009476:	b2db      	uxtb	r3, r3
 8009478:	b299      	uxth	r1, r3
 800947a:	893b      	ldrh	r3, [r7, #8]
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	47a0      	blx	r4
 8009480:	4603      	mov	r3, r0
 8009482:	e00d      	b.n	80094a0 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	691c      	ldr	r4, [r3, #16]
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	7b1b      	ldrb	r3, [r3, #12]
 800948c:	b298      	uxth	r0, r3
 800948e:	7afb      	ldrb	r3, [r7, #11]
 8009490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009494:	b2db      	uxtb	r3, r3
 8009496:	b299      	uxth	r1, r3
 8009498:	893b      	ldrh	r3, [r7, #8]
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	47a0      	blx	r4
 800949e:	4603      	mov	r3, r0
  }
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	371c      	adds	r7, #28
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd90      	pop	{r4, r7, pc}

080094a8 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80094a8:	b590      	push	{r4, r7, lr}
 80094aa:	b087      	sub	sp, #28
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	607a      	str	r2, [r7, #4]
 80094b2:	461a      	mov	r2, r3
 80094b4:	460b      	mov	r3, r1
 80094b6:	72fb      	strb	r3, [r7, #11]
 80094b8:	4613      	mov	r3, r2
 80094ba:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	685c      	ldr	r4, [r3, #4]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	68d8      	ldr	r0, [r3, #12]
 80094c4:	893b      	ldrh	r3, [r7, #8]
 80094c6:	7af9      	ldrb	r1, [r7, #11]
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	47a0      	blx	r4
 80094cc:	6178      	str	r0, [r7, #20]

  return ret;
 80094ce:	697b      	ldr	r3, [r7, #20]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	371c      	adds	r7, #28
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd90      	pop	{r4, r7, pc}

080094d8 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 80094d8:	b590      	push	{r4, r7, lr}
 80094da:	b087      	sub	sp, #28
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	607a      	str	r2, [r7, #4]
 80094e2:	461a      	mov	r2, r3
 80094e4:	460b      	mov	r3, r1
 80094e6:	72fb      	strb	r3, [r7, #11]
 80094e8:	4613      	mov	r3, r2
 80094ea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681c      	ldr	r4, [r3, #0]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	68d8      	ldr	r0, [r3, #12]
 80094f4:	893b      	ldrh	r3, [r7, #8]
 80094f6:	7af9      	ldrb	r1, [r7, #11]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	47a0      	blx	r4
 80094fc:	6178      	str	r0, [r7, #20]

  return ret;
 80094fe:	697b      	ldr	r3, [r7, #20]
}
 8009500:	4618      	mov	r0, r3
 8009502:	371c      	adds	r7, #28
 8009504:	46bd      	mov	sp, r7
 8009506:	bd90      	pop	{r4, r7, pc}

08009508 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8009512:	f107 020c 	add.w	r2, r7, #12
 8009516:	2301      	movs	r3, #1
 8009518:	2120      	movs	r1, #32
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7ff ffc4 	bl	80094a8 <lsm303agr_read_reg>
 8009520:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d107      	bne.n	8009538 <lsm303agr_xl_operating_mode_get+0x30>
  {
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8009528:	f107 0210 	add.w	r2, r7, #16
 800952c:	2301      	movs	r3, #1
 800952e:	2123      	movs	r1, #35	; 0x23
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7ff ffb9 	bl	80094a8 <lsm303agr_read_reg>
 8009536:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if (ctrl_reg1_a.lpen != PROPERTY_DISABLE)
 8009538:	7b3b      	ldrb	r3, [r7, #12]
 800953a:	f003 0308 	and.w	r3, r3, #8
 800953e:	b2db      	uxtb	r3, r3
 8009540:	2b00      	cmp	r3, #0
 8009542:	d003      	beq.n	800954c <lsm303agr_xl_operating_mode_get+0x44>
  {
    *val = LSM303AGR_LP_8bit;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	2202      	movs	r2, #2
 8009548:	701a      	strb	r2, [r3, #0]
 800954a:	e00c      	b.n	8009566 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE)
 800954c:	7c3b      	ldrb	r3, [r7, #16]
 800954e:	f003 0308 	and.w	r3, r3, #8
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b00      	cmp	r3, #0
 8009556:	d003      	beq.n	8009560 <lsm303agr_xl_operating_mode_get+0x58>
  {
    *val = LSM303AGR_HR_12bit;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	2200      	movs	r2, #0
 800955c:	701a      	strb	r2, [r3, #0]
 800955e:	e002      	b.n	8009566 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else
  {
    *val = LSM303AGR_NM_10bit;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	2201      	movs	r2, #1
 8009564:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8009566:	697b      	ldr	r3, [r7, #20]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3718      	adds	r7, #24
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	460b      	mov	r3, r1
 800957a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800957c:	f107 0208 	add.w	r2, r7, #8
 8009580:	2301      	movs	r3, #1
 8009582:	2120      	movs	r1, #32
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f7ff ff8f 	bl	80094a8 <lsm303agr_read_reg>
 800958a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10f      	bne.n	80095b2 <lsm303agr_xl_data_rate_set+0x42>
  {
    ctrl_reg1_a.odr = (uint8_t)val;
 8009592:	78fb      	ldrb	r3, [r7, #3]
 8009594:	f003 030f 	and.w	r3, r3, #15
 8009598:	b2da      	uxtb	r2, r3
 800959a:	7a3b      	ldrb	r3, [r7, #8]
 800959c:	f362 1307 	bfi	r3, r2, #4, #4
 80095a0:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80095a2:	f107 0208 	add.w	r2, r7, #8
 80095a6:	2301      	movs	r3, #1
 80095a8:	2120      	movs	r1, #32
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7ff ff94 	bl	80094d8 <lsm303agr_write_reg>
 80095b0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 80095b2:	68fb      	ldr	r3, [r7, #12]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80095c6:	f107 0208 	add.w	r2, r7, #8
 80095ca:	2301      	movs	r3, #1
 80095cc:	2120      	movs	r1, #32
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7ff ff6a 	bl	80094a8 <lsm303agr_read_reg>
 80095d4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr)
 80095d6:	7a3b      	ldrb	r3, [r7, #8]
 80095d8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	2b09      	cmp	r3, #9
 80095e0:	d83e      	bhi.n	8009660 <lsm303agr_xl_data_rate_get+0xa4>
 80095e2:	a201      	add	r2, pc, #4	; (adr r2, 80095e8 <lsm303agr_xl_data_rate_get+0x2c>)
 80095e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e8:	08009611 	.word	0x08009611
 80095ec:	08009619 	.word	0x08009619
 80095f0:	08009621 	.word	0x08009621
 80095f4:	08009629 	.word	0x08009629
 80095f8:	08009631 	.word	0x08009631
 80095fc:	08009639 	.word	0x08009639
 8009600:	08009641 	.word	0x08009641
 8009604:	08009649 	.word	0x08009649
 8009608:	08009651 	.word	0x08009651
 800960c:	08009659 	.word	0x08009659
  {
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	2200      	movs	r2, #0
 8009614:	701a      	strb	r2, [r3, #0]
      break;
 8009616:	e027      	b.n	8009668 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	2201      	movs	r2, #1
 800961c:	701a      	strb	r2, [r3, #0]
      break;
 800961e:	e023      	b.n	8009668 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	2202      	movs	r2, #2
 8009624:	701a      	strb	r2, [r3, #0]
      break;
 8009626:	e01f      	b.n	8009668 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	2203      	movs	r2, #3
 800962c:	701a      	strb	r2, [r3, #0]
      break;
 800962e:	e01b      	b.n	8009668 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	2204      	movs	r2, #4
 8009634:	701a      	strb	r2, [r3, #0]
      break;
 8009636:	e017      	b.n	8009668 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	2205      	movs	r2, #5
 800963c:	701a      	strb	r2, [r3, #0]
      break;
 800963e:	e013      	b.n	8009668 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	2206      	movs	r2, #6
 8009644:	701a      	strb	r2, [r3, #0]
      break;
 8009646:	e00f      	b.n	8009668 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	2207      	movs	r2, #7
 800964c:	701a      	strb	r2, [r3, #0]
      break;
 800964e:	e00b      	b.n	8009668 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	2208      	movs	r2, #8
 8009654:	701a      	strb	r2, [r3, #0]
      break;
 8009656:	e007      	b.n	8009668 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	2209      	movs	r2, #9
 800965c:	701a      	strb	r2, [r3, #0]
      break;
 800965e:	e003      	b.n	8009668 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	2200      	movs	r2, #0
 8009664:	701a      	strb	r2, [r3, #0]
      break;
 8009666:	bf00      	nop
  }

  return ret;
 8009668:	68fb      	ldr	r3, [r7, #12]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop

08009674 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	460b      	mov	r3, r1
 800967e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8009680:	f107 0208 	add.w	r2, r7, #8
 8009684:	2301      	movs	r3, #1
 8009686:	2123      	movs	r1, #35	; 0x23
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7ff ff0d 	bl	80094a8 <lsm303agr_read_reg>
 800968e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10f      	bne.n	80096b6 <lsm303agr_xl_full_scale_set+0x42>
  {
    ctrl_reg4_a.fs = (uint8_t)val;
 8009696:	78fb      	ldrb	r3, [r7, #3]
 8009698:	f003 0303 	and.w	r3, r3, #3
 800969c:	b2da      	uxtb	r2, r3
 800969e:	7a3b      	ldrb	r3, [r7, #8]
 80096a0:	f362 1305 	bfi	r3, r2, #4, #2
 80096a4:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80096a6:	f107 0208 	add.w	r2, r7, #8
 80096aa:	2301      	movs	r3, #1
 80096ac:	2123      	movs	r1, #35	; 0x23
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7ff ff12 	bl	80094d8 <lsm303agr_write_reg>
 80096b4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 80096b6:	68fb      	ldr	r3, [r7, #12]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80096ca:	f107 0208 	add.w	r2, r7, #8
 80096ce:	2301      	movs	r3, #1
 80096d0:	2123      	movs	r1, #35	; 0x23
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7ff fee8 	bl	80094a8 <lsm303agr_read_reg>
 80096d8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs)
 80096da:	7a3b      	ldrb	r3, [r7, #8]
 80096dc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b03      	cmp	r3, #3
 80096e4:	d81a      	bhi.n	800971c <lsm303agr_xl_full_scale_get+0x5c>
 80096e6:	a201      	add	r2, pc, #4	; (adr r2, 80096ec <lsm303agr_xl_full_scale_get+0x2c>)
 80096e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ec:	080096fd 	.word	0x080096fd
 80096f0:	08009705 	.word	0x08009705
 80096f4:	0800970d 	.word	0x0800970d
 80096f8:	08009715 	.word	0x08009715
  {
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	2200      	movs	r2, #0
 8009700:	701a      	strb	r2, [r3, #0]
      break;
 8009702:	e00f      	b.n	8009724 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	2201      	movs	r2, #1
 8009708:	701a      	strb	r2, [r3, #0]
      break;
 800970a:	e00b      	b.n	8009724 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	2202      	movs	r2, #2
 8009710:	701a      	strb	r2, [r3, #0]
      break;
 8009712:	e007      	b.n	8009724 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	2203      	movs	r2, #3
 8009718:	701a      	strb	r2, [r3, #0]
      break;
 800971a:	e003      	b.n	8009724 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	2200      	movs	r2, #0
 8009720:	701a      	strb	r2, [r3, #0]
      break;
 8009722:	bf00      	nop
  }

  return ret;
 8009724:	68fb      	ldr	r3, [r7, #12]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop

08009730 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	460b      	mov	r3, r1
 800973a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800973c:	f107 0208 	add.w	r2, r7, #8
 8009740:	2301      	movs	r3, #1
 8009742:	2123      	movs	r1, #35	; 0x23
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f7ff feaf 	bl	80094a8 <lsm303agr_read_reg>
 800974a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10f      	bne.n	8009772 <lsm303agr_xl_block_data_update_set+0x42>
  {
    ctrl_reg4_a.bdu = (uint8_t)val;
 8009752:	78fb      	ldrb	r3, [r7, #3]
 8009754:	f003 0301 	and.w	r3, r3, #1
 8009758:	b2da      	uxtb	r2, r3
 800975a:	7a3b      	ldrb	r3, [r7, #8]
 800975c:	f362 13c7 	bfi	r3, r2, #7, #1
 8009760:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8009762:	f107 0208 	add.w	r2, r7, #8
 8009766:	2301      	movs	r3, #1
 8009768:	2123      	movs	r1, #35	; 0x23
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7ff feb4 	bl	80094d8 <lsm303agr_write_reg>
 8009770:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8009772:	68fb      	ldr	r3, [r7, #12]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8009786:	f107 020c 	add.w	r2, r7, #12
 800978a:	2306      	movs	r3, #6
 800978c:	2128      	movs	r1, #40	; 0x28
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f7ff fe8a 	bl	80094a8 <lsm303agr_read_reg>
 8009794:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8009796:	7b7b      	ldrb	r3, [r7, #13]
 8009798:	b21a      	sxth	r2, r3
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	021b      	lsls	r3, r3, #8
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	7b3b      	ldrb	r3, [r7, #12]
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	4413      	add	r3, r2
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	b21a      	sxth	r2, r3
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80097b8:	7bfa      	ldrb	r2, [r7, #15]
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	3302      	adds	r3, #2
 80097be:	b212      	sxth	r2, r2
 80097c0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	3302      	adds	r3, #2
 80097c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	021b      	lsls	r3, r3, #8
 80097ce:	b29a      	uxth	r2, r3
 80097d0:	7bbb      	ldrb	r3, [r7, #14]
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	4413      	add	r3, r2
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	3302      	adds	r3, #2
 80097dc:	b212      	sxth	r2, r2
 80097de:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80097e0:	7c7a      	ldrb	r2, [r7, #17]
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	3304      	adds	r3, #4
 80097e6:	b212      	sxth	r2, r2
 80097e8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	3304      	adds	r3, #4
 80097ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	021b      	lsls	r3, r3, #8
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	7c3b      	ldrb	r3, [r7, #16]
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	4413      	add	r3, r2
 80097fe:	b29a      	uxth	r2, r3
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	3304      	adds	r3, #4
 8009804:	b212      	sxth	r2, r2
 8009806:	801a      	strh	r2, [r3, #0]

  return ret;
 8009808:	697b      	ldr	r3, [r7, #20]
}
 800980a:	4618      	mov	r0, r3
 800980c:	3718      	adds	r7, #24
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	460b      	mov	r3, r1
 800981c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800981e:	f107 0208 	add.w	r2, r7, #8
 8009822:	2301      	movs	r3, #1
 8009824:	2160      	movs	r1, #96	; 0x60
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7ff fe3e 	bl	80094a8 <lsm303agr_read_reg>
 800982c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10f      	bne.n	8009854 <lsm303agr_mag_operating_mode_set+0x42>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 8009834:	78fb      	ldrb	r3, [r7, #3]
 8009836:	f003 0303 	and.w	r3, r3, #3
 800983a:	b2da      	uxtb	r2, r3
 800983c:	7a3b      	ldrb	r3, [r7, #8]
 800983e:	f362 0301 	bfi	r3, r2, #0, #2
 8009842:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8009844:	f107 0208 	add.w	r2, r7, #8
 8009848:	2301      	movs	r3, #1
 800984a:	2160      	movs	r1, #96	; 0x60
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7ff fe43 	bl	80094d8 <lsm303agr_write_reg>
 8009852:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8009854:	68fb      	ldr	r3, [r7, #12]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b084      	sub	sp, #16
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
 8009866:	460b      	mov	r3, r1
 8009868:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800986a:	f107 0208 	add.w	r2, r7, #8
 800986e:	2301      	movs	r3, #1
 8009870:	2160      	movs	r1, #96	; 0x60
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7ff fe18 	bl	80094a8 <lsm303agr_read_reg>
 8009878:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10f      	bne.n	80098a0 <lsm303agr_mag_data_rate_set+0x42>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 8009880:	78fb      	ldrb	r3, [r7, #3]
 8009882:	f003 0303 	and.w	r3, r3, #3
 8009886:	b2da      	uxtb	r2, r3
 8009888:	7a3b      	ldrb	r3, [r7, #8]
 800988a:	f362 0383 	bfi	r3, r2, #2, #2
 800988e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8009890:	f107 0208 	add.w	r2, r7, #8
 8009894:	2301      	movs	r3, #1
 8009896:	2160      	movs	r1, #96	; 0x60
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f7ff fe1d 	bl	80094d8 <lsm303agr_write_reg>
 800989e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 80098a0:	68fb      	ldr	r3, [r7, #12]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
	...

080098ac <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80098b6:	f107 0208 	add.w	r2, r7, #8
 80098ba:	2301      	movs	r3, #1
 80098bc:	2160      	movs	r1, #96	; 0x60
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f7ff fdf2 	bl	80094a8 <lsm303agr_read_reg>
 80098c4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr)
 80098c6:	7a3b      	ldrb	r3, [r7, #8]
 80098c8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b03      	cmp	r3, #3
 80098d0:	d81a      	bhi.n	8009908 <lsm303agr_mag_data_rate_get+0x5c>
 80098d2:	a201      	add	r2, pc, #4	; (adr r2, 80098d8 <lsm303agr_mag_data_rate_get+0x2c>)
 80098d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d8:	080098e9 	.word	0x080098e9
 80098dc:	080098f1 	.word	0x080098f1
 80098e0:	080098f9 	.word	0x080098f9
 80098e4:	08009901 	.word	0x08009901
  {
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	2200      	movs	r2, #0
 80098ec:	701a      	strb	r2, [r3, #0]
      break;
 80098ee:	e00f      	b.n	8009910 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	2201      	movs	r2, #1
 80098f4:	701a      	strb	r2, [r3, #0]
      break;
 80098f6:	e00b      	b.n	8009910 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	2202      	movs	r2, #2
 80098fc:	701a      	strb	r2, [r3, #0]
      break;
 80098fe:	e007      	b.n	8009910 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	2203      	movs	r2, #3
 8009904:	701a      	strb	r2, [r3, #0]
      break;
 8009906:	e003      	b.n	8009910 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	2200      	movs	r2, #0
 800990c:	701a      	strb	r2, [r3, #0]
      break;
 800990e:	bf00      	nop
  }

  return ret;
 8009910:	68fb      	ldr	r3, [r7, #12]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop

0800991c <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	460b      	mov	r3, r1
 8009926:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8009928:	f107 0208 	add.w	r2, r7, #8
 800992c:	2301      	movs	r3, #1
 800992e:	2162      	movs	r1, #98	; 0x62
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff fdb9 	bl	80094a8 <lsm303agr_read_reg>
 8009936:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10f      	bne.n	800995e <lsm303agr_mag_block_data_update_set+0x42>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 800993e:	78fb      	ldrb	r3, [r7, #3]
 8009940:	f003 0301 	and.w	r3, r3, #1
 8009944:	b2da      	uxtb	r2, r3
 8009946:	7a3b      	ldrb	r3, [r7, #8]
 8009948:	f362 1304 	bfi	r3, r2, #4, #1
 800994c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800994e:	f107 0208 	add.w	r2, r7, #8
 8009952:	2301      	movs	r3, #1
 8009954:	2162      	movs	r1, #98	; 0x62
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7ff fdbe 	bl	80094d8 <lsm303agr_write_reg>
 800995c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 800995e:	68fb      	ldr	r3, [r7, #12]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b086      	sub	sp, #24
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8009972:	f107 020c 	add.w	r2, r7, #12
 8009976:	2306      	movs	r3, #6
 8009978:	2168      	movs	r1, #104	; 0x68
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7ff fd94 	bl	80094a8 <lsm303agr_read_reg>
 8009980:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8009982:	7b7b      	ldrb	r3, [r7, #13]
 8009984:	b21a      	sxth	r2, r3
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009990:	b29b      	uxth	r3, r3
 8009992:	021b      	lsls	r3, r3, #8
 8009994:	b29a      	uxth	r2, r3
 8009996:	7b3b      	ldrb	r3, [r7, #12]
 8009998:	b29b      	uxth	r3, r3
 800999a:	4413      	add	r3, r2
 800999c:	b29b      	uxth	r3, r3
 800999e:	b21a      	sxth	r2, r3
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80099a4:	7bfa      	ldrb	r2, [r7, #15]
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	3302      	adds	r3, #2
 80099aa:	b212      	sxth	r2, r2
 80099ac:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	3302      	adds	r3, #2
 80099b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	021b      	lsls	r3, r3, #8
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	7bbb      	ldrb	r3, [r7, #14]
 80099be:	b29b      	uxth	r3, r3
 80099c0:	4413      	add	r3, r2
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	3302      	adds	r3, #2
 80099c8:	b212      	sxth	r2, r2
 80099ca:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80099cc:	7c7a      	ldrb	r2, [r7, #17]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	3304      	adds	r3, #4
 80099d2:	b212      	sxth	r2, r2
 80099d4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	3304      	adds	r3, #4
 80099da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099de:	b29b      	uxth	r3, r3
 80099e0:	021b      	lsls	r3, r3, #8
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	7c3b      	ldrb	r3, [r7, #16]
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	4413      	add	r3, r2
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	3304      	adds	r3, #4
 80099f0:	b212      	sxth	r2, r2
 80099f2:	801a      	strh	r2, [r3, #0]

  return ret;
 80099f4:	697b      	ldr	r3, [r7, #20]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3718      	adds	r7, #24
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b084      	sub	sp, #16
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8009a08:	2301      	movs	r3, #1
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	210f      	movs	r1, #15
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f7ff fd4a 	bl	80094a8 <lsm303agr_read_reg>
 8009a14:	60f8      	str	r0, [r7, #12]

  return ret;
 8009a16:	68fb      	ldr	r3, [r7, #12]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	683a      	ldr	r2, [r7, #0]
 8009a2e:	214f      	movs	r1, #79	; 0x4f
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7ff fd39 	bl	80094a8 <lsm303agr_read_reg>
 8009a36:	60f8      	str	r0, [r7, #12]

  return ret;
 8009a38:	68fb      	ldr	r3, [r7, #12]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b084      	sub	sp, #16
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8009a4e:	f107 0208 	add.w	r2, r7, #8
 8009a52:	2301      	movs	r3, #1
 8009a54:	2162      	movs	r1, #98	; 0x62
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f7ff fd26 	bl	80094a8 <lsm303agr_read_reg>
 8009a5c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10f      	bne.n	8009a84 <lsm303agr_mag_self_test_set+0x42>
  {
    cfg_reg_c_m.self_test = (uint8_t)val;
 8009a64:	78fb      	ldrb	r3, [r7, #3]
 8009a66:	f003 0301 	and.w	r3, r3, #1
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	7a3b      	ldrb	r3, [r7, #8]
 8009a6e:	f362 0341 	bfi	r3, r2, #1, #1
 8009a72:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8009a74:	f107 0208 	add.w	r2, r7, #8
 8009a78:	2301      	movs	r3, #1
 8009a7a:	2162      	movs	r1, #98	; 0x62
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7ff fd2b 	bl	80094d8 <lsm303agr_write_reg>
 8009a82:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8009a84:	68fb      	ldr	r3, [r7, #12]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b084      	sub	sp, #16
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
 8009a96:	460b      	mov	r3, r1
 8009a98:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8009a9a:	f107 0208 	add.w	r2, r7, #8
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	212e      	movs	r1, #46	; 0x2e
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f7ff fd00 	bl	80094a8 <lsm303agr_read_reg>
 8009aa8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10f      	bne.n	8009ad0 <lsm303agr_xl_fifo_mode_set+0x42>
  {
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8009ab0:	78fb      	ldrb	r3, [r7, #3]
 8009ab2:	f003 0303 	and.w	r3, r3, #3
 8009ab6:	b2da      	uxtb	r2, r3
 8009ab8:	7a3b      	ldrb	r3, [r7, #8]
 8009aba:	f362 1387 	bfi	r3, r2, #6, #2
 8009abe:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8009ac0:	f107 0208 	add.w	r2, r7, #8
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	212e      	movs	r1, #46	; 0x2e
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f7ff fd05 	bl	80094d8 <lsm303agr_write_reg>
 8009ace:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b084      	sub	sp, #16
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8009ae6:	f107 0208 	add.w	r2, r7, #8
 8009aea:	2301      	movs	r3, #1
 8009aec:	2162      	movs	r1, #98	; 0x62
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f7ff fcda 	bl	80094a8 <lsm303agr_read_reg>
 8009af4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10f      	bne.n	8009b1c <lsm303agr_mag_i2c_interface_set+0x42>
  {
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8009afc:	78fb      	ldrb	r3, [r7, #3]
 8009afe:	f003 0301 	and.w	r3, r3, #1
 8009b02:	b2da      	uxtb	r2, r3
 8009b04:	7a3b      	ldrb	r3, [r7, #8]
 8009b06:	f362 1345 	bfi	r3, r2, #5, #1
 8009b0a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8009b0c:	f107 0208 	add.w	r2, r7, #8
 8009b10:	2301      	movs	r3, #1
 8009b12:	2162      	movs	r1, #98	; 0x62
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f7ff fcdf 	bl	80094d8 <lsm303agr_write_reg>
 8009b1a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
	...

08009b28 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8009b32:	2300      	movs	r3, #0
 8009b34:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d103      	bne.n	8009b44 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8009b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b40:	60fb      	str	r3, [r7, #12]
 8009b42:	e051      	b.n	8009be8 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	685a      	ldr	r2, [r3, #4]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	689a      	ldr	r2, [r3, #8]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	7b1a      	ldrb	r2, [r3, #12]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	691a      	ldr	r2, [r3, #16]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	695a      	ldr	r2, [r3, #20]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	699a      	ldr	r2, [r3, #24]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a1d      	ldr	r2, [pc, #116]	; (8009bf4 <LSM6DSL_RegisterBusIO+0xcc>)
 8009b80:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4a1c      	ldr	r2, [pc, #112]	; (8009bf8 <LSM6DSL_RegisterBusIO+0xd0>)
 8009b86:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	69da      	ldr	r2, [r3, #28]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d103      	bne.n	8009ba6 <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 8009b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	e020      	b.n	8009be8 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4798      	blx	r3
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d003      	beq.n	8009bba <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 8009bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	e016      	b.n	8009be8 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d112      	bne.n	8009be8 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10d      	bne.n	8009be8 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8009bcc:	230c      	movs	r3, #12
 8009bce:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8009bd0:	7afb      	ldrb	r3, [r7, #11]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	2112      	movs	r1, #18
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fd2d 	bl	800a636 <LSM6DSL_Write_Reg>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d002      	beq.n	8009be8 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 8009be2:	f04f 33ff 	mov.w	r3, #4294967295
 8009be6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8009be8:	68fb      	ldr	r3, [r7, #12]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	0800aaa5 	.word	0x0800aaa5
 8009bf8:	0800aadb 	.word	0x0800aadb

08009bfc <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	3320      	adds	r3, #32
 8009c08:	2101      	movs	r1, #1
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f001 fa59 	bl	800b0c2 <lsm6dsl_auto_increment_set>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d002      	beq.n	8009c1c <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8009c16:	f04f 33ff 	mov.w	r3, #4294967295
 8009c1a:	e054      	b.n	8009cc6 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	3320      	adds	r3, #32
 8009c20:	2101      	movs	r1, #1
 8009c22:	4618      	mov	r0, r3
 8009c24:	f001 f980 	bl	800af28 <lsm6dsl_block_data_update_set>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d002      	beq.n	8009c34 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8009c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c32:	e048      	b.n	8009cc6 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	3320      	adds	r3, #32
 8009c38:	2100      	movs	r1, #0
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f001 fa67 	bl	800b10e <lsm6dsl_fifo_mode_set>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d002      	beq.n	8009c4c <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8009c46:	f04f 33ff 	mov.w	r3, #4294967295
 8009c4a:	e03c      	b.n	8009cc6 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2204      	movs	r2, #4
 8009c50:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	3320      	adds	r3, #32
 8009c58:	2100      	movs	r1, #0
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f000 ffe6 	bl	800ac2c <lsm6dsl_xl_data_rate_set>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d002      	beq.n	8009c6c <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8009c66:	f04f 33ff 	mov.w	r3, #4294967295
 8009c6a:	e02c      	b.n	8009cc6 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	3320      	adds	r3, #32
 8009c70:	2100      	movs	r1, #0
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 ff7c 	bl	800ab70 <lsm6dsl_xl_full_scale_set>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d002      	beq.n	8009c84 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8009c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c82:	e020      	b.n	8009cc6 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2204      	movs	r2, #4
 8009c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	3320      	adds	r3, #32
 8009c90:	2100      	movs	r1, #0
 8009c92:	4618      	mov	r0, r3
 8009c94:	f001 f8c0 	bl	800ae18 <lsm6dsl_gy_data_rate_set>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d002      	beq.n	8009ca4 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8009c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009ca2:	e010      	b.n	8009cc6 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	3320      	adds	r3, #32
 8009ca8:	2106      	movs	r1, #6
 8009caa:	4618      	mov	r0, r3
 8009cac:	f001 f84c 	bl	800ad48 <lsm6dsl_gy_full_scale_set>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d002      	beq.n	8009cbc <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8009cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cba:	e004      	b.n	8009cc6 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <LSM6DSL_DeInit>:
  * @brief  Deinitialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b082      	sub	sp, #8
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 f888 	bl	8009dec <LSM6DSL_ACC_Disable>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d002      	beq.n	8009ce8 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8009ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce6:	e015      	b.n	8009d14 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fa9a 	bl	800a222 <LSM6DSL_GYRO_Disable>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d002      	beq.n	8009cfa <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8009cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf8:	e00c      	b.n	8009d14 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	3320      	adds	r3, #32
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f001 f9b7 	bl	800b0a0 <lsm6dsl_device_id_get>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d002      	beq.n	8009d3e <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8009d38:	f04f 33ff 	mov.w	r3, #4294967295
 8009d3c:	e000      	b.n	8009d40 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <LSM6DSL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSL sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	2201      	movs	r2, #1
 8009d56:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2200      	movs	r2, #0
 8009d62:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	2200      	movs	r2, #0
 8009d68:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009d70:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	2210      	movs	r2, #16
 8009d76:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	4a07      	ldr	r2, [pc, #28]	; (8009da0 <LSM6DSL_GetCapabilities+0x58>)
 8009d82:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	4a06      	ldr	r2, [pc, #24]	; (8009da0 <LSM6DSL_GetCapabilities+0x58>)
 8009d88:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	f04f 0200 	mov.w	r2, #0
 8009d90:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	45d02000 	.word	0x45d02000

08009da4 <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d101      	bne.n	8009dba <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8009db6:	2300      	movs	r3, #0
 8009db8:	e014      	b.n	8009de4 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f103 0220 	add.w	r2, r3, #32
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	4610      	mov	r0, r2
 8009dca:	f000 ff2f 	bl	800ac2c <lsm6dsl_xl_data_rate_set>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d002      	beq.n	8009dda <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8009dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd8:	e004      	b.n	8009de4 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <LSM6DSL_ACC_Disable>:
  * @brief  Disable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d101      	bne.n	8009e02 <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	e01f      	b.n	8009e42 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f103 0220 	add.w	r2, r3, #32
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	3333      	adds	r3, #51	; 0x33
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	4610      	mov	r0, r2
 8009e10:	f000 ff32 	bl	800ac78 <lsm6dsl_xl_data_rate_get>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d002      	beq.n	8009e20 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8009e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e1e:	e010      	b.n	8009e42 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	3320      	adds	r3, #32
 8009e24:	2100      	movs	r1, #0
 8009e26:	4618      	mov	r0, r3
 8009e28:	f000 ff00 	bl	800ac2c <lsm6dsl_xl_data_rate_set>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d002      	beq.n	8009e38 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8009e32:	f04f 33ff 	mov.w	r3, #4294967295
 8009e36:	e004      	b.n	8009e42 <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
	...

08009e4c <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8009e56:	2300      	movs	r3, #0
 8009e58:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	3320      	adds	r3, #32
 8009e5e:	f107 020b 	add.w	r2, r7, #11
 8009e62:	4611      	mov	r1, r2
 8009e64:	4618      	mov	r0, r3
 8009e66:	f000 fea9 	bl	800abbc <lsm6dsl_xl_full_scale_get>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d002      	beq.n	8009e76 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8009e70:	f04f 33ff 	mov.w	r3, #4294967295
 8009e74:	e023      	b.n	8009ebe <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8009e76:	7afb      	ldrb	r3, [r7, #11]
 8009e78:	2b03      	cmp	r3, #3
 8009e7a:	d81b      	bhi.n	8009eb4 <LSM6DSL_ACC_GetSensitivity+0x68>
 8009e7c:	a201      	add	r2, pc, #4	; (adr r2, 8009e84 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8009e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e82:	bf00      	nop
 8009e84:	08009e95 	.word	0x08009e95
 8009e88:	08009ead 	.word	0x08009ead
 8009e8c:	08009e9d 	.word	0x08009e9d
 8009e90:	08009ea5 	.word	0x08009ea5
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	4a0c      	ldr	r2, [pc, #48]	; (8009ec8 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8009e98:	601a      	str	r2, [r3, #0]
      break;
 8009e9a:	e00f      	b.n	8009ebc <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	4a0b      	ldr	r2, [pc, #44]	; (8009ecc <LSM6DSL_ACC_GetSensitivity+0x80>)
 8009ea0:	601a      	str	r2, [r3, #0]
      break;
 8009ea2:	e00b      	b.n	8009ebc <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	4a0a      	ldr	r2, [pc, #40]	; (8009ed0 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8009ea8:	601a      	str	r2, [r3, #0]
      break;
 8009eaa:	e007      	b.n	8009ebc <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	4a09      	ldr	r2, [pc, #36]	; (8009ed4 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8009eb0:	601a      	str	r2, [r3, #0]
      break;
 8009eb2:	e003      	b.n	8009ebc <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8009eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8009eb8:	60fb      	str	r3, [r7, #12]
      break;
 8009eba:	bf00      	nop
  }

  return ret;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	3d79db23 	.word	0x3d79db23
 8009ecc:	3df9db23 	.word	0x3df9db23
 8009ed0:	3e79db23 	.word	0x3e79db23
 8009ed4:	3ef9db23 	.word	0x3ef9db23

08009ed8 <LSM6DSL_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	3320      	adds	r3, #32
 8009eea:	f107 020b 	add.w	r2, r7, #11
 8009eee:	4611      	mov	r1, r2
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f000 fec1 	bl	800ac78 <lsm6dsl_xl_data_rate_get>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8009efc:	f04f 33ff 	mov.w	r3, #4294967295
 8009f00:	e054      	b.n	8009fac <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8009f02:	7afb      	ldrb	r3, [r7, #11]
 8009f04:	2b0b      	cmp	r3, #11
 8009f06:	d84c      	bhi.n	8009fa2 <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8009f08:	a201      	add	r2, pc, #4	; (adr r2, 8009f10 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8009f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f0e:	bf00      	nop
 8009f10:	08009f41 	.word	0x08009f41
 8009f14:	08009f53 	.word	0x08009f53
 8009f18:	08009f5b 	.word	0x08009f5b
 8009f1c:	08009f63 	.word	0x08009f63
 8009f20:	08009f6b 	.word	0x08009f6b
 8009f24:	08009f73 	.word	0x08009f73
 8009f28:	08009f7b 	.word	0x08009f7b
 8009f2c:	08009f83 	.word	0x08009f83
 8009f30:	08009f8b 	.word	0x08009f8b
 8009f34:	08009f93 	.word	0x08009f93
 8009f38:	08009f9b 	.word	0x08009f9b
 8009f3c:	08009f4b 	.word	0x08009f4b
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	f04f 0200 	mov.w	r2, #0
 8009f46:	601a      	str	r2, [r3, #0]
      break;
 8009f48:	e02f      	b.n	8009faa <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	4a19      	ldr	r2, [pc, #100]	; (8009fb4 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8009f4e:	601a      	str	r2, [r3, #0]
      break;
 8009f50:	e02b      	b.n	8009faa <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	4a18      	ldr	r2, [pc, #96]	; (8009fb8 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8009f56:	601a      	str	r2, [r3, #0]
      break;
 8009f58:	e027      	b.n	8009faa <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	4a17      	ldr	r2, [pc, #92]	; (8009fbc <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8009f5e:	601a      	str	r2, [r3, #0]
      break;
 8009f60:	e023      	b.n	8009faa <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	4a16      	ldr	r2, [pc, #88]	; (8009fc0 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8009f66:	601a      	str	r2, [r3, #0]
      break;
 8009f68:	e01f      	b.n	8009faa <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	4a15      	ldr	r2, [pc, #84]	; (8009fc4 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8009f6e:	601a      	str	r2, [r3, #0]
      break;
 8009f70:	e01b      	b.n	8009faa <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	4a14      	ldr	r2, [pc, #80]	; (8009fc8 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8009f76:	601a      	str	r2, [r3, #0]
      break;
 8009f78:	e017      	b.n	8009faa <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	4a13      	ldr	r2, [pc, #76]	; (8009fcc <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8009f7e:	601a      	str	r2, [r3, #0]
      break;
 8009f80:	e013      	b.n	8009faa <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	4a12      	ldr	r2, [pc, #72]	; (8009fd0 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8009f86:	601a      	str	r2, [r3, #0]
      break;
 8009f88:	e00f      	b.n	8009faa <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	4a11      	ldr	r2, [pc, #68]	; (8009fd4 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8009f8e:	601a      	str	r2, [r3, #0]
      break;
 8009f90:	e00b      	b.n	8009faa <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	4a10      	ldr	r2, [pc, #64]	; (8009fd8 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8009f96:	601a      	str	r2, [r3, #0]
      break;
 8009f98:	e007      	b.n	8009faa <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	4a0f      	ldr	r2, [pc, #60]	; (8009fdc <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8009f9e:	601a      	str	r2, [r3, #0]
      break;
 8009fa0:	e003      	b.n	8009faa <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8009fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa6:	60fb      	str	r3, [r7, #12]
      break;
 8009fa8:	bf00      	nop
  }

  return ret;
 8009faa:	68fb      	ldr	r3, [r7, #12]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	3fcccccd 	.word	0x3fcccccd
 8009fb8:	41480000 	.word	0x41480000
 8009fbc:	41d00000 	.word	0x41d00000
 8009fc0:	42500000 	.word	0x42500000
 8009fc4:	42d00000 	.word	0x42d00000
 8009fc8:	43500000 	.word	0x43500000
 8009fcc:	43d00000 	.word	0x43d00000
 8009fd0:	44504000 	.word	0x44504000
 8009fd4:	44cf8000 	.word	0x44cf8000
 8009fd8:	45502000 	.word	0x45502000
 8009fdc:	45d02000 	.word	0x45d02000

08009fe0 <LSM6DSL_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d106      	bne.n	800a004 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8009ff6:	ed97 0a00 	vldr	s0, [r7]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 fb36 	bl	800a66c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 800a000:	4603      	mov	r3, r0
 800a002:	e005      	b.n	800a010 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 800a004:	ed97 0a00 	vldr	s0, [r7]
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 fbbb 	bl	800a784 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 800a00e:	4603      	mov	r3, r0
  }
}
 800a010:	4618      	mov	r0, r3
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <LSM6DSL_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800a022:	2300      	movs	r3, #0
 800a024:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	3320      	adds	r3, #32
 800a02a:	f107 020b 	add.w	r2, r7, #11
 800a02e:	4611      	mov	r1, r2
 800a030:	4618      	mov	r0, r3
 800a032:	f000 fdc3 	bl	800abbc <lsm6dsl_xl_full_scale_get>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d002      	beq.n	800a042 <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 800a03c:	f04f 33ff 	mov.w	r3, #4294967295
 800a040:	e023      	b.n	800a08a <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800a042:	7afb      	ldrb	r3, [r7, #11]
 800a044:	2b03      	cmp	r3, #3
 800a046:	d81b      	bhi.n	800a080 <LSM6DSL_ACC_GetFullScale+0x68>
 800a048:	a201      	add	r2, pc, #4	; (adr r2, 800a050 <LSM6DSL_ACC_GetFullScale+0x38>)
 800a04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04e:	bf00      	nop
 800a050:	0800a061 	.word	0x0800a061
 800a054:	0800a079 	.word	0x0800a079
 800a058:	0800a069 	.word	0x0800a069
 800a05c:	0800a071 	.word	0x0800a071
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	2202      	movs	r2, #2
 800a064:	601a      	str	r2, [r3, #0]
      break;
 800a066:	e00f      	b.n	800a088 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	2204      	movs	r2, #4
 800a06c:	601a      	str	r2, [r3, #0]
      break;
 800a06e:	e00b      	b.n	800a088 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	2208      	movs	r2, #8
 800a074:	601a      	str	r2, [r3, #0]
      break;
 800a076:	e007      	b.n	800a088 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	2210      	movs	r2, #16
 800a07c:	601a      	str	r2, [r3, #0]
      break;
 800a07e:	e003      	b.n	800a088 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 800a080:	f04f 33ff 	mov.w	r3, #4294967295
 800a084:	60fb      	str	r3, [r7, #12]
      break;
 800a086:	bf00      	nop
  }

  return ret;
 800a088:	68fb      	ldr	r3, [r7, #12]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop

0800a094 <LSM6DSL_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	dd0b      	ble.n	800a0bc <LSM6DSL_ACC_SetFullScale+0x28>
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	2b04      	cmp	r3, #4
 800a0a8:	dd06      	ble.n	800a0b8 <LSM6DSL_ACC_SetFullScale+0x24>
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	2b08      	cmp	r3, #8
 800a0ae:	dc01      	bgt.n	800a0b4 <LSM6DSL_ACC_SetFullScale+0x20>
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	e004      	b.n	800a0be <LSM6DSL_ACC_SetFullScale+0x2a>
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e002      	b.n	800a0be <LSM6DSL_ACC_SetFullScale+0x2a>
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	e000      	b.n	800a0be <LSM6DSL_ACC_SetFullScale+0x2a>
 800a0bc:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 800a0be:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	3320      	adds	r3, #32
 800a0c4:	7bfa      	ldrb	r2, [r7, #15]
 800a0c6:	4611      	mov	r1, r2
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f000 fd51 	bl	800ab70 <lsm6dsl_xl_full_scale_set>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d002      	beq.n	800a0da <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 800a0d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d8:	e000      	b.n	800a0dc <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <LSM6DSL_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	3320      	adds	r3, #32
 800a0f2:	f107 0208 	add.w	r2, r7, #8
 800a0f6:	4611      	mov	r1, r2
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f000 ff86 	bl	800b00a <lsm6dsl_acceleration_raw_get>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d002      	beq.n	800a10a <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 800a104:	f04f 33ff 	mov.w	r3, #4294967295
 800a108:	e00c      	b.n	800a124 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800a10a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800a112:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800a11a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b086      	sub	sp, #24
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800a136:	f04f 0300 	mov.w	r3, #0
 800a13a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	3320      	adds	r3, #32
 800a140:	f107 0210 	add.w	r2, r7, #16
 800a144:	4611      	mov	r1, r2
 800a146:	4618      	mov	r0, r3
 800a148:	f000 ff5f 	bl	800b00a <lsm6dsl_acceleration_raw_get>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d002      	beq.n	800a158 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 800a152:	f04f 33ff 	mov.w	r3, #4294967295
 800a156:	e03c      	b.n	800a1d2 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 800a158:	f107 030c 	add.w	r3, r7, #12
 800a15c:	4619      	mov	r1, r3
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7ff fe74 	bl	8009e4c <LSM6DSL_ACC_GetSensitivity>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d002      	beq.n	800a170 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 800a16a:	f04f 33ff 	mov.w	r3, #4294967295
 800a16e:	e030      	b.n	800a1d2 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800a170:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a174:	ee07 3a90 	vmov	s15, r3
 800a178:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a17c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a180:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a188:	ee17 2a90 	vmov	r2, s15
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800a190:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a194:	ee07 3a90 	vmov	s15, r3
 800a198:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a19c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a1a8:	ee17 2a90 	vmov	r2, s15
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800a1b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a1b4:	ee07 3a90 	vmov	s15, r3
 800a1b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a1bc:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a1c8:	ee17 2a90 	vmov	r2, s15
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3718      	adds	r7, #24
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <LSM6DSL_GYRO_Enable>:
  * @brief  Enable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b082      	sub	sp, #8
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d101      	bne.n	800a1f0 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	e014      	b.n	800a21a <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f103 0220 	add.w	r2, r3, #32
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	4610      	mov	r0, r2
 800a200:	f000 fe0a 	bl	800ae18 <lsm6dsl_gy_data_rate_set>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d002      	beq.n	800a210 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800a20a:	f04f 33ff 	mov.w	r3, #4294967295
 800a20e:	e004      	b.n	800a21a <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSL_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <LSM6DSL_GYRO_Disable>:
  * @brief  Disable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b082      	sub	sp, #8
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a230:	2b00      	cmp	r3, #0
 800a232:	d101      	bne.n	800a238 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 800a234:	2300      	movs	r3, #0
 800a236:	e01f      	b.n	800a278 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f103 0220 	add.w	r2, r3, #32
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	3334      	adds	r3, #52	; 0x34
 800a242:	4619      	mov	r1, r3
 800a244:	4610      	mov	r0, r2
 800a246:	f000 fe0d 	bl	800ae64 <lsm6dsl_gy_data_rate_get>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d002      	beq.n	800a256 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 800a250:	f04f 33ff 	mov.w	r3, #4294967295
 800a254:	e010      	b.n	800a278 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	3320      	adds	r3, #32
 800a25a:	2100      	movs	r1, #0
 800a25c:	4618      	mov	r0, r3
 800a25e:	f000 fddb 	bl	800ae18 <lsm6dsl_gy_data_rate_set>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d002      	beq.n	800a26e <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 800a268:	f04f 33ff 	mov.w	r3, #4294967295
 800a26c:	e004      	b.n	800a278 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSL_OK;
 800a276:	2300      	movs	r3, #0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3708      	adds	r7, #8
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <LSM6DSL_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800a28a:	2300      	movs	r3, #0
 800a28c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	3320      	adds	r3, #32
 800a292:	f107 020b 	add.w	r2, r7, #11
 800a296:	4611      	mov	r1, r2
 800a298:	4618      	mov	r0, r3
 800a29a:	f000 fd7b 	bl	800ad94 <lsm6dsl_gy_full_scale_get>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d002      	beq.n	800a2aa <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 800a2a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a2a8:	e02d      	b.n	800a306 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800a2aa:	7afb      	ldrb	r3, [r7, #11]
 800a2ac:	2b06      	cmp	r3, #6
 800a2ae:	d825      	bhi.n	800a2fc <LSM6DSL_GYRO_GetSensitivity+0x7c>
 800a2b0:	a201      	add	r2, pc, #4	; (adr r2, 800a2b8 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 800a2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b6:	bf00      	nop
 800a2b8:	0800a2dd 	.word	0x0800a2dd
 800a2bc:	0800a2d5 	.word	0x0800a2d5
 800a2c0:	0800a2e5 	.word	0x0800a2e5
 800a2c4:	0800a2fd 	.word	0x0800a2fd
 800a2c8:	0800a2ed 	.word	0x0800a2ed
 800a2cc:	0800a2fd 	.word	0x0800a2fd
 800a2d0:	0800a2f5 	.word	0x0800a2f5
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	4a0e      	ldr	r2, [pc, #56]	; (800a310 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 800a2d8:	601a      	str	r2, [r3, #0]
      break;
 800a2da:	e013      	b.n	800a304 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	4a0d      	ldr	r2, [pc, #52]	; (800a314 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 800a2e0:	601a      	str	r2, [r3, #0]
      break;
 800a2e2:	e00f      	b.n	800a304 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	4a0c      	ldr	r2, [pc, #48]	; (800a318 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 800a2e8:	601a      	str	r2, [r3, #0]
      break;
 800a2ea:	e00b      	b.n	800a304 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	4a0b      	ldr	r2, [pc, #44]	; (800a31c <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 800a2f0:	601a      	str	r2, [r3, #0]
      break;
 800a2f2:	e007      	b.n	800a304 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	4a0a      	ldr	r2, [pc, #40]	; (800a320 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 800a2f8:	601a      	str	r2, [r3, #0]
      break;
 800a2fa:	e003      	b.n	800a304 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 800a2fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a300:	60fb      	str	r3, [r7, #12]
      break;
 800a302:	bf00      	nop
  }

  return ret;
 800a304:	68fb      	ldr	r3, [r7, #12]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	408c0000 	.word	0x408c0000
 800a314:	410c0000 	.word	0x410c0000
 800a318:	418c0000 	.word	0x418c0000
 800a31c:	420c0000 	.word	0x420c0000
 800a320:	428c0000 	.word	0x428c0000

0800a324 <LSM6DSL_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	3320      	adds	r3, #32
 800a336:	f107 020b 	add.w	r2, r7, #11
 800a33a:	4611      	mov	r1, r2
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 fd91 	bl	800ae64 <lsm6dsl_gy_data_rate_get>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d002      	beq.n	800a34e <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 800a348:	f04f 33ff 	mov.w	r3, #4294967295
 800a34c:	e04e      	b.n	800a3ec <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800a34e:	7afb      	ldrb	r3, [r7, #11]
 800a350:	2b0a      	cmp	r3, #10
 800a352:	d846      	bhi.n	800a3e2 <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 800a354:	a201      	add	r2, pc, #4	; (adr r2, 800a35c <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 800a356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a35a:	bf00      	nop
 800a35c:	0800a389 	.word	0x0800a389
 800a360:	0800a393 	.word	0x0800a393
 800a364:	0800a39b 	.word	0x0800a39b
 800a368:	0800a3a3 	.word	0x0800a3a3
 800a36c:	0800a3ab 	.word	0x0800a3ab
 800a370:	0800a3b3 	.word	0x0800a3b3
 800a374:	0800a3bb 	.word	0x0800a3bb
 800a378:	0800a3c3 	.word	0x0800a3c3
 800a37c:	0800a3cb 	.word	0x0800a3cb
 800a380:	0800a3d3 	.word	0x0800a3d3
 800a384:	0800a3db 	.word	0x0800a3db
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	f04f 0200 	mov.w	r2, #0
 800a38e:	601a      	str	r2, [r3, #0]
      break;
 800a390:	e02b      	b.n	800a3ea <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	4a17      	ldr	r2, [pc, #92]	; (800a3f4 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 800a396:	601a      	str	r2, [r3, #0]
      break;
 800a398:	e027      	b.n	800a3ea <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	4a16      	ldr	r2, [pc, #88]	; (800a3f8 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 800a39e:	601a      	str	r2, [r3, #0]
      break;
 800a3a0:	e023      	b.n	800a3ea <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	4a15      	ldr	r2, [pc, #84]	; (800a3fc <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 800a3a6:	601a      	str	r2, [r3, #0]
      break;
 800a3a8:	e01f      	b.n	800a3ea <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	4a14      	ldr	r2, [pc, #80]	; (800a400 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 800a3ae:	601a      	str	r2, [r3, #0]
      break;
 800a3b0:	e01b      	b.n	800a3ea <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	4a13      	ldr	r2, [pc, #76]	; (800a404 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 800a3b6:	601a      	str	r2, [r3, #0]
      break;
 800a3b8:	e017      	b.n	800a3ea <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	4a12      	ldr	r2, [pc, #72]	; (800a408 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 800a3be:	601a      	str	r2, [r3, #0]
      break;
 800a3c0:	e013      	b.n	800a3ea <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	4a11      	ldr	r2, [pc, #68]	; (800a40c <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 800a3c6:	601a      	str	r2, [r3, #0]
      break;
 800a3c8:	e00f      	b.n	800a3ea <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	4a10      	ldr	r2, [pc, #64]	; (800a410 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 800a3ce:	601a      	str	r2, [r3, #0]
      break;
 800a3d0:	e00b      	b.n	800a3ea <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	4a0f      	ldr	r2, [pc, #60]	; (800a414 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 800a3d6:	601a      	str	r2, [r3, #0]
      break;
 800a3d8:	e007      	b.n	800a3ea <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	4a0e      	ldr	r2, [pc, #56]	; (800a418 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 800a3de:	601a      	str	r2, [r3, #0]
      break;
 800a3e0:	e003      	b.n	800a3ea <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 800a3e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3e6:	60fb      	str	r3, [r7, #12]
      break;
 800a3e8:	bf00      	nop
  }

  return ret;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	41480000 	.word	0x41480000
 800a3f8:	41d00000 	.word	0x41d00000
 800a3fc:	42500000 	.word	0x42500000
 800a400:	42d00000 	.word	0x42d00000
 800a404:	43500000 	.word	0x43500000
 800a408:	43d00000 	.word	0x43d00000
 800a40c:	44504000 	.word	0x44504000
 800a410:	44cf8000 	.word	0x44cf8000
 800a414:	45502000 	.word	0x45502000
 800a418:	45d02000 	.word	0x45d02000

0800a41c <LSM6DSL_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d106      	bne.n	800a440 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800a432:	ed97 0a00 	vldr	s0, [r7]
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 fa26 	bl	800a888 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 800a43c:	4603      	mov	r3, r0
 800a43e:	e005      	b.n	800a44c <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 800a440:	ed97 0a00 	vldr	s0, [r7]
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 faab 	bl	800a9a0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 800a44a:	4603      	mov	r3, r0
  }
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <LSM6DSL_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800a45e:	2300      	movs	r3, #0
 800a460:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	3320      	adds	r3, #32
 800a466:	f107 020b 	add.w	r2, r7, #11
 800a46a:	4611      	mov	r1, r2
 800a46c:	4618      	mov	r0, r3
 800a46e:	f000 fc91 	bl	800ad94 <lsm6dsl_gy_full_scale_get>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d002      	beq.n	800a47e <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 800a478:	f04f 33ff 	mov.w	r3, #4294967295
 800a47c:	e030      	b.n	800a4e0 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800a47e:	7afb      	ldrb	r3, [r7, #11]
 800a480:	2b06      	cmp	r3, #6
 800a482:	d828      	bhi.n	800a4d6 <LSM6DSL_GYRO_GetFullScale+0x82>
 800a484:	a201      	add	r2, pc, #4	; (adr r2, 800a48c <LSM6DSL_GYRO_GetFullScale+0x38>)
 800a486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48a:	bf00      	nop
 800a48c:	0800a4b1 	.word	0x0800a4b1
 800a490:	0800a4a9 	.word	0x0800a4a9
 800a494:	0800a4b9 	.word	0x0800a4b9
 800a498:	0800a4d7 	.word	0x0800a4d7
 800a49c:	0800a4c3 	.word	0x0800a4c3
 800a4a0:	0800a4d7 	.word	0x0800a4d7
 800a4a4:	0800a4cd 	.word	0x0800a4cd
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	227d      	movs	r2, #125	; 0x7d
 800a4ac:	601a      	str	r2, [r3, #0]
      break;
 800a4ae:	e016      	b.n	800a4de <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	22fa      	movs	r2, #250	; 0xfa
 800a4b4:	601a      	str	r2, [r3, #0]
      break;
 800a4b6:	e012      	b.n	800a4de <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a4be:	601a      	str	r2, [r3, #0]
      break;
 800a4c0:	e00d      	b.n	800a4de <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a4c8:	601a      	str	r2, [r3, #0]
      break;
 800a4ca:	e008      	b.n	800a4de <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a4d2:	601a      	str	r2, [r3, #0]
      break;
 800a4d4:	e003      	b.n	800a4de <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 800a4d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a4da:	60fb      	str	r3, [r7, #12]
      break;
 800a4dc:	bf00      	nop
  }

  return ret;
 800a4de:	68fb      	ldr	r3, [r7, #12]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <LSM6DSL_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	2b7d      	cmp	r3, #125	; 0x7d
 800a4f6:	dd12      	ble.n	800a51e <LSM6DSL_GYRO_SetFullScale+0x36>
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	2bfa      	cmp	r3, #250	; 0xfa
 800a4fc:	dd0d      	ble.n	800a51a <LSM6DSL_GYRO_SetFullScale+0x32>
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a504:	dd07      	ble.n	800a516 <LSM6DSL_GYRO_SetFullScale+0x2e>
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a50c:	dc01      	bgt.n	800a512 <LSM6DSL_GYRO_SetFullScale+0x2a>
 800a50e:	2304      	movs	r3, #4
 800a510:	e006      	b.n	800a520 <LSM6DSL_GYRO_SetFullScale+0x38>
 800a512:	2306      	movs	r3, #6
 800a514:	e004      	b.n	800a520 <LSM6DSL_GYRO_SetFullScale+0x38>
 800a516:	2302      	movs	r3, #2
 800a518:	e002      	b.n	800a520 <LSM6DSL_GYRO_SetFullScale+0x38>
 800a51a:	2300      	movs	r3, #0
 800a51c:	e000      	b.n	800a520 <LSM6DSL_GYRO_SetFullScale+0x38>
 800a51e:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 800a520:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	3320      	adds	r3, #32
 800a526:	7bfa      	ldrb	r2, [r7, #15]
 800a528:	4611      	mov	r1, r2
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 fc0c 	bl	800ad48 <lsm6dsl_gy_full_scale_set>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d002      	beq.n	800a53c <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 800a536:	f04f 33ff 	mov.w	r3, #4294967295
 800a53a:	e000      	b.n	800a53e <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <LSM6DSL_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b084      	sub	sp, #16
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
 800a54e:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	3320      	adds	r3, #32
 800a554:	f107 0208 	add.w	r2, r7, #8
 800a558:	4611      	mov	r1, r2
 800a55a:	4618      	mov	r0, r3
 800a55c:	f000 fd0a 	bl	800af74 <lsm6dsl_angular_rate_raw_get>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d002      	beq.n	800a56c <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 800a566:	f04f 33ff 	mov.w	r3, #4294967295
 800a56a:	e00c      	b.n	800a586 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800a56c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800a574:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800a57c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <LSM6DSL_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b086      	sub	sp, #24
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
 800a596:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	3320      	adds	r3, #32
 800a59c:	f107 0210 	add.w	r2, r7, #16
 800a5a0:	4611      	mov	r1, r2
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f000 fce6 	bl	800af74 <lsm6dsl_angular_rate_raw_get>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d002      	beq.n	800a5b4 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 800a5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b2:	e03c      	b.n	800a62e <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 800a5b4:	f107 030c 	add.w	r3, r7, #12
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7ff fe60 	bl	800a280 <LSM6DSL_GYRO_GetSensitivity>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d002      	beq.n	800a5cc <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 800a5c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ca:	e030      	b.n	800a62e <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800a5cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a5d0:	ee07 3a90 	vmov	s15, r3
 800a5d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5d8:	edd7 7a03 	vldr	s15, [r7, #12]
 800a5dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a5e4:	ee17 2a90 	vmov	r2, s15
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800a5ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a5f0:	ee07 3a90 	vmov	s15, r3
 800a5f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5f8:	edd7 7a03 	vldr	s15, [r7, #12]
 800a5fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a600:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a604:	ee17 2a90 	vmov	r2, s15
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800a60c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a610:	ee07 3a90 	vmov	s15, r3
 800a614:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a618:	edd7 7a03 	vldr	s15, [r7, #12]
 800a61c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a624:	ee17 2a90 	vmov	r2, s15
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3718      	adds	r7, #24
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b082      	sub	sp, #8
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
 800a63e:	460b      	mov	r3, r1
 800a640:	70fb      	strb	r3, [r7, #3]
 800a642:	4613      	mov	r3, r2
 800a644:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f103 0020 	add.w	r0, r3, #32
 800a64c:	1cba      	adds	r2, r7, #2
 800a64e:	78f9      	ldrb	r1, [r7, #3]
 800a650:	2301      	movs	r3, #1
 800a652:	f000 fa75 	bl	800ab40 <lsm6dsl_write_reg>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d002      	beq.n	800a662 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 800a65c:	f04f 33ff 	mov.w	r3, #4294967295
 800a660:	e000      	b.n	800a664 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800a678:	edd7 7a00 	vldr	s15, [r7]
 800a67c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800a680:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a688:	d801      	bhi.n	800a68e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 800a68a:	2301      	movs	r3, #1
 800a68c:	e058      	b.n	800a740 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800a68e:	edd7 7a00 	vldr	s15, [r7]
 800a692:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800a696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a69e:	d801      	bhi.n	800a6a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	e04d      	b.n	800a740 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800a6a4:	edd7 7a00 	vldr	s15, [r7]
 800a6a8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a768 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 800a6ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6b4:	d801      	bhi.n	800a6ba <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800a6b6:	2303      	movs	r3, #3
 800a6b8:	e042      	b.n	800a740 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800a6ba:	edd7 7a00 	vldr	s15, [r7]
 800a6be:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800a76c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 800a6c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ca:	d801      	bhi.n	800a6d0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 800a6cc:	2304      	movs	r3, #4
 800a6ce:	e037      	b.n	800a740 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800a6d0:	edd7 7a00 	vldr	s15, [r7]
 800a6d4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a770 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 800a6d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e0:	d801      	bhi.n	800a6e6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800a6e2:	2305      	movs	r3, #5
 800a6e4:	e02c      	b.n	800a740 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800a6e6:	edd7 7a00 	vldr	s15, [r7]
 800a6ea:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800a774 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 800a6ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6f6:	d801      	bhi.n	800a6fc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 800a6f8:	2306      	movs	r3, #6
 800a6fa:	e021      	b.n	800a740 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800a6fc:	edd7 7a00 	vldr	s15, [r7]
 800a700:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a778 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 800a704:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a70c:	d801      	bhi.n	800a712 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800a70e:	2307      	movs	r3, #7
 800a710:	e016      	b.n	800a740 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800a712:	edd7 7a00 	vldr	s15, [r7]
 800a716:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a77c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 800a71a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a722:	d801      	bhi.n	800a728 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800a724:	2308      	movs	r3, #8
 800a726:	e00b      	b.n	800a740 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800a728:	edd7 7a00 	vldr	s15, [r7]
 800a72c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800a780 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 800a730:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a738:	d801      	bhi.n	800a73e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800a73a:	2309      	movs	r3, #9
 800a73c:	e000      	b.n	800a740 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800a73e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 800a740:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
            :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	3320      	adds	r3, #32
 800a746:	7bfa      	ldrb	r2, [r7, #15]
 800a748:	4611      	mov	r1, r2
 800a74a:	4618      	mov	r0, r3
 800a74c:	f000 fa6e 	bl	800ac2c <lsm6dsl_xl_data_rate_set>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d002      	beq.n	800a75c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800a756:	f04f 33ff 	mov.w	r3, #4294967295
 800a75a:	e000      	b.n	800a75e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	42500000 	.word	0x42500000
 800a76c:	42d00000 	.word	0x42d00000
 800a770:	43500000 	.word	0x43500000
 800a774:	43d00000 	.word	0x43d00000
 800a778:	44504000 	.word	0x44504000
 800a77c:	44cf8000 	.word	0x44cf8000
 800a780:	45502000 	.word	0x45502000

0800a784 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800a790:	edd7 7a00 	vldr	s15, [r7]
 800a794:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800a798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a0:	d801      	bhi.n	800a7a6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e058      	b.n	800a858 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a7a6:	edd7 7a00 	vldr	s15, [r7]
 800a7aa:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800a7ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7b6:	d801      	bhi.n	800a7bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 800a7b8:	2302      	movs	r3, #2
 800a7ba:	e04d      	b.n	800a858 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a7bc:	edd7 7a00 	vldr	s15, [r7]
 800a7c0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800a86c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800a7c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7cc:	d801      	bhi.n	800a7d2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	e042      	b.n	800a858 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a7d2:	edd7 7a00 	vldr	s15, [r7]
 800a7d6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a870 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 800a7da:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e2:	d801      	bhi.n	800a7e8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 800a7e4:	2304      	movs	r3, #4
 800a7e6:	e037      	b.n	800a858 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a7e8:	edd7 7a00 	vldr	s15, [r7]
 800a7ec:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800a874 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 800a7f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f8:	d801      	bhi.n	800a7fe <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800a7fa:	2305      	movs	r3, #5
 800a7fc:	e02c      	b.n	800a858 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a7fe:	edd7 7a00 	vldr	s15, [r7]
 800a802:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a878 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800a806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a80e:	d801      	bhi.n	800a814 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 800a810:	2306      	movs	r3, #6
 800a812:	e021      	b.n	800a858 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a814:	edd7 7a00 	vldr	s15, [r7]
 800a818:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800a87c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800a81c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a824:	d801      	bhi.n	800a82a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800a826:	2307      	movs	r3, #7
 800a828:	e016      	b.n	800a858 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a82a:	edd7 7a00 	vldr	s15, [r7]
 800a82e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800a880 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800a832:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a83a:	d801      	bhi.n	800a840 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 800a83c:	2308      	movs	r3, #8
 800a83e:	e00b      	b.n	800a858 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a840:	edd7 7a00 	vldr	s15, [r7]
 800a844:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800a884 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 800a848:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a850:	d801      	bhi.n	800a856 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800a852:	2309      	movs	r3, #9
 800a854:	e000      	b.n	800a858 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a856:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr
 800a86c:	42500000 	.word	0x42500000
 800a870:	42d00000 	.word	0x42d00000
 800a874:	43500000 	.word	0x43500000
 800a878:	43d00000 	.word	0x43d00000
 800a87c:	44504000 	.word	0x44504000
 800a880:	44cf8000 	.word	0x44cf8000
 800a884:	45502000 	.word	0x45502000

0800a888 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 800a894:	edd7 7a00 	vldr	s15, [r7]
 800a898:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800a89c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8a4:	d801      	bhi.n	800a8aa <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e058      	b.n	800a95c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a8aa:	edd7 7a00 	vldr	s15, [r7]
 800a8ae:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800a8b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ba:	d801      	bhi.n	800a8c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800a8bc:	2302      	movs	r3, #2
 800a8be:	e04d      	b.n	800a95c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a8c0:	edd7 7a00 	vldr	s15, [r7]
 800a8c4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a984 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 800a8c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8d0:	d801      	bhi.n	800a8d6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	e042      	b.n	800a95c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a8d6:	edd7 7a00 	vldr	s15, [r7]
 800a8da:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800a988 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800a8de:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8e6:	d801      	bhi.n	800a8ec <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 800a8e8:	2304      	movs	r3, #4
 800a8ea:	e037      	b.n	800a95c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a8ec:	edd7 7a00 	vldr	s15, [r7]
 800a8f0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a98c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800a8f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8fc:	d801      	bhi.n	800a902 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800a8fe:	2305      	movs	r3, #5
 800a900:	e02c      	b.n	800a95c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a902:	edd7 7a00 	vldr	s15, [r7]
 800a906:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800a990 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800a90a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a90e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a912:	d801      	bhi.n	800a918 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800a914:	2306      	movs	r3, #6
 800a916:	e021      	b.n	800a95c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a918:	edd7 7a00 	vldr	s15, [r7]
 800a91c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a994 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 800a920:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a928:	d801      	bhi.n	800a92e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800a92a:	2307      	movs	r3, #7
 800a92c:	e016      	b.n	800a95c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a92e:	edd7 7a00 	vldr	s15, [r7]
 800a932:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a998 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800a936:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a93e:	d801      	bhi.n	800a944 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 800a940:	2308      	movs	r3, #8
 800a942:	e00b      	b.n	800a95c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a944:	edd7 7a00 	vldr	s15, [r7]
 800a948:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800a99c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800a94c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a954:	d801      	bhi.n	800a95a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800a956:	2309      	movs	r3, #9
 800a958:	e000      	b.n	800a95c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a95a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 800a95c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
            :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	3320      	adds	r3, #32
 800a962:	7bfa      	ldrb	r2, [r7, #15]
 800a964:	4611      	mov	r1, r2
 800a966:	4618      	mov	r0, r3
 800a968:	f000 fa56 	bl	800ae18 <lsm6dsl_gy_data_rate_set>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d002      	beq.n	800a978 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800a972:	f04f 33ff 	mov.w	r3, #4294967295
 800a976:	e000      	b.n	800a97a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	42500000 	.word	0x42500000
 800a988:	42d00000 	.word	0x42d00000
 800a98c:	43500000 	.word	0x43500000
 800a990:	43d00000 	.word	0x43d00000
 800a994:	44504000 	.word	0x44504000
 800a998:	44cf8000 	.word	0x44cf8000
 800a99c:	45502000 	.word	0x45502000

0800a9a0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 800a9ac:	edd7 7a00 	vldr	s15, [r7]
 800a9b0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800a9b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9bc:	d801      	bhi.n	800a9c2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e058      	b.n	800aa74 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a9c2:	edd7 7a00 	vldr	s15, [r7]
 800a9c6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800a9ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9d2:	d801      	bhi.n	800a9d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800a9d4:	2302      	movs	r3, #2
 800a9d6:	e04d      	b.n	800aa74 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a9d8:	edd7 7a00 	vldr	s15, [r7]
 800a9dc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800aa88 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800a9e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9e8:	d801      	bhi.n	800a9ee <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800a9ea:	2303      	movs	r3, #3
 800a9ec:	e042      	b.n	800aa74 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a9ee:	edd7 7a00 	vldr	s15, [r7]
 800a9f2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800aa8c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800a9f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9fe:	d801      	bhi.n	800aa04 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800aa00:	2304      	movs	r3, #4
 800aa02:	e037      	b.n	800aa74 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800aa04:	edd7 7a00 	vldr	s15, [r7]
 800aa08:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800aa90 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800aa0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa14:	d801      	bhi.n	800aa1a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800aa16:	2305      	movs	r3, #5
 800aa18:	e02c      	b.n	800aa74 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800aa1a:	edd7 7a00 	vldr	s15, [r7]
 800aa1e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800aa94 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800aa22:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa2a:	d801      	bhi.n	800aa30 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800aa2c:	2306      	movs	r3, #6
 800aa2e:	e021      	b.n	800aa74 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800aa30:	edd7 7a00 	vldr	s15, [r7]
 800aa34:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800aa98 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 800aa38:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa40:	d801      	bhi.n	800aa46 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800aa42:	2307      	movs	r3, #7
 800aa44:	e016      	b.n	800aa74 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800aa46:	edd7 7a00 	vldr	s15, [r7]
 800aa4a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800aa9c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800aa4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa56:	d801      	bhi.n	800aa5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 800aa58:	2308      	movs	r3, #8
 800aa5a:	e00b      	b.n	800aa74 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800aa5c:	edd7 7a00 	vldr	s15, [r7]
 800aa60:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800aaa0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800aa64:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa6c:	d801      	bhi.n	800aa72 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800aa6e:	2309      	movs	r3, #9
 800aa70:	e000      	b.n	800aa74 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800aa72:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                   : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                   : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                   :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr
 800aa88:	42500000 	.word	0x42500000
 800aa8c:	42d00000 	.word	0x42d00000
 800aa90:	43500000 	.word	0x43500000
 800aa94:	43d00000 	.word	0x43d00000
 800aa98:	44504000 	.word	0x44504000
 800aa9c:	44cf8000 	.word	0x44cf8000
 800aaa0:	45502000 	.word	0x45502000

0800aaa4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800aaa4:	b590      	push	{r4, r7, lr}
 800aaa6:	b087      	sub	sp, #28
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	607a      	str	r2, [r7, #4]
 800aaae:	461a      	mov	r2, r3
 800aab0:	460b      	mov	r3, r1
 800aab2:	72fb      	strb	r3, [r7, #11]
 800aab4:	4613      	mov	r3, r2
 800aab6:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	695c      	ldr	r4, [r3, #20]
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	7b1b      	ldrb	r3, [r3, #12]
 800aac4:	b298      	uxth	r0, r3
 800aac6:	7afb      	ldrb	r3, [r7, #11]
 800aac8:	b299      	uxth	r1, r3
 800aaca:	893b      	ldrh	r3, [r7, #8]
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	47a0      	blx	r4
 800aad0:	4603      	mov	r3, r0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	371c      	adds	r7, #28
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd90      	pop	{r4, r7, pc}

0800aada <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800aada:	b590      	push	{r4, r7, lr}
 800aadc:	b087      	sub	sp, #28
 800aade:	af00      	add	r7, sp, #0
 800aae0:	60f8      	str	r0, [r7, #12]
 800aae2:	607a      	str	r2, [r7, #4]
 800aae4:	461a      	mov	r2, r3
 800aae6:	460b      	mov	r3, r1
 800aae8:	72fb      	strb	r3, [r7, #11]
 800aaea:	4613      	mov	r3, r2
 800aaec:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	691c      	ldr	r4, [r3, #16]
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	7b1b      	ldrb	r3, [r3, #12]
 800aafa:	b298      	uxth	r0, r3
 800aafc:	7afb      	ldrb	r3, [r7, #11]
 800aafe:	b299      	uxth	r1, r3
 800ab00:	893b      	ldrh	r3, [r7, #8]
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	47a0      	blx	r4
 800ab06:	4603      	mov	r3, r0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	371c      	adds	r7, #28
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd90      	pop	{r4, r7, pc}

0800ab10 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800ab10:	b590      	push	{r4, r7, lr}
 800ab12:	b087      	sub	sp, #28
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	607a      	str	r2, [r7, #4]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	72fb      	strb	r3, [r7, #11]
 800ab20:	4613      	mov	r3, r2
 800ab22:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	685c      	ldr	r4, [r3, #4]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	68d8      	ldr	r0, [r3, #12]
 800ab2c:	893b      	ldrh	r3, [r7, #8]
 800ab2e:	7af9      	ldrb	r1, [r7, #11]
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	47a0      	blx	r4
 800ab34:	6178      	str	r0, [r7, #20]

  return ret;
 800ab36:	697b      	ldr	r3, [r7, #20]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	371c      	adds	r7, #28
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd90      	pop	{r4, r7, pc}

0800ab40 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800ab40:	b590      	push	{r4, r7, lr}
 800ab42:	b087      	sub	sp, #28
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	607a      	str	r2, [r7, #4]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	72fb      	strb	r3, [r7, #11]
 800ab50:	4613      	mov	r3, r2
 800ab52:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681c      	ldr	r4, [r3, #0]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	68d8      	ldr	r0, [r3, #12]
 800ab5c:	893b      	ldrh	r3, [r7, #8]
 800ab5e:	7af9      	ldrb	r1, [r7, #11]
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	47a0      	blx	r4
 800ab64:	6178      	str	r0, [r7, #20]

  return ret;
 800ab66:	697b      	ldr	r3, [r7, #20]
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	371c      	adds	r7, #28
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd90      	pop	{r4, r7, pc}

0800ab70 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	460b      	mov	r3, r1
 800ab7a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800ab7c:	f107 0208 	add.w	r2, r7, #8
 800ab80:	2301      	movs	r3, #1
 800ab82:	2110      	movs	r1, #16
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f7ff ffc3 	bl	800ab10 <lsm6dsl_read_reg>
 800ab8a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d10f      	bne.n	800abb2 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 800ab92:	78fb      	ldrb	r3, [r7, #3]
 800ab94:	f003 0303 	and.w	r3, r3, #3
 800ab98:	b2da      	uxtb	r2, r3
 800ab9a:	7a3b      	ldrb	r3, [r7, #8]
 800ab9c:	f362 0383 	bfi	r3, r2, #2, #2
 800aba0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800aba2:	f107 0208 	add.w	r2, r7, #8
 800aba6:	2301      	movs	r3, #1
 800aba8:	2110      	movs	r1, #16
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f7ff ffc8 	bl	800ab40 <lsm6dsl_write_reg>
 800abb0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800abb2:	68fb      	ldr	r3, [r7, #12]
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3710      	adds	r7, #16
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800abc6:	f107 0208 	add.w	r2, r7, #8
 800abca:	2301      	movs	r3, #1
 800abcc:	2110      	movs	r1, #16
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f7ff ff9e 	bl	800ab10 <lsm6dsl_read_reg>
 800abd4:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 800abd6:	7a3b      	ldrb	r3, [r7, #8]
 800abd8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	2b03      	cmp	r3, #3
 800abe0:	d81a      	bhi.n	800ac18 <lsm6dsl_xl_full_scale_get+0x5c>
 800abe2:	a201      	add	r2, pc, #4	; (adr r2, 800abe8 <lsm6dsl_xl_full_scale_get+0x2c>)
 800abe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe8:	0800abf9 	.word	0x0800abf9
 800abec:	0800ac01 	.word	0x0800ac01
 800abf0:	0800ac09 	.word	0x0800ac09
 800abf4:	0800ac11 	.word	0x0800ac11
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	2200      	movs	r2, #0
 800abfc:	701a      	strb	r2, [r3, #0]
      break;
 800abfe:	e00f      	b.n	800ac20 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	2201      	movs	r2, #1
 800ac04:	701a      	strb	r2, [r3, #0]
      break;
 800ac06:	e00b      	b.n	800ac20 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	2202      	movs	r2, #2
 800ac0c:	701a      	strb	r2, [r3, #0]
      break;
 800ac0e:	e007      	b.n	800ac20 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	2203      	movs	r2, #3
 800ac14:	701a      	strb	r2, [r3, #0]
      break;
 800ac16:	e003      	b.n	800ac20 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	2204      	movs	r2, #4
 800ac1c:	701a      	strb	r2, [r3, #0]
      break;
 800ac1e:	bf00      	nop
  }

  return ret;
 800ac20:	68fb      	ldr	r3, [r7, #12]
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop

0800ac2c <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	460b      	mov	r3, r1
 800ac36:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800ac38:	f107 0208 	add.w	r2, r7, #8
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	2110      	movs	r1, #16
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f7ff ff65 	bl	800ab10 <lsm6dsl_read_reg>
 800ac46:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d10f      	bne.n	800ac6e <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 800ac4e:	78fb      	ldrb	r3, [r7, #3]
 800ac50:	f003 030f 	and.w	r3, r3, #15
 800ac54:	b2da      	uxtb	r2, r3
 800ac56:	7a3b      	ldrb	r3, [r7, #8]
 800ac58:	f362 1307 	bfi	r3, r2, #4, #4
 800ac5c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800ac5e:	f107 0208 	add.w	r2, r7, #8
 800ac62:	2301      	movs	r3, #1
 800ac64:	2110      	movs	r1, #16
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f7ff ff6a 	bl	800ab40 <lsm6dsl_write_reg>
 800ac6c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800ac82:	f107 0208 	add.w	r2, r7, #8
 800ac86:	2301      	movs	r3, #1
 800ac88:	2110      	movs	r1, #16
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f7ff ff40 	bl	800ab10 <lsm6dsl_read_reg>
 800ac90:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.odr_xl)
 800ac92:	7a3b      	ldrb	r3, [r7, #8]
 800ac94:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	2b0b      	cmp	r3, #11
 800ac9c:	d84a      	bhi.n	800ad34 <lsm6dsl_xl_data_rate_get+0xbc>
 800ac9e:	a201      	add	r2, pc, #4	; (adr r2, 800aca4 <lsm6dsl_xl_data_rate_get+0x2c>)
 800aca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca4:	0800acd5 	.word	0x0800acd5
 800aca8:	0800acdd 	.word	0x0800acdd
 800acac:	0800ace5 	.word	0x0800ace5
 800acb0:	0800aced 	.word	0x0800aced
 800acb4:	0800acf5 	.word	0x0800acf5
 800acb8:	0800acfd 	.word	0x0800acfd
 800acbc:	0800ad05 	.word	0x0800ad05
 800acc0:	0800ad0d 	.word	0x0800ad0d
 800acc4:	0800ad15 	.word	0x0800ad15
 800acc8:	0800ad1d 	.word	0x0800ad1d
 800accc:	0800ad25 	.word	0x0800ad25
 800acd0:	0800ad2d 	.word	0x0800ad2d
  {
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	2200      	movs	r2, #0
 800acd8:	701a      	strb	r2, [r3, #0]
      break;
 800acda:	e02f      	b.n	800ad3c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	2201      	movs	r2, #1
 800ace0:	701a      	strb	r2, [r3, #0]
      break;
 800ace2:	e02b      	b.n	800ad3c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	2202      	movs	r2, #2
 800ace8:	701a      	strb	r2, [r3, #0]
      break;
 800acea:	e027      	b.n	800ad3c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	2203      	movs	r2, #3
 800acf0:	701a      	strb	r2, [r3, #0]
      break;
 800acf2:	e023      	b.n	800ad3c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	2204      	movs	r2, #4
 800acf8:	701a      	strb	r2, [r3, #0]
      break;
 800acfa:	e01f      	b.n	800ad3c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	2205      	movs	r2, #5
 800ad00:	701a      	strb	r2, [r3, #0]
      break;
 800ad02:	e01b      	b.n	800ad3c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	2206      	movs	r2, #6
 800ad08:	701a      	strb	r2, [r3, #0]
      break;
 800ad0a:	e017      	b.n	800ad3c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	2207      	movs	r2, #7
 800ad10:	701a      	strb	r2, [r3, #0]
      break;
 800ad12:	e013      	b.n	800ad3c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	2208      	movs	r2, #8
 800ad18:	701a      	strb	r2, [r3, #0]
      break;
 800ad1a:	e00f      	b.n	800ad3c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	2209      	movs	r2, #9
 800ad20:	701a      	strb	r2, [r3, #0]
      break;
 800ad22:	e00b      	b.n	800ad3c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	220a      	movs	r2, #10
 800ad28:	701a      	strb	r2, [r3, #0]
      break;
 800ad2a:	e007      	b.n	800ad3c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	220b      	movs	r2, #11
 800ad30:	701a      	strb	r2, [r3, #0]
      break;
 800ad32:	e003      	b.n	800ad3c <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	220c      	movs	r2, #12
 800ad38:	701a      	strb	r2, [r3, #0]
      break;
 800ad3a:	bf00      	nop
  }

  return ret;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3710      	adds	r7, #16
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop

0800ad48 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	460b      	mov	r3, r1
 800ad52:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800ad54:	f107 0208 	add.w	r2, r7, #8
 800ad58:	2301      	movs	r3, #1
 800ad5a:	2111      	movs	r1, #17
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f7ff fed7 	bl	800ab10 <lsm6dsl_read_reg>
 800ad62:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d10f      	bne.n	800ad8a <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 800ad6a:	78fb      	ldrb	r3, [r7, #3]
 800ad6c:	f003 0307 	and.w	r3, r3, #7
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	7a3b      	ldrb	r3, [r7, #8]
 800ad74:	f362 0343 	bfi	r3, r2, #1, #3
 800ad78:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800ad7a:	f107 0208 	add.w	r2, r7, #8
 800ad7e:	2301      	movs	r3, #1
 800ad80:	2111      	movs	r1, #17
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f7ff fedc 	bl	800ab40 <lsm6dsl_write_reg>
 800ad88:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800ad9e:	f107 0208 	add.w	r2, r7, #8
 800ada2:	2301      	movs	r3, #1
 800ada4:	2111      	movs	r1, #17
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f7ff feb2 	bl	800ab10 <lsm6dsl_read_reg>
 800adac:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g)
 800adae:	7a3b      	ldrb	r3, [r7, #8]
 800adb0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	2b06      	cmp	r3, #6
 800adb8:	d824      	bhi.n	800ae04 <lsm6dsl_gy_full_scale_get+0x70>
 800adba:	a201      	add	r2, pc, #4	; (adr r2, 800adc0 <lsm6dsl_gy_full_scale_get+0x2c>)
 800adbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc0:	0800addd 	.word	0x0800addd
 800adc4:	0800ade5 	.word	0x0800ade5
 800adc8:	0800aded 	.word	0x0800aded
 800adcc:	0800ae05 	.word	0x0800ae05
 800add0:	0800adf5 	.word	0x0800adf5
 800add4:	0800ae05 	.word	0x0800ae05
 800add8:	0800adfd 	.word	0x0800adfd
  {
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	2200      	movs	r2, #0
 800ade0:	701a      	strb	r2, [r3, #0]
      break;
 800ade2:	e013      	b.n	800ae0c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	2201      	movs	r2, #1
 800ade8:	701a      	strb	r2, [r3, #0]
      break;
 800adea:	e00f      	b.n	800ae0c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	2202      	movs	r2, #2
 800adf0:	701a      	strb	r2, [r3, #0]
      break;
 800adf2:	e00b      	b.n	800ae0c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	2204      	movs	r2, #4
 800adf8:	701a      	strb	r2, [r3, #0]
      break;
 800adfa:	e007      	b.n	800ae0c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	2206      	movs	r2, #6
 800ae00:	701a      	strb	r2, [r3, #0]
      break;
 800ae02:	e003      	b.n	800ae0c <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	2207      	movs	r2, #7
 800ae08:	701a      	strb	r2, [r3, #0]
      break;
 800ae0a:	bf00      	nop
  }

  return ret;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop

0800ae18 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	460b      	mov	r3, r1
 800ae22:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800ae24:	f107 0208 	add.w	r2, r7, #8
 800ae28:	2301      	movs	r3, #1
 800ae2a:	2111      	movs	r1, #17
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7ff fe6f 	bl	800ab10 <lsm6dsl_read_reg>
 800ae32:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d10f      	bne.n	800ae5a <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 800ae3a:	78fb      	ldrb	r3, [r7, #3]
 800ae3c:	f003 030f 	and.w	r3, r3, #15
 800ae40:	b2da      	uxtb	r2, r3
 800ae42:	7a3b      	ldrb	r3, [r7, #8]
 800ae44:	f362 1307 	bfi	r3, r2, #4, #4
 800ae48:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800ae4a:	f107 0208 	add.w	r2, r7, #8
 800ae4e:	2301      	movs	r3, #1
 800ae50:	2111      	movs	r1, #17
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f7ff fe74 	bl	800ab40 <lsm6dsl_write_reg>
 800ae58:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800ae6e:	f107 0208 	add.w	r2, r7, #8
 800ae72:	2301      	movs	r3, #1
 800ae74:	2111      	movs	r1, #17
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f7ff fe4a 	bl	800ab10 <lsm6dsl_read_reg>
 800ae7c:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g)
 800ae7e:	7a3b      	ldrb	r3, [r7, #8]
 800ae80:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b0a      	cmp	r3, #10
 800ae88:	d844      	bhi.n	800af14 <lsm6dsl_gy_data_rate_get+0xb0>
 800ae8a:	a201      	add	r2, pc, #4	; (adr r2, 800ae90 <lsm6dsl_gy_data_rate_get+0x2c>)
 800ae8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae90:	0800aebd 	.word	0x0800aebd
 800ae94:	0800aec5 	.word	0x0800aec5
 800ae98:	0800aecd 	.word	0x0800aecd
 800ae9c:	0800aed5 	.word	0x0800aed5
 800aea0:	0800aedd 	.word	0x0800aedd
 800aea4:	0800aee5 	.word	0x0800aee5
 800aea8:	0800aeed 	.word	0x0800aeed
 800aeac:	0800aef5 	.word	0x0800aef5
 800aeb0:	0800aefd 	.word	0x0800aefd
 800aeb4:	0800af05 	.word	0x0800af05
 800aeb8:	0800af0d 	.word	0x0800af0d
  {
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	2200      	movs	r2, #0
 800aec0:	701a      	strb	r2, [r3, #0]
      break;
 800aec2:	e02b      	b.n	800af1c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	2201      	movs	r2, #1
 800aec8:	701a      	strb	r2, [r3, #0]
      break;
 800aeca:	e027      	b.n	800af1c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	2202      	movs	r2, #2
 800aed0:	701a      	strb	r2, [r3, #0]
      break;
 800aed2:	e023      	b.n	800af1c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	2203      	movs	r2, #3
 800aed8:	701a      	strb	r2, [r3, #0]
      break;
 800aeda:	e01f      	b.n	800af1c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	2204      	movs	r2, #4
 800aee0:	701a      	strb	r2, [r3, #0]
      break;
 800aee2:	e01b      	b.n	800af1c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	2205      	movs	r2, #5
 800aee8:	701a      	strb	r2, [r3, #0]
      break;
 800aeea:	e017      	b.n	800af1c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2206      	movs	r2, #6
 800aef0:	701a      	strb	r2, [r3, #0]
      break;
 800aef2:	e013      	b.n	800af1c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	2207      	movs	r2, #7
 800aef8:	701a      	strb	r2, [r3, #0]
      break;
 800aefa:	e00f      	b.n	800af1c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	2208      	movs	r2, #8
 800af00:	701a      	strb	r2, [r3, #0]
      break;
 800af02:	e00b      	b.n	800af1c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	2209      	movs	r2, #9
 800af08:	701a      	strb	r2, [r3, #0]
      break;
 800af0a:	e007      	b.n	800af1c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	220a      	movs	r2, #10
 800af10:	701a      	strb	r2, [r3, #0]
      break;
 800af12:	e003      	b.n	800af1c <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	220b      	movs	r2, #11
 800af18:	701a      	strb	r2, [r3, #0]
      break;
 800af1a:	bf00      	nop
  }

  return ret;
 800af1c:	68fb      	ldr	r3, [r7, #12]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop

0800af28 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	460b      	mov	r3, r1
 800af32:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800af34:	f107 0208 	add.w	r2, r7, #8
 800af38:	2301      	movs	r3, #1
 800af3a:	2112      	movs	r1, #18
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7ff fde7 	bl	800ab10 <lsm6dsl_read_reg>
 800af42:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10f      	bne.n	800af6a <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 800af4a:	78fb      	ldrb	r3, [r7, #3]
 800af4c:	f003 0301 	and.w	r3, r3, #1
 800af50:	b2da      	uxtb	r2, r3
 800af52:	7a3b      	ldrb	r3, [r7, #8]
 800af54:	f362 1386 	bfi	r3, r2, #6, #1
 800af58:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800af5a:	f107 0208 	add.w	r2, r7, #8
 800af5e:	2301      	movs	r3, #1
 800af60:	2112      	movs	r1, #18
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7ff fdec 	bl	800ab40 <lsm6dsl_write_reg>
 800af68:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800af6a:	68fb      	ldr	r3, [r7, #12]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3710      	adds	r7, #16
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b086      	sub	sp, #24
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800af7e:	f107 020c 	add.w	r2, r7, #12
 800af82:	2306      	movs	r3, #6
 800af84:	2122      	movs	r1, #34	; 0x22
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f7ff fdc2 	bl	800ab10 <lsm6dsl_read_reg>
 800af8c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800af8e:	7b7b      	ldrb	r3, [r7, #13]
 800af90:	b21a      	sxth	r2, r3
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	021b      	lsls	r3, r3, #8
 800afa0:	b29a      	uxth	r2, r3
 800afa2:	7b3b      	ldrb	r3, [r7, #12]
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	4413      	add	r3, r2
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	b21a      	sxth	r2, r3
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800afb0:	7bfa      	ldrb	r2, [r7, #15]
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	3302      	adds	r3, #2
 800afb6:	b212      	sxth	r2, r2
 800afb8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	3302      	adds	r3, #2
 800afbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	021b      	lsls	r3, r3, #8
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	7bbb      	ldrb	r3, [r7, #14]
 800afca:	b29b      	uxth	r3, r3
 800afcc:	4413      	add	r3, r2
 800afce:	b29a      	uxth	r2, r3
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	3302      	adds	r3, #2
 800afd4:	b212      	sxth	r2, r2
 800afd6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800afd8:	7c7a      	ldrb	r2, [r7, #17]
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	3304      	adds	r3, #4
 800afde:	b212      	sxth	r2, r2
 800afe0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	3304      	adds	r3, #4
 800afe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800afea:	b29b      	uxth	r3, r3
 800afec:	021b      	lsls	r3, r3, #8
 800afee:	b29a      	uxth	r2, r3
 800aff0:	7c3b      	ldrb	r3, [r7, #16]
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	4413      	add	r3, r2
 800aff6:	b29a      	uxth	r2, r3
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	3304      	adds	r3, #4
 800affc:	b212      	sxth	r2, r2
 800affe:	801a      	strh	r2, [r3, #0]

  return ret;
 800b000:	697b      	ldr	r3, [r7, #20]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3718      	adds	r7, #24
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b086      	sub	sp, #24
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 800b014:	f107 020c 	add.w	r2, r7, #12
 800b018:	2306      	movs	r3, #6
 800b01a:	2128      	movs	r1, #40	; 0x28
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f7ff fd77 	bl	800ab10 <lsm6dsl_read_reg>
 800b022:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800b024:	7b7b      	ldrb	r3, [r7, #13]
 800b026:	b21a      	sxth	r2, r3
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b032:	b29b      	uxth	r3, r3
 800b034:	021b      	lsls	r3, r3, #8
 800b036:	b29a      	uxth	r2, r3
 800b038:	7b3b      	ldrb	r3, [r7, #12]
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	4413      	add	r3, r2
 800b03e:	b29b      	uxth	r3, r3
 800b040:	b21a      	sxth	r2, r3
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800b046:	7bfa      	ldrb	r2, [r7, #15]
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	3302      	adds	r3, #2
 800b04c:	b212      	sxth	r2, r2
 800b04e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	3302      	adds	r3, #2
 800b054:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b058:	b29b      	uxth	r3, r3
 800b05a:	021b      	lsls	r3, r3, #8
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	7bbb      	ldrb	r3, [r7, #14]
 800b060:	b29b      	uxth	r3, r3
 800b062:	4413      	add	r3, r2
 800b064:	b29a      	uxth	r2, r3
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	3302      	adds	r3, #2
 800b06a:	b212      	sxth	r2, r2
 800b06c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800b06e:	7c7a      	ldrb	r2, [r7, #17]
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	3304      	adds	r3, #4
 800b074:	b212      	sxth	r2, r2
 800b076:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	3304      	adds	r3, #4
 800b07c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b080:	b29b      	uxth	r3, r3
 800b082:	021b      	lsls	r3, r3, #8
 800b084:	b29a      	uxth	r2, r3
 800b086:	7c3b      	ldrb	r3, [r7, #16]
 800b088:	b29b      	uxth	r3, r3
 800b08a:	4413      	add	r3, r2
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	3304      	adds	r3, #4
 800b092:	b212      	sxth	r2, r2
 800b094:	801a      	strh	r2, [r3, #0]

  return ret;
 800b096:	697b      	ldr	r3, [r7, #20]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3718      	adds	r7, #24
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	683a      	ldr	r2, [r7, #0]
 800b0ae:	210f      	movs	r1, #15
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f7ff fd2d 	bl	800ab10 <lsm6dsl_read_reg>
 800b0b6:	60f8      	str	r0, [r7, #12]

  return ret;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b084      	sub	sp, #16
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800b0ce:	f107 0208 	add.w	r2, r7, #8
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	2112      	movs	r1, #18
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f7ff fd1a 	bl	800ab10 <lsm6dsl_read_reg>
 800b0dc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10f      	bne.n	800b104 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 800b0e4:	78fb      	ldrb	r3, [r7, #3]
 800b0e6:	f003 0301 	and.w	r3, r3, #1
 800b0ea:	b2da      	uxtb	r2, r3
 800b0ec:	7a3b      	ldrb	r3, [r7, #8]
 800b0ee:	f362 0382 	bfi	r3, r2, #2, #1
 800b0f2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800b0f4:	f107 0208 	add.w	r2, r7, #8
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	2112      	movs	r1, #18
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f7ff fd1f 	bl	800ab40 <lsm6dsl_write_reg>
 800b102:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800b104:	68fb      	ldr	r3, [r7, #12]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b084      	sub	sp, #16
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
 800b116:	460b      	mov	r3, r1
 800b118:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800b11a:	f107 0208 	add.w	r2, r7, #8
 800b11e:	2301      	movs	r3, #1
 800b120:	210a      	movs	r1, #10
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f7ff fcf4 	bl	800ab10 <lsm6dsl_read_reg>
 800b128:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d10f      	bne.n	800b150 <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 800b130:	78fb      	ldrb	r3, [r7, #3]
 800b132:	f003 0307 	and.w	r3, r3, #7
 800b136:	b2da      	uxtb	r2, r3
 800b138:	7a3b      	ldrb	r3, [r7, #8]
 800b13a:	f362 0302 	bfi	r3, r2, #0, #3
 800b13e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800b140:	f107 0208 	add.w	r2, r7, #8
 800b144:	2301      	movs	r3, #1
 800b146:	210a      	movs	r1, #10
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f7ff fcf9 	bl	800ab40 <lsm6dsl_write_reg>
 800b14e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 800b150:	68fb      	ldr	r3, [r7, #12]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
	...

0800b15c <IKS01A2_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  * @retval BSP status
  */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b08a      	sub	sp, #40	; 0x28
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b166:	2300      	movs	r3, #0
 800b168:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 800b16a:	2301      	movs	r3, #1
 800b16c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 800b16e:	2300      	movs	r3, #0
 800b170:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d003      	beq.n	800b180 <IKS01A2_ENV_SENSOR_Init+0x24>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d032      	beq.n	800b1e4 <IKS01A2_ENV_SENSOR_Init+0x88>
 800b17e:	e063      	b.n	800b248 <IKS01A2_ENV_SENSOR_Init+0xec>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 800b180:	6838      	ldr	r0, [r7, #0]
 800b182:	f000 f931 	bl	800b3e8 <HTS221_0_Probe>
 800b186:	4603      	mov	r3, r0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d002      	beq.n	800b192 <IKS01A2_ENV_SENSOR_Init+0x36>
      {
        return BSP_ERROR_NO_INIT;
 800b18c:	f04f 33ff 	mov.w	r3, #4294967295
 800b190:	e098      	b.n	800b2c4 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b192:	4a4e      	ldr	r2, [pc, #312]	; (800b2cc <IKS01A2_ENV_SENSOR_Init+0x170>)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	494c      	ldr	r1, [pc, #304]	; (800b2d0 <IKS01A2_ENV_SENSOR_Init+0x174>)
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b1a4:	f107 0108 	add.w	r1, r7, #8
 800b1a8:	4610      	mov	r0, r2
 800b1aa:	4798      	blx	r3
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d002      	beq.n	800b1b8 <IKS01A2_ENV_SENSOR_Init+0x5c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b1b2:	f06f 0306 	mvn.w	r3, #6
 800b1b6:	e085      	b.n	800b2c4 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 800b1b8:	7a3b      	ldrb	r3, [r7, #8]
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d103      	bne.n	800b1c6 <IKS01A2_ENV_SENSOR_Init+0x6a>
      {
        component_functions |= ENV_TEMPERATURE;
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	f043 0301 	orr.w	r3, r3, #1
 800b1c4:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800b1c6:	7abb      	ldrb	r3, [r7, #10]
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d103      	bne.n	800b1d4 <IKS01A2_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_HUMIDITY;
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	f043 0304 	orr.w	r3, r3, #4
 800b1d2:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800b1d4:	7a7b      	ldrb	r3, [r7, #9]
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d13a      	bne.n	800b250 <IKS01A2_ENV_SENSOR_Init+0xf4>
      {
        component_functions |= ENV_PRESSURE;
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	f043 0302 	orr.w	r3, r3, #2
 800b1e0:	61bb      	str	r3, [r7, #24]
      }
      break;
 800b1e2:	e035      	b.n	800b250 <IKS01A2_ENV_SENSOR_Init+0xf4>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 800b1e4:	6838      	ldr	r0, [r7, #0]
 800b1e6:	f000 f9b9 	bl	800b55c <LPS22HB_0_Probe>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <IKS01A2_ENV_SENSOR_Init+0x9a>
      {
        return BSP_ERROR_NO_INIT;
 800b1f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1f4:	e066      	b.n	800b2c4 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b1f6:	4a35      	ldr	r2, [pc, #212]	; (800b2cc <IKS01A2_ENV_SENSOR_Init+0x170>)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	4933      	ldr	r1, [pc, #204]	; (800b2d0 <IKS01A2_ENV_SENSOR_Init+0x174>)
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b208:	f107 0108 	add.w	r1, r7, #8
 800b20c:	4610      	mov	r0, r2
 800b20e:	4798      	blx	r3
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d002      	beq.n	800b21c <IKS01A2_ENV_SENSOR_Init+0xc0>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b216:	f06f 0306 	mvn.w	r3, #6
 800b21a:	e053      	b.n	800b2c4 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 800b21c:	7a3b      	ldrb	r3, [r7, #8]
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d103      	bne.n	800b22a <IKS01A2_ENV_SENSOR_Init+0xce>
      {
        component_functions |= ENV_TEMPERATURE;
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	f043 0301 	orr.w	r3, r3, #1
 800b228:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800b22a:	7abb      	ldrb	r3, [r7, #10]
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d103      	bne.n	800b238 <IKS01A2_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_HUMIDITY;
 800b230:	69bb      	ldr	r3, [r7, #24]
 800b232:	f043 0304 	orr.w	r3, r3, #4
 800b236:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800b238:	7a7b      	ldrb	r3, [r7, #9]
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d10a      	bne.n	800b254 <IKS01A2_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_PRESSURE;
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	f043 0302 	orr.w	r3, r3, #2
 800b244:	61bb      	str	r3, [r7, #24]
      }
      break;
 800b246:	e005      	b.n	800b254 <IKS01A2_ENV_SENSOR_Init+0xf8>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b248:	f06f 0301 	mvn.w	r3, #1
 800b24c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b24e:	e002      	b.n	800b256 <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 800b250:	bf00      	nop
 800b252:	e000      	b.n	800b256 <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 800b254:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d001      	beq.n	800b260 <IKS01A2_ENV_SENSOR_Init+0x104>
  {
    return ret;
 800b25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25e:	e031      	b.n	800b2c4 <IKS01A2_ENV_SENSOR_Init+0x168>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 800b260:	2300      	movs	r3, #0
 800b262:	61fb      	str	r3, [r7, #28]
 800b264:	e02a      	b.n	800b2bc <IKS01A2_ENV_SENSOR_Init+0x160>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b266:	683a      	ldr	r2, [r7, #0]
 800b268:	6a3b      	ldr	r3, [r7, #32]
 800b26a:	4013      	ands	r3, r2
 800b26c:	6a3a      	ldr	r2, [r7, #32]
 800b26e:	429a      	cmp	r2, r3
 800b270:	d11e      	bne.n	800b2b0 <IKS01A2_ENV_SENSOR_Init+0x154>
 800b272:	69ba      	ldr	r2, [r7, #24]
 800b274:	6a3b      	ldr	r3, [r7, #32]
 800b276:	4013      	ands	r3, r2
 800b278:	6a3a      	ldr	r2, [r7, #32]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d118      	bne.n	800b2b0 <IKS01A2_ENV_SENSOR_Init+0x154>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800b27e:	4a15      	ldr	r2, [pc, #84]	; (800b2d4 <IKS01A2_ENV_SENSOR_Init+0x178>)
 800b280:	6a3b      	ldr	r3, [r7, #32]
 800b282:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b286:	4814      	ldr	r0, [pc, #80]	; (800b2d8 <IKS01A2_ENV_SENSOR_Init+0x17c>)
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	4613      	mov	r3, r2
 800b28c:	005b      	lsls	r3, r3, #1
 800b28e:	4413      	add	r3, r2
 800b290:	440b      	add	r3, r1
 800b292:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	490d      	ldr	r1, [pc, #52]	; (800b2d0 <IKS01A2_ENV_SENSOR_Init+0x174>)
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b2a0:	4610      	mov	r0, r2
 800b2a2:	4798      	blx	r3
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d002      	beq.n	800b2b0 <IKS01A2_ENV_SENSOR_Init+0x154>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b2aa:	f06f 0304 	mvn.w	r3, #4
 800b2ae:	e009      	b.n	800b2c4 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
    }
    function = function << 1;
 800b2b0:	6a3b      	ldr	r3, [r7, #32]
 800b2b2:	005b      	lsls	r3, r3, #1
 800b2b4:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	61fb      	str	r3, [r7, #28]
 800b2bc:	69fb      	ldr	r3, [r7, #28]
 800b2be:	2b02      	cmp	r3, #2
 800b2c0:	d9d1      	bls.n	800b266 <IKS01A2_ENV_SENSOR_Init+0x10a>
  }

  return ret;
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3728      	adds	r7, #40	; 0x28
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	20001668 	.word	0x20001668
 800b2d0:	20001648 	.word	0x20001648
 800b2d4:	2000018c 	.word	0x2000018c
 800b2d8:	20001650 	.word	0x20001650

0800b2dc <IKS01A2_ENV_SENSOR_Enable>:
  *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @retval BSP status
  */
int32_t IKS01A2_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d903      	bls.n	800b2f4 <IKS01A2_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b2ec:	f06f 0301 	mvn.w	r3, #1
 800b2f0:	60fb      	str	r3, [r7, #12]
 800b2f2:	e028      	b.n	800b346 <IKS01A2_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800b2f4:	4a16      	ldr	r2, [pc, #88]	; (800b350 <IKS01A2_ENV_SENSOR_Enable+0x74>)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	4013      	ands	r3, r2
 800b300:	683a      	ldr	r2, [r7, #0]
 800b302:	429a      	cmp	r2, r3
 800b304:	d11c      	bne.n	800b340 <IKS01A2_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800b306:	4a13      	ldr	r2, [pc, #76]	; (800b354 <IKS01A2_ENV_SENSOR_Enable+0x78>)
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b30e:	4812      	ldr	r0, [pc, #72]	; (800b358 <IKS01A2_ENV_SENSOR_Enable+0x7c>)
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	4613      	mov	r3, r2
 800b314:	005b      	lsls	r3, r3, #1
 800b316:	4413      	add	r3, r2
 800b318:	440b      	add	r3, r1
 800b31a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	490e      	ldr	r1, [pc, #56]	; (800b35c <IKS01A2_ENV_SENSOR_Enable+0x80>)
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b328:	4610      	mov	r0, r2
 800b32a:	4798      	blx	r3
 800b32c:	4603      	mov	r3, r0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d003      	beq.n	800b33a <IKS01A2_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b332:	f06f 0304 	mvn.w	r3, #4
 800b336:	60fb      	str	r3, [r7, #12]
 800b338:	e005      	b.n	800b346 <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b33a:	2300      	movs	r3, #0
 800b33c:	60fb      	str	r3, [r7, #12]
 800b33e:	e002      	b.n	800b346 <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b340:	f06f 0301 	mvn.w	r3, #1
 800b344:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b346:	68fb      	ldr	r3, [r7, #12]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	20001670 	.word	0x20001670
 800b354:	2000018c 	.word	0x2000018c
 800b358:	20001650 	.word	0x20001650
 800b35c:	20001648 	.word	0x20001648

0800b360 <IKS01A2_ENV_SENSOR_GetValue>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b086      	sub	sp, #24
 800b364:	af00      	add	r7, sp, #0
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d903      	bls.n	800b37a <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b372:	f06f 0301 	mvn.w	r3, #1
 800b376:	617b      	str	r3, [r7, #20]
 800b378:	e029      	b.n	800b3ce <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800b37a:	4a17      	ldr	r2, [pc, #92]	; (800b3d8 <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	4013      	ands	r3, r2
 800b386:	68ba      	ldr	r2, [r7, #8]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d11d      	bne.n	800b3c8 <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800b38c:	4a13      	ldr	r2, [pc, #76]	; (800b3dc <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b394:	4812      	ldr	r0, [pc, #72]	; (800b3e0 <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 800b396:	68fa      	ldr	r2, [r7, #12]
 800b398:	4613      	mov	r3, r2
 800b39a:	005b      	lsls	r3, r3, #1
 800b39c:	4413      	add	r3, r2
 800b39e:	440b      	add	r3, r1
 800b3a0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	490f      	ldr	r1, [pc, #60]	; (800b3e4 <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b3ae:	6879      	ldr	r1, [r7, #4]
 800b3b0:	4610      	mov	r0, r2
 800b3b2:	4798      	blx	r3
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d003      	beq.n	800b3c2 <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3ba:	f06f 0304 	mvn.w	r3, #4
 800b3be:	617b      	str	r3, [r7, #20]
 800b3c0:	e005      	b.n	800b3ce <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	617b      	str	r3, [r7, #20]
 800b3c6:	e002      	b.n	800b3ce <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b3c8:	f06f 0301 	mvn.w	r3, #1
 800b3cc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b3ce:	697b      	ldr	r3, [r7, #20]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3718      	adds	r7, #24
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	20001670 	.word	0x20001670
 800b3dc:	2000018c 	.word	0x2000018c
 800b3e0:	20001650 	.word	0x20001650
 800b3e4:	20001648 	.word	0x20001648

0800b3e8 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b090      	sub	sp, #64	; 0x40
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 800b3f8:	23bf      	movs	r3, #191	; 0xbf
 800b3fa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A2_I2C_Init;
 800b3fe:	4b49      	ldr	r3, [pc, #292]	; (800b524 <HTS221_0_Probe+0x13c>)
 800b400:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800b402:	4b49      	ldr	r3, [pc, #292]	; (800b528 <HTS221_0_Probe+0x140>)
 800b404:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800b406:	4b49      	ldr	r3, [pc, #292]	; (800b52c <HTS221_0_Probe+0x144>)
 800b408:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800b40a:	4b49      	ldr	r3, [pc, #292]	; (800b530 <HTS221_0_Probe+0x148>)
 800b40c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800b40e:	4b49      	ldr	r3, [pc, #292]	; (800b534 <HTS221_0_Probe+0x14c>)
 800b410:	637b      	str	r3, [r7, #52]	; 0x34

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800b412:	f107 031c 	add.w	r3, r7, #28
 800b416:	4619      	mov	r1, r3
 800b418:	4847      	ldr	r0, [pc, #284]	; (800b538 <HTS221_0_Probe+0x150>)
 800b41a:	f7fb fbc7 	bl	8006bac <HTS221_RegisterBusIO>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d003      	beq.n	800b42c <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b424:	f06f 0306 	mvn.w	r3, #6
 800b428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b42a:	e076      	b.n	800b51a <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 800b42c:	f107 031b 	add.w	r3, r7, #27
 800b430:	4619      	mov	r1, r3
 800b432:	4841      	ldr	r0, [pc, #260]	; (800b538 <HTS221_0_Probe+0x150>)
 800b434:	f7fb fc43 	bl	8006cbe <HTS221_ReadID>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d003      	beq.n	800b446 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b43e:	f06f 0306 	mvn.w	r3, #6
 800b442:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b444:	e069      	b.n	800b51a <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 800b446:	7efb      	ldrb	r3, [r7, #27]
 800b448:	2bbc      	cmp	r3, #188	; 0xbc
 800b44a:	d003      	beq.n	800b454 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b44c:	f06f 0306 	mvn.w	r3, #6
 800b450:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b452:	e062      	b.n	800b51a <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 800b454:	f107 0308 	add.w	r3, r7, #8
 800b458:	4619      	mov	r1, r3
 800b45a:	4837      	ldr	r0, [pc, #220]	; (800b538 <HTS221_0_Probe+0x150>)
 800b45c:	f7fb fc46 	bl	8006cec <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800b460:	7a3b      	ldrb	r3, [r7, #8]
 800b462:	461a      	mov	r2, r3
 800b464:	7a7b      	ldrb	r3, [r7, #9]
 800b466:	005b      	lsls	r3, r3, #1
 800b468:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 800b46a:	7abb      	ldrb	r3, [r7, #10]
 800b46c:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800b46e:	4313      	orrs	r3, r2
 800b470:	4a32      	ldr	r2, [pc, #200]	; (800b53c <HTS221_0_Probe+0x154>)
 800b472:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 800b474:	4b32      	ldr	r3, [pc, #200]	; (800b540 <HTS221_0_Probe+0x158>)
 800b476:	4a30      	ldr	r2, [pc, #192]	; (800b538 <HTS221_0_Probe+0x150>)
 800b478:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800b47a:	4b32      	ldr	r3, [pc, #200]	; (800b544 <HTS221_0_Probe+0x15c>)
 800b47c:	4a32      	ldr	r2, [pc, #200]	; (800b548 <HTS221_0_Probe+0x160>)
 800b47e:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b482:	2b00      	cmp	r3, #0
 800b484:	d11d      	bne.n	800b4c2 <HTS221_0_Probe+0xda>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f003 0301 	and.w	r3, r3, #1
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d018      	beq.n	800b4c2 <HTS221_0_Probe+0xda>
 800b490:	7a3b      	ldrb	r3, [r7, #8]
 800b492:	2b01      	cmp	r3, #1
 800b494:	d115      	bne.n	800b4c2 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800b496:	4b2d      	ldr	r3, [pc, #180]	; (800b54c <HTS221_0_Probe+0x164>)
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	4a2d      	ldr	r2, [pc, #180]	; (800b550 <HTS221_0_Probe+0x168>)
 800b49c:	492d      	ldr	r1, [pc, #180]	; (800b554 <HTS221_0_Probe+0x16c>)
 800b49e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 800b4a2:	4b28      	ldr	r3, [pc, #160]	; (800b544 <HTS221_0_Probe+0x15c>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a25      	ldr	r2, [pc, #148]	; (800b540 <HTS221_0_Probe+0x158>)
 800b4aa:	6812      	ldr	r2, [r2, #0]
 800b4ac:	4610      	mov	r0, r2
 800b4ae:	4798      	blx	r3
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d003      	beq.n	800b4be <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b4b6:	f06f 0304 	mvn.w	r3, #4
 800b4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4bc:	e001      	b.n	800b4c2 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800b4c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d11d      	bne.n	800b504 <HTS221_0_Probe+0x11c>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f003 0304 	and.w	r3, r3, #4
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d018      	beq.n	800b504 <HTS221_0_Probe+0x11c>
 800b4d2:	7abb      	ldrb	r3, [r7, #10]
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d115      	bne.n	800b504 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 800b4d8:	4b1c      	ldr	r3, [pc, #112]	; (800b54c <HTS221_0_Probe+0x164>)
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	4a1c      	ldr	r2, [pc, #112]	; (800b550 <HTS221_0_Probe+0x168>)
 800b4de:	491e      	ldr	r1, [pc, #120]	; (800b558 <HTS221_0_Probe+0x170>)
 800b4e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 800b4e4:	4b17      	ldr	r3, [pc, #92]	; (800b544 <HTS221_0_Probe+0x15c>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a15      	ldr	r2, [pc, #84]	; (800b540 <HTS221_0_Probe+0x158>)
 800b4ec:	6812      	ldr	r2, [r2, #0]
 800b4ee:	4610      	mov	r0, r2
 800b4f0:	4798      	blx	r3
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d003      	beq.n	800b500 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b4f8:	f06f 0304 	mvn.w	r3, #4
 800b4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4fe:	e001      	b.n	800b504 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b500:	2300      	movs	r3, #0
 800b502:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b506:	2b00      	cmp	r3, #0
 800b508:	d107      	bne.n	800b51a <HTS221_0_Probe+0x132>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f003 0302 	and.w	r3, r3, #2
 800b510:	2b00      	cmp	r3, #0
 800b512:	d002      	beq.n	800b51a <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b514:	f06f 0304 	mvn.w	r3, #4
 800b518:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 800b51a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3740      	adds	r7, #64	; 0x40
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}
 800b524:	08006681 	.word	0x08006681
 800b528:	080066fd 	.word	0x080066fd
 800b52c:	080067b1 	.word	0x080067b1
 800b530:	0800674d 	.word	0x0800674d
 800b534:	08006815 	.word	0x08006815
 800b538:	20001678 	.word	0x20001678
 800b53c:	20001670 	.word	0x20001670
 800b540:	20001648 	.word	0x20001648
 800b544:	20001668 	.word	0x20001668
 800b548:	2000005c 	.word	0x2000005c
 800b54c:	2000018c 	.word	0x2000018c
 800b550:	20001650 	.word	0x20001650
 800b554:	20000080 	.word	0x20000080
 800b558:	2000006c 	.word	0x2000006c

0800b55c <LPS22HB_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b090      	sub	sp, #64	; 0x40
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800b564:	2300      	movs	r3, #0
 800b566:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 800b568:	2300      	movs	r3, #0
 800b56a:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 800b56c:	23bb      	movs	r3, #187	; 0xbb
 800b56e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A2_I2C_Init;
 800b572:	4b4a      	ldr	r3, [pc, #296]	; (800b69c <LPS22HB_0_Probe+0x140>)
 800b574:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800b576:	4b4a      	ldr	r3, [pc, #296]	; (800b6a0 <LPS22HB_0_Probe+0x144>)
 800b578:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800b57a:	4b4a      	ldr	r3, [pc, #296]	; (800b6a4 <LPS22HB_0_Probe+0x148>)
 800b57c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800b57e:	4b4a      	ldr	r3, [pc, #296]	; (800b6a8 <LPS22HB_0_Probe+0x14c>)
 800b580:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800b582:	4b4a      	ldr	r3, [pc, #296]	; (800b6ac <LPS22HB_0_Probe+0x150>)
 800b584:	637b      	str	r3, [r7, #52]	; 0x34

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 800b586:	f107 031c 	add.w	r3, r7, #28
 800b58a:	4619      	mov	r1, r3
 800b58c:	4848      	ldr	r0, [pc, #288]	; (800b6b0 <LPS22HB_0_Probe+0x154>)
 800b58e:	f7fc f92f 	bl	80077f0 <LPS22HB_RegisterBusIO>
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d003      	beq.n	800b5a0 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b598:	f06f 0306 	mvn.w	r3, #6
 800b59c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b59e:	e078      	b.n	800b692 <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 800b5a0:	f107 031b 	add.w	r3, r7, #27
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	4842      	ldr	r0, [pc, #264]	; (800b6b0 <LPS22HB_0_Probe+0x154>)
 800b5a8:	f7fc f9cb 	bl	8007942 <LPS22HB_ReadID>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d003      	beq.n	800b5ba <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b5b2:	f06f 0306 	mvn.w	r3, #6
 800b5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5b8:	e06b      	b.n	800b692 <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 800b5ba:	7efb      	ldrb	r3, [r7, #27]
 800b5bc:	2bb1      	cmp	r3, #177	; 0xb1
 800b5be:	d003      	beq.n	800b5c8 <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b5c0:	f06f 0306 	mvn.w	r3, #6
 800b5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5c6:	e064      	b.n	800b692 <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 800b5c8:	f107 0308 	add.w	r3, r7, #8
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	4838      	ldr	r0, [pc, #224]	; (800b6b0 <LPS22HB_0_Probe+0x154>)
 800b5d0:	f7fc f9ce 	bl	8007970 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800b5d4:	7a3b      	ldrb	r3, [r7, #8]
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	7a7b      	ldrb	r3, [r7, #9]
 800b5da:	005b      	lsls	r3, r3, #1
 800b5dc:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 800b5de:	7abb      	ldrb	r3, [r7, #10]
 800b5e0:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	4a33      	ldr	r2, [pc, #204]	; (800b6b4 <LPS22HB_0_Probe+0x158>)
 800b5e6:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 800b5e8:	4b33      	ldr	r3, [pc, #204]	; (800b6b8 <LPS22HB_0_Probe+0x15c>)
 800b5ea:	4a31      	ldr	r2, [pc, #196]	; (800b6b0 <LPS22HB_0_Probe+0x154>)
 800b5ec:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 800b5ee:	4b33      	ldr	r3, [pc, #204]	; (800b6bc <LPS22HB_0_Probe+0x160>)
 800b5f0:	4a33      	ldr	r2, [pc, #204]	; (800b6c0 <LPS22HB_0_Probe+0x164>)
 800b5f2:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b5f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d11e      	bne.n	800b638 <LPS22HB_0_Probe+0xdc>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f003 0301 	and.w	r3, r3, #1
 800b600:	2b00      	cmp	r3, #0
 800b602:	d019      	beq.n	800b638 <LPS22HB_0_Probe+0xdc>
 800b604:	7a3b      	ldrb	r3, [r7, #8]
 800b606:	2b01      	cmp	r3, #1
 800b608:	d116      	bne.n	800b638 <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 800b60a:	4b2e      	ldr	r3, [pc, #184]	; (800b6c4 <LPS22HB_0_Probe+0x168>)
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	4a2e      	ldr	r2, [pc, #184]	; (800b6c8 <LPS22HB_0_Probe+0x16c>)
 800b610:	3303      	adds	r3, #3
 800b612:	492e      	ldr	r1, [pc, #184]	; (800b6cc <LPS22HB_0_Probe+0x170>)
 800b614:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 800b618:	4b28      	ldr	r3, [pc, #160]	; (800b6bc <LPS22HB_0_Probe+0x160>)
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a26      	ldr	r2, [pc, #152]	; (800b6b8 <LPS22HB_0_Probe+0x15c>)
 800b620:	6852      	ldr	r2, [r2, #4]
 800b622:	4610      	mov	r0, r2
 800b624:	4798      	blx	r3
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d003      	beq.n	800b634 <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b62c:	f06f 0304 	mvn.w	r3, #4
 800b630:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b632:	e001      	b.n	800b638 <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b634:	2300      	movs	r3, #0
 800b636:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800b638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d11e      	bne.n	800b67c <LPS22HB_0_Probe+0x120>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f003 0302 	and.w	r3, r3, #2
 800b644:	2b00      	cmp	r3, #0
 800b646:	d019      	beq.n	800b67c <LPS22HB_0_Probe+0x120>
 800b648:	7a7b      	ldrb	r3, [r7, #9]
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d116      	bne.n	800b67c <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 800b64e:	4b1d      	ldr	r3, [pc, #116]	; (800b6c4 <LPS22HB_0_Probe+0x168>)
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	4a1d      	ldr	r2, [pc, #116]	; (800b6c8 <LPS22HB_0_Probe+0x16c>)
 800b654:	3303      	adds	r3, #3
 800b656:	491e      	ldr	r1, [pc, #120]	; (800b6d0 <LPS22HB_0_Probe+0x174>)
 800b658:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 800b65c:	4b17      	ldr	r3, [pc, #92]	; (800b6bc <LPS22HB_0_Probe+0x160>)
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a15      	ldr	r2, [pc, #84]	; (800b6b8 <LPS22HB_0_Probe+0x15c>)
 800b664:	6852      	ldr	r2, [r2, #4]
 800b666:	4610      	mov	r0, r2
 800b668:	4798      	blx	r3
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d003      	beq.n	800b678 <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b670:	f06f 0304 	mvn.w	r3, #4
 800b674:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b676:	e001      	b.n	800b67c <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b678:	2300      	movs	r3, #0
 800b67a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d107      	bne.n	800b692 <LPS22HB_0_Probe+0x136>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f003 0304 	and.w	r3, r3, #4
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d002      	beq.n	800b692 <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b68c:	f06f 0304 	mvn.w	r3, #4
 800b690:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 800b692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b694:	4618      	mov	r0, r3
 800b696:	3740      	adds	r7, #64	; 0x40
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	08006681 	.word	0x08006681
 800b6a0:	080066fd 	.word	0x080066fd
 800b6a4:	080067b1 	.word	0x080067b1
 800b6a8:	0800674d 	.word	0x0800674d
 800b6ac:	08006815 	.word	0x08006815
 800b6b0:	200016ac 	.word	0x200016ac
 800b6b4:	20001670 	.word	0x20001670
 800b6b8:	20001648 	.word	0x20001648
 800b6bc:	20001668 	.word	0x20001668
 800b6c0:	20000094 	.word	0x20000094
 800b6c4:	2000018c 	.word	0x2000018c
 800b6c8:	20001650 	.word	0x20001650
 800b6cc:	200000b8 	.word	0x200000b8
 800b6d0:	200000a4 	.word	0x200000a4

0800b6d4 <IKS01A2_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b08e      	sub	sp, #56	; 0x38
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2b02      	cmp	r3, #2
 800b6ee:	d06e      	beq.n	800b7ce <IKS01A2_MOTION_SENSOR_Init+0xfa>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2b02      	cmp	r3, #2
 800b6f4:	f200 809d 	bhi.w	800b832 <IKS01A2_MOTION_SENSOR_Init+0x15e>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d003      	beq.n	800b706 <IKS01A2_MOTION_SENSOR_Init+0x32>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2b01      	cmp	r3, #1
 800b702:	d032      	beq.n	800b76a <IKS01A2_MOTION_SENSOR_Init+0x96>
 800b704:	e095      	b.n	800b832 <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 800b706:	6838      	ldr	r0, [r7, #0]
 800b708:	f000 f9aa 	bl	800ba60 <LSM6DSL_0_Probe>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d002      	beq.n	800b718 <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800b712:	f04f 33ff 	mov.w	r3, #4294967295
 800b716:	e0cc      	b.n	800b8b2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b718:	4a68      	ldr	r2, [pc, #416]	; (800b8bc <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b720:	68db      	ldr	r3, [r3, #12]
 800b722:	4967      	ldr	r1, [pc, #412]	; (800b8c0 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b72a:	f107 010c 	add.w	r1, r7, #12
 800b72e:	4610      	mov	r0, r2
 800b730:	4798      	blx	r3
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d002      	beq.n	800b73e <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b738:	f06f 0306 	mvn.w	r3, #6
 800b73c:	e0b9      	b.n	800b8b2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800b73e:	7b3b      	ldrb	r3, [r7, #12]
 800b740:	2b01      	cmp	r3, #1
 800b742:	d103      	bne.n	800b74c <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 800b744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b746:	f043 0302 	orr.w	r3, r3, #2
 800b74a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800b74c:	7b7b      	ldrb	r3, [r7, #13]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d103      	bne.n	800b75a <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800b752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b754:	f043 0301 	orr.w	r3, r3, #1
 800b758:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800b75a:	7bbb      	ldrb	r3, [r7, #14]
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d16c      	bne.n	800b83a <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 800b760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b762:	f043 0304 	orr.w	r3, r3, #4
 800b766:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800b768:	e067      	b.n	800b83a <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 800b76a:	6838      	ldr	r0, [r7, #0]
 800b76c:	f000 fa34 	bl	800bbd8 <LSM303AGR_ACC_0_Probe>
 800b770:	4603      	mov	r3, r0
 800b772:	2b00      	cmp	r3, #0
 800b774:	d002      	beq.n	800b77c <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800b776:	f04f 33ff 	mov.w	r3, #4294967295
 800b77a:	e09a      	b.n	800b8b2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b77c:	4a4f      	ldr	r2, [pc, #316]	; (800b8bc <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	494e      	ldr	r1, [pc, #312]	; (800b8c0 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b78e:	f107 010c 	add.w	r1, r7, #12
 800b792:	4610      	mov	r0, r2
 800b794:	4798      	blx	r3
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d002      	beq.n	800b7a2 <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b79c:	f06f 0306 	mvn.w	r3, #6
 800b7a0:	e087      	b.n	800b8b2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800b7a2:	7b3b      	ldrb	r3, [r7, #12]
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d103      	bne.n	800b7b0 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 800b7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7aa:	f043 0302 	orr.w	r3, r3, #2
 800b7ae:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800b7b0:	7b7b      	ldrb	r3, [r7, #13]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d103      	bne.n	800b7be <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800b7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b8:	f043 0301 	orr.w	r3, r3, #1
 800b7bc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800b7be:	7bbb      	ldrb	r3, [r7, #14]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d13c      	bne.n	800b83e <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 800b7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c6:	f043 0304 	orr.w	r3, r3, #4
 800b7ca:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800b7cc:	e037      	b.n	800b83e <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 800b7ce:	6838      	ldr	r0, [r7, #0]
 800b7d0:	f000 faa6 	bl	800bd20 <LSM303AGR_MAG_0_Probe>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d002      	beq.n	800b7e0 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800b7da:	f04f 33ff 	mov.w	r3, #4294967295
 800b7de:	e068      	b.n	800b8b2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b7e0:	4a36      	ldr	r2, [pc, #216]	; (800b8bc <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7e8:	68db      	ldr	r3, [r3, #12]
 800b7ea:	4935      	ldr	r1, [pc, #212]	; (800b8c0 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b7f2:	f107 010c 	add.w	r1, r7, #12
 800b7f6:	4610      	mov	r0, r2
 800b7f8:	4798      	blx	r3
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d002      	beq.n	800b806 <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b800:	f06f 0306 	mvn.w	r3, #6
 800b804:	e055      	b.n	800b8b2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800b806:	7b3b      	ldrb	r3, [r7, #12]
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d103      	bne.n	800b814 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800b80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80e:	f043 0302 	orr.w	r3, r3, #2
 800b812:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800b814:	7b7b      	ldrb	r3, [r7, #13]
 800b816:	2b01      	cmp	r3, #1
 800b818:	d103      	bne.n	800b822 <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800b81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81c:	f043 0301 	orr.w	r3, r3, #1
 800b820:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800b822:	7bbb      	ldrb	r3, [r7, #14]
 800b824:	2b01      	cmp	r3, #1
 800b826:	d10c      	bne.n	800b842 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 800b828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82a:	f043 0304 	orr.w	r3, r3, #4
 800b82e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800b830:	e007      	b.n	800b842 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b832:	f06f 0301 	mvn.w	r3, #1
 800b836:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800b838:	e004      	b.n	800b844 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800b83a:	bf00      	nop
 800b83c:	e002      	b.n	800b844 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800b83e:	bf00      	nop
 800b840:	e000      	b.n	800b844 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800b842:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b846:	2b00      	cmp	r3, #0
 800b848:	d001      	beq.n	800b84e <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800b84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b84c:	e031      	b.n	800b8b2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 800b84e:	2300      	movs	r3, #0
 800b850:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b852:	e02a      	b.n	800b8aa <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b854:	683a      	ldr	r2, [r7, #0]
 800b856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b858:	4013      	ands	r3, r2
 800b85a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d11e      	bne.n	800b89e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 800b860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b864:	4013      	ands	r3, r2
 800b866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b868:	429a      	cmp	r2, r3
 800b86a:	d118      	bne.n	800b89e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b86c:	4a15      	ldr	r2, [pc, #84]	; (800b8c4 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 800b86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b870:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b874:	4814      	ldr	r0, [pc, #80]	; (800b8c8 <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	4613      	mov	r3, r2
 800b87a:	005b      	lsls	r3, r3, #1
 800b87c:	4413      	add	r3, r2
 800b87e:	440b      	add	r3, r1
 800b880:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	490e      	ldr	r1, [pc, #56]	; (800b8c0 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b88e:	4610      	mov	r0, r2
 800b890:	4798      	blx	r3
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d002      	beq.n	800b89e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b898:	f06f 0304 	mvn.w	r3, #4
 800b89c:	e009      	b.n	800b8b2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800b89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a0:	005b      	lsls	r3, r3, #1
 800b8a2:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 800b8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ac:	2b02      	cmp	r3, #2
 800b8ae:	d9d1      	bls.n	800b854 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 800b8b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3738      	adds	r7, #56	; 0x38
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	20001710 	.word	0x20001710
 800b8c0:	200016e0 	.word	0x200016e0
 800b8c4:	200001a0 	.word	0x200001a0
 800b8c8:	200016ec 	.word	0x200016ec

0800b8cc <IKS01A2_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d903      	bls.n	800b8e4 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b8dc:	f06f 0301 	mvn.w	r3, #1
 800b8e0:	60fb      	str	r3, [r7, #12]
 800b8e2:	e028      	b.n	800b936 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b8e4:	4a16      	ldr	r2, [pc, #88]	; (800b940 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	4013      	ands	r3, r2
 800b8f0:	683a      	ldr	r2, [r7, #0]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d11c      	bne.n	800b930 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b8f6:	4a13      	ldr	r2, [pc, #76]	; (800b944 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b8fe:	4812      	ldr	r0, [pc, #72]	; (800b948 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	4613      	mov	r3, r2
 800b904:	005b      	lsls	r3, r3, #1
 800b906:	4413      	add	r3, r2
 800b908:	440b      	add	r3, r1
 800b90a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	490e      	ldr	r1, [pc, #56]	; (800b94c <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b918:	4610      	mov	r0, r2
 800b91a:	4798      	blx	r3
 800b91c:	4603      	mov	r3, r0
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d003      	beq.n	800b92a <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b922:	f06f 0304 	mvn.w	r3, #4
 800b926:	60fb      	str	r3, [r7, #12]
 800b928:	e005      	b.n	800b936 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b92a:	2300      	movs	r3, #0
 800b92c:	60fb      	str	r3, [r7, #12]
 800b92e:	e002      	b.n	800b936 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b930:	f06f 0301 	mvn.w	r3, #1
 800b934:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b936:	68fb      	ldr	r3, [r7, #12]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	2000171c 	.word	0x2000171c
 800b944:	200001a0 	.word	0x200001a0
 800b948:	200016ec 	.word	0x200016ec
 800b94c:	200016e0 	.word	0x200016e0

0800b950 <IKS01A2_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b086      	sub	sp, #24
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	60b9      	str	r1, [r7, #8]
 800b95a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2b02      	cmp	r3, #2
 800b960:	d903      	bls.n	800b96a <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b962:	f06f 0301 	mvn.w	r3, #1
 800b966:	617b      	str	r3, [r7, #20]
 800b968:	e029      	b.n	800b9be <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b96a:	4a17      	ldr	r2, [pc, #92]	; (800b9c8 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	4013      	ands	r3, r2
 800b976:	68ba      	ldr	r2, [r7, #8]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d11d      	bne.n	800b9b8 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800b97c:	4a13      	ldr	r2, [pc, #76]	; (800b9cc <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b984:	4812      	ldr	r0, [pc, #72]	; (800b9d0 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 800b986:	68fa      	ldr	r2, [r7, #12]
 800b988:	4613      	mov	r3, r2
 800b98a:	005b      	lsls	r3, r3, #1
 800b98c:	4413      	add	r3, r2
 800b98e:	440b      	add	r3, r1
 800b990:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b994:	69db      	ldr	r3, [r3, #28]
 800b996:	490f      	ldr	r1, [pc, #60]	; (800b9d4 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 800b998:	68fa      	ldr	r2, [r7, #12]
 800b99a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b99e:	6879      	ldr	r1, [r7, #4]
 800b9a0:	4610      	mov	r0, r2
 800b9a2:	4798      	blx	r3
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d003      	beq.n	800b9b2 <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9aa:	f06f 0304 	mvn.w	r3, #4
 800b9ae:	617b      	str	r3, [r7, #20]
 800b9b0:	e005      	b.n	800b9be <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	617b      	str	r3, [r7, #20]
 800b9b6:	e002      	b.n	800b9be <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b9b8:	f06f 0301 	mvn.w	r3, #1
 800b9bc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b9be:	697b      	ldr	r3, [r7, #20]
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3718      	adds	r7, #24
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	2000171c 	.word	0x2000171c
 800b9cc:	200001a0 	.word	0x200001a0
 800b9d0:	200016ec 	.word	0x200016ec
 800b9d4:	200016e0 	.word	0x200016e0

0800b9d8 <IKS01A2_MOTION_SENSOR_GetAxesRaw>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes raw data structure
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_GetAxesRaw(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_AxesRaw_t *Axes)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b086      	sub	sp, #24
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	d903      	bls.n	800b9f2 <IKS01A2_MOTION_SENSOR_GetAxesRaw+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b9ea:	f06f 0301 	mvn.w	r3, #1
 800b9ee:	617b      	str	r3, [r7, #20]
 800b9f0:	e029      	b.n	800ba46 <IKS01A2_MOTION_SENSOR_GetAxesRaw+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b9f2:	4a17      	ldr	r2, [pc, #92]	; (800ba50 <IKS01A2_MOTION_SENSOR_GetAxesRaw+0x78>)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	4013      	ands	r3, r2
 800b9fe:	68ba      	ldr	r2, [r7, #8]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d11d      	bne.n	800ba40 <IKS01A2_MOTION_SENSOR_GetAxesRaw+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxesRaw(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800ba04:	4a13      	ldr	r2, [pc, #76]	; (800ba54 <IKS01A2_MOTION_SENSOR_GetAxesRaw+0x7c>)
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ba0c:	4812      	ldr	r0, [pc, #72]	; (800ba58 <IKS01A2_MOTION_SENSOR_GetAxesRaw+0x80>)
 800ba0e:	68fa      	ldr	r2, [r7, #12]
 800ba10:	4613      	mov	r3, r2
 800ba12:	005b      	lsls	r3, r3, #1
 800ba14:	4413      	add	r3, r2
 800ba16:	440b      	add	r3, r1
 800ba18:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800ba1c:	6a1b      	ldr	r3, [r3, #32]
 800ba1e:	490f      	ldr	r1, [pc, #60]	; (800ba5c <IKS01A2_MOTION_SENSOR_GetAxesRaw+0x84>)
 800ba20:	68fa      	ldr	r2, [r7, #12]
 800ba22:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ba26:	6879      	ldr	r1, [r7, #4]
 800ba28:	4610      	mov	r0, r2
 800ba2a:	4798      	blx	r3
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d003      	beq.n	800ba3a <IKS01A2_MOTION_SENSOR_GetAxesRaw+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba32:	f06f 0304 	mvn.w	r3, #4
 800ba36:	617b      	str	r3, [r7, #20]
 800ba38:	e005      	b.n	800ba46 <IKS01A2_MOTION_SENSOR_GetAxesRaw+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	617b      	str	r3, [r7, #20]
 800ba3e:	e002      	b.n	800ba46 <IKS01A2_MOTION_SENSOR_GetAxesRaw+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800ba40:	f06f 0301 	mvn.w	r3, #1
 800ba44:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800ba46:	697b      	ldr	r3, [r7, #20]
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3718      	adds	r7, #24
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	2000171c 	.word	0x2000171c
 800ba54:	200001a0 	.word	0x200001a0
 800ba58:	200016ec 	.word	0x200016ec
 800ba5c:	200016e0 	.word	0x200016e0

0800ba60 <LSM6DSL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b094      	sub	sp, #80	; 0x50
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 800ba70:	23d7      	movs	r3, #215	; 0xd7
 800ba72:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A2_I2C_Init;
 800ba76:	4b4a      	ldr	r3, [pc, #296]	; (800bba0 <LSM6DSL_0_Probe+0x140>)
 800ba78:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800ba7a:	4b4a      	ldr	r3, [pc, #296]	; (800bba4 <LSM6DSL_0_Probe+0x144>)
 800ba7c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800ba7e:	4b4a      	ldr	r3, [pc, #296]	; (800bba8 <LSM6DSL_0_Probe+0x148>)
 800ba80:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800ba82:	4b4a      	ldr	r3, [pc, #296]	; (800bbac <LSM6DSL_0_Probe+0x14c>)
 800ba84:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800ba86:	4b4a      	ldr	r3, [pc, #296]	; (800bbb0 <LSM6DSL_0_Probe+0x150>)
 800ba88:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 800ba8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba8e:	4619      	mov	r1, r3
 800ba90:	4848      	ldr	r0, [pc, #288]	; (800bbb4 <LSM6DSL_0_Probe+0x154>)
 800ba92:	f7fe f849 	bl	8009b28 <LSM6DSL_RegisterBusIO>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d003      	beq.n	800baa4 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba9c:	f06f 0306 	mvn.w	r3, #6
 800baa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800baa2:	e077      	b.n	800bb94 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 800baa4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800baa8:	4619      	mov	r1, r3
 800baaa:	4842      	ldr	r0, [pc, #264]	; (800bbb4 <LSM6DSL_0_Probe+0x154>)
 800baac:	f7fe f936 	bl	8009d1c <LSM6DSL_ReadID>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d003      	beq.n	800babe <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bab6:	f06f 0306 	mvn.w	r3, #6
 800baba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800babc:	e06a      	b.n	800bb94 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 800babe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bac2:	2b6a      	cmp	r3, #106	; 0x6a
 800bac4:	d003      	beq.n	800bace <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bac6:	f06f 0306 	mvn.w	r3, #6
 800baca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bacc:	e062      	b.n	800bb94 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 800bace:	f107 030c 	add.w	r3, r7, #12
 800bad2:	4619      	mov	r1, r3
 800bad4:	4837      	ldr	r0, [pc, #220]	; (800bbb4 <LSM6DSL_0_Probe+0x154>)
 800bad6:	f7fe f937 	bl	8009d48 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800bada:	7b7b      	ldrb	r3, [r7, #13]
 800badc:	461a      	mov	r2, r3
 800bade:	7b3b      	ldrb	r3, [r7, #12]
 800bae0:	005b      	lsls	r3, r3, #1
 800bae2:	431a      	orrs	r2, r3
 800bae4:	7bbb      	ldrb	r3, [r7, #14]
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	4313      	orrs	r3, r2
 800baea:	4a33      	ldr	r2, [pc, #204]	; (800bbb8 <LSM6DSL_0_Probe+0x158>)
 800baec:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 800baee:	4b33      	ldr	r3, [pc, #204]	; (800bbbc <LSM6DSL_0_Probe+0x15c>)
 800baf0:	4a30      	ldr	r2, [pc, #192]	; (800bbb4 <LSM6DSL_0_Probe+0x154>)
 800baf2:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 800baf4:	4b32      	ldr	r3, [pc, #200]	; (800bbc0 <LSM6DSL_0_Probe+0x160>)
 800baf6:	4a33      	ldr	r2, [pc, #204]	; (800bbc4 <LSM6DSL_0_Probe+0x164>)
 800baf8:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800bafa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d11d      	bne.n	800bb3c <LSM6DSL_0_Probe+0xdc>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f003 0301 	and.w	r3, r3, #1
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d018      	beq.n	800bb3c <LSM6DSL_0_Probe+0xdc>
 800bb0a:	7b7b      	ldrb	r3, [r7, #13]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d115      	bne.n	800bb3c <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 800bb10:	4b2d      	ldr	r3, [pc, #180]	; (800bbc8 <LSM6DSL_0_Probe+0x168>)
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	4a2d      	ldr	r2, [pc, #180]	; (800bbcc <LSM6DSL_0_Probe+0x16c>)
 800bb16:	492e      	ldr	r1, [pc, #184]	; (800bbd0 <LSM6DSL_0_Probe+0x170>)
 800bb18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 800bb1c:	4b28      	ldr	r3, [pc, #160]	; (800bbc0 <LSM6DSL_0_Probe+0x160>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a26      	ldr	r2, [pc, #152]	; (800bbbc <LSM6DSL_0_Probe+0x15c>)
 800bb24:	6812      	ldr	r2, [r2, #0]
 800bb26:	4610      	mov	r0, r2
 800bb28:	4798      	blx	r3
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d003      	beq.n	800bb38 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb30:	f06f 0304 	mvn.w	r3, #4
 800bb34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb36:	e001      	b.n	800bb3c <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800bb3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d11d      	bne.n	800bb7e <LSM6DSL_0_Probe+0x11e>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f003 0302 	and.w	r3, r3, #2
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d018      	beq.n	800bb7e <LSM6DSL_0_Probe+0x11e>
 800bb4c:	7b3b      	ldrb	r3, [r7, #12]
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d115      	bne.n	800bb7e <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bb52:	4b1d      	ldr	r3, [pc, #116]	; (800bbc8 <LSM6DSL_0_Probe+0x168>)
 800bb54:	689b      	ldr	r3, [r3, #8]
 800bb56:	4a1d      	ldr	r2, [pc, #116]	; (800bbcc <LSM6DSL_0_Probe+0x16c>)
 800bb58:	491e      	ldr	r1, [pc, #120]	; (800bbd4 <LSM6DSL_0_Probe+0x174>)
 800bb5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 800bb5e:	4b18      	ldr	r3, [pc, #96]	; (800bbc0 <LSM6DSL_0_Probe+0x160>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a15      	ldr	r2, [pc, #84]	; (800bbbc <LSM6DSL_0_Probe+0x15c>)
 800bb66:	6812      	ldr	r2, [r2, #0]
 800bb68:	4610      	mov	r0, r2
 800bb6a:	4798      	blx	r3
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d003      	beq.n	800bb7a <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb72:	f06f 0304 	mvn.w	r3, #4
 800bb76:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb78:	e001      	b.n	800bb7e <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800bb7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d107      	bne.n	800bb94 <LSM6DSL_0_Probe+0x134>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f003 0304 	and.w	r3, r3, #4
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d002      	beq.n	800bb94 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb8e:	f06f 0304 	mvn.w	r3, #4
 800bb92:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 800bb94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3750      	adds	r7, #80	; 0x50
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	08006681 	.word	0x08006681
 800bba4:	080066fd 	.word	0x080066fd
 800bba8:	080067b1 	.word	0x080067b1
 800bbac:	0800674d 	.word	0x0800674d
 800bbb0:	08006815 	.word	0x08006815
 800bbb4:	20001728 	.word	0x20001728
 800bbb8:	2000171c 	.word	0x2000171c
 800bbbc:	200016e0 	.word	0x200016e0
 800bbc0:	20001710 	.word	0x20001710
 800bbc4:	20000134 	.word	0x20000134
 800bbc8:	200001a0 	.word	0x200001a0
 800bbcc:	200016ec 	.word	0x200016ec
 800bbd0:	20000168 	.word	0x20000168
 800bbd4:	20000144 	.word	0x20000144

0800bbd8 <LSM303AGR_ACC_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval error status
  */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b094      	sub	sp, #80	; 0x50
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 800bbe8:	2333      	movs	r3, #51	; 0x33
 800bbea:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A2_I2C_Init;
 800bbee:	4b3f      	ldr	r3, [pc, #252]	; (800bcec <LSM303AGR_ACC_0_Probe+0x114>)
 800bbf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800bbf2:	4b3f      	ldr	r3, [pc, #252]	; (800bcf0 <LSM303AGR_ACC_0_Probe+0x118>)
 800bbf4:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800bbf6:	4b3f      	ldr	r3, [pc, #252]	; (800bcf4 <LSM303AGR_ACC_0_Probe+0x11c>)
 800bbf8:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800bbfa:	4b3f      	ldr	r3, [pc, #252]	; (800bcf8 <LSM303AGR_ACC_0_Probe+0x120>)
 800bbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800bbfe:	4b3f      	ldr	r3, [pc, #252]	; (800bcfc <LSM303AGR_ACC_0_Probe+0x124>)
 800bc00:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 800bc02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc06:	4619      	mov	r1, r3
 800bc08:	483d      	ldr	r0, [pc, #244]	; (800bd00 <LSM303AGR_ACC_0_Probe+0x128>)
 800bc0a:	f7fc fbd3 	bl	80083b4 <LSM303AGR_ACC_RegisterBusIO>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d003      	beq.n	800bc1c <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bc14:	f06f 0306 	mvn.w	r3, #6
 800bc18:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc1a:	e062      	b.n	800bce2 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 800bc1c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800bc20:	4619      	mov	r1, r3
 800bc22:	4837      	ldr	r0, [pc, #220]	; (800bd00 <LSM303AGR_ACC_0_Probe+0x128>)
 800bc24:	f7fc fc8b 	bl	800853e <LSM303AGR_ACC_ReadID>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d003      	beq.n	800bc36 <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bc2e:	f06f 0306 	mvn.w	r3, #6
 800bc32:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc34:	e055      	b.n	800bce2 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 800bc36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc3a:	2b33      	cmp	r3, #51	; 0x33
 800bc3c:	d003      	beq.n	800bc46 <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bc3e:	f06f 0306 	mvn.w	r3, #6
 800bc42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc44:	e04d      	b.n	800bce2 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 800bc46:	f107 030c 	add.w	r3, r7, #12
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	482c      	ldr	r0, [pc, #176]	; (800bd00 <LSM303AGR_ACC_0_Probe+0x128>)
 800bc4e:	f7fc fc8d 	bl	800856c <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800bc52:	7b7b      	ldrb	r3, [r7, #13]
 800bc54:	461a      	mov	r2, r3
 800bc56:	7b3b      	ldrb	r3, [r7, #12]
 800bc58:	005b      	lsls	r3, r3, #1
 800bc5a:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 800bc5c:	7bbb      	ldrb	r3, [r7, #14]
 800bc5e:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800bc60:	4313      	orrs	r3, r2
 800bc62:	4a28      	ldr	r2, [pc, #160]	; (800bd04 <LSM303AGR_ACC_0_Probe+0x12c>)
 800bc64:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 800bc66:	4b28      	ldr	r3, [pc, #160]	; (800bd08 <LSM303AGR_ACC_0_Probe+0x130>)
 800bc68:	4a25      	ldr	r2, [pc, #148]	; (800bd00 <LSM303AGR_ACC_0_Probe+0x128>)
 800bc6a:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 800bc6c:	4b27      	ldr	r3, [pc, #156]	; (800bd0c <LSM303AGR_ACC_0_Probe+0x134>)
 800bc6e:	4a28      	ldr	r2, [pc, #160]	; (800bd10 <LSM303AGR_ACC_0_Probe+0x138>)
 800bc70:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800bc72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d11e      	bne.n	800bcb6 <LSM303AGR_ACC_0_Probe+0xde>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f003 0302 	and.w	r3, r3, #2
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d019      	beq.n	800bcb6 <LSM303AGR_ACC_0_Probe+0xde>
 800bc82:	7b3b      	ldrb	r3, [r7, #12]
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d116      	bne.n	800bcb6 <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bc88:	4b22      	ldr	r3, [pc, #136]	; (800bd14 <LSM303AGR_ACC_0_Probe+0x13c>)
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	4a22      	ldr	r2, [pc, #136]	; (800bd18 <LSM303AGR_ACC_0_Probe+0x140>)
 800bc8e:	3303      	adds	r3, #3
 800bc90:	4922      	ldr	r1, [pc, #136]	; (800bd1c <LSM303AGR_ACC_0_Probe+0x144>)
 800bc92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                                 void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 800bc96:	4b1d      	ldr	r3, [pc, #116]	; (800bd0c <LSM303AGR_ACC_0_Probe+0x134>)
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a1a      	ldr	r2, [pc, #104]	; (800bd08 <LSM303AGR_ACC_0_Probe+0x130>)
 800bc9e:	6852      	ldr	r2, [r2, #4]
 800bca0:	4610      	mov	r0, r2
 800bca2:	4798      	blx	r3
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d003      	beq.n	800bcb2 <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bcaa:	f06f 0304 	mvn.w	r3, #4
 800bcae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bcb0:	e001      	b.n	800bcb6 <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800bcb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d107      	bne.n	800bccc <LSM303AGR_ACC_0_Probe+0xf4>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f003 0301 	and.w	r3, r3, #1
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d002      	beq.n	800bccc <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bcc6:	f06f 0304 	mvn.w	r3, #4
 800bcca:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800bccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d107      	bne.n	800bce2 <LSM303AGR_ACC_0_Probe+0x10a>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f003 0304 	and.w	r3, r3, #4
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d002      	beq.n	800bce2 <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bcdc:	f06f 0304 	mvn.w	r3, #4
 800bce0:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 800bce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3750      	adds	r7, #80	; 0x50
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	08006681 	.word	0x08006681
 800bcf0:	080066fd 	.word	0x080066fd
 800bcf4:	080067b1 	.word	0x080067b1
 800bcf8:	0800674d 	.word	0x0800674d
 800bcfc:	08006815 	.word	0x08006815
 800bd00:	20001760 	.word	0x20001760
 800bd04:	2000171c 	.word	0x2000171c
 800bd08:	200016e0 	.word	0x200016e0
 800bd0c:	20001710 	.word	0x20001710
 800bd10:	200000cc 	.word	0x200000cc
 800bd14:	200001a0 	.word	0x200001a0
 800bd18:	200016ec 	.word	0x200016ec
 800bd1c:	200000dc 	.word	0x200000dc

0800bd20 <LSM303AGR_MAG_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 2 if component ID is OK
  * @retval error status
  */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b094      	sub	sp, #80	; 0x50
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 800bd30:	233d      	movs	r3, #61	; 0x3d
 800bd32:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A2_I2C_Init;
 800bd36:	4b3f      	ldr	r3, [pc, #252]	; (800be34 <LSM303AGR_MAG_0_Probe+0x114>)
 800bd38:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800bd3a:	4b3f      	ldr	r3, [pc, #252]	; (800be38 <LSM303AGR_MAG_0_Probe+0x118>)
 800bd3c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800bd3e:	4b3f      	ldr	r3, [pc, #252]	; (800be3c <LSM303AGR_MAG_0_Probe+0x11c>)
 800bd40:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800bd42:	4b3f      	ldr	r3, [pc, #252]	; (800be40 <LSM303AGR_MAG_0_Probe+0x120>)
 800bd44:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800bd46:	4b3f      	ldr	r3, [pc, #252]	; (800be44 <LSM303AGR_MAG_0_Probe+0x124>)
 800bd48:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 800bd4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bd4e:	4619      	mov	r1, r3
 800bd50:	483d      	ldr	r0, [pc, #244]	; (800be48 <LSM303AGR_MAG_0_Probe+0x128>)
 800bd52:	f7fc fef9 	bl	8008b48 <LSM303AGR_MAG_RegisterBusIO>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d003      	beq.n	800bd64 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bd5c:	f06f 0306 	mvn.w	r3, #6
 800bd60:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd62:	e062      	b.n	800be2a <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 800bd64:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800bd68:	4619      	mov	r1, r3
 800bd6a:	4837      	ldr	r0, [pc, #220]	; (800be48 <LSM303AGR_MAG_0_Probe+0x128>)
 800bd6c:	f7fc ffa3 	bl	8008cb6 <LSM303AGR_MAG_ReadID>
 800bd70:	4603      	mov	r3, r0
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d003      	beq.n	800bd7e <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bd76:	f06f 0306 	mvn.w	r3, #6
 800bd7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd7c:	e055      	b.n	800be2a <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 800bd7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd82:	2b40      	cmp	r3, #64	; 0x40
 800bd84:	d003      	beq.n	800bd8e <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bd86:	f06f 0306 	mvn.w	r3, #6
 800bd8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd8c:	e04d      	b.n	800be2a <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 800bd8e:	f107 030c 	add.w	r3, r7, #12
 800bd92:	4619      	mov	r1, r3
 800bd94:	482c      	ldr	r0, [pc, #176]	; (800be48 <LSM303AGR_MAG_0_Probe+0x128>)
 800bd96:	f7fc ffa5 	bl	8008ce4 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800bd9a:	7b7b      	ldrb	r3, [r7, #13]
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	7b3b      	ldrb	r3, [r7, #12]
 800bda0:	005b      	lsls	r3, r3, #1
 800bda2:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 800bda4:	7bbb      	ldrb	r3, [r7, #14]
 800bda6:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	4a28      	ldr	r2, [pc, #160]	; (800be4c <LSM303AGR_MAG_0_Probe+0x12c>)
 800bdac:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 800bdae:	4b28      	ldr	r3, [pc, #160]	; (800be50 <LSM303AGR_MAG_0_Probe+0x130>)
 800bdb0:	4a25      	ldr	r2, [pc, #148]	; (800be48 <LSM303AGR_MAG_0_Probe+0x128>)
 800bdb2:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 800bdb4:	4b27      	ldr	r3, [pc, #156]	; (800be54 <LSM303AGR_MAG_0_Probe+0x134>)
 800bdb6:	4a28      	ldr	r2, [pc, #160]	; (800be58 <LSM303AGR_MAG_0_Probe+0x138>)
 800bdb8:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800bdba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d11e      	bne.n	800bdfe <LSM303AGR_MAG_0_Probe+0xde>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f003 0304 	and.w	r3, r3, #4
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d019      	beq.n	800bdfe <LSM303AGR_MAG_0_Probe+0xde>
 800bdca:	7bbb      	ldrb	r3, [r7, #14]
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d116      	bne.n	800bdfe <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bdd0:	4b22      	ldr	r3, [pc, #136]	; (800be5c <LSM303AGR_MAG_0_Probe+0x13c>)
 800bdd2:	691b      	ldr	r3, [r3, #16]
 800bdd4:	4a22      	ldr	r2, [pc, #136]	; (800be60 <LSM303AGR_MAG_0_Probe+0x140>)
 800bdd6:	3306      	adds	r3, #6
 800bdd8:	4922      	ldr	r1, [pc, #136]	; (800be64 <LSM303AGR_MAG_0_Probe+0x144>)
 800bdda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                                void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 800bdde:	4b1d      	ldr	r3, [pc, #116]	; (800be54 <LSM303AGR_MAG_0_Probe+0x134>)
 800bde0:	689b      	ldr	r3, [r3, #8]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a1a      	ldr	r2, [pc, #104]	; (800be50 <LSM303AGR_MAG_0_Probe+0x130>)
 800bde6:	6892      	ldr	r2, [r2, #8]
 800bde8:	4610      	mov	r0, r2
 800bdea:	4798      	blx	r3
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d003      	beq.n	800bdfa <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bdf2:	f06f 0304 	mvn.w	r3, #4
 800bdf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdf8:	e001      	b.n	800bdfe <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800bdfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be00:	2b00      	cmp	r3, #0
 800be02:	d107      	bne.n	800be14 <LSM303AGR_MAG_0_Probe+0xf4>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f003 0302 	and.w	r3, r3, #2
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d002      	beq.n	800be14 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800be0e:	f06f 0304 	mvn.w	r3, #4
 800be12:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800be14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be16:	2b00      	cmp	r3, #0
 800be18:	d107      	bne.n	800be2a <LSM303AGR_MAG_0_Probe+0x10a>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f003 0301 	and.w	r3, r3, #1
 800be20:	2b00      	cmp	r3, #0
 800be22:	d002      	beq.n	800be2a <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800be24:	f06f 0304 	mvn.w	r3, #4
 800be28:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 800be2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3750      	adds	r7, #80	; 0x50
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	08006681 	.word	0x08006681
 800be38:	080066fd 	.word	0x080066fd
 800be3c:	080067b1 	.word	0x080067b1
 800be40:	0800674d 	.word	0x0800674d
 800be44:	08006815 	.word	0x08006815
 800be48:	20001794 	.word	0x20001794
 800be4c:	2000171c 	.word	0x2000171c
 800be50:	200016e0 	.word	0x200016e0
 800be54:	20001710 	.word	0x20001710
 800be58:	20000100 	.word	0x20000100
 800be5c:	200001a0 	.word	0x200001a0
 800be60:	200016ec 	.word	0x200016ec
 800be64:	20000110 	.word	0x20000110

0800be68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800be6c:	2003      	movs	r0, #3
 800be6e:	f000 f8fa 	bl	800c066 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800be72:	200f      	movs	r0, #15
 800be74:	f7fa fb74 	bl	8006560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800be78:	f7fa fa70 	bl	800635c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	bd80      	pop	{r7, pc}
	...

0800be84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800be84:	b480      	push	{r7}
 800be86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800be88:	4b06      	ldr	r3, [pc, #24]	; (800bea4 <HAL_IncTick+0x20>)
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	461a      	mov	r2, r3
 800be8e:	4b06      	ldr	r3, [pc, #24]	; (800bea8 <HAL_IncTick+0x24>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4413      	add	r3, r2
 800be94:	4a04      	ldr	r2, [pc, #16]	; (800bea8 <HAL_IncTick+0x24>)
 800be96:	6013      	str	r3, [r2, #0]
}
 800be98:	bf00      	nop
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	200001b8 	.word	0x200001b8
 800bea8:	200017c8 	.word	0x200017c8

0800beac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800beac:	b480      	push	{r7}
 800beae:	af00      	add	r7, sp, #0
  return uwTick;
 800beb0:	4b03      	ldr	r3, [pc, #12]	; (800bec0 <HAL_GetTick+0x14>)
 800beb2:	681b      	ldr	r3, [r3, #0]
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop
 800bec0:	200017c8 	.word	0x200017c8

0800bec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800becc:	f7ff ffee 	bl	800beac <HAL_GetTick>
 800bed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bedc:	d005      	beq.n	800beea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bede:	4b0a      	ldr	r3, [pc, #40]	; (800bf08 <HAL_Delay+0x44>)
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	461a      	mov	r2, r3
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	4413      	add	r3, r2
 800bee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800beea:	bf00      	nop
 800beec:	f7ff ffde 	bl	800beac <HAL_GetTick>
 800bef0:	4602      	mov	r2, r0
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	1ad3      	subs	r3, r2, r3
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d8f7      	bhi.n	800beec <HAL_Delay+0x28>
  {
  }
}
 800befc:	bf00      	nop
 800befe:	bf00      	nop
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	200001b8 	.word	0x200001b8

0800bf0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b085      	sub	sp, #20
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f003 0307 	and.w	r3, r3, #7
 800bf1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bf1c:	4b0b      	ldr	r3, [pc, #44]	; (800bf4c <__NVIC_SetPriorityGrouping+0x40>)
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bf22:	68ba      	ldr	r2, [r7, #8]
 800bf24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bf28:	4013      	ands	r3, r2
 800bf2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800bf34:	4b06      	ldr	r3, [pc, #24]	; (800bf50 <__NVIC_SetPriorityGrouping+0x44>)
 800bf36:	4313      	orrs	r3, r2
 800bf38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bf3a:	4a04      	ldr	r2, [pc, #16]	; (800bf4c <__NVIC_SetPriorityGrouping+0x40>)
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	60d3      	str	r3, [r2, #12]
}
 800bf40:	bf00      	nop
 800bf42:	3714      	adds	r7, #20
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr
 800bf4c:	e000ed00 	.word	0xe000ed00
 800bf50:	05fa0000 	.word	0x05fa0000

0800bf54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bf54:	b480      	push	{r7}
 800bf56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bf58:	4b04      	ldr	r3, [pc, #16]	; (800bf6c <__NVIC_GetPriorityGrouping+0x18>)
 800bf5a:	68db      	ldr	r3, [r3, #12]
 800bf5c:	0a1b      	lsrs	r3, r3, #8
 800bf5e:	f003 0307 	and.w	r3, r3, #7
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr
 800bf6c:	e000ed00 	.word	0xe000ed00

0800bf70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b083      	sub	sp, #12
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	4603      	mov	r3, r0
 800bf78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bf7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	db0b      	blt.n	800bf9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bf82:	79fb      	ldrb	r3, [r7, #7]
 800bf84:	f003 021f 	and.w	r2, r3, #31
 800bf88:	4907      	ldr	r1, [pc, #28]	; (800bfa8 <__NVIC_EnableIRQ+0x38>)
 800bf8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf8e:	095b      	lsrs	r3, r3, #5
 800bf90:	2001      	movs	r0, #1
 800bf92:	fa00 f202 	lsl.w	r2, r0, r2
 800bf96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800bf9a:	bf00      	nop
 800bf9c:	370c      	adds	r7, #12
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	e000e100 	.word	0xe000e100

0800bfac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b083      	sub	sp, #12
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	6039      	str	r1, [r7, #0]
 800bfb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bfb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	db0a      	blt.n	800bfd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	b2da      	uxtb	r2, r3
 800bfc4:	490c      	ldr	r1, [pc, #48]	; (800bff8 <__NVIC_SetPriority+0x4c>)
 800bfc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfca:	0112      	lsls	r2, r2, #4
 800bfcc:	b2d2      	uxtb	r2, r2
 800bfce:	440b      	add	r3, r1
 800bfd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bfd4:	e00a      	b.n	800bfec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	b2da      	uxtb	r2, r3
 800bfda:	4908      	ldr	r1, [pc, #32]	; (800bffc <__NVIC_SetPriority+0x50>)
 800bfdc:	79fb      	ldrb	r3, [r7, #7]
 800bfde:	f003 030f 	and.w	r3, r3, #15
 800bfe2:	3b04      	subs	r3, #4
 800bfe4:	0112      	lsls	r2, r2, #4
 800bfe6:	b2d2      	uxtb	r2, r2
 800bfe8:	440b      	add	r3, r1
 800bfea:	761a      	strb	r2, [r3, #24]
}
 800bfec:	bf00      	nop
 800bfee:	370c      	adds	r7, #12
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr
 800bff8:	e000e100 	.word	0xe000e100
 800bffc:	e000ed00 	.word	0xe000ed00

0800c000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c000:	b480      	push	{r7}
 800c002:	b089      	sub	sp, #36	; 0x24
 800c004:	af00      	add	r7, sp, #0
 800c006:	60f8      	str	r0, [r7, #12]
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f003 0307 	and.w	r3, r3, #7
 800c012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	f1c3 0307 	rsb	r3, r3, #7
 800c01a:	2b04      	cmp	r3, #4
 800c01c:	bf28      	it	cs
 800c01e:	2304      	movcs	r3, #4
 800c020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	3304      	adds	r3, #4
 800c026:	2b06      	cmp	r3, #6
 800c028:	d902      	bls.n	800c030 <NVIC_EncodePriority+0x30>
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	3b03      	subs	r3, #3
 800c02e:	e000      	b.n	800c032 <NVIC_EncodePriority+0x32>
 800c030:	2300      	movs	r3, #0
 800c032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c034:	f04f 32ff 	mov.w	r2, #4294967295
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	fa02 f303 	lsl.w	r3, r2, r3
 800c03e:	43da      	mvns	r2, r3
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	401a      	ands	r2, r3
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c048:	f04f 31ff 	mov.w	r1, #4294967295
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	fa01 f303 	lsl.w	r3, r1, r3
 800c052:	43d9      	mvns	r1, r3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c058:	4313      	orrs	r3, r2
         );
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3724      	adds	r7, #36	; 0x24
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr

0800c066 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b082      	sub	sp, #8
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f7ff ff4c 	bl	800bf0c <__NVIC_SetPriorityGrouping>
}
 800c074:	bf00      	nop
 800c076:	3708      	adds	r7, #8
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b086      	sub	sp, #24
 800c080:	af00      	add	r7, sp, #0
 800c082:	4603      	mov	r3, r0
 800c084:	60b9      	str	r1, [r7, #8]
 800c086:	607a      	str	r2, [r7, #4]
 800c088:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c08a:	2300      	movs	r3, #0
 800c08c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c08e:	f7ff ff61 	bl	800bf54 <__NVIC_GetPriorityGrouping>
 800c092:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	68b9      	ldr	r1, [r7, #8]
 800c098:	6978      	ldr	r0, [r7, #20]
 800c09a:	f7ff ffb1 	bl	800c000 <NVIC_EncodePriority>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0a4:	4611      	mov	r1, r2
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7ff ff80 	bl	800bfac <__NVIC_SetPriority>
}
 800c0ac:	bf00      	nop
 800c0ae:	3718      	adds	r7, #24
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c0be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7ff ff54 	bl	800bf70 <__NVIC_EnableIRQ>
}
 800c0c8:	bf00      	nop
 800c0ca:	3708      	adds	r7, #8
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b089      	sub	sp, #36	; 0x24
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	61fb      	str	r3, [r7, #28]
 800c0ee:	e175      	b.n	800c3dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c0f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	697a      	ldr	r2, [r7, #20]
 800c100:	4013      	ands	r3, r2
 800c102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c104:	693a      	ldr	r2, [r7, #16]
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	429a      	cmp	r2, r3
 800c10a:	f040 8164 	bne.w	800c3d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	f003 0303 	and.w	r3, r3, #3
 800c116:	2b01      	cmp	r3, #1
 800c118:	d005      	beq.n	800c126 <HAL_GPIO_Init+0x56>
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	f003 0303 	and.w	r3, r3, #3
 800c122:	2b02      	cmp	r3, #2
 800c124:	d130      	bne.n	800c188 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	005b      	lsls	r3, r3, #1
 800c130:	2203      	movs	r2, #3
 800c132:	fa02 f303 	lsl.w	r3, r2, r3
 800c136:	43db      	mvns	r3, r3
 800c138:	69ba      	ldr	r2, [r7, #24]
 800c13a:	4013      	ands	r3, r2
 800c13c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	68da      	ldr	r2, [r3, #12]
 800c142:	69fb      	ldr	r3, [r7, #28]
 800c144:	005b      	lsls	r3, r3, #1
 800c146:	fa02 f303 	lsl.w	r3, r2, r3
 800c14a:	69ba      	ldr	r2, [r7, #24]
 800c14c:	4313      	orrs	r3, r2
 800c14e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	69ba      	ldr	r2, [r7, #24]
 800c154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c15c:	2201      	movs	r2, #1
 800c15e:	69fb      	ldr	r3, [r7, #28]
 800c160:	fa02 f303 	lsl.w	r3, r2, r3
 800c164:	43db      	mvns	r3, r3
 800c166:	69ba      	ldr	r2, [r7, #24]
 800c168:	4013      	ands	r3, r2
 800c16a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	091b      	lsrs	r3, r3, #4
 800c172:	f003 0201 	and.w	r2, r3, #1
 800c176:	69fb      	ldr	r3, [r7, #28]
 800c178:	fa02 f303 	lsl.w	r3, r2, r3
 800c17c:	69ba      	ldr	r2, [r7, #24]
 800c17e:	4313      	orrs	r3, r2
 800c180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	69ba      	ldr	r2, [r7, #24]
 800c186:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	f003 0303 	and.w	r3, r3, #3
 800c190:	2b03      	cmp	r3, #3
 800c192:	d017      	beq.n	800c1c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800c19a:	69fb      	ldr	r3, [r7, #28]
 800c19c:	005b      	lsls	r3, r3, #1
 800c19e:	2203      	movs	r2, #3
 800c1a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c1a4:	43db      	mvns	r3, r3
 800c1a6:	69ba      	ldr	r2, [r7, #24]
 800c1a8:	4013      	ands	r3, r2
 800c1aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	689a      	ldr	r2, [r3, #8]
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	005b      	lsls	r3, r3, #1
 800c1b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1b8:	69ba      	ldr	r2, [r7, #24]
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	69ba      	ldr	r2, [r7, #24]
 800c1c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	f003 0303 	and.w	r3, r3, #3
 800c1cc:	2b02      	cmp	r3, #2
 800c1ce:	d123      	bne.n	800c218 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800c1d0:	69fb      	ldr	r3, [r7, #28]
 800c1d2:	08da      	lsrs	r2, r3, #3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	3208      	adds	r2, #8
 800c1d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	f003 0307 	and.w	r3, r3, #7
 800c1e4:	009b      	lsls	r3, r3, #2
 800c1e6:	220f      	movs	r2, #15
 800c1e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c1ec:	43db      	mvns	r3, r3
 800c1ee:	69ba      	ldr	r2, [r7, #24]
 800c1f0:	4013      	ands	r3, r2
 800c1f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	691a      	ldr	r2, [r3, #16]
 800c1f8:	69fb      	ldr	r3, [r7, #28]
 800c1fa:	f003 0307 	and.w	r3, r3, #7
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	fa02 f303 	lsl.w	r3, r2, r3
 800c204:	69ba      	ldr	r2, [r7, #24]
 800c206:	4313      	orrs	r3, r2
 800c208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	08da      	lsrs	r2, r3, #3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	3208      	adds	r2, #8
 800c212:	69b9      	ldr	r1, [r7, #24]
 800c214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c21e:	69fb      	ldr	r3, [r7, #28]
 800c220:	005b      	lsls	r3, r3, #1
 800c222:	2203      	movs	r2, #3
 800c224:	fa02 f303 	lsl.w	r3, r2, r3
 800c228:	43db      	mvns	r3, r3
 800c22a:	69ba      	ldr	r2, [r7, #24]
 800c22c:	4013      	ands	r3, r2
 800c22e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	f003 0203 	and.w	r2, r3, #3
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	005b      	lsls	r3, r3, #1
 800c23c:	fa02 f303 	lsl.w	r3, r2, r3
 800c240:	69ba      	ldr	r2, [r7, #24]
 800c242:	4313      	orrs	r3, r2
 800c244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	69ba      	ldr	r2, [r7, #24]
 800c24a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c254:	2b00      	cmp	r3, #0
 800c256:	f000 80be 	beq.w	800c3d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c25a:	4b66      	ldr	r3, [pc, #408]	; (800c3f4 <HAL_GPIO_Init+0x324>)
 800c25c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c25e:	4a65      	ldr	r2, [pc, #404]	; (800c3f4 <HAL_GPIO_Init+0x324>)
 800c260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c264:	6453      	str	r3, [r2, #68]	; 0x44
 800c266:	4b63      	ldr	r3, [pc, #396]	; (800c3f4 <HAL_GPIO_Init+0x324>)
 800c268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c26a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c26e:	60fb      	str	r3, [r7, #12]
 800c270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800c272:	4a61      	ldr	r2, [pc, #388]	; (800c3f8 <HAL_GPIO_Init+0x328>)
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	089b      	lsrs	r3, r3, #2
 800c278:	3302      	adds	r3, #2
 800c27a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c27e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c280:	69fb      	ldr	r3, [r7, #28]
 800c282:	f003 0303 	and.w	r3, r3, #3
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	220f      	movs	r2, #15
 800c28a:	fa02 f303 	lsl.w	r3, r2, r3
 800c28e:	43db      	mvns	r3, r3
 800c290:	69ba      	ldr	r2, [r7, #24]
 800c292:	4013      	ands	r3, r2
 800c294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4a58      	ldr	r2, [pc, #352]	; (800c3fc <HAL_GPIO_Init+0x32c>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d037      	beq.n	800c30e <HAL_GPIO_Init+0x23e>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	4a57      	ldr	r2, [pc, #348]	; (800c400 <HAL_GPIO_Init+0x330>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d031      	beq.n	800c30a <HAL_GPIO_Init+0x23a>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4a56      	ldr	r2, [pc, #344]	; (800c404 <HAL_GPIO_Init+0x334>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d02b      	beq.n	800c306 <HAL_GPIO_Init+0x236>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a55      	ldr	r2, [pc, #340]	; (800c408 <HAL_GPIO_Init+0x338>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d025      	beq.n	800c302 <HAL_GPIO_Init+0x232>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	4a54      	ldr	r2, [pc, #336]	; (800c40c <HAL_GPIO_Init+0x33c>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d01f      	beq.n	800c2fe <HAL_GPIO_Init+0x22e>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4a53      	ldr	r2, [pc, #332]	; (800c410 <HAL_GPIO_Init+0x340>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d019      	beq.n	800c2fa <HAL_GPIO_Init+0x22a>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	4a52      	ldr	r2, [pc, #328]	; (800c414 <HAL_GPIO_Init+0x344>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d013      	beq.n	800c2f6 <HAL_GPIO_Init+0x226>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4a51      	ldr	r2, [pc, #324]	; (800c418 <HAL_GPIO_Init+0x348>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d00d      	beq.n	800c2f2 <HAL_GPIO_Init+0x222>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4a50      	ldr	r2, [pc, #320]	; (800c41c <HAL_GPIO_Init+0x34c>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d007      	beq.n	800c2ee <HAL_GPIO_Init+0x21e>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4a4f      	ldr	r2, [pc, #316]	; (800c420 <HAL_GPIO_Init+0x350>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d101      	bne.n	800c2ea <HAL_GPIO_Init+0x21a>
 800c2e6:	2309      	movs	r3, #9
 800c2e8:	e012      	b.n	800c310 <HAL_GPIO_Init+0x240>
 800c2ea:	230a      	movs	r3, #10
 800c2ec:	e010      	b.n	800c310 <HAL_GPIO_Init+0x240>
 800c2ee:	2308      	movs	r3, #8
 800c2f0:	e00e      	b.n	800c310 <HAL_GPIO_Init+0x240>
 800c2f2:	2307      	movs	r3, #7
 800c2f4:	e00c      	b.n	800c310 <HAL_GPIO_Init+0x240>
 800c2f6:	2306      	movs	r3, #6
 800c2f8:	e00a      	b.n	800c310 <HAL_GPIO_Init+0x240>
 800c2fa:	2305      	movs	r3, #5
 800c2fc:	e008      	b.n	800c310 <HAL_GPIO_Init+0x240>
 800c2fe:	2304      	movs	r3, #4
 800c300:	e006      	b.n	800c310 <HAL_GPIO_Init+0x240>
 800c302:	2303      	movs	r3, #3
 800c304:	e004      	b.n	800c310 <HAL_GPIO_Init+0x240>
 800c306:	2302      	movs	r3, #2
 800c308:	e002      	b.n	800c310 <HAL_GPIO_Init+0x240>
 800c30a:	2301      	movs	r3, #1
 800c30c:	e000      	b.n	800c310 <HAL_GPIO_Init+0x240>
 800c30e:	2300      	movs	r3, #0
 800c310:	69fa      	ldr	r2, [r7, #28]
 800c312:	f002 0203 	and.w	r2, r2, #3
 800c316:	0092      	lsls	r2, r2, #2
 800c318:	4093      	lsls	r3, r2
 800c31a:	69ba      	ldr	r2, [r7, #24]
 800c31c:	4313      	orrs	r3, r2
 800c31e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800c320:	4935      	ldr	r1, [pc, #212]	; (800c3f8 <HAL_GPIO_Init+0x328>)
 800c322:	69fb      	ldr	r3, [r7, #28]
 800c324:	089b      	lsrs	r3, r3, #2
 800c326:	3302      	adds	r3, #2
 800c328:	69ba      	ldr	r2, [r7, #24]
 800c32a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c32e:	4b3d      	ldr	r3, [pc, #244]	; (800c424 <HAL_GPIO_Init+0x354>)
 800c330:	689b      	ldr	r3, [r3, #8]
 800c332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	43db      	mvns	r3, r3
 800c338:	69ba      	ldr	r2, [r7, #24]
 800c33a:	4013      	ands	r3, r2
 800c33c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c346:	2b00      	cmp	r3, #0
 800c348:	d003      	beq.n	800c352 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c34a:	69ba      	ldr	r2, [r7, #24]
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	4313      	orrs	r3, r2
 800c350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c352:	4a34      	ldr	r2, [pc, #208]	; (800c424 <HAL_GPIO_Init+0x354>)
 800c354:	69bb      	ldr	r3, [r7, #24]
 800c356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c358:	4b32      	ldr	r3, [pc, #200]	; (800c424 <HAL_GPIO_Init+0x354>)
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	43db      	mvns	r3, r3
 800c362:	69ba      	ldr	r2, [r7, #24]
 800c364:	4013      	ands	r3, r2
 800c366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c370:	2b00      	cmp	r3, #0
 800c372:	d003      	beq.n	800c37c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c374:	69ba      	ldr	r2, [r7, #24]
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	4313      	orrs	r3, r2
 800c37a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c37c:	4a29      	ldr	r2, [pc, #164]	; (800c424 <HAL_GPIO_Init+0x354>)
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c382:	4b28      	ldr	r3, [pc, #160]	; (800c424 <HAL_GPIO_Init+0x354>)
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	43db      	mvns	r3, r3
 800c38c:	69ba      	ldr	r2, [r7, #24]
 800c38e:	4013      	ands	r3, r2
 800c390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d003      	beq.n	800c3a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c39e:	69ba      	ldr	r2, [r7, #24]
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c3a6:	4a1f      	ldr	r2, [pc, #124]	; (800c424 <HAL_GPIO_Init+0x354>)
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c3ac:	4b1d      	ldr	r3, [pc, #116]	; (800c424 <HAL_GPIO_Init+0x354>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	43db      	mvns	r3, r3
 800c3b6:	69ba      	ldr	r2, [r7, #24]
 800c3b8:	4013      	ands	r3, r2
 800c3ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d003      	beq.n	800c3d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c3c8:	69ba      	ldr	r2, [r7, #24]
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c3d0:	4a14      	ldr	r2, [pc, #80]	; (800c424 <HAL_GPIO_Init+0x354>)
 800c3d2:	69bb      	ldr	r3, [r7, #24]
 800c3d4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c3d6:	69fb      	ldr	r3, [r7, #28]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	61fb      	str	r3, [r7, #28]
 800c3dc:	69fb      	ldr	r3, [r7, #28]
 800c3de:	2b0f      	cmp	r3, #15
 800c3e0:	f67f ae86 	bls.w	800c0f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800c3e4:	bf00      	nop
 800c3e6:	bf00      	nop
 800c3e8:	3724      	adds	r7, #36	; 0x24
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	40023800 	.word	0x40023800
 800c3f8:	40013800 	.word	0x40013800
 800c3fc:	40020000 	.word	0x40020000
 800c400:	40020400 	.word	0x40020400
 800c404:	40020800 	.word	0x40020800
 800c408:	40020c00 	.word	0x40020c00
 800c40c:	40021000 	.word	0x40021000
 800c410:	40021400 	.word	0x40021400
 800c414:	40021800 	.word	0x40021800
 800c418:	40021c00 	.word	0x40021c00
 800c41c:	40022000 	.word	0x40022000
 800c420:	40022400 	.word	0x40022400
 800c424:	40013c00 	.word	0x40013c00

0800c428 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c428:	b480      	push	{r7}
 800c42a:	b087      	sub	sp, #28
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800c432:	2300      	movs	r3, #0
 800c434:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800c436:	2300      	movs	r3, #0
 800c438:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800c43a:	2300      	movs	r3, #0
 800c43c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800c43e:	2300      	movs	r3, #0
 800c440:	617b      	str	r3, [r7, #20]
 800c442:	e0d9      	b.n	800c5f8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800c444:	2201      	movs	r2, #1
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	fa02 f303 	lsl.w	r3, r2, r3
 800c44c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800c44e:	683a      	ldr	r2, [r7, #0]
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	4013      	ands	r3, r2
 800c454:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	429a      	cmp	r2, r3
 800c45c:	f040 80c9 	bne.w	800c5f2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800c460:	4a6b      	ldr	r2, [pc, #428]	; (800c610 <HAL_GPIO_DeInit+0x1e8>)
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	089b      	lsrs	r3, r3, #2
 800c466:	3302      	adds	r3, #2
 800c468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c46c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	f003 0303 	and.w	r3, r3, #3
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	220f      	movs	r2, #15
 800c478:	fa02 f303 	lsl.w	r3, r2, r3
 800c47c:	68ba      	ldr	r2, [r7, #8]
 800c47e:	4013      	ands	r3, r2
 800c480:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	4a63      	ldr	r2, [pc, #396]	; (800c614 <HAL_GPIO_DeInit+0x1ec>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d037      	beq.n	800c4fa <HAL_GPIO_DeInit+0xd2>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	4a62      	ldr	r2, [pc, #392]	; (800c618 <HAL_GPIO_DeInit+0x1f0>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d031      	beq.n	800c4f6 <HAL_GPIO_DeInit+0xce>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4a61      	ldr	r2, [pc, #388]	; (800c61c <HAL_GPIO_DeInit+0x1f4>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d02b      	beq.n	800c4f2 <HAL_GPIO_DeInit+0xca>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	4a60      	ldr	r2, [pc, #384]	; (800c620 <HAL_GPIO_DeInit+0x1f8>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d025      	beq.n	800c4ee <HAL_GPIO_DeInit+0xc6>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4a5f      	ldr	r2, [pc, #380]	; (800c624 <HAL_GPIO_DeInit+0x1fc>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d01f      	beq.n	800c4ea <HAL_GPIO_DeInit+0xc2>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4a5e      	ldr	r2, [pc, #376]	; (800c628 <HAL_GPIO_DeInit+0x200>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d019      	beq.n	800c4e6 <HAL_GPIO_DeInit+0xbe>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4a5d      	ldr	r2, [pc, #372]	; (800c62c <HAL_GPIO_DeInit+0x204>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d013      	beq.n	800c4e2 <HAL_GPIO_DeInit+0xba>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4a5c      	ldr	r2, [pc, #368]	; (800c630 <HAL_GPIO_DeInit+0x208>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d00d      	beq.n	800c4de <HAL_GPIO_DeInit+0xb6>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4a5b      	ldr	r2, [pc, #364]	; (800c634 <HAL_GPIO_DeInit+0x20c>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d007      	beq.n	800c4da <HAL_GPIO_DeInit+0xb2>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	4a5a      	ldr	r2, [pc, #360]	; (800c638 <HAL_GPIO_DeInit+0x210>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d101      	bne.n	800c4d6 <HAL_GPIO_DeInit+0xae>
 800c4d2:	2309      	movs	r3, #9
 800c4d4:	e012      	b.n	800c4fc <HAL_GPIO_DeInit+0xd4>
 800c4d6:	230a      	movs	r3, #10
 800c4d8:	e010      	b.n	800c4fc <HAL_GPIO_DeInit+0xd4>
 800c4da:	2308      	movs	r3, #8
 800c4dc:	e00e      	b.n	800c4fc <HAL_GPIO_DeInit+0xd4>
 800c4de:	2307      	movs	r3, #7
 800c4e0:	e00c      	b.n	800c4fc <HAL_GPIO_DeInit+0xd4>
 800c4e2:	2306      	movs	r3, #6
 800c4e4:	e00a      	b.n	800c4fc <HAL_GPIO_DeInit+0xd4>
 800c4e6:	2305      	movs	r3, #5
 800c4e8:	e008      	b.n	800c4fc <HAL_GPIO_DeInit+0xd4>
 800c4ea:	2304      	movs	r3, #4
 800c4ec:	e006      	b.n	800c4fc <HAL_GPIO_DeInit+0xd4>
 800c4ee:	2303      	movs	r3, #3
 800c4f0:	e004      	b.n	800c4fc <HAL_GPIO_DeInit+0xd4>
 800c4f2:	2302      	movs	r3, #2
 800c4f4:	e002      	b.n	800c4fc <HAL_GPIO_DeInit+0xd4>
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e000      	b.n	800c4fc <HAL_GPIO_DeInit+0xd4>
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	697a      	ldr	r2, [r7, #20]
 800c4fe:	f002 0203 	and.w	r2, r2, #3
 800c502:	0092      	lsls	r2, r2, #2
 800c504:	4093      	lsls	r3, r2
 800c506:	68ba      	ldr	r2, [r7, #8]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d132      	bne.n	800c572 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800c50c:	4b4b      	ldr	r3, [pc, #300]	; (800c63c <HAL_GPIO_DeInit+0x214>)
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	43db      	mvns	r3, r3
 800c514:	4949      	ldr	r1, [pc, #292]	; (800c63c <HAL_GPIO_DeInit+0x214>)
 800c516:	4013      	ands	r3, r2
 800c518:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800c51a:	4b48      	ldr	r3, [pc, #288]	; (800c63c <HAL_GPIO_DeInit+0x214>)
 800c51c:	685a      	ldr	r2, [r3, #4]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	43db      	mvns	r3, r3
 800c522:	4946      	ldr	r1, [pc, #280]	; (800c63c <HAL_GPIO_DeInit+0x214>)
 800c524:	4013      	ands	r3, r2
 800c526:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800c528:	4b44      	ldr	r3, [pc, #272]	; (800c63c <HAL_GPIO_DeInit+0x214>)
 800c52a:	68da      	ldr	r2, [r3, #12]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	43db      	mvns	r3, r3
 800c530:	4942      	ldr	r1, [pc, #264]	; (800c63c <HAL_GPIO_DeInit+0x214>)
 800c532:	4013      	ands	r3, r2
 800c534:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800c536:	4b41      	ldr	r3, [pc, #260]	; (800c63c <HAL_GPIO_DeInit+0x214>)
 800c538:	689a      	ldr	r2, [r3, #8]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	43db      	mvns	r3, r3
 800c53e:	493f      	ldr	r1, [pc, #252]	; (800c63c <HAL_GPIO_DeInit+0x214>)
 800c540:	4013      	ands	r3, r2
 800c542:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	f003 0303 	and.w	r3, r3, #3
 800c54a:	009b      	lsls	r3, r3, #2
 800c54c:	220f      	movs	r2, #15
 800c54e:	fa02 f303 	lsl.w	r3, r2, r3
 800c552:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800c554:	4a2e      	ldr	r2, [pc, #184]	; (800c610 <HAL_GPIO_DeInit+0x1e8>)
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	089b      	lsrs	r3, r3, #2
 800c55a:	3302      	adds	r3, #2
 800c55c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	43da      	mvns	r2, r3
 800c564:	482a      	ldr	r0, [pc, #168]	; (800c610 <HAL_GPIO_DeInit+0x1e8>)
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	089b      	lsrs	r3, r3, #2
 800c56a:	400a      	ands	r2, r1
 800c56c:	3302      	adds	r3, #2
 800c56e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	005b      	lsls	r3, r3, #1
 800c57a:	2103      	movs	r1, #3
 800c57c:	fa01 f303 	lsl.w	r3, r1, r3
 800c580:	43db      	mvns	r3, r3
 800c582:	401a      	ands	r2, r3
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	08da      	lsrs	r2, r3, #3
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	3208      	adds	r2, #8
 800c590:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	f003 0307 	and.w	r3, r3, #7
 800c59a:	009b      	lsls	r3, r3, #2
 800c59c:	220f      	movs	r2, #15
 800c59e:	fa02 f303 	lsl.w	r3, r2, r3
 800c5a2:	43db      	mvns	r3, r3
 800c5a4:	697a      	ldr	r2, [r7, #20]
 800c5a6:	08d2      	lsrs	r2, r2, #3
 800c5a8:	4019      	ands	r1, r3
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	3208      	adds	r2, #8
 800c5ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	68da      	ldr	r2, [r3, #12]
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	005b      	lsls	r3, r3, #1
 800c5ba:	2103      	movs	r1, #3
 800c5bc:	fa01 f303 	lsl.w	r3, r1, r3
 800c5c0:	43db      	mvns	r3, r3
 800c5c2:	401a      	ands	r2, r3
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	685a      	ldr	r2, [r3, #4]
 800c5cc:	2101      	movs	r1, #1
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	fa01 f303 	lsl.w	r3, r1, r3
 800c5d4:	43db      	mvns	r3, r3
 800c5d6:	401a      	ands	r2, r3
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	689a      	ldr	r2, [r3, #8]
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	005b      	lsls	r3, r3, #1
 800c5e4:	2103      	movs	r1, #3
 800c5e6:	fa01 f303 	lsl.w	r3, r1, r3
 800c5ea:	43db      	mvns	r3, r3
 800c5ec:	401a      	ands	r2, r3
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	617b      	str	r3, [r7, #20]
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	2b0f      	cmp	r3, #15
 800c5fc:	f67f af22 	bls.w	800c444 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800c600:	bf00      	nop
 800c602:	bf00      	nop
 800c604:	371c      	adds	r7, #28
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr
 800c60e:	bf00      	nop
 800c610:	40013800 	.word	0x40013800
 800c614:	40020000 	.word	0x40020000
 800c618:	40020400 	.word	0x40020400
 800c61c:	40020800 	.word	0x40020800
 800c620:	40020c00 	.word	0x40020c00
 800c624:	40021000 	.word	0x40021000
 800c628:	40021400 	.word	0x40021400
 800c62c:	40021800 	.word	0x40021800
 800c630:	40021c00 	.word	0x40021c00
 800c634:	40022000 	.word	0x40022000
 800c638:	40022400 	.word	0x40022400
 800c63c:	40013c00 	.word	0x40013c00

0800c640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	460b      	mov	r3, r1
 800c64a:	807b      	strh	r3, [r7, #2]
 800c64c:	4613      	mov	r3, r2
 800c64e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c650:	787b      	ldrb	r3, [r7, #1]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d003      	beq.n	800c65e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c656:	887a      	ldrh	r2, [r7, #2]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800c65c:	e003      	b.n	800c666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800c65e:	887b      	ldrh	r3, [r7, #2]
 800c660:	041a      	lsls	r2, r3, #16
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	619a      	str	r2, [r3, #24]
}
 800c666:	bf00      	nop
 800c668:	370c      	adds	r7, #12
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr
	...

0800c674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d101      	bne.n	800c686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c682:	2301      	movs	r3, #1
 800c684:	e07f      	b.n	800c786 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d106      	bne.n	800c6a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2200      	movs	r2, #0
 800c696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 f8a9 	bl	800c7f2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2224      	movs	r2, #36	; 0x24
 800c6a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f022 0201 	bic.w	r2, r2, #1
 800c6b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	685a      	ldr	r2, [r3, #4]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c6c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	689a      	ldr	r2, [r3, #8]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c6d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	68db      	ldr	r3, [r3, #12]
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d107      	bne.n	800c6ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	689a      	ldr	r2, [r3, #8]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c6ea:	609a      	str	r2, [r3, #8]
 800c6ec:	e006      	b.n	800c6fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	689a      	ldr	r2, [r3, #8]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800c6fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	68db      	ldr	r3, [r3, #12]
 800c700:	2b02      	cmp	r3, #2
 800c702:	d104      	bne.n	800c70e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c70c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	6859      	ldr	r1, [r3, #4]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	4b1d      	ldr	r3, [pc, #116]	; (800c790 <HAL_I2C_Init+0x11c>)
 800c71a:	430b      	orrs	r3, r1
 800c71c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	68da      	ldr	r2, [r3, #12]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c72c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	691a      	ldr	r2, [r3, #16]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	695b      	ldr	r3, [r3, #20]
 800c736:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	699b      	ldr	r3, [r3, #24]
 800c73e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	430a      	orrs	r2, r1
 800c746:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	69d9      	ldr	r1, [r3, #28]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6a1a      	ldr	r2, [r3, #32]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	430a      	orrs	r2, r1
 800c756:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	681a      	ldr	r2, [r3, #0]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f042 0201 	orr.w	r2, r2, #1
 800c766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2220      	movs	r2, #32
 800c772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2200      	movs	r2, #0
 800c77a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800c784:	2300      	movs	r3, #0
}
 800c786:	4618      	mov	r0, r3
 800c788:	3708      	adds	r7, #8
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	02008000 	.word	0x02008000

0800c794 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d101      	bne.n	800c7a6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e021      	b.n	800c7ea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2224      	movs	r2, #36	; 0x24
 800c7aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f022 0201 	bic.w	r2, r2, #1
 800c7bc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 f821 	bl	800c806 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c7e8:	2300      	movs	r3, #0
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3708      	adds	r7, #8
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800c7f2:	b480      	push	{r7}
 800c7f4:	b083      	sub	sp, #12
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800c7fa:	bf00      	nop
 800c7fc:	370c      	adds	r7, #12
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr

0800c806 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800c806:	b480      	push	{r7}
 800c808:	b083      	sub	sp, #12
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800c80e:	bf00      	nop
 800c810:	370c      	adds	r7, #12
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr
	...

0800c81c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b088      	sub	sp, #32
 800c820:	af02      	add	r7, sp, #8
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	4608      	mov	r0, r1
 800c826:	4611      	mov	r1, r2
 800c828:	461a      	mov	r2, r3
 800c82a:	4603      	mov	r3, r0
 800c82c:	817b      	strh	r3, [r7, #10]
 800c82e:	460b      	mov	r3, r1
 800c830:	813b      	strh	r3, [r7, #8]
 800c832:	4613      	mov	r3, r2
 800c834:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	2b20      	cmp	r3, #32
 800c840:	f040 80f9 	bne.w	800ca36 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c844:	6a3b      	ldr	r3, [r7, #32]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d002      	beq.n	800c850 <HAL_I2C_Mem_Write+0x34>
 800c84a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d105      	bne.n	800c85c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c856:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c858:	2301      	movs	r3, #1
 800c85a:	e0ed      	b.n	800ca38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c862:	2b01      	cmp	r3, #1
 800c864:	d101      	bne.n	800c86a <HAL_I2C_Mem_Write+0x4e>
 800c866:	2302      	movs	r3, #2
 800c868:	e0e6      	b.n	800ca38 <HAL_I2C_Mem_Write+0x21c>
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2201      	movs	r2, #1
 800c86e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c872:	f7ff fb1b 	bl	800beac <HAL_GetTick>
 800c876:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	2319      	movs	r3, #25
 800c87e:	2201      	movs	r2, #1
 800c880:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c884:	68f8      	ldr	r0, [r7, #12]
 800c886:	f000 fadd 	bl	800ce44 <I2C_WaitOnFlagUntilTimeout>
 800c88a:	4603      	mov	r3, r0
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d001      	beq.n	800c894 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800c890:	2301      	movs	r3, #1
 800c892:	e0d1      	b.n	800ca38 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2221      	movs	r2, #33	; 0x21
 800c898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2240      	movs	r2, #64	; 0x40
 800c8a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	6a3a      	ldr	r2, [r7, #32]
 800c8ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c8b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c8bc:	88f8      	ldrh	r0, [r7, #6]
 800c8be:	893a      	ldrh	r2, [r7, #8]
 800c8c0:	8979      	ldrh	r1, [r7, #10]
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	9301      	str	r3, [sp, #4]
 800c8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c8:	9300      	str	r3, [sp, #0]
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	68f8      	ldr	r0, [r7, #12]
 800c8ce:	f000 f9ed 	bl	800ccac <I2C_RequestMemoryWrite>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d005      	beq.n	800c8e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	e0a9      	b.n	800ca38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	2bff      	cmp	r3, #255	; 0xff
 800c8ec:	d90e      	bls.n	800c90c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	22ff      	movs	r2, #255	; 0xff
 800c8f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8f8:	b2da      	uxtb	r2, r3
 800c8fa:	8979      	ldrh	r1, [r7, #10]
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	9300      	str	r3, [sp, #0]
 800c900:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c904:	68f8      	ldr	r0, [r7, #12]
 800c906:	f000 fc39 	bl	800d17c <I2C_TransferConfig>
 800c90a:	e00f      	b.n	800c92c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c910:	b29a      	uxth	r2, r3
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c91a:	b2da      	uxtb	r2, r3
 800c91c:	8979      	ldrh	r1, [r7, #10]
 800c91e:	2300      	movs	r3, #0
 800c920:	9300      	str	r3, [sp, #0]
 800c922:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c926:	68f8      	ldr	r0, [r7, #12]
 800c928:	f000 fc28 	bl	800d17c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c92c:	697a      	ldr	r2, [r7, #20]
 800c92e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c930:	68f8      	ldr	r0, [r7, #12]
 800c932:	f000 fac7 	bl	800cec4 <I2C_WaitOnTXISFlagUntilTimeout>
 800c936:	4603      	mov	r3, r0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d001      	beq.n	800c940 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800c93c:	2301      	movs	r3, #1
 800c93e:	e07b      	b.n	800ca38 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c944:	781a      	ldrb	r2, [r3, #0]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c950:	1c5a      	adds	r2, r3, #1
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	3b01      	subs	r3, #1
 800c95e:	b29a      	uxth	r2, r3
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c968:	3b01      	subs	r3, #1
 800c96a:	b29a      	uxth	r2, r3
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c974:	b29b      	uxth	r3, r3
 800c976:	2b00      	cmp	r3, #0
 800c978:	d034      	beq.n	800c9e4 <HAL_I2C_Mem_Write+0x1c8>
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d130      	bne.n	800c9e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	9300      	str	r3, [sp, #0]
 800c986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c988:	2200      	movs	r2, #0
 800c98a:	2180      	movs	r1, #128	; 0x80
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f000 fa59 	bl	800ce44 <I2C_WaitOnFlagUntilTimeout>
 800c992:	4603      	mov	r3, r0
 800c994:	2b00      	cmp	r3, #0
 800c996:	d001      	beq.n	800c99c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800c998:	2301      	movs	r3, #1
 800c99a:	e04d      	b.n	800ca38 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	2bff      	cmp	r3, #255	; 0xff
 800c9a4:	d90e      	bls.n	800c9c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	22ff      	movs	r2, #255	; 0xff
 800c9aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9b0:	b2da      	uxtb	r2, r3
 800c9b2:	8979      	ldrh	r1, [r7, #10]
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	9300      	str	r3, [sp, #0]
 800c9b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c9bc:	68f8      	ldr	r0, [r7, #12]
 800c9be:	f000 fbdd 	bl	800d17c <I2C_TransferConfig>
 800c9c2:	e00f      	b.n	800c9e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9c8:	b29a      	uxth	r2, r3
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9d2:	b2da      	uxtb	r2, r3
 800c9d4:	8979      	ldrh	r1, [r7, #10]
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	9300      	str	r3, [sp, #0]
 800c9da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f000 fbcc 	bl	800d17c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d19e      	bne.n	800c92c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c9ee:	697a      	ldr	r2, [r7, #20]
 800c9f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	f000 faa6 	bl	800cf44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d001      	beq.n	800ca02 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e01a      	b.n	800ca38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	2220      	movs	r2, #32
 800ca08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	6859      	ldr	r1, [r3, #4]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	4b0a      	ldr	r3, [pc, #40]	; (800ca40 <HAL_I2C_Mem_Write+0x224>)
 800ca16:	400b      	ands	r3, r1
 800ca18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2220      	movs	r2, #32
 800ca1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2200      	movs	r2, #0
 800ca26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ca32:	2300      	movs	r3, #0
 800ca34:	e000      	b.n	800ca38 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ca36:	2302      	movs	r3, #2
  }
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3718      	adds	r7, #24
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	fe00e800 	.word	0xfe00e800

0800ca44 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b088      	sub	sp, #32
 800ca48:	af02      	add	r7, sp, #8
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	4608      	mov	r0, r1
 800ca4e:	4611      	mov	r1, r2
 800ca50:	461a      	mov	r2, r3
 800ca52:	4603      	mov	r3, r0
 800ca54:	817b      	strh	r3, [r7, #10]
 800ca56:	460b      	mov	r3, r1
 800ca58:	813b      	strh	r3, [r7, #8]
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	2b20      	cmp	r3, #32
 800ca68:	f040 80fd 	bne.w	800cc66 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca6c:	6a3b      	ldr	r3, [r7, #32]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d002      	beq.n	800ca78 <HAL_I2C_Mem_Read+0x34>
 800ca72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d105      	bne.n	800ca84 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ca80:	2301      	movs	r3, #1
 800ca82:	e0f1      	b.n	800cc68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d101      	bne.n	800ca92 <HAL_I2C_Mem_Read+0x4e>
 800ca8e:	2302      	movs	r3, #2
 800ca90:	e0ea      	b.n	800cc68 <HAL_I2C_Mem_Read+0x224>
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2201      	movs	r2, #1
 800ca96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ca9a:	f7ff fa07 	bl	800beac <HAL_GetTick>
 800ca9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	9300      	str	r3, [sp, #0]
 800caa4:	2319      	movs	r3, #25
 800caa6:	2201      	movs	r2, #1
 800caa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800caac:	68f8      	ldr	r0, [r7, #12]
 800caae:	f000 f9c9 	bl	800ce44 <I2C_WaitOnFlagUntilTimeout>
 800cab2:	4603      	mov	r3, r0
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d001      	beq.n	800cabc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800cab8:	2301      	movs	r3, #1
 800caba:	e0d5      	b.n	800cc68 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2222      	movs	r2, #34	; 0x22
 800cac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2240      	movs	r2, #64	; 0x40
 800cac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2200      	movs	r2, #0
 800cad0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	6a3a      	ldr	r2, [r7, #32]
 800cad6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cadc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2200      	movs	r2, #0
 800cae2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cae4:	88f8      	ldrh	r0, [r7, #6]
 800cae6:	893a      	ldrh	r2, [r7, #8]
 800cae8:	8979      	ldrh	r1, [r7, #10]
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	9301      	str	r3, [sp, #4]
 800caee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf0:	9300      	str	r3, [sp, #0]
 800caf2:	4603      	mov	r3, r0
 800caf4:	68f8      	ldr	r0, [r7, #12]
 800caf6:	f000 f92d 	bl	800cd54 <I2C_RequestMemoryRead>
 800cafa:	4603      	mov	r3, r0
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d005      	beq.n	800cb0c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2200      	movs	r2, #0
 800cb04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800cb08:	2301      	movs	r3, #1
 800cb0a:	e0ad      	b.n	800cc68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	2bff      	cmp	r3, #255	; 0xff
 800cb14:	d90e      	bls.n	800cb34 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	22ff      	movs	r2, #255	; 0xff
 800cb1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb20:	b2da      	uxtb	r2, r3
 800cb22:	8979      	ldrh	r1, [r7, #10]
 800cb24:	4b52      	ldr	r3, [pc, #328]	; (800cc70 <HAL_I2C_Mem_Read+0x22c>)
 800cb26:	9300      	str	r3, [sp, #0]
 800cb28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f000 fb25 	bl	800d17c <I2C_TransferConfig>
 800cb32:	e00f      	b.n	800cb54 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb38:	b29a      	uxth	r2, r3
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb42:	b2da      	uxtb	r2, r3
 800cb44:	8979      	ldrh	r1, [r7, #10]
 800cb46:	4b4a      	ldr	r3, [pc, #296]	; (800cc70 <HAL_I2C_Mem_Read+0x22c>)
 800cb48:	9300      	str	r3, [sp, #0]
 800cb4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cb4e:	68f8      	ldr	r0, [r7, #12]
 800cb50:	f000 fb14 	bl	800d17c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	9300      	str	r3, [sp, #0]
 800cb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	2104      	movs	r1, #4
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	f000 f970 	bl	800ce44 <I2C_WaitOnFlagUntilTimeout>
 800cb64:	4603      	mov	r3, r0
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d001      	beq.n	800cb6e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	e07c      	b.n	800cc68 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb78:	b2d2      	uxtb	r2, r2
 800cb7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb80:	1c5a      	adds	r2, r3, #1
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb8a:	3b01      	subs	r3, #1
 800cb8c:	b29a      	uxth	r2, r3
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb96:	b29b      	uxth	r3, r3
 800cb98:	3b01      	subs	r3, #1
 800cb9a:	b29a      	uxth	r2, r3
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d034      	beq.n	800cc14 <HAL_I2C_Mem_Read+0x1d0>
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d130      	bne.n	800cc14 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb8:	2200      	movs	r2, #0
 800cbba:	2180      	movs	r1, #128	; 0x80
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f000 f941 	bl	800ce44 <I2C_WaitOnFlagUntilTimeout>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d001      	beq.n	800cbcc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	e04d      	b.n	800cc68 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	2bff      	cmp	r3, #255	; 0xff
 800cbd4:	d90e      	bls.n	800cbf4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	22ff      	movs	r2, #255	; 0xff
 800cbda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbe0:	b2da      	uxtb	r2, r3
 800cbe2:	8979      	ldrh	r1, [r7, #10]
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	9300      	str	r3, [sp, #0]
 800cbe8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cbec:	68f8      	ldr	r0, [r7, #12]
 800cbee:	f000 fac5 	bl	800d17c <I2C_TransferConfig>
 800cbf2:	e00f      	b.n	800cc14 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbf8:	b29a      	uxth	r2, r3
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc02:	b2da      	uxtb	r2, r3
 800cc04:	8979      	ldrh	r1, [r7, #10]
 800cc06:	2300      	movs	r3, #0
 800cc08:	9300      	str	r3, [sp, #0]
 800cc0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cc0e:	68f8      	ldr	r0, [r7, #12]
 800cc10:	f000 fab4 	bl	800d17c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d19a      	bne.n	800cb54 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cc1e:	697a      	ldr	r2, [r7, #20]
 800cc20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc22:	68f8      	ldr	r0, [r7, #12]
 800cc24:	f000 f98e 	bl	800cf44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d001      	beq.n	800cc32 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	e01a      	b.n	800cc68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	2220      	movs	r2, #32
 800cc38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	6859      	ldr	r1, [r3, #4]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	4b0b      	ldr	r3, [pc, #44]	; (800cc74 <HAL_I2C_Mem_Read+0x230>)
 800cc46:	400b      	ands	r3, r1
 800cc48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2220      	movs	r2, #32
 800cc4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2200      	movs	r2, #0
 800cc56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cc62:	2300      	movs	r3, #0
 800cc64:	e000      	b.n	800cc68 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800cc66:	2302      	movs	r3, #2
  }
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3718      	adds	r7, #24
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	80002400 	.word	0x80002400
 800cc74:	fe00e800 	.word	0xfe00e800

0800cc78 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b083      	sub	sp, #12
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc86:	b2db      	uxtb	r3, r3
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	370c      	adds	r7, #12
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr

0800cc94 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b086      	sub	sp, #24
 800ccb0:	af02      	add	r7, sp, #8
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	4608      	mov	r0, r1
 800ccb6:	4611      	mov	r1, r2
 800ccb8:	461a      	mov	r2, r3
 800ccba:	4603      	mov	r3, r0
 800ccbc:	817b      	strh	r3, [r7, #10]
 800ccbe:	460b      	mov	r3, r1
 800ccc0:	813b      	strh	r3, [r7, #8]
 800ccc2:	4613      	mov	r3, r2
 800ccc4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ccc6:	88fb      	ldrh	r3, [r7, #6]
 800ccc8:	b2da      	uxtb	r2, r3
 800ccca:	8979      	ldrh	r1, [r7, #10]
 800cccc:	4b20      	ldr	r3, [pc, #128]	; (800cd50 <I2C_RequestMemoryWrite+0xa4>)
 800ccce:	9300      	str	r3, [sp, #0]
 800ccd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f000 fa51 	bl	800d17c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ccda:	69fa      	ldr	r2, [r7, #28]
 800ccdc:	69b9      	ldr	r1, [r7, #24]
 800ccde:	68f8      	ldr	r0, [r7, #12]
 800cce0:	f000 f8f0 	bl	800cec4 <I2C_WaitOnTXISFlagUntilTimeout>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d001      	beq.n	800ccee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800ccea:	2301      	movs	r3, #1
 800ccec:	e02c      	b.n	800cd48 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ccee:	88fb      	ldrh	r3, [r7, #6]
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d105      	bne.n	800cd00 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ccf4:	893b      	ldrh	r3, [r7, #8]
 800ccf6:	b2da      	uxtb	r2, r3
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	629a      	str	r2, [r3, #40]	; 0x28
 800ccfe:	e015      	b.n	800cd2c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800cd00:	893b      	ldrh	r3, [r7, #8]
 800cd02:	0a1b      	lsrs	r3, r3, #8
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	b2da      	uxtb	r2, r3
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd0e:	69fa      	ldr	r2, [r7, #28]
 800cd10:	69b9      	ldr	r1, [r7, #24]
 800cd12:	68f8      	ldr	r0, [r7, #12]
 800cd14:	f000 f8d6 	bl	800cec4 <I2C_WaitOnTXISFlagUntilTimeout>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d001      	beq.n	800cd22 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e012      	b.n	800cd48 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cd22:	893b      	ldrh	r3, [r7, #8]
 800cd24:	b2da      	uxtb	r2, r3
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800cd2c:	69fb      	ldr	r3, [r7, #28]
 800cd2e:	9300      	str	r3, [sp, #0]
 800cd30:	69bb      	ldr	r3, [r7, #24]
 800cd32:	2200      	movs	r2, #0
 800cd34:	2180      	movs	r1, #128	; 0x80
 800cd36:	68f8      	ldr	r0, [r7, #12]
 800cd38:	f000 f884 	bl	800ce44 <I2C_WaitOnFlagUntilTimeout>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d001      	beq.n	800cd46 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800cd42:	2301      	movs	r3, #1
 800cd44:	e000      	b.n	800cd48 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800cd46:	2300      	movs	r3, #0
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3710      	adds	r7, #16
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}
 800cd50:	80002000 	.word	0x80002000

0800cd54 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b086      	sub	sp, #24
 800cd58:	af02      	add	r7, sp, #8
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	4608      	mov	r0, r1
 800cd5e:	4611      	mov	r1, r2
 800cd60:	461a      	mov	r2, r3
 800cd62:	4603      	mov	r3, r0
 800cd64:	817b      	strh	r3, [r7, #10]
 800cd66:	460b      	mov	r3, r1
 800cd68:	813b      	strh	r3, [r7, #8]
 800cd6a:	4613      	mov	r3, r2
 800cd6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800cd6e:	88fb      	ldrh	r3, [r7, #6]
 800cd70:	b2da      	uxtb	r2, r3
 800cd72:	8979      	ldrh	r1, [r7, #10]
 800cd74:	4b20      	ldr	r3, [pc, #128]	; (800cdf8 <I2C_RequestMemoryRead+0xa4>)
 800cd76:	9300      	str	r3, [sp, #0]
 800cd78:	2300      	movs	r3, #0
 800cd7a:	68f8      	ldr	r0, [r7, #12]
 800cd7c:	f000 f9fe 	bl	800d17c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd80:	69fa      	ldr	r2, [r7, #28]
 800cd82:	69b9      	ldr	r1, [r7, #24]
 800cd84:	68f8      	ldr	r0, [r7, #12]
 800cd86:	f000 f89d 	bl	800cec4 <I2C_WaitOnTXISFlagUntilTimeout>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d001      	beq.n	800cd94 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800cd90:	2301      	movs	r3, #1
 800cd92:	e02c      	b.n	800cdee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cd94:	88fb      	ldrh	r3, [r7, #6]
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d105      	bne.n	800cda6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cd9a:	893b      	ldrh	r3, [r7, #8]
 800cd9c:	b2da      	uxtb	r2, r3
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	629a      	str	r2, [r3, #40]	; 0x28
 800cda4:	e015      	b.n	800cdd2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800cda6:	893b      	ldrh	r3, [r7, #8]
 800cda8:	0a1b      	lsrs	r3, r3, #8
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	b2da      	uxtb	r2, r3
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cdb4:	69fa      	ldr	r2, [r7, #28]
 800cdb6:	69b9      	ldr	r1, [r7, #24]
 800cdb8:	68f8      	ldr	r0, [r7, #12]
 800cdba:	f000 f883 	bl	800cec4 <I2C_WaitOnTXISFlagUntilTimeout>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d001      	beq.n	800cdc8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	e012      	b.n	800cdee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cdc8:	893b      	ldrh	r3, [r7, #8]
 800cdca:	b2da      	uxtb	r2, r3
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800cdd2:	69fb      	ldr	r3, [r7, #28]
 800cdd4:	9300      	str	r3, [sp, #0]
 800cdd6:	69bb      	ldr	r3, [r7, #24]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	2140      	movs	r1, #64	; 0x40
 800cddc:	68f8      	ldr	r0, [r7, #12]
 800cdde:	f000 f831 	bl	800ce44 <I2C_WaitOnFlagUntilTimeout>
 800cde2:	4603      	mov	r3, r0
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d001      	beq.n	800cdec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800cde8:	2301      	movs	r3, #1
 800cdea:	e000      	b.n	800cdee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800cdec:	2300      	movs	r3, #0
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3710      	adds	r7, #16
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	80002000 	.word	0x80002000

0800cdfc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b083      	sub	sp, #12
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	699b      	ldr	r3, [r3, #24]
 800ce0a:	f003 0302 	and.w	r3, r3, #2
 800ce0e:	2b02      	cmp	r3, #2
 800ce10:	d103      	bne.n	800ce1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	2200      	movs	r2, #0
 800ce18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	699b      	ldr	r3, [r3, #24]
 800ce20:	f003 0301 	and.w	r3, r3, #1
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d007      	beq.n	800ce38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	699a      	ldr	r2, [r3, #24]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f042 0201 	orr.w	r2, r2, #1
 800ce36:	619a      	str	r2, [r3, #24]
  }
}
 800ce38:	bf00      	nop
 800ce3a:	370c      	adds	r7, #12
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr

0800ce44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b084      	sub	sp, #16
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	60f8      	str	r0, [r7, #12]
 800ce4c:	60b9      	str	r1, [r7, #8]
 800ce4e:	603b      	str	r3, [r7, #0]
 800ce50:	4613      	mov	r3, r2
 800ce52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ce54:	e022      	b.n	800ce9c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce5c:	d01e      	beq.n	800ce9c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce5e:	f7ff f825 	bl	800beac <HAL_GetTick>
 800ce62:	4602      	mov	r2, r0
 800ce64:	69bb      	ldr	r3, [r7, #24]
 800ce66:	1ad3      	subs	r3, r2, r3
 800ce68:	683a      	ldr	r2, [r7, #0]
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d302      	bcc.n	800ce74 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d113      	bne.n	800ce9c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce78:	f043 0220 	orr.w	r2, r3, #32
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2220      	movs	r2, #32
 800ce84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2200      	movs	r2, #0
 800ce94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	e00f      	b.n	800cebc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	699a      	ldr	r2, [r3, #24]
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	4013      	ands	r3, r2
 800cea6:	68ba      	ldr	r2, [r7, #8]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	bf0c      	ite	eq
 800ceac:	2301      	moveq	r3, #1
 800ceae:	2300      	movne	r3, #0
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	79fb      	ldrb	r3, [r7, #7]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d0cd      	beq.n	800ce56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ceba:	2300      	movs	r3, #0
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3710      	adds	r7, #16
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b084      	sub	sp, #16
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	60f8      	str	r0, [r7, #12]
 800cecc:	60b9      	str	r1, [r7, #8]
 800cece:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ced0:	e02c      	b.n	800cf2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	68b9      	ldr	r1, [r7, #8]
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	f000 f870 	bl	800cfbc <I2C_IsErrorOccurred>
 800cedc:	4603      	mov	r3, r0
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d001      	beq.n	800cee6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cee2:	2301      	movs	r3, #1
 800cee4:	e02a      	b.n	800cf3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceec:	d01e      	beq.n	800cf2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ceee:	f7fe ffdd 	bl	800beac <HAL_GetTick>
 800cef2:	4602      	mov	r2, r0
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	1ad3      	subs	r3, r2, r3
 800cef8:	68ba      	ldr	r2, [r7, #8]
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d302      	bcc.n	800cf04 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d113      	bne.n	800cf2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf08:	f043 0220 	orr.w	r2, r3, #32
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2220      	movs	r2, #32
 800cf14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2200      	movs	r2, #0
 800cf24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	e007      	b.n	800cf3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	699b      	ldr	r3, [r3, #24]
 800cf32:	f003 0302 	and.w	r3, r3, #2
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	d1cb      	bne.n	800ced2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cf3a:	2300      	movs	r3, #0
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3710      	adds	r7, #16
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b084      	sub	sp, #16
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cf50:	e028      	b.n	800cfa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	68b9      	ldr	r1, [r7, #8]
 800cf56:	68f8      	ldr	r0, [r7, #12]
 800cf58:	f000 f830 	bl	800cfbc <I2C_IsErrorOccurred>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d001      	beq.n	800cf66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cf62:	2301      	movs	r3, #1
 800cf64:	e026      	b.n	800cfb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf66:	f7fe ffa1 	bl	800beac <HAL_GetTick>
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	1ad3      	subs	r3, r2, r3
 800cf70:	68ba      	ldr	r2, [r7, #8]
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d302      	bcc.n	800cf7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d113      	bne.n	800cfa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf80:	f043 0220 	orr.w	r2, r3, #32
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2220      	movs	r2, #32
 800cf8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2200      	movs	r2, #0
 800cf94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e007      	b.n	800cfb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	699b      	ldr	r3, [r3, #24]
 800cfaa:	f003 0320 	and.w	r3, r3, #32
 800cfae:	2b20      	cmp	r3, #32
 800cfb0:	d1cf      	bne.n	800cf52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800cfb2:	2300      	movs	r3, #0
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3710      	adds	r7, #16
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b08a      	sub	sp, #40	; 0x28
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	699b      	ldr	r3, [r3, #24]
 800cfd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800cfde:	69bb      	ldr	r3, [r7, #24]
 800cfe0:	f003 0310 	and.w	r3, r3, #16
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d068      	beq.n	800d0ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	2210      	movs	r2, #16
 800cfee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cff0:	e049      	b.n	800d086 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cff8:	d045      	beq.n	800d086 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800cffa:	f7fe ff57 	bl	800beac <HAL_GetTick>
 800cffe:	4602      	mov	r2, r0
 800d000:	69fb      	ldr	r3, [r7, #28]
 800d002:	1ad3      	subs	r3, r2, r3
 800d004:	68ba      	ldr	r2, [r7, #8]
 800d006:	429a      	cmp	r2, r3
 800d008:	d302      	bcc.n	800d010 <I2C_IsErrorOccurred+0x54>
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d13a      	bne.n	800d086 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d01a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d022:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	699b      	ldr	r3, [r3, #24]
 800d02a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d02e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d032:	d121      	bne.n	800d078 <I2C_IsErrorOccurred+0xbc>
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d03a:	d01d      	beq.n	800d078 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800d03c:	7cfb      	ldrb	r3, [r7, #19]
 800d03e:	2b20      	cmp	r3, #32
 800d040:	d01a      	beq.n	800d078 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	685a      	ldr	r2, [r3, #4]
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d050:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800d052:	f7fe ff2b 	bl	800beac <HAL_GetTick>
 800d056:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d058:	e00e      	b.n	800d078 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d05a:	f7fe ff27 	bl	800beac <HAL_GetTick>
 800d05e:	4602      	mov	r2, r0
 800d060:	69fb      	ldr	r3, [r7, #28]
 800d062:	1ad3      	subs	r3, r2, r3
 800d064:	2b19      	cmp	r3, #25
 800d066:	d907      	bls.n	800d078 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800d068:	6a3b      	ldr	r3, [r7, #32]
 800d06a:	f043 0320 	orr.w	r3, r3, #32
 800d06e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800d070:	2301      	movs	r3, #1
 800d072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800d076:	e006      	b.n	800d086 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	699b      	ldr	r3, [r3, #24]
 800d07e:	f003 0320 	and.w	r3, r3, #32
 800d082:	2b20      	cmp	r3, #32
 800d084:	d1e9      	bne.n	800d05a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	699b      	ldr	r3, [r3, #24]
 800d08c:	f003 0320 	and.w	r3, r3, #32
 800d090:	2b20      	cmp	r3, #32
 800d092:	d003      	beq.n	800d09c <I2C_IsErrorOccurred+0xe0>
 800d094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d0aa      	beq.n	800cff2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800d09c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d103      	bne.n	800d0ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	2220      	movs	r2, #32
 800d0aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800d0ac:	6a3b      	ldr	r3, [r7, #32]
 800d0ae:	f043 0304 	orr.w	r3, r3, #4
 800d0b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	699b      	ldr	r3, [r3, #24]
 800d0c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d00b      	beq.n	800d0e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d0cc:	6a3b      	ldr	r3, [r7, #32]
 800d0ce:	f043 0301 	orr.w	r3, r3, #1
 800d0d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d0e4:	69bb      	ldr	r3, [r7, #24]
 800d0e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d00b      	beq.n	800d106 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d0ee:	6a3b      	ldr	r3, [r7, #32]
 800d0f0:	f043 0308 	orr.w	r3, r3, #8
 800d0f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d0fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d100:	2301      	movs	r3, #1
 800d102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d106:	69bb      	ldr	r3, [r7, #24]
 800d108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d00b      	beq.n	800d128 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d110:	6a3b      	ldr	r3, [r7, #32]
 800d112:	f043 0302 	orr.w	r3, r3, #2
 800d116:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d120:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d122:	2301      	movs	r3, #1
 800d124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800d128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d01c      	beq.n	800d16a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d130:	68f8      	ldr	r0, [r7, #12]
 800d132:	f7ff fe63 	bl	800cdfc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	6859      	ldr	r1, [r3, #4]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681a      	ldr	r2, [r3, #0]
 800d140:	4b0d      	ldr	r3, [pc, #52]	; (800d178 <I2C_IsErrorOccurred+0x1bc>)
 800d142:	400b      	ands	r3, r1
 800d144:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d14a:	6a3b      	ldr	r3, [r7, #32]
 800d14c:	431a      	orrs	r2, r3
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2220      	movs	r2, #32
 800d156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2200      	movs	r2, #0
 800d166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800d16a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3728      	adds	r7, #40	; 0x28
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	fe00e800 	.word	0xfe00e800

0800d17c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b087      	sub	sp, #28
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	607b      	str	r3, [r7, #4]
 800d186:	460b      	mov	r3, r1
 800d188:	817b      	strh	r3, [r7, #10]
 800d18a:	4613      	mov	r3, r2
 800d18c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d18e:	897b      	ldrh	r3, [r7, #10]
 800d190:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d194:	7a7b      	ldrb	r3, [r7, #9]
 800d196:	041b      	lsls	r3, r3, #16
 800d198:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d19c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d1a2:	6a3b      	ldr	r3, [r7, #32]
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d1aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	685a      	ldr	r2, [r3, #4]
 800d1b2:	6a3b      	ldr	r3, [r7, #32]
 800d1b4:	0d5b      	lsrs	r3, r3, #21
 800d1b6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d1ba:	4b08      	ldr	r3, [pc, #32]	; (800d1dc <I2C_TransferConfig+0x60>)
 800d1bc:	430b      	orrs	r3, r1
 800d1be:	43db      	mvns	r3, r3
 800d1c0:	ea02 0103 	and.w	r1, r2, r3
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	697a      	ldr	r2, [r7, #20]
 800d1ca:	430a      	orrs	r2, r1
 800d1cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d1ce:	bf00      	nop
 800d1d0:	371c      	adds	r7, #28
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr
 800d1da:	bf00      	nop
 800d1dc:	03ff63ff 	.word	0x03ff63ff

0800d1e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b083      	sub	sp, #12
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1f0:	b2db      	uxtb	r3, r3
 800d1f2:	2b20      	cmp	r3, #32
 800d1f4:	d138      	bne.n	800d268 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d101      	bne.n	800d204 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d200:	2302      	movs	r3, #2
 800d202:	e032      	b.n	800d26a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2201      	movs	r2, #1
 800d208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2224      	movs	r2, #36	; 0x24
 800d210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f022 0201 	bic.w	r2, r2, #1
 800d222:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d232:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	6819      	ldr	r1, [r3, #0]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	683a      	ldr	r2, [r7, #0]
 800d240:	430a      	orrs	r2, r1
 800d242:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f042 0201 	orr.w	r2, r2, #1
 800d252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2220      	movs	r2, #32
 800d258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d264:	2300      	movs	r3, #0
 800d266:	e000      	b.n	800d26a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d268:	2302      	movs	r3, #2
  }
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	370c      	adds	r7, #12
 800d26e:	46bd      	mov	sp, r7
 800d270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d274:	4770      	bx	lr

0800d276 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d276:	b480      	push	{r7}
 800d278:	b085      	sub	sp, #20
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
 800d27e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d286:	b2db      	uxtb	r3, r3
 800d288:	2b20      	cmp	r3, #32
 800d28a:	d139      	bne.n	800d300 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d292:	2b01      	cmp	r3, #1
 800d294:	d101      	bne.n	800d29a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d296:	2302      	movs	r3, #2
 800d298:	e033      	b.n	800d302 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2201      	movs	r2, #1
 800d29e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2224      	movs	r2, #36	; 0x24
 800d2a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	681a      	ldr	r2, [r3, #0]
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f022 0201 	bic.w	r2, r2, #1
 800d2b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d2c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	021b      	lsls	r3, r3, #8
 800d2ce:	68fa      	ldr	r2, [r7, #12]
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	68fa      	ldr	r2, [r7, #12]
 800d2da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f042 0201 	orr.w	r2, r2, #1
 800d2ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2220      	movs	r2, #32
 800d2f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	e000      	b.n	800d302 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d300:	2302      	movs	r3, #2
  }
}
 800d302:	4618      	mov	r0, r3
 800d304:	3714      	adds	r7, #20
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr

0800d30e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800d30e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d310:	b08f      	sub	sp, #60	; 0x3c
 800d312:	af0a      	add	r7, sp, #40	; 0x28
 800d314:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d101      	bne.n	800d320 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800d31c:	2301      	movs	r3, #1
 800d31e:	e116      	b.n	800d54e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800d32c:	b2db      	uxtb	r3, r3
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d106      	bne.n	800d340 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2200      	movs	r2, #0
 800d336:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f7f9 f896 	bl	800646c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2203      	movs	r2, #3
 800d344:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d34c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d350:	2b00      	cmp	r3, #0
 800d352:	d102      	bne.n	800d35a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	4618      	mov	r0, r3
 800d360:	f002 fad0 	bl	800f904 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	603b      	str	r3, [r7, #0]
 800d36a:	687e      	ldr	r6, [r7, #4]
 800d36c:	466d      	mov	r5, sp
 800d36e:	f106 0410 	add.w	r4, r6, #16
 800d372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d37a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d37e:	e885 0003 	stmia.w	r5, {r0, r1}
 800d382:	1d33      	adds	r3, r6, #4
 800d384:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d386:	6838      	ldr	r0, [r7, #0]
 800d388:	f002 fa64 	bl	800f854 <USB_CoreInit>
 800d38c:	4603      	mov	r3, r0
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d005      	beq.n	800d39e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2202      	movs	r2, #2
 800d396:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800d39a:	2301      	movs	r3, #1
 800d39c:	e0d7      	b.n	800d54e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	2100      	movs	r1, #0
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f002 fabe 	bl	800f926 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	73fb      	strb	r3, [r7, #15]
 800d3ae:	e04a      	b.n	800d446 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800d3b0:	7bfa      	ldrb	r2, [r7, #15]
 800d3b2:	6879      	ldr	r1, [r7, #4]
 800d3b4:	4613      	mov	r3, r2
 800d3b6:	00db      	lsls	r3, r3, #3
 800d3b8:	4413      	add	r3, r2
 800d3ba:	009b      	lsls	r3, r3, #2
 800d3bc:	440b      	add	r3, r1
 800d3be:	333d      	adds	r3, #61	; 0x3d
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800d3c4:	7bfa      	ldrb	r2, [r7, #15]
 800d3c6:	6879      	ldr	r1, [r7, #4]
 800d3c8:	4613      	mov	r3, r2
 800d3ca:	00db      	lsls	r3, r3, #3
 800d3cc:	4413      	add	r3, r2
 800d3ce:	009b      	lsls	r3, r3, #2
 800d3d0:	440b      	add	r3, r1
 800d3d2:	333c      	adds	r3, #60	; 0x3c
 800d3d4:	7bfa      	ldrb	r2, [r7, #15]
 800d3d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800d3d8:	7bfa      	ldrb	r2, [r7, #15]
 800d3da:	7bfb      	ldrb	r3, [r7, #15]
 800d3dc:	b298      	uxth	r0, r3
 800d3de:	6879      	ldr	r1, [r7, #4]
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	00db      	lsls	r3, r3, #3
 800d3e4:	4413      	add	r3, r2
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	440b      	add	r3, r1
 800d3ea:	3344      	adds	r3, #68	; 0x44
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800d3f0:	7bfa      	ldrb	r2, [r7, #15]
 800d3f2:	6879      	ldr	r1, [r7, #4]
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	00db      	lsls	r3, r3, #3
 800d3f8:	4413      	add	r3, r2
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	440b      	add	r3, r1
 800d3fe:	3340      	adds	r3, #64	; 0x40
 800d400:	2200      	movs	r2, #0
 800d402:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800d404:	7bfa      	ldrb	r2, [r7, #15]
 800d406:	6879      	ldr	r1, [r7, #4]
 800d408:	4613      	mov	r3, r2
 800d40a:	00db      	lsls	r3, r3, #3
 800d40c:	4413      	add	r3, r2
 800d40e:	009b      	lsls	r3, r3, #2
 800d410:	440b      	add	r3, r1
 800d412:	3348      	adds	r3, #72	; 0x48
 800d414:	2200      	movs	r2, #0
 800d416:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800d418:	7bfa      	ldrb	r2, [r7, #15]
 800d41a:	6879      	ldr	r1, [r7, #4]
 800d41c:	4613      	mov	r3, r2
 800d41e:	00db      	lsls	r3, r3, #3
 800d420:	4413      	add	r3, r2
 800d422:	009b      	lsls	r3, r3, #2
 800d424:	440b      	add	r3, r1
 800d426:	334c      	adds	r3, #76	; 0x4c
 800d428:	2200      	movs	r2, #0
 800d42a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800d42c:	7bfa      	ldrb	r2, [r7, #15]
 800d42e:	6879      	ldr	r1, [r7, #4]
 800d430:	4613      	mov	r3, r2
 800d432:	00db      	lsls	r3, r3, #3
 800d434:	4413      	add	r3, r2
 800d436:	009b      	lsls	r3, r3, #2
 800d438:	440b      	add	r3, r1
 800d43a:	3354      	adds	r3, #84	; 0x54
 800d43c:	2200      	movs	r2, #0
 800d43e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d440:	7bfb      	ldrb	r3, [r7, #15]
 800d442:	3301      	adds	r3, #1
 800d444:	73fb      	strb	r3, [r7, #15]
 800d446:	7bfa      	ldrb	r2, [r7, #15]
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	685b      	ldr	r3, [r3, #4]
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d3af      	bcc.n	800d3b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d450:	2300      	movs	r3, #0
 800d452:	73fb      	strb	r3, [r7, #15]
 800d454:	e044      	b.n	800d4e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800d456:	7bfa      	ldrb	r2, [r7, #15]
 800d458:	6879      	ldr	r1, [r7, #4]
 800d45a:	4613      	mov	r3, r2
 800d45c:	00db      	lsls	r3, r3, #3
 800d45e:	4413      	add	r3, r2
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	440b      	add	r3, r1
 800d464:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800d468:	2200      	movs	r2, #0
 800d46a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800d46c:	7bfa      	ldrb	r2, [r7, #15]
 800d46e:	6879      	ldr	r1, [r7, #4]
 800d470:	4613      	mov	r3, r2
 800d472:	00db      	lsls	r3, r3, #3
 800d474:	4413      	add	r3, r2
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	440b      	add	r3, r1
 800d47a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800d47e:	7bfa      	ldrb	r2, [r7, #15]
 800d480:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800d482:	7bfa      	ldrb	r2, [r7, #15]
 800d484:	6879      	ldr	r1, [r7, #4]
 800d486:	4613      	mov	r3, r2
 800d488:	00db      	lsls	r3, r3, #3
 800d48a:	4413      	add	r3, r2
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	440b      	add	r3, r1
 800d490:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d494:	2200      	movs	r2, #0
 800d496:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800d498:	7bfa      	ldrb	r2, [r7, #15]
 800d49a:	6879      	ldr	r1, [r7, #4]
 800d49c:	4613      	mov	r3, r2
 800d49e:	00db      	lsls	r3, r3, #3
 800d4a0:	4413      	add	r3, r2
 800d4a2:	009b      	lsls	r3, r3, #2
 800d4a4:	440b      	add	r3, r1
 800d4a6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800d4ae:	7bfa      	ldrb	r2, [r7, #15]
 800d4b0:	6879      	ldr	r1, [r7, #4]
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	00db      	lsls	r3, r3, #3
 800d4b6:	4413      	add	r3, r2
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	440b      	add	r3, r1
 800d4bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800d4c4:	7bfa      	ldrb	r2, [r7, #15]
 800d4c6:	6879      	ldr	r1, [r7, #4]
 800d4c8:	4613      	mov	r3, r2
 800d4ca:	00db      	lsls	r3, r3, #3
 800d4cc:	4413      	add	r3, r2
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	440b      	add	r3, r1
 800d4d2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d4da:	7bfb      	ldrb	r3, [r7, #15]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	73fb      	strb	r3, [r7, #15]
 800d4e0:	7bfa      	ldrb	r2, [r7, #15]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d3b5      	bcc.n	800d456 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	603b      	str	r3, [r7, #0]
 800d4f0:	687e      	ldr	r6, [r7, #4]
 800d4f2:	466d      	mov	r5, sp
 800d4f4:	f106 0410 	add.w	r4, r6, #16
 800d4f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d4fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d4fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d4fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d500:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d504:	e885 0003 	stmia.w	r5, {r0, r1}
 800d508:	1d33      	adds	r3, r6, #4
 800d50a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d50c:	6838      	ldr	r0, [r7, #0]
 800d50e:	f002 fa57 	bl	800f9c0 <USB_DevInit>
 800d512:	4603      	mov	r3, r0
 800d514:	2b00      	cmp	r3, #0
 800d516:	d005      	beq.n	800d524 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2202      	movs	r2, #2
 800d51c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800d520:	2301      	movs	r3, #1
 800d522:	e014      	b.n	800d54e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2200      	movs	r2, #0
 800d528:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2201      	movs	r2, #1
 800d530:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d538:	2b01      	cmp	r3, #1
 800d53a:	d102      	bne.n	800d542 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f000 f80b 	bl	800d558 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	4618      	mov	r0, r3
 800d548:	f002 fc15 	bl	800fd76 <USB_DevDisconnect>

  return HAL_OK;
 800d54c:	2300      	movs	r3, #0
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3714      	adds	r7, #20
 800d552:	46bd      	mov	sp, r7
 800d554:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800d558 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d558:	b480      	push	{r7}
 800d55a:	b085      	sub	sp, #20
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2201      	movs	r2, #1
 800d56a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2200      	movs	r2, #0
 800d572:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	699b      	ldr	r3, [r3, #24]
 800d57a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d586:	4b05      	ldr	r3, [pc, #20]	; (800d59c <HAL_PCDEx_ActivateLPM+0x44>)
 800d588:	4313      	orrs	r3, r2
 800d58a:	68fa      	ldr	r2, [r7, #12]
 800d58c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800d58e:	2300      	movs	r3, #0
}
 800d590:	4618      	mov	r0, r3
 800d592:	3714      	adds	r7, #20
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr
 800d59c:	10000003 	.word	0x10000003

0800d5a0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d5a4:	4b05      	ldr	r3, [pc, #20]	; (800d5bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a04      	ldr	r2, [pc, #16]	; (800d5bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d5aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d5ae:	6013      	str	r3, [r2, #0]
}
 800d5b0:	bf00      	nop
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b8:	4770      	bx	lr
 800d5ba:	bf00      	nop
 800d5bc:	40007000 	.word	0x40007000

0800d5c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b082      	sub	sp, #8
 800d5c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d5ca:	4b23      	ldr	r3, [pc, #140]	; (800d658 <HAL_PWREx_EnableOverDrive+0x98>)
 800d5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ce:	4a22      	ldr	r2, [pc, #136]	; (800d658 <HAL_PWREx_EnableOverDrive+0x98>)
 800d5d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5d4:	6413      	str	r3, [r2, #64]	; 0x40
 800d5d6:	4b20      	ldr	r3, [pc, #128]	; (800d658 <HAL_PWREx_EnableOverDrive+0x98>)
 800d5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d5de:	603b      	str	r3, [r7, #0]
 800d5e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d5e2:	4b1e      	ldr	r3, [pc, #120]	; (800d65c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	4a1d      	ldr	r2, [pc, #116]	; (800d65c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d5e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d5ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d5ee:	f7fe fc5d 	bl	800beac <HAL_GetTick>
 800d5f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d5f4:	e009      	b.n	800d60a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d5f6:	f7fe fc59 	bl	800beac <HAL_GetTick>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	1ad3      	subs	r3, r2, r3
 800d600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d604:	d901      	bls.n	800d60a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800d606:	2303      	movs	r3, #3
 800d608:	e022      	b.n	800d650 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d60a:	4b14      	ldr	r3, [pc, #80]	; (800d65c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d616:	d1ee      	bne.n	800d5f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d618:	4b10      	ldr	r3, [pc, #64]	; (800d65c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a0f      	ldr	r2, [pc, #60]	; (800d65c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d61e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d622:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d624:	f7fe fc42 	bl	800beac <HAL_GetTick>
 800d628:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d62a:	e009      	b.n	800d640 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d62c:	f7fe fc3e 	bl	800beac <HAL_GetTick>
 800d630:	4602      	mov	r2, r0
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	1ad3      	subs	r3, r2, r3
 800d636:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d63a:	d901      	bls.n	800d640 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800d63c:	2303      	movs	r3, #3
 800d63e:	e007      	b.n	800d650 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d640:	4b06      	ldr	r3, [pc, #24]	; (800d65c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d642:	685b      	ldr	r3, [r3, #4]
 800d644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d64c:	d1ee      	bne.n	800d62c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800d64e:	2300      	movs	r3, #0
}
 800d650:	4618      	mov	r0, r3
 800d652:	3708      	adds	r7, #8
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	40023800 	.word	0x40023800
 800d65c:	40007000 	.word	0x40007000

0800d660 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b086      	sub	sp, #24
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800d668:	2300      	movs	r3, #0
 800d66a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d101      	bne.n	800d676 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800d672:	2301      	movs	r3, #1
 800d674:	e29b      	b.n	800dbae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f003 0301 	and.w	r3, r3, #1
 800d67e:	2b00      	cmp	r3, #0
 800d680:	f000 8087 	beq.w	800d792 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d684:	4b96      	ldr	r3, [pc, #600]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d686:	689b      	ldr	r3, [r3, #8]
 800d688:	f003 030c 	and.w	r3, r3, #12
 800d68c:	2b04      	cmp	r3, #4
 800d68e:	d00c      	beq.n	800d6aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d690:	4b93      	ldr	r3, [pc, #588]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d692:	689b      	ldr	r3, [r3, #8]
 800d694:	f003 030c 	and.w	r3, r3, #12
 800d698:	2b08      	cmp	r3, #8
 800d69a:	d112      	bne.n	800d6c2 <HAL_RCC_OscConfig+0x62>
 800d69c:	4b90      	ldr	r3, [pc, #576]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d6a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d6a8:	d10b      	bne.n	800d6c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d6aa:	4b8d      	ldr	r3, [pc, #564]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d06c      	beq.n	800d790 <HAL_RCC_OscConfig+0x130>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d168      	bne.n	800d790 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	e275      	b.n	800dbae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6ca:	d106      	bne.n	800d6da <HAL_RCC_OscConfig+0x7a>
 800d6cc:	4b84      	ldr	r3, [pc, #528]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a83      	ldr	r2, [pc, #524]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d6d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6d6:	6013      	str	r3, [r2, #0]
 800d6d8:	e02e      	b.n	800d738 <HAL_RCC_OscConfig+0xd8>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d10c      	bne.n	800d6fc <HAL_RCC_OscConfig+0x9c>
 800d6e2:	4b7f      	ldr	r3, [pc, #508]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	4a7e      	ldr	r2, [pc, #504]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d6e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d6ec:	6013      	str	r3, [r2, #0]
 800d6ee:	4b7c      	ldr	r3, [pc, #496]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	4a7b      	ldr	r2, [pc, #492]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d6f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d6f8:	6013      	str	r3, [r2, #0]
 800d6fa:	e01d      	b.n	800d738 <HAL_RCC_OscConfig+0xd8>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d704:	d10c      	bne.n	800d720 <HAL_RCC_OscConfig+0xc0>
 800d706:	4b76      	ldr	r3, [pc, #472]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4a75      	ldr	r2, [pc, #468]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d70c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d710:	6013      	str	r3, [r2, #0]
 800d712:	4b73      	ldr	r3, [pc, #460]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4a72      	ldr	r2, [pc, #456]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d71c:	6013      	str	r3, [r2, #0]
 800d71e:	e00b      	b.n	800d738 <HAL_RCC_OscConfig+0xd8>
 800d720:	4b6f      	ldr	r3, [pc, #444]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	4a6e      	ldr	r2, [pc, #440]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d72a:	6013      	str	r3, [r2, #0]
 800d72c:	4b6c      	ldr	r3, [pc, #432]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a6b      	ldr	r2, [pc, #428]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	685b      	ldr	r3, [r3, #4]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d013      	beq.n	800d768 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d740:	f7fe fbb4 	bl	800beac <HAL_GetTick>
 800d744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d746:	e008      	b.n	800d75a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d748:	f7fe fbb0 	bl	800beac <HAL_GetTick>
 800d74c:	4602      	mov	r2, r0
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	1ad3      	subs	r3, r2, r3
 800d752:	2b64      	cmp	r3, #100	; 0x64
 800d754:	d901      	bls.n	800d75a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d756:	2303      	movs	r3, #3
 800d758:	e229      	b.n	800dbae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d75a:	4b61      	ldr	r3, [pc, #388]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d762:	2b00      	cmp	r3, #0
 800d764:	d0f0      	beq.n	800d748 <HAL_RCC_OscConfig+0xe8>
 800d766:	e014      	b.n	800d792 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d768:	f7fe fba0 	bl	800beac <HAL_GetTick>
 800d76c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d76e:	e008      	b.n	800d782 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d770:	f7fe fb9c 	bl	800beac <HAL_GetTick>
 800d774:	4602      	mov	r2, r0
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	1ad3      	subs	r3, r2, r3
 800d77a:	2b64      	cmp	r3, #100	; 0x64
 800d77c:	d901      	bls.n	800d782 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d77e:	2303      	movs	r3, #3
 800d780:	e215      	b.n	800dbae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d782:	4b57      	ldr	r3, [pc, #348]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d1f0      	bne.n	800d770 <HAL_RCC_OscConfig+0x110>
 800d78e:	e000      	b.n	800d792 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f003 0302 	and.w	r3, r3, #2
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d069      	beq.n	800d872 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d79e:	4b50      	ldr	r3, [pc, #320]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d7a0:	689b      	ldr	r3, [r3, #8]
 800d7a2:	f003 030c 	and.w	r3, r3, #12
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d00b      	beq.n	800d7c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d7aa:	4b4d      	ldr	r3, [pc, #308]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d7ac:	689b      	ldr	r3, [r3, #8]
 800d7ae:	f003 030c 	and.w	r3, r3, #12
 800d7b2:	2b08      	cmp	r3, #8
 800d7b4:	d11c      	bne.n	800d7f0 <HAL_RCC_OscConfig+0x190>
 800d7b6:	4b4a      	ldr	r3, [pc, #296]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d116      	bne.n	800d7f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d7c2:	4b47      	ldr	r3, [pc, #284]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f003 0302 	and.w	r3, r3, #2
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d005      	beq.n	800d7da <HAL_RCC_OscConfig+0x17a>
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	68db      	ldr	r3, [r3, #12]
 800d7d2:	2b01      	cmp	r3, #1
 800d7d4:	d001      	beq.n	800d7da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	e1e9      	b.n	800dbae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d7da:	4b41      	ldr	r3, [pc, #260]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	691b      	ldr	r3, [r3, #16]
 800d7e6:	00db      	lsls	r3, r3, #3
 800d7e8:	493d      	ldr	r1, [pc, #244]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d7ee:	e040      	b.n	800d872 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d023      	beq.n	800d840 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d7f8:	4b39      	ldr	r3, [pc, #228]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4a38      	ldr	r2, [pc, #224]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d7fe:	f043 0301 	orr.w	r3, r3, #1
 800d802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d804:	f7fe fb52 	bl	800beac <HAL_GetTick>
 800d808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d80a:	e008      	b.n	800d81e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d80c:	f7fe fb4e 	bl	800beac <HAL_GetTick>
 800d810:	4602      	mov	r2, r0
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	1ad3      	subs	r3, r2, r3
 800d816:	2b02      	cmp	r3, #2
 800d818:	d901      	bls.n	800d81e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800d81a:	2303      	movs	r3, #3
 800d81c:	e1c7      	b.n	800dbae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d81e:	4b30      	ldr	r3, [pc, #192]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f003 0302 	and.w	r3, r3, #2
 800d826:	2b00      	cmp	r3, #0
 800d828:	d0f0      	beq.n	800d80c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d82a:	4b2d      	ldr	r3, [pc, #180]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	691b      	ldr	r3, [r3, #16]
 800d836:	00db      	lsls	r3, r3, #3
 800d838:	4929      	ldr	r1, [pc, #164]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d83a:	4313      	orrs	r3, r2
 800d83c:	600b      	str	r3, [r1, #0]
 800d83e:	e018      	b.n	800d872 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d840:	4b27      	ldr	r3, [pc, #156]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4a26      	ldr	r2, [pc, #152]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d846:	f023 0301 	bic.w	r3, r3, #1
 800d84a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d84c:	f7fe fb2e 	bl	800beac <HAL_GetTick>
 800d850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d852:	e008      	b.n	800d866 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d854:	f7fe fb2a 	bl	800beac <HAL_GetTick>
 800d858:	4602      	mov	r2, r0
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	1ad3      	subs	r3, r2, r3
 800d85e:	2b02      	cmp	r3, #2
 800d860:	d901      	bls.n	800d866 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800d862:	2303      	movs	r3, #3
 800d864:	e1a3      	b.n	800dbae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d866:	4b1e      	ldr	r3, [pc, #120]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f003 0302 	and.w	r3, r3, #2
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d1f0      	bne.n	800d854 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f003 0308 	and.w	r3, r3, #8
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d038      	beq.n	800d8f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	695b      	ldr	r3, [r3, #20]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d019      	beq.n	800d8ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d886:	4b16      	ldr	r3, [pc, #88]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d88a:	4a15      	ldr	r2, [pc, #84]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d88c:	f043 0301 	orr.w	r3, r3, #1
 800d890:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d892:	f7fe fb0b 	bl	800beac <HAL_GetTick>
 800d896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d898:	e008      	b.n	800d8ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d89a:	f7fe fb07 	bl	800beac <HAL_GetTick>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	1ad3      	subs	r3, r2, r3
 800d8a4:	2b02      	cmp	r3, #2
 800d8a6:	d901      	bls.n	800d8ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d8a8:	2303      	movs	r3, #3
 800d8aa:	e180      	b.n	800dbae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d8ac:	4b0c      	ldr	r3, [pc, #48]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d8ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8b0:	f003 0302 	and.w	r3, r3, #2
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d0f0      	beq.n	800d89a <HAL_RCC_OscConfig+0x23a>
 800d8b8:	e01a      	b.n	800d8f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d8ba:	4b09      	ldr	r3, [pc, #36]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d8bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8be:	4a08      	ldr	r2, [pc, #32]	; (800d8e0 <HAL_RCC_OscConfig+0x280>)
 800d8c0:	f023 0301 	bic.w	r3, r3, #1
 800d8c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d8c6:	f7fe faf1 	bl	800beac <HAL_GetTick>
 800d8ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d8cc:	e00a      	b.n	800d8e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d8ce:	f7fe faed 	bl	800beac <HAL_GetTick>
 800d8d2:	4602      	mov	r2, r0
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	1ad3      	subs	r3, r2, r3
 800d8d8:	2b02      	cmp	r3, #2
 800d8da:	d903      	bls.n	800d8e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d8dc:	2303      	movs	r3, #3
 800d8de:	e166      	b.n	800dbae <HAL_RCC_OscConfig+0x54e>
 800d8e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d8e4:	4b92      	ldr	r3, [pc, #584]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800d8e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8e8:	f003 0302 	and.w	r3, r3, #2
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d1ee      	bne.n	800d8ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f003 0304 	and.w	r3, r3, #4
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f000 80a4 	beq.w	800da46 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d8fe:	4b8c      	ldr	r3, [pc, #560]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800d900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d906:	2b00      	cmp	r3, #0
 800d908:	d10d      	bne.n	800d926 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800d90a:	4b89      	ldr	r3, [pc, #548]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800d90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d90e:	4a88      	ldr	r2, [pc, #544]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800d910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d914:	6413      	str	r3, [r2, #64]	; 0x40
 800d916:	4b86      	ldr	r3, [pc, #536]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800d918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d91a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d91e:	60bb      	str	r3, [r7, #8]
 800d920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d922:	2301      	movs	r3, #1
 800d924:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d926:	4b83      	ldr	r3, [pc, #524]	; (800db34 <HAL_RCC_OscConfig+0x4d4>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d118      	bne.n	800d964 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800d932:	4b80      	ldr	r3, [pc, #512]	; (800db34 <HAL_RCC_OscConfig+0x4d4>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	4a7f      	ldr	r2, [pc, #508]	; (800db34 <HAL_RCC_OscConfig+0x4d4>)
 800d938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d93c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d93e:	f7fe fab5 	bl	800beac <HAL_GetTick>
 800d942:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d944:	e008      	b.n	800d958 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d946:	f7fe fab1 	bl	800beac <HAL_GetTick>
 800d94a:	4602      	mov	r2, r0
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	1ad3      	subs	r3, r2, r3
 800d950:	2b64      	cmp	r3, #100	; 0x64
 800d952:	d901      	bls.n	800d958 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800d954:	2303      	movs	r3, #3
 800d956:	e12a      	b.n	800dbae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d958:	4b76      	ldr	r3, [pc, #472]	; (800db34 <HAL_RCC_OscConfig+0x4d4>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d960:	2b00      	cmp	r3, #0
 800d962:	d0f0      	beq.n	800d946 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	689b      	ldr	r3, [r3, #8]
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d106      	bne.n	800d97a <HAL_RCC_OscConfig+0x31a>
 800d96c:	4b70      	ldr	r3, [pc, #448]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800d96e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d970:	4a6f      	ldr	r2, [pc, #444]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800d972:	f043 0301 	orr.w	r3, r3, #1
 800d976:	6713      	str	r3, [r2, #112]	; 0x70
 800d978:	e02d      	b.n	800d9d6 <HAL_RCC_OscConfig+0x376>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	689b      	ldr	r3, [r3, #8]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d10c      	bne.n	800d99c <HAL_RCC_OscConfig+0x33c>
 800d982:	4b6b      	ldr	r3, [pc, #428]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800d984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d986:	4a6a      	ldr	r2, [pc, #424]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800d988:	f023 0301 	bic.w	r3, r3, #1
 800d98c:	6713      	str	r3, [r2, #112]	; 0x70
 800d98e:	4b68      	ldr	r3, [pc, #416]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800d990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d992:	4a67      	ldr	r2, [pc, #412]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800d994:	f023 0304 	bic.w	r3, r3, #4
 800d998:	6713      	str	r3, [r2, #112]	; 0x70
 800d99a:	e01c      	b.n	800d9d6 <HAL_RCC_OscConfig+0x376>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	2b05      	cmp	r3, #5
 800d9a2:	d10c      	bne.n	800d9be <HAL_RCC_OscConfig+0x35e>
 800d9a4:	4b62      	ldr	r3, [pc, #392]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800d9a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9a8:	4a61      	ldr	r2, [pc, #388]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800d9aa:	f043 0304 	orr.w	r3, r3, #4
 800d9ae:	6713      	str	r3, [r2, #112]	; 0x70
 800d9b0:	4b5f      	ldr	r3, [pc, #380]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800d9b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9b4:	4a5e      	ldr	r2, [pc, #376]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800d9b6:	f043 0301 	orr.w	r3, r3, #1
 800d9ba:	6713      	str	r3, [r2, #112]	; 0x70
 800d9bc:	e00b      	b.n	800d9d6 <HAL_RCC_OscConfig+0x376>
 800d9be:	4b5c      	ldr	r3, [pc, #368]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800d9c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9c2:	4a5b      	ldr	r2, [pc, #364]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800d9c4:	f023 0301 	bic.w	r3, r3, #1
 800d9c8:	6713      	str	r3, [r2, #112]	; 0x70
 800d9ca:	4b59      	ldr	r3, [pc, #356]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800d9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9ce:	4a58      	ldr	r2, [pc, #352]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800d9d0:	f023 0304 	bic.w	r3, r3, #4
 800d9d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d015      	beq.n	800da0a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9de:	f7fe fa65 	bl	800beac <HAL_GetTick>
 800d9e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d9e4:	e00a      	b.n	800d9fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d9e6:	f7fe fa61 	bl	800beac <HAL_GetTick>
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	1ad3      	subs	r3, r2, r3
 800d9f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d901      	bls.n	800d9fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800d9f8:	2303      	movs	r3, #3
 800d9fa:	e0d8      	b.n	800dbae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d9fc:	4b4c      	ldr	r3, [pc, #304]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800d9fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da00:	f003 0302 	and.w	r3, r3, #2
 800da04:	2b00      	cmp	r3, #0
 800da06:	d0ee      	beq.n	800d9e6 <HAL_RCC_OscConfig+0x386>
 800da08:	e014      	b.n	800da34 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da0a:	f7fe fa4f 	bl	800beac <HAL_GetTick>
 800da0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800da10:	e00a      	b.n	800da28 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da12:	f7fe fa4b 	bl	800beac <HAL_GetTick>
 800da16:	4602      	mov	r2, r0
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	1ad3      	subs	r3, r2, r3
 800da1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800da20:	4293      	cmp	r3, r2
 800da22:	d901      	bls.n	800da28 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800da24:	2303      	movs	r3, #3
 800da26:	e0c2      	b.n	800dbae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800da28:	4b41      	ldr	r3, [pc, #260]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800da2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da2c:	f003 0302 	and.w	r3, r3, #2
 800da30:	2b00      	cmp	r3, #0
 800da32:	d1ee      	bne.n	800da12 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800da34:	7dfb      	ldrb	r3, [r7, #23]
 800da36:	2b01      	cmp	r3, #1
 800da38:	d105      	bne.n	800da46 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800da3a:	4b3d      	ldr	r3, [pc, #244]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800da3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da3e:	4a3c      	ldr	r2, [pc, #240]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800da40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800da44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	699b      	ldr	r3, [r3, #24]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	f000 80ae 	beq.w	800dbac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800da50:	4b37      	ldr	r3, [pc, #220]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800da52:	689b      	ldr	r3, [r3, #8]
 800da54:	f003 030c 	and.w	r3, r3, #12
 800da58:	2b08      	cmp	r3, #8
 800da5a:	d06d      	beq.n	800db38 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	699b      	ldr	r3, [r3, #24]
 800da60:	2b02      	cmp	r3, #2
 800da62:	d14b      	bne.n	800dafc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800da64:	4b32      	ldr	r3, [pc, #200]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4a31      	ldr	r2, [pc, #196]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800da6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800da6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da70:	f7fe fa1c 	bl	800beac <HAL_GetTick>
 800da74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da76:	e008      	b.n	800da8a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800da78:	f7fe fa18 	bl	800beac <HAL_GetTick>
 800da7c:	4602      	mov	r2, r0
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	1ad3      	subs	r3, r2, r3
 800da82:	2b02      	cmp	r3, #2
 800da84:	d901      	bls.n	800da8a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800da86:	2303      	movs	r3, #3
 800da88:	e091      	b.n	800dbae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da8a:	4b29      	ldr	r3, [pc, #164]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da92:	2b00      	cmp	r3, #0
 800da94:	d1f0      	bne.n	800da78 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	69da      	ldr	r2, [r3, #28]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6a1b      	ldr	r3, [r3, #32]
 800da9e:	431a      	orrs	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa4:	019b      	lsls	r3, r3, #6
 800daa6:	431a      	orrs	r2, r3
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daac:	085b      	lsrs	r3, r3, #1
 800daae:	3b01      	subs	r3, #1
 800dab0:	041b      	lsls	r3, r3, #16
 800dab2:	431a      	orrs	r2, r3
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab8:	061b      	lsls	r3, r3, #24
 800daba:	431a      	orrs	r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dac0:	071b      	lsls	r3, r3, #28
 800dac2:	491b      	ldr	r1, [pc, #108]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800dac4:	4313      	orrs	r3, r2
 800dac6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dac8:	4b19      	ldr	r3, [pc, #100]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4a18      	ldr	r2, [pc, #96]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800dace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dad4:	f7fe f9ea 	bl	800beac <HAL_GetTick>
 800dad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dada:	e008      	b.n	800daee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dadc:	f7fe f9e6 	bl	800beac <HAL_GetTick>
 800dae0:	4602      	mov	r2, r0
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	1ad3      	subs	r3, r2, r3
 800dae6:	2b02      	cmp	r3, #2
 800dae8:	d901      	bls.n	800daee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800daea:	2303      	movs	r3, #3
 800daec:	e05f      	b.n	800dbae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800daee:	4b10      	ldr	r3, [pc, #64]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d0f0      	beq.n	800dadc <HAL_RCC_OscConfig+0x47c>
 800dafa:	e057      	b.n	800dbac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dafc:	4b0c      	ldr	r3, [pc, #48]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4a0b      	ldr	r2, [pc, #44]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800db02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800db06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db08:	f7fe f9d0 	bl	800beac <HAL_GetTick>
 800db0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db0e:	e008      	b.n	800db22 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db10:	f7fe f9cc 	bl	800beac <HAL_GetTick>
 800db14:	4602      	mov	r2, r0
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	1ad3      	subs	r3, r2, r3
 800db1a:	2b02      	cmp	r3, #2
 800db1c:	d901      	bls.n	800db22 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800db1e:	2303      	movs	r3, #3
 800db20:	e045      	b.n	800dbae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db22:	4b03      	ldr	r3, [pc, #12]	; (800db30 <HAL_RCC_OscConfig+0x4d0>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d1f0      	bne.n	800db10 <HAL_RCC_OscConfig+0x4b0>
 800db2e:	e03d      	b.n	800dbac <HAL_RCC_OscConfig+0x54c>
 800db30:	40023800 	.word	0x40023800
 800db34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800db38:	4b1f      	ldr	r3, [pc, #124]	; (800dbb8 <HAL_RCC_OscConfig+0x558>)
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	699b      	ldr	r3, [r3, #24]
 800db42:	2b01      	cmp	r3, #1
 800db44:	d030      	beq.n	800dba8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800db50:	429a      	cmp	r2, r3
 800db52:	d129      	bne.n	800dba8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800db5e:	429a      	cmp	r2, r3
 800db60:	d122      	bne.n	800dba8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800db62:	68fa      	ldr	r2, [r7, #12]
 800db64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800db68:	4013      	ands	r3, r2
 800db6a:	687a      	ldr	r2, [r7, #4]
 800db6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800db6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800db70:	4293      	cmp	r3, r2
 800db72:	d119      	bne.n	800dba8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db7e:	085b      	lsrs	r3, r3, #1
 800db80:	3b01      	subs	r3, #1
 800db82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800db84:	429a      	cmp	r2, r3
 800db86:	d10f      	bne.n	800dba8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800db94:	429a      	cmp	r2, r3
 800db96:	d107      	bne.n	800dba8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dba2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d001      	beq.n	800dbac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	e000      	b.n	800dbae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800dbac:	2300      	movs	r3, #0
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3718      	adds	r7, #24
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	40023800 	.word	0x40023800

0800dbbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b084      	sub	sp, #16
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d101      	bne.n	800dbd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	e0d0      	b.n	800dd76 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dbd4:	4b6a      	ldr	r3, [pc, #424]	; (800dd80 <HAL_RCC_ClockConfig+0x1c4>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f003 030f 	and.w	r3, r3, #15
 800dbdc:	683a      	ldr	r2, [r7, #0]
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d910      	bls.n	800dc04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dbe2:	4b67      	ldr	r3, [pc, #412]	; (800dd80 <HAL_RCC_ClockConfig+0x1c4>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f023 020f 	bic.w	r2, r3, #15
 800dbea:	4965      	ldr	r1, [pc, #404]	; (800dd80 <HAL_RCC_ClockConfig+0x1c4>)
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dbf2:	4b63      	ldr	r3, [pc, #396]	; (800dd80 <HAL_RCC_ClockConfig+0x1c4>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f003 030f 	and.w	r3, r3, #15
 800dbfa:	683a      	ldr	r2, [r7, #0]
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d001      	beq.n	800dc04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800dc00:	2301      	movs	r3, #1
 800dc02:	e0b8      	b.n	800dd76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f003 0302 	and.w	r3, r3, #2
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d020      	beq.n	800dc52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f003 0304 	and.w	r3, r3, #4
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d005      	beq.n	800dc28 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dc1c:	4b59      	ldr	r3, [pc, #356]	; (800dd84 <HAL_RCC_ClockConfig+0x1c8>)
 800dc1e:	689b      	ldr	r3, [r3, #8]
 800dc20:	4a58      	ldr	r2, [pc, #352]	; (800dd84 <HAL_RCC_ClockConfig+0x1c8>)
 800dc22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dc26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f003 0308 	and.w	r3, r3, #8
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d005      	beq.n	800dc40 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dc34:	4b53      	ldr	r3, [pc, #332]	; (800dd84 <HAL_RCC_ClockConfig+0x1c8>)
 800dc36:	689b      	ldr	r3, [r3, #8]
 800dc38:	4a52      	ldr	r2, [pc, #328]	; (800dd84 <HAL_RCC_ClockConfig+0x1c8>)
 800dc3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800dc3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dc40:	4b50      	ldr	r3, [pc, #320]	; (800dd84 <HAL_RCC_ClockConfig+0x1c8>)
 800dc42:	689b      	ldr	r3, [r3, #8]
 800dc44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	689b      	ldr	r3, [r3, #8]
 800dc4c:	494d      	ldr	r1, [pc, #308]	; (800dd84 <HAL_RCC_ClockConfig+0x1c8>)
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f003 0301 	and.w	r3, r3, #1
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d040      	beq.n	800dce0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	685b      	ldr	r3, [r3, #4]
 800dc62:	2b01      	cmp	r3, #1
 800dc64:	d107      	bne.n	800dc76 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dc66:	4b47      	ldr	r3, [pc, #284]	; (800dd84 <HAL_RCC_ClockConfig+0x1c8>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d115      	bne.n	800dc9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800dc72:	2301      	movs	r3, #1
 800dc74:	e07f      	b.n	800dd76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	685b      	ldr	r3, [r3, #4]
 800dc7a:	2b02      	cmp	r3, #2
 800dc7c:	d107      	bne.n	800dc8e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dc7e:	4b41      	ldr	r3, [pc, #260]	; (800dd84 <HAL_RCC_ClockConfig+0x1c8>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d109      	bne.n	800dc9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	e073      	b.n	800dd76 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dc8e:	4b3d      	ldr	r3, [pc, #244]	; (800dd84 <HAL_RCC_ClockConfig+0x1c8>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f003 0302 	and.w	r3, r3, #2
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d101      	bne.n	800dc9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	e06b      	b.n	800dd76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dc9e:	4b39      	ldr	r3, [pc, #228]	; (800dd84 <HAL_RCC_ClockConfig+0x1c8>)
 800dca0:	689b      	ldr	r3, [r3, #8]
 800dca2:	f023 0203 	bic.w	r2, r3, #3
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	4936      	ldr	r1, [pc, #216]	; (800dd84 <HAL_RCC_ClockConfig+0x1c8>)
 800dcac:	4313      	orrs	r3, r2
 800dcae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dcb0:	f7fe f8fc 	bl	800beac <HAL_GetTick>
 800dcb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dcb6:	e00a      	b.n	800dcce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dcb8:	f7fe f8f8 	bl	800beac <HAL_GetTick>
 800dcbc:	4602      	mov	r2, r0
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	1ad3      	subs	r3, r2, r3
 800dcc2:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d901      	bls.n	800dcce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800dcca:	2303      	movs	r3, #3
 800dccc:	e053      	b.n	800dd76 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dcce:	4b2d      	ldr	r3, [pc, #180]	; (800dd84 <HAL_RCC_ClockConfig+0x1c8>)
 800dcd0:	689b      	ldr	r3, [r3, #8]
 800dcd2:	f003 020c 	and.w	r2, r3, #12
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	685b      	ldr	r3, [r3, #4]
 800dcda:	009b      	lsls	r3, r3, #2
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	d1eb      	bne.n	800dcb8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800dce0:	4b27      	ldr	r3, [pc, #156]	; (800dd80 <HAL_RCC_ClockConfig+0x1c4>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	f003 030f 	and.w	r3, r3, #15
 800dce8:	683a      	ldr	r2, [r7, #0]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d210      	bcs.n	800dd10 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dcee:	4b24      	ldr	r3, [pc, #144]	; (800dd80 <HAL_RCC_ClockConfig+0x1c4>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	f023 020f 	bic.w	r2, r3, #15
 800dcf6:	4922      	ldr	r1, [pc, #136]	; (800dd80 <HAL_RCC_ClockConfig+0x1c4>)
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	4313      	orrs	r3, r2
 800dcfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dcfe:	4b20      	ldr	r3, [pc, #128]	; (800dd80 <HAL_RCC_ClockConfig+0x1c4>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f003 030f 	and.w	r3, r3, #15
 800dd06:	683a      	ldr	r2, [r7, #0]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d001      	beq.n	800dd10 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	e032      	b.n	800dd76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f003 0304 	and.w	r3, r3, #4
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d008      	beq.n	800dd2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dd1c:	4b19      	ldr	r3, [pc, #100]	; (800dd84 <HAL_RCC_ClockConfig+0x1c8>)
 800dd1e:	689b      	ldr	r3, [r3, #8]
 800dd20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	68db      	ldr	r3, [r3, #12]
 800dd28:	4916      	ldr	r1, [pc, #88]	; (800dd84 <HAL_RCC_ClockConfig+0x1c8>)
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f003 0308 	and.w	r3, r3, #8
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d009      	beq.n	800dd4e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800dd3a:	4b12      	ldr	r3, [pc, #72]	; (800dd84 <HAL_RCC_ClockConfig+0x1c8>)
 800dd3c:	689b      	ldr	r3, [r3, #8]
 800dd3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	691b      	ldr	r3, [r3, #16]
 800dd46:	00db      	lsls	r3, r3, #3
 800dd48:	490e      	ldr	r1, [pc, #56]	; (800dd84 <HAL_RCC_ClockConfig+0x1c8>)
 800dd4a:	4313      	orrs	r3, r2
 800dd4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800dd4e:	f000 f821 	bl	800dd94 <HAL_RCC_GetSysClockFreq>
 800dd52:	4602      	mov	r2, r0
 800dd54:	4b0b      	ldr	r3, [pc, #44]	; (800dd84 <HAL_RCC_ClockConfig+0x1c8>)
 800dd56:	689b      	ldr	r3, [r3, #8]
 800dd58:	091b      	lsrs	r3, r3, #4
 800dd5a:	f003 030f 	and.w	r3, r3, #15
 800dd5e:	490a      	ldr	r1, [pc, #40]	; (800dd88 <HAL_RCC_ClockConfig+0x1cc>)
 800dd60:	5ccb      	ldrb	r3, [r1, r3]
 800dd62:	fa22 f303 	lsr.w	r3, r2, r3
 800dd66:	4a09      	ldr	r2, [pc, #36]	; (800dd8c <HAL_RCC_ClockConfig+0x1d0>)
 800dd68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800dd6a:	4b09      	ldr	r3, [pc, #36]	; (800dd90 <HAL_RCC_ClockConfig+0x1d4>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7f8 fbf6 	bl	8006560 <HAL_InitTick>

  return HAL_OK;
 800dd74:	2300      	movs	r3, #0
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3710      	adds	r7, #16
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	40023c00 	.word	0x40023c00
 800dd84:	40023800 	.word	0x40023800
 800dd88:	080186b8 	.word	0x080186b8
 800dd8c:	20000058 	.word	0x20000058
 800dd90:	200001b4 	.word	0x200001b4

0800dd94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dd94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd98:	b094      	sub	sp, #80	; 0x50
 800dd9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	647b      	str	r3, [r7, #68]	; 0x44
 800dda0:	2300      	movs	r3, #0
 800dda2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dda4:	2300      	movs	r3, #0
 800dda6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ddac:	4b79      	ldr	r3, [pc, #484]	; (800df94 <HAL_RCC_GetSysClockFreq+0x200>)
 800ddae:	689b      	ldr	r3, [r3, #8]
 800ddb0:	f003 030c 	and.w	r3, r3, #12
 800ddb4:	2b08      	cmp	r3, #8
 800ddb6:	d00d      	beq.n	800ddd4 <HAL_RCC_GetSysClockFreq+0x40>
 800ddb8:	2b08      	cmp	r3, #8
 800ddba:	f200 80e1 	bhi.w	800df80 <HAL_RCC_GetSysClockFreq+0x1ec>
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d002      	beq.n	800ddc8 <HAL_RCC_GetSysClockFreq+0x34>
 800ddc2:	2b04      	cmp	r3, #4
 800ddc4:	d003      	beq.n	800ddce <HAL_RCC_GetSysClockFreq+0x3a>
 800ddc6:	e0db      	b.n	800df80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ddc8:	4b73      	ldr	r3, [pc, #460]	; (800df98 <HAL_RCC_GetSysClockFreq+0x204>)
 800ddca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ddcc:	e0db      	b.n	800df86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ddce:	4b73      	ldr	r3, [pc, #460]	; (800df9c <HAL_RCC_GetSysClockFreq+0x208>)
 800ddd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ddd2:	e0d8      	b.n	800df86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ddd4:	4b6f      	ldr	r3, [pc, #444]	; (800df94 <HAL_RCC_GetSysClockFreq+0x200>)
 800ddd6:	685b      	ldr	r3, [r3, #4]
 800ddd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dddc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ddde:	4b6d      	ldr	r3, [pc, #436]	; (800df94 <HAL_RCC_GetSysClockFreq+0x200>)
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d063      	beq.n	800deb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ddea:	4b6a      	ldr	r3, [pc, #424]	; (800df94 <HAL_RCC_GetSysClockFreq+0x200>)
 800ddec:	685b      	ldr	r3, [r3, #4]
 800ddee:	099b      	lsrs	r3, r3, #6
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	63bb      	str	r3, [r7, #56]	; 0x38
 800ddf4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ddf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddfc:	633b      	str	r3, [r7, #48]	; 0x30
 800ddfe:	2300      	movs	r3, #0
 800de00:	637b      	str	r3, [r7, #52]	; 0x34
 800de02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800de06:	4622      	mov	r2, r4
 800de08:	462b      	mov	r3, r5
 800de0a:	f04f 0000 	mov.w	r0, #0
 800de0e:	f04f 0100 	mov.w	r1, #0
 800de12:	0159      	lsls	r1, r3, #5
 800de14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800de18:	0150      	lsls	r0, r2, #5
 800de1a:	4602      	mov	r2, r0
 800de1c:	460b      	mov	r3, r1
 800de1e:	4621      	mov	r1, r4
 800de20:	1a51      	subs	r1, r2, r1
 800de22:	6139      	str	r1, [r7, #16]
 800de24:	4629      	mov	r1, r5
 800de26:	eb63 0301 	sbc.w	r3, r3, r1
 800de2a:	617b      	str	r3, [r7, #20]
 800de2c:	f04f 0200 	mov.w	r2, #0
 800de30:	f04f 0300 	mov.w	r3, #0
 800de34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800de38:	4659      	mov	r1, fp
 800de3a:	018b      	lsls	r3, r1, #6
 800de3c:	4651      	mov	r1, sl
 800de3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800de42:	4651      	mov	r1, sl
 800de44:	018a      	lsls	r2, r1, #6
 800de46:	4651      	mov	r1, sl
 800de48:	ebb2 0801 	subs.w	r8, r2, r1
 800de4c:	4659      	mov	r1, fp
 800de4e:	eb63 0901 	sbc.w	r9, r3, r1
 800de52:	f04f 0200 	mov.w	r2, #0
 800de56:	f04f 0300 	mov.w	r3, #0
 800de5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800de5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800de62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800de66:	4690      	mov	r8, r2
 800de68:	4699      	mov	r9, r3
 800de6a:	4623      	mov	r3, r4
 800de6c:	eb18 0303 	adds.w	r3, r8, r3
 800de70:	60bb      	str	r3, [r7, #8]
 800de72:	462b      	mov	r3, r5
 800de74:	eb49 0303 	adc.w	r3, r9, r3
 800de78:	60fb      	str	r3, [r7, #12]
 800de7a:	f04f 0200 	mov.w	r2, #0
 800de7e:	f04f 0300 	mov.w	r3, #0
 800de82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800de86:	4629      	mov	r1, r5
 800de88:	024b      	lsls	r3, r1, #9
 800de8a:	4621      	mov	r1, r4
 800de8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800de90:	4621      	mov	r1, r4
 800de92:	024a      	lsls	r2, r1, #9
 800de94:	4610      	mov	r0, r2
 800de96:	4619      	mov	r1, r3
 800de98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de9a:	2200      	movs	r2, #0
 800de9c:	62bb      	str	r3, [r7, #40]	; 0x28
 800de9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dea0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800dea4:	f7f2 fbe0 	bl	8000668 <__aeabi_uldivmod>
 800dea8:	4602      	mov	r2, r0
 800deaa:	460b      	mov	r3, r1
 800deac:	4613      	mov	r3, r2
 800deae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800deb0:	e058      	b.n	800df64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800deb2:	4b38      	ldr	r3, [pc, #224]	; (800df94 <HAL_RCC_GetSysClockFreq+0x200>)
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	099b      	lsrs	r3, r3, #6
 800deb8:	2200      	movs	r2, #0
 800deba:	4618      	mov	r0, r3
 800debc:	4611      	mov	r1, r2
 800debe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800dec2:	623b      	str	r3, [r7, #32]
 800dec4:	2300      	movs	r3, #0
 800dec6:	627b      	str	r3, [r7, #36]	; 0x24
 800dec8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800decc:	4642      	mov	r2, r8
 800dece:	464b      	mov	r3, r9
 800ded0:	f04f 0000 	mov.w	r0, #0
 800ded4:	f04f 0100 	mov.w	r1, #0
 800ded8:	0159      	lsls	r1, r3, #5
 800deda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800dede:	0150      	lsls	r0, r2, #5
 800dee0:	4602      	mov	r2, r0
 800dee2:	460b      	mov	r3, r1
 800dee4:	4641      	mov	r1, r8
 800dee6:	ebb2 0a01 	subs.w	sl, r2, r1
 800deea:	4649      	mov	r1, r9
 800deec:	eb63 0b01 	sbc.w	fp, r3, r1
 800def0:	f04f 0200 	mov.w	r2, #0
 800def4:	f04f 0300 	mov.w	r3, #0
 800def8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800defc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800df00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800df04:	ebb2 040a 	subs.w	r4, r2, sl
 800df08:	eb63 050b 	sbc.w	r5, r3, fp
 800df0c:	f04f 0200 	mov.w	r2, #0
 800df10:	f04f 0300 	mov.w	r3, #0
 800df14:	00eb      	lsls	r3, r5, #3
 800df16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800df1a:	00e2      	lsls	r2, r4, #3
 800df1c:	4614      	mov	r4, r2
 800df1e:	461d      	mov	r5, r3
 800df20:	4643      	mov	r3, r8
 800df22:	18e3      	adds	r3, r4, r3
 800df24:	603b      	str	r3, [r7, #0]
 800df26:	464b      	mov	r3, r9
 800df28:	eb45 0303 	adc.w	r3, r5, r3
 800df2c:	607b      	str	r3, [r7, #4]
 800df2e:	f04f 0200 	mov.w	r2, #0
 800df32:	f04f 0300 	mov.w	r3, #0
 800df36:	e9d7 4500 	ldrd	r4, r5, [r7]
 800df3a:	4629      	mov	r1, r5
 800df3c:	028b      	lsls	r3, r1, #10
 800df3e:	4621      	mov	r1, r4
 800df40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800df44:	4621      	mov	r1, r4
 800df46:	028a      	lsls	r2, r1, #10
 800df48:	4610      	mov	r0, r2
 800df4a:	4619      	mov	r1, r3
 800df4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df4e:	2200      	movs	r2, #0
 800df50:	61bb      	str	r3, [r7, #24]
 800df52:	61fa      	str	r2, [r7, #28]
 800df54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800df58:	f7f2 fb86 	bl	8000668 <__aeabi_uldivmod>
 800df5c:	4602      	mov	r2, r0
 800df5e:	460b      	mov	r3, r1
 800df60:	4613      	mov	r3, r2
 800df62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800df64:	4b0b      	ldr	r3, [pc, #44]	; (800df94 <HAL_RCC_GetSysClockFreq+0x200>)
 800df66:	685b      	ldr	r3, [r3, #4]
 800df68:	0c1b      	lsrs	r3, r3, #16
 800df6a:	f003 0303 	and.w	r3, r3, #3
 800df6e:	3301      	adds	r3, #1
 800df70:	005b      	lsls	r3, r3, #1
 800df72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800df74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800df76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df78:	fbb2 f3f3 	udiv	r3, r2, r3
 800df7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800df7e:	e002      	b.n	800df86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800df80:	4b05      	ldr	r3, [pc, #20]	; (800df98 <HAL_RCC_GetSysClockFreq+0x204>)
 800df82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800df84:	bf00      	nop
    }
  }
  return sysclockfreq;
 800df86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3750      	adds	r7, #80	; 0x50
 800df8c:	46bd      	mov	sp, r7
 800df8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df92:	bf00      	nop
 800df94:	40023800 	.word	0x40023800
 800df98:	00f42400 	.word	0x00f42400
 800df9c:	007a1200 	.word	0x007a1200

0800dfa0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dfa4:	4b03      	ldr	r3, [pc, #12]	; (800dfb4 <HAL_RCC_GetHCLKFreq+0x14>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr
 800dfb2:	bf00      	nop
 800dfb4:	20000058 	.word	0x20000058

0800dfb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800dfbc:	f7ff fff0 	bl	800dfa0 <HAL_RCC_GetHCLKFreq>
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	4b05      	ldr	r3, [pc, #20]	; (800dfd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800dfc4:	689b      	ldr	r3, [r3, #8]
 800dfc6:	0a9b      	lsrs	r3, r3, #10
 800dfc8:	f003 0307 	and.w	r3, r3, #7
 800dfcc:	4903      	ldr	r1, [pc, #12]	; (800dfdc <HAL_RCC_GetPCLK1Freq+0x24>)
 800dfce:	5ccb      	ldrb	r3, [r1, r3]
 800dfd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	40023800 	.word	0x40023800
 800dfdc:	080186c8 	.word	0x080186c8

0800dfe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800dfe4:	f7ff ffdc 	bl	800dfa0 <HAL_RCC_GetHCLKFreq>
 800dfe8:	4602      	mov	r2, r0
 800dfea:	4b05      	ldr	r3, [pc, #20]	; (800e000 <HAL_RCC_GetPCLK2Freq+0x20>)
 800dfec:	689b      	ldr	r3, [r3, #8]
 800dfee:	0b5b      	lsrs	r3, r3, #13
 800dff0:	f003 0307 	and.w	r3, r3, #7
 800dff4:	4903      	ldr	r1, [pc, #12]	; (800e004 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dff6:	5ccb      	ldrb	r3, [r1, r3]
 800dff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	bd80      	pop	{r7, pc}
 800e000:	40023800 	.word	0x40023800
 800e004:	080186c8 	.word	0x080186c8

0800e008 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e008:	b480      	push	{r7}
 800e00a:	b083      	sub	sp, #12
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	220f      	movs	r2, #15
 800e016:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e018:	4b12      	ldr	r3, [pc, #72]	; (800e064 <HAL_RCC_GetClockConfig+0x5c>)
 800e01a:	689b      	ldr	r3, [r3, #8]
 800e01c:	f003 0203 	and.w	r2, r3, #3
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e024:	4b0f      	ldr	r3, [pc, #60]	; (800e064 <HAL_RCC_GetClockConfig+0x5c>)
 800e026:	689b      	ldr	r3, [r3, #8]
 800e028:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e030:	4b0c      	ldr	r3, [pc, #48]	; (800e064 <HAL_RCC_GetClockConfig+0x5c>)
 800e032:	689b      	ldr	r3, [r3, #8]
 800e034:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800e03c:	4b09      	ldr	r3, [pc, #36]	; (800e064 <HAL_RCC_GetClockConfig+0x5c>)
 800e03e:	689b      	ldr	r3, [r3, #8]
 800e040:	08db      	lsrs	r3, r3, #3
 800e042:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e04a:	4b07      	ldr	r3, [pc, #28]	; (800e068 <HAL_RCC_GetClockConfig+0x60>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f003 020f 	and.w	r2, r3, #15
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	601a      	str	r2, [r3, #0]
}
 800e056:	bf00      	nop
 800e058:	370c      	adds	r7, #12
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr
 800e062:	bf00      	nop
 800e064:	40023800 	.word	0x40023800
 800e068:	40023c00 	.word	0x40023c00

0800e06c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b088      	sub	sp, #32
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e074:	2300      	movs	r3, #0
 800e076:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800e078:	2300      	movs	r3, #0
 800e07a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800e07c:	2300      	movs	r3, #0
 800e07e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800e080:	2300      	movs	r3, #0
 800e082:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800e084:	2300      	movs	r3, #0
 800e086:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f003 0301 	and.w	r3, r3, #1
 800e090:	2b00      	cmp	r3, #0
 800e092:	d012      	beq.n	800e0ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e094:	4b69      	ldr	r3, [pc, #420]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e096:	689b      	ldr	r3, [r3, #8]
 800e098:	4a68      	ldr	r2, [pc, #416]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e09a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e09e:	6093      	str	r3, [r2, #8]
 800e0a0:	4b66      	ldr	r3, [pc, #408]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0a2:	689a      	ldr	r2, [r3, #8]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0a8:	4964      	ldr	r1, [pc, #400]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0aa:	4313      	orrs	r3, r2
 800e0ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d101      	bne.n	800e0ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d017      	beq.n	800e0f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e0c6:	4b5d      	ldr	r3, [pc, #372]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0d4:	4959      	ldr	r1, [pc, #356]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0d6:	4313      	orrs	r3, r2
 800e0d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0e4:	d101      	bne.n	800e0ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d101      	bne.n	800e0f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d017      	beq.n	800e132 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e102:	4b4e      	ldr	r3, [pc, #312]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e108:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e110:	494a      	ldr	r1, [pc, #296]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e112:	4313      	orrs	r3, r2
 800e114:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e11c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e120:	d101      	bne.n	800e126 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800e122:	2301      	movs	r3, #1
 800e124:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d101      	bne.n	800e132 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800e12e:	2301      	movs	r3, #1
 800e130:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d001      	beq.n	800e142 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800e13e:	2301      	movs	r3, #1
 800e140:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f003 0320 	and.w	r3, r3, #32
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	f000 808b 	beq.w	800e266 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e150:	4b3a      	ldr	r3, [pc, #232]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e154:	4a39      	ldr	r2, [pc, #228]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e15a:	6413      	str	r3, [r2, #64]	; 0x40
 800e15c:	4b37      	ldr	r3, [pc, #220]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e15e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e164:	60bb      	str	r3, [r7, #8]
 800e166:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e168:	4b35      	ldr	r3, [pc, #212]	; (800e240 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4a34      	ldr	r2, [pc, #208]	; (800e240 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e16e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e174:	f7fd fe9a 	bl	800beac <HAL_GetTick>
 800e178:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e17a:	e008      	b.n	800e18e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e17c:	f7fd fe96 	bl	800beac <HAL_GetTick>
 800e180:	4602      	mov	r2, r0
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	1ad3      	subs	r3, r2, r3
 800e186:	2b64      	cmp	r3, #100	; 0x64
 800e188:	d901      	bls.n	800e18e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800e18a:	2303      	movs	r3, #3
 800e18c:	e38f      	b.n	800e8ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e18e:	4b2c      	ldr	r3, [pc, #176]	; (800e240 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e196:	2b00      	cmp	r3, #0
 800e198:	d0f0      	beq.n	800e17c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e19a:	4b28      	ldr	r3, [pc, #160]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e19c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e19e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e1a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d035      	beq.n	800e216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e1b2:	693a      	ldr	r2, [r7, #16]
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d02e      	beq.n	800e216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e1b8:	4b20      	ldr	r3, [pc, #128]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e1c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e1c2:	4b1e      	ldr	r3, [pc, #120]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1c6:	4a1d      	ldr	r2, [pc, #116]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e1cc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e1ce:	4b1b      	ldr	r3, [pc, #108]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1d2:	4a1a      	ldr	r2, [pc, #104]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e1d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800e1da:	4a18      	ldr	r2, [pc, #96]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e1e0:	4b16      	ldr	r3, [pc, #88]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e1e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1e4:	f003 0301 	and.w	r3, r3, #1
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	d114      	bne.n	800e216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e1ec:	f7fd fe5e 	bl	800beac <HAL_GetTick>
 800e1f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e1f2:	e00a      	b.n	800e20a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e1f4:	f7fd fe5a 	bl	800beac <HAL_GetTick>
 800e1f8:	4602      	mov	r2, r0
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	1ad3      	subs	r3, r2, r3
 800e1fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800e202:	4293      	cmp	r3, r2
 800e204:	d901      	bls.n	800e20a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800e206:	2303      	movs	r3, #3
 800e208:	e351      	b.n	800e8ae <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e20a:	4b0c      	ldr	r3, [pc, #48]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e20c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e20e:	f003 0302 	and.w	r3, r3, #2
 800e212:	2b00      	cmp	r3, #0
 800e214:	d0ee      	beq.n	800e1f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e21a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e21e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e222:	d111      	bne.n	800e248 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800e224:	4b05      	ldr	r3, [pc, #20]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e226:	689b      	ldr	r3, [r3, #8]
 800e228:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e230:	4b04      	ldr	r3, [pc, #16]	; (800e244 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800e232:	400b      	ands	r3, r1
 800e234:	4901      	ldr	r1, [pc, #4]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e236:	4313      	orrs	r3, r2
 800e238:	608b      	str	r3, [r1, #8]
 800e23a:	e00b      	b.n	800e254 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800e23c:	40023800 	.word	0x40023800
 800e240:	40007000 	.word	0x40007000
 800e244:	0ffffcff 	.word	0x0ffffcff
 800e248:	4bac      	ldr	r3, [pc, #688]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e24a:	689b      	ldr	r3, [r3, #8]
 800e24c:	4aab      	ldr	r2, [pc, #684]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e24e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800e252:	6093      	str	r3, [r2, #8]
 800e254:	4ba9      	ldr	r3, [pc, #676]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e256:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e25c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e260:	49a6      	ldr	r1, [pc, #664]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e262:	4313      	orrs	r3, r2
 800e264:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f003 0310 	and.w	r3, r3, #16
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d010      	beq.n	800e294 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e272:	4ba2      	ldr	r3, [pc, #648]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e278:	4aa0      	ldr	r2, [pc, #640]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e27a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e27e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800e282:	4b9e      	ldr	r3, [pc, #632]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e284:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e28c:	499b      	ldr	r1, [pc, #620]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e28e:	4313      	orrs	r3, r2
 800e290:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d00a      	beq.n	800e2b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e2a0:	4b96      	ldr	r3, [pc, #600]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e2a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2ae:	4993      	ldr	r1, [pc, #588]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e2b0:	4313      	orrs	r3, r2
 800e2b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d00a      	beq.n	800e2d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e2c2:	4b8e      	ldr	r3, [pc, #568]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e2c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e2d0:	498a      	ldr	r1, [pc, #552]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d00a      	beq.n	800e2fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e2e4:	4b85      	ldr	r3, [pc, #532]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e2e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2f2:	4982      	ldr	r1, [pc, #520]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e2f4:	4313      	orrs	r3, r2
 800e2f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e302:	2b00      	cmp	r3, #0
 800e304:	d00a      	beq.n	800e31c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e306:	4b7d      	ldr	r3, [pc, #500]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e30c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e314:	4979      	ldr	r1, [pc, #484]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e316:	4313      	orrs	r3, r2
 800e318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e324:	2b00      	cmp	r3, #0
 800e326:	d00a      	beq.n	800e33e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e328:	4b74      	ldr	r3, [pc, #464]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e32a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e32e:	f023 0203 	bic.w	r2, r3, #3
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e336:	4971      	ldr	r1, [pc, #452]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e338:	4313      	orrs	r3, r2
 800e33a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e346:	2b00      	cmp	r3, #0
 800e348:	d00a      	beq.n	800e360 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e34a:	4b6c      	ldr	r3, [pc, #432]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e34c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e350:	f023 020c 	bic.w	r2, r3, #12
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e358:	4968      	ldr	r1, [pc, #416]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e35a:	4313      	orrs	r3, r2
 800e35c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d00a      	beq.n	800e382 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e36c:	4b63      	ldr	r3, [pc, #396]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e36e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e372:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e37a:	4960      	ldr	r1, [pc, #384]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e37c:	4313      	orrs	r3, r2
 800e37e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d00a      	beq.n	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e38e:	4b5b      	ldr	r3, [pc, #364]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e394:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e39c:	4957      	ldr	r1, [pc, #348]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e39e:	4313      	orrs	r3, r2
 800e3a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d00a      	beq.n	800e3c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e3b0:	4b52      	ldr	r3, [pc, #328]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e3b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3be:	494f      	ldr	r1, [pc, #316]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e3c0:	4313      	orrs	r3, r2
 800e3c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d00a      	beq.n	800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e3d2:	4b4a      	ldr	r3, [pc, #296]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e3d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3e0:	4946      	ldr	r1, [pc, #280]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e3e2:	4313      	orrs	r3, r2
 800e3e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d00a      	beq.n	800e40a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e3f4:	4b41      	ldr	r3, [pc, #260]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e3f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e402:	493e      	ldr	r1, [pc, #248]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e404:	4313      	orrs	r3, r2
 800e406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e412:	2b00      	cmp	r3, #0
 800e414:	d00a      	beq.n	800e42c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e416:	4b39      	ldr	r3, [pc, #228]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e41c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e424:	4935      	ldr	r1, [pc, #212]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e426:	4313      	orrs	r3, r2
 800e428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e434:	2b00      	cmp	r3, #0
 800e436:	d00a      	beq.n	800e44e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e438:	4b30      	ldr	r3, [pc, #192]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e43a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e43e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e446:	492d      	ldr	r1, [pc, #180]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e448:	4313      	orrs	r3, r2
 800e44a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e456:	2b00      	cmp	r3, #0
 800e458:	d011      	beq.n	800e47e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e45a:	4b28      	ldr	r3, [pc, #160]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e45c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e460:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e468:	4924      	ldr	r1, [pc, #144]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e46a:	4313      	orrs	r3, r2
 800e46c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e474:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e478:	d101      	bne.n	800e47e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800e47a:	2301      	movs	r3, #1
 800e47c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f003 0308 	and.w	r3, r3, #8
 800e486:	2b00      	cmp	r3, #0
 800e488:	d001      	beq.n	800e48e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800e48a:	2301      	movs	r3, #1
 800e48c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e496:	2b00      	cmp	r3, #0
 800e498:	d00a      	beq.n	800e4b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e49a:	4b18      	ldr	r3, [pc, #96]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e49c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4a0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4a8:	4914      	ldr	r1, [pc, #80]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e4aa:	4313      	orrs	r3, r2
 800e4ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d00b      	beq.n	800e4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e4bc:	4b0f      	ldr	r3, [pc, #60]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e4be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4cc:	490b      	ldr	r1, [pc, #44]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e4ce:	4313      	orrs	r3, r2
 800e4d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d00f      	beq.n	800e500 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800e4e0:	4b06      	ldr	r3, [pc, #24]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e4e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4e6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4f0:	4902      	ldr	r1, [pc, #8]	; (800e4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800e4f8:	e002      	b.n	800e500 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800e4fa:	bf00      	nop
 800e4fc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d00b      	beq.n	800e524 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e50c:	4b8a      	ldr	r3, [pc, #552]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e50e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e512:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e51c:	4986      	ldr	r1, [pc, #536]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e51e:	4313      	orrs	r3, r2
 800e520:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d00b      	beq.n	800e548 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800e530:	4b81      	ldr	r3, [pc, #516]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e536:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e540:	497d      	ldr	r1, [pc, #500]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e542:	4313      	orrs	r3, r2
 800e544:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	d006      	beq.n	800e55c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e556:	2b00      	cmp	r3, #0
 800e558:	f000 80d6 	beq.w	800e708 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e55c:	4b76      	ldr	r3, [pc, #472]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4a75      	ldr	r2, [pc, #468]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e562:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e568:	f7fd fca0 	bl	800beac <HAL_GetTick>
 800e56c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e56e:	e008      	b.n	800e582 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e570:	f7fd fc9c 	bl	800beac <HAL_GetTick>
 800e574:	4602      	mov	r2, r0
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	1ad3      	subs	r3, r2, r3
 800e57a:	2b64      	cmp	r3, #100	; 0x64
 800e57c:	d901      	bls.n	800e582 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e57e:	2303      	movs	r3, #3
 800e580:	e195      	b.n	800e8ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e582:	4b6d      	ldr	r3, [pc, #436]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d1f0      	bne.n	800e570 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f003 0301 	and.w	r3, r3, #1
 800e596:	2b00      	cmp	r3, #0
 800e598:	d021      	beq.n	800e5de <HAL_RCCEx_PeriphCLKConfig+0x572>
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d11d      	bne.n	800e5de <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e5a2:	4b65      	ldr	r3, [pc, #404]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e5a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5a8:	0c1b      	lsrs	r3, r3, #16
 800e5aa:	f003 0303 	and.w	r3, r3, #3
 800e5ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e5b0:	4b61      	ldr	r3, [pc, #388]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e5b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5b6:	0e1b      	lsrs	r3, r3, #24
 800e5b8:	f003 030f 	and.w	r3, r3, #15
 800e5bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	019a      	lsls	r2, r3, #6
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	041b      	lsls	r3, r3, #16
 800e5c8:	431a      	orrs	r2, r3
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	061b      	lsls	r3, r3, #24
 800e5ce:	431a      	orrs	r2, r3
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	689b      	ldr	r3, [r3, #8]
 800e5d4:	071b      	lsls	r3, r3, #28
 800e5d6:	4958      	ldr	r1, [pc, #352]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e5d8:	4313      	orrs	r3, r2
 800e5da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d004      	beq.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e5f2:	d00a      	beq.n	800e60a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d02e      	beq.n	800e65e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e608:	d129      	bne.n	800e65e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e60a:	4b4b      	ldr	r3, [pc, #300]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e60c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e610:	0c1b      	lsrs	r3, r3, #16
 800e612:	f003 0303 	and.w	r3, r3, #3
 800e616:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e618:	4b47      	ldr	r3, [pc, #284]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e61a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e61e:	0f1b      	lsrs	r3, r3, #28
 800e620:	f003 0307 	and.w	r3, r3, #7
 800e624:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	685b      	ldr	r3, [r3, #4]
 800e62a:	019a      	lsls	r2, r3, #6
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	041b      	lsls	r3, r3, #16
 800e630:	431a      	orrs	r2, r3
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	68db      	ldr	r3, [r3, #12]
 800e636:	061b      	lsls	r3, r3, #24
 800e638:	431a      	orrs	r2, r3
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	071b      	lsls	r3, r3, #28
 800e63e:	493e      	ldr	r1, [pc, #248]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e640:	4313      	orrs	r3, r2
 800e642:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e646:	4b3c      	ldr	r3, [pc, #240]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e64c:	f023 021f 	bic.w	r2, r3, #31
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e654:	3b01      	subs	r3, #1
 800e656:	4938      	ldr	r1, [pc, #224]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e658:	4313      	orrs	r3, r2
 800e65a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e666:	2b00      	cmp	r3, #0
 800e668:	d01d      	beq.n	800e6a6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e66a:	4b33      	ldr	r3, [pc, #204]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e66c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e670:	0e1b      	lsrs	r3, r3, #24
 800e672:	f003 030f 	and.w	r3, r3, #15
 800e676:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e678:	4b2f      	ldr	r3, [pc, #188]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e67a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e67e:	0f1b      	lsrs	r3, r3, #28
 800e680:	f003 0307 	and.w	r3, r3, #7
 800e684:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	685b      	ldr	r3, [r3, #4]
 800e68a:	019a      	lsls	r2, r3, #6
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	691b      	ldr	r3, [r3, #16]
 800e690:	041b      	lsls	r3, r3, #16
 800e692:	431a      	orrs	r2, r3
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	061b      	lsls	r3, r3, #24
 800e698:	431a      	orrs	r2, r3
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	071b      	lsls	r3, r3, #28
 800e69e:	4926      	ldr	r1, [pc, #152]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d011      	beq.n	800e6d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	685b      	ldr	r3, [r3, #4]
 800e6b6:	019a      	lsls	r2, r3, #6
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	691b      	ldr	r3, [r3, #16]
 800e6bc:	041b      	lsls	r3, r3, #16
 800e6be:	431a      	orrs	r2, r3
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	68db      	ldr	r3, [r3, #12]
 800e6c4:	061b      	lsls	r3, r3, #24
 800e6c6:	431a      	orrs	r2, r3
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	689b      	ldr	r3, [r3, #8]
 800e6cc:	071b      	lsls	r3, r3, #28
 800e6ce:	491a      	ldr	r1, [pc, #104]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e6d0:	4313      	orrs	r3, r2
 800e6d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e6d6:	4b18      	ldr	r3, [pc, #96]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	4a17      	ldr	r2, [pc, #92]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e6dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e6e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e6e2:	f7fd fbe3 	bl	800beac <HAL_GetTick>
 800e6e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e6e8:	e008      	b.n	800e6fc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e6ea:	f7fd fbdf 	bl	800beac <HAL_GetTick>
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	1ad3      	subs	r3, r2, r3
 800e6f4:	2b64      	cmp	r3, #100	; 0x64
 800e6f6:	d901      	bls.n	800e6fc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e6f8:	2303      	movs	r3, #3
 800e6fa:	e0d8      	b.n	800e8ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e6fc:	4b0e      	ldr	r3, [pc, #56]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e704:	2b00      	cmp	r3, #0
 800e706:	d0f0      	beq.n	800e6ea <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800e708:	69bb      	ldr	r3, [r7, #24]
 800e70a:	2b01      	cmp	r3, #1
 800e70c:	f040 80ce 	bne.w	800e8ac <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e710:	4b09      	ldr	r3, [pc, #36]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	4a08      	ldr	r2, [pc, #32]	; (800e738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e71a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e71c:	f7fd fbc6 	bl	800beac <HAL_GetTick>
 800e720:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e722:	e00b      	b.n	800e73c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e724:	f7fd fbc2 	bl	800beac <HAL_GetTick>
 800e728:	4602      	mov	r2, r0
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	1ad3      	subs	r3, r2, r3
 800e72e:	2b64      	cmp	r3, #100	; 0x64
 800e730:	d904      	bls.n	800e73c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e732:	2303      	movs	r3, #3
 800e734:	e0bb      	b.n	800e8ae <HAL_RCCEx_PeriphCLKConfig+0x842>
 800e736:	bf00      	nop
 800e738:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e73c:	4b5e      	ldr	r3, [pc, #376]	; (800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e748:	d0ec      	beq.n	800e724 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e752:	2b00      	cmp	r3, #0
 800e754:	d003      	beq.n	800e75e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d009      	beq.n	800e772 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e766:	2b00      	cmp	r3, #0
 800e768:	d02e      	beq.n	800e7c8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d12a      	bne.n	800e7c8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e772:	4b51      	ldr	r3, [pc, #324]	; (800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e778:	0c1b      	lsrs	r3, r3, #16
 800e77a:	f003 0303 	and.w	r3, r3, #3
 800e77e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e780:	4b4d      	ldr	r3, [pc, #308]	; (800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e786:	0f1b      	lsrs	r3, r3, #28
 800e788:	f003 0307 	and.w	r3, r3, #7
 800e78c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	695b      	ldr	r3, [r3, #20]
 800e792:	019a      	lsls	r2, r3, #6
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	041b      	lsls	r3, r3, #16
 800e798:	431a      	orrs	r2, r3
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	699b      	ldr	r3, [r3, #24]
 800e79e:	061b      	lsls	r3, r3, #24
 800e7a0:	431a      	orrs	r2, r3
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	071b      	lsls	r3, r3, #28
 800e7a6:	4944      	ldr	r1, [pc, #272]	; (800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e7a8:	4313      	orrs	r3, r2
 800e7aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e7ae:	4b42      	ldr	r3, [pc, #264]	; (800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e7b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7bc:	3b01      	subs	r3, #1
 800e7be:	021b      	lsls	r3, r3, #8
 800e7c0:	493d      	ldr	r1, [pc, #244]	; (800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e7c2:	4313      	orrs	r3, r2
 800e7c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d022      	beq.n	800e81a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e7dc:	d11d      	bne.n	800e81a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e7de:	4b36      	ldr	r3, [pc, #216]	; (800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e7e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7e4:	0e1b      	lsrs	r3, r3, #24
 800e7e6:	f003 030f 	and.w	r3, r3, #15
 800e7ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e7ec:	4b32      	ldr	r3, [pc, #200]	; (800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e7ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7f2:	0f1b      	lsrs	r3, r3, #28
 800e7f4:	f003 0307 	and.w	r3, r3, #7
 800e7f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	695b      	ldr	r3, [r3, #20]
 800e7fe:	019a      	lsls	r2, r3, #6
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6a1b      	ldr	r3, [r3, #32]
 800e804:	041b      	lsls	r3, r3, #16
 800e806:	431a      	orrs	r2, r3
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	061b      	lsls	r3, r3, #24
 800e80c:	431a      	orrs	r2, r3
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	071b      	lsls	r3, r3, #28
 800e812:	4929      	ldr	r1, [pc, #164]	; (800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e814:	4313      	orrs	r3, r2
 800e816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f003 0308 	and.w	r3, r3, #8
 800e822:	2b00      	cmp	r3, #0
 800e824:	d028      	beq.n	800e878 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e826:	4b24      	ldr	r3, [pc, #144]	; (800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e82c:	0e1b      	lsrs	r3, r3, #24
 800e82e:	f003 030f 	and.w	r3, r3, #15
 800e832:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e834:	4b20      	ldr	r3, [pc, #128]	; (800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e83a:	0c1b      	lsrs	r3, r3, #16
 800e83c:	f003 0303 	and.w	r3, r3, #3
 800e840:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	695b      	ldr	r3, [r3, #20]
 800e846:	019a      	lsls	r2, r3, #6
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	041b      	lsls	r3, r3, #16
 800e84c:	431a      	orrs	r2, r3
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	061b      	lsls	r3, r3, #24
 800e852:	431a      	orrs	r2, r3
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	69db      	ldr	r3, [r3, #28]
 800e858:	071b      	lsls	r3, r3, #28
 800e85a:	4917      	ldr	r1, [pc, #92]	; (800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e85c:	4313      	orrs	r3, r2
 800e85e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e862:	4b15      	ldr	r3, [pc, #84]	; (800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e868:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e870:	4911      	ldr	r1, [pc, #68]	; (800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e872:	4313      	orrs	r3, r2
 800e874:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e878:	4b0f      	ldr	r3, [pc, #60]	; (800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	4a0e      	ldr	r2, [pc, #56]	; (800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e87e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e884:	f7fd fb12 	bl	800beac <HAL_GetTick>
 800e888:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e88a:	e008      	b.n	800e89e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e88c:	f7fd fb0e 	bl	800beac <HAL_GetTick>
 800e890:	4602      	mov	r2, r0
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	1ad3      	subs	r3, r2, r3
 800e896:	2b64      	cmp	r3, #100	; 0x64
 800e898:	d901      	bls.n	800e89e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e89a:	2303      	movs	r3, #3
 800e89c:	e007      	b.n	800e8ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e89e:	4b06      	ldr	r3, [pc, #24]	; (800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e8a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e8aa:	d1ef      	bne.n	800e88c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800e8ac:	2300      	movs	r3, #0
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3720      	adds	r7, #32
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	40023800 	.word	0x40023800

0800e8bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b082      	sub	sp, #8
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d101      	bne.n	800e8ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	e049      	b.n	800e962 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8d4:	b2db      	uxtb	r3, r3
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d106      	bne.n	800e8e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2200      	movs	r2, #0
 800e8de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f000 f841 	bl	800e96a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2202      	movs	r2, #2
 800e8ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681a      	ldr	r2, [r3, #0]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	3304      	adds	r3, #4
 800e8f8:	4619      	mov	r1, r3
 800e8fa:	4610      	mov	r0, r2
 800e8fc:	f000 fa00 	bl	800ed00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2201      	movs	r2, #1
 800e904:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2201      	movs	r2, #1
 800e90c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2201      	movs	r2, #1
 800e914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2201      	movs	r2, #1
 800e91c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2201      	movs	r2, #1
 800e924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2201      	movs	r2, #1
 800e92c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2201      	movs	r2, #1
 800e934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2201      	movs	r2, #1
 800e93c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2201      	movs	r2, #1
 800e944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2201      	movs	r2, #1
 800e94c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2201      	movs	r2, #1
 800e954:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2201      	movs	r2, #1
 800e95c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e960:	2300      	movs	r3, #0
}
 800e962:	4618      	mov	r0, r3
 800e964:	3708      	adds	r7, #8
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}

0800e96a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e96a:	b480      	push	{r7}
 800e96c:	b083      	sub	sp, #12
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e972:	bf00      	nop
 800e974:	370c      	adds	r7, #12
 800e976:	46bd      	mov	sp, r7
 800e978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97c:	4770      	bx	lr
	...

0800e980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e980:	b480      	push	{r7}
 800e982:	b085      	sub	sp, #20
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e98e:	b2db      	uxtb	r3, r3
 800e990:	2b01      	cmp	r3, #1
 800e992:	d001      	beq.n	800e998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e994:	2301      	movs	r3, #1
 800e996:	e054      	b.n	800ea42 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2202      	movs	r2, #2
 800e99c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	68da      	ldr	r2, [r3, #12]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f042 0201 	orr.w	r2, r2, #1
 800e9ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	4a26      	ldr	r2, [pc, #152]	; (800ea50 <HAL_TIM_Base_Start_IT+0xd0>)
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	d022      	beq.n	800ea00 <HAL_TIM_Base_Start_IT+0x80>
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9c2:	d01d      	beq.n	800ea00 <HAL_TIM_Base_Start_IT+0x80>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4a22      	ldr	r2, [pc, #136]	; (800ea54 <HAL_TIM_Base_Start_IT+0xd4>)
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	d018      	beq.n	800ea00 <HAL_TIM_Base_Start_IT+0x80>
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	4a21      	ldr	r2, [pc, #132]	; (800ea58 <HAL_TIM_Base_Start_IT+0xd8>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d013      	beq.n	800ea00 <HAL_TIM_Base_Start_IT+0x80>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	4a1f      	ldr	r2, [pc, #124]	; (800ea5c <HAL_TIM_Base_Start_IT+0xdc>)
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	d00e      	beq.n	800ea00 <HAL_TIM_Base_Start_IT+0x80>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	4a1e      	ldr	r2, [pc, #120]	; (800ea60 <HAL_TIM_Base_Start_IT+0xe0>)
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	d009      	beq.n	800ea00 <HAL_TIM_Base_Start_IT+0x80>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	4a1c      	ldr	r2, [pc, #112]	; (800ea64 <HAL_TIM_Base_Start_IT+0xe4>)
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d004      	beq.n	800ea00 <HAL_TIM_Base_Start_IT+0x80>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	4a1b      	ldr	r2, [pc, #108]	; (800ea68 <HAL_TIM_Base_Start_IT+0xe8>)
 800e9fc:	4293      	cmp	r3, r2
 800e9fe:	d115      	bne.n	800ea2c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	689a      	ldr	r2, [r3, #8]
 800ea06:	4b19      	ldr	r3, [pc, #100]	; (800ea6c <HAL_TIM_Base_Start_IT+0xec>)
 800ea08:	4013      	ands	r3, r2
 800ea0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2b06      	cmp	r3, #6
 800ea10:	d015      	beq.n	800ea3e <HAL_TIM_Base_Start_IT+0xbe>
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea18:	d011      	beq.n	800ea3e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f042 0201 	orr.w	r2, r2, #1
 800ea28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea2a:	e008      	b.n	800ea3e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	681a      	ldr	r2, [r3, #0]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	f042 0201 	orr.w	r2, r2, #1
 800ea3a:	601a      	str	r2, [r3, #0]
 800ea3c:	e000      	b.n	800ea40 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ea40:	2300      	movs	r3, #0
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3714      	adds	r7, #20
 800ea46:	46bd      	mov	sp, r7
 800ea48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4c:	4770      	bx	lr
 800ea4e:	bf00      	nop
 800ea50:	40010000 	.word	0x40010000
 800ea54:	40000400 	.word	0x40000400
 800ea58:	40000800 	.word	0x40000800
 800ea5c:	40000c00 	.word	0x40000c00
 800ea60:	40010400 	.word	0x40010400
 800ea64:	40014000 	.word	0x40014000
 800ea68:	40001800 	.word	0x40001800
 800ea6c:	00010007 	.word	0x00010007

0800ea70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	691b      	ldr	r3, [r3, #16]
 800ea7e:	f003 0302 	and.w	r3, r3, #2
 800ea82:	2b02      	cmp	r3, #2
 800ea84:	d122      	bne.n	800eacc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	68db      	ldr	r3, [r3, #12]
 800ea8c:	f003 0302 	and.w	r3, r3, #2
 800ea90:	2b02      	cmp	r3, #2
 800ea92:	d11b      	bne.n	800eacc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	f06f 0202 	mvn.w	r2, #2
 800ea9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2201      	movs	r2, #1
 800eaa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	699b      	ldr	r3, [r3, #24]
 800eaaa:	f003 0303 	and.w	r3, r3, #3
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d003      	beq.n	800eaba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f000 f905 	bl	800ecc2 <HAL_TIM_IC_CaptureCallback>
 800eab8:	e005      	b.n	800eac6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f000 f8f7 	bl	800ecae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f000 f908 	bl	800ecd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2200      	movs	r2, #0
 800eaca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	691b      	ldr	r3, [r3, #16]
 800ead2:	f003 0304 	and.w	r3, r3, #4
 800ead6:	2b04      	cmp	r3, #4
 800ead8:	d122      	bne.n	800eb20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	68db      	ldr	r3, [r3, #12]
 800eae0:	f003 0304 	and.w	r3, r3, #4
 800eae4:	2b04      	cmp	r3, #4
 800eae6:	d11b      	bne.n	800eb20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f06f 0204 	mvn.w	r2, #4
 800eaf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2202      	movs	r2, #2
 800eaf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	699b      	ldr	r3, [r3, #24]
 800eafe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d003      	beq.n	800eb0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f000 f8db 	bl	800ecc2 <HAL_TIM_IC_CaptureCallback>
 800eb0c:	e005      	b.n	800eb1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f000 f8cd 	bl	800ecae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f000 f8de 	bl	800ecd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	691b      	ldr	r3, [r3, #16]
 800eb26:	f003 0308 	and.w	r3, r3, #8
 800eb2a:	2b08      	cmp	r3, #8
 800eb2c:	d122      	bne.n	800eb74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	68db      	ldr	r3, [r3, #12]
 800eb34:	f003 0308 	and.w	r3, r3, #8
 800eb38:	2b08      	cmp	r3, #8
 800eb3a:	d11b      	bne.n	800eb74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f06f 0208 	mvn.w	r2, #8
 800eb44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2204      	movs	r2, #4
 800eb4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	69db      	ldr	r3, [r3, #28]
 800eb52:	f003 0303 	and.w	r3, r3, #3
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d003      	beq.n	800eb62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f000 f8b1 	bl	800ecc2 <HAL_TIM_IC_CaptureCallback>
 800eb60:	e005      	b.n	800eb6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f000 f8a3 	bl	800ecae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f000 f8b4 	bl	800ecd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2200      	movs	r2, #0
 800eb72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	691b      	ldr	r3, [r3, #16]
 800eb7a:	f003 0310 	and.w	r3, r3, #16
 800eb7e:	2b10      	cmp	r3, #16
 800eb80:	d122      	bne.n	800ebc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	68db      	ldr	r3, [r3, #12]
 800eb88:	f003 0310 	and.w	r3, r3, #16
 800eb8c:	2b10      	cmp	r3, #16
 800eb8e:	d11b      	bne.n	800ebc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	f06f 0210 	mvn.w	r2, #16
 800eb98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2208      	movs	r2, #8
 800eb9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	69db      	ldr	r3, [r3, #28]
 800eba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d003      	beq.n	800ebb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f000 f887 	bl	800ecc2 <HAL_TIM_IC_CaptureCallback>
 800ebb4:	e005      	b.n	800ebc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f000 f879 	bl	800ecae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f000 f88a 	bl	800ecd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	691b      	ldr	r3, [r3, #16]
 800ebce:	f003 0301 	and.w	r3, r3, #1
 800ebd2:	2b01      	cmp	r3, #1
 800ebd4:	d10e      	bne.n	800ebf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	68db      	ldr	r3, [r3, #12]
 800ebdc:	f003 0301 	and.w	r3, r3, #1
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d107      	bne.n	800ebf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f06f 0201 	mvn.w	r2, #1
 800ebec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f7f5 fe44 	bl	800487c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	691b      	ldr	r3, [r3, #16]
 800ebfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebfe:	2b80      	cmp	r3, #128	; 0x80
 800ec00:	d10e      	bne.n	800ec20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	68db      	ldr	r3, [r3, #12]
 800ec08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec0c:	2b80      	cmp	r3, #128	; 0x80
 800ec0e:	d107      	bne.n	800ec20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ec18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f000 f91a 	bl	800ee54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	691b      	ldr	r3, [r3, #16]
 800ec26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec2e:	d10e      	bne.n	800ec4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	68db      	ldr	r3, [r3, #12]
 800ec36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec3a:	2b80      	cmp	r3, #128	; 0x80
 800ec3c:	d107      	bne.n	800ec4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ec46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f000 f90d 	bl	800ee68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	691b      	ldr	r3, [r3, #16]
 800ec54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec58:	2b40      	cmp	r3, #64	; 0x40
 800ec5a:	d10e      	bne.n	800ec7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	68db      	ldr	r3, [r3, #12]
 800ec62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec66:	2b40      	cmp	r3, #64	; 0x40
 800ec68:	d107      	bne.n	800ec7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ec72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f000 f838 	bl	800ecea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	691b      	ldr	r3, [r3, #16]
 800ec80:	f003 0320 	and.w	r3, r3, #32
 800ec84:	2b20      	cmp	r3, #32
 800ec86:	d10e      	bne.n	800eca6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	68db      	ldr	r3, [r3, #12]
 800ec8e:	f003 0320 	and.w	r3, r3, #32
 800ec92:	2b20      	cmp	r3, #32
 800ec94:	d107      	bne.n	800eca6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f06f 0220 	mvn.w	r2, #32
 800ec9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f000 f8cd 	bl	800ee40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eca6:	bf00      	nop
 800eca8:	3708      	adds	r7, #8
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}

0800ecae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ecae:	b480      	push	{r7}
 800ecb0:	b083      	sub	sp, #12
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ecb6:	bf00      	nop
 800ecb8:	370c      	adds	r7, #12
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc0:	4770      	bx	lr

0800ecc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ecc2:	b480      	push	{r7}
 800ecc4:	b083      	sub	sp, #12
 800ecc6:	af00      	add	r7, sp, #0
 800ecc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ecca:	bf00      	nop
 800eccc:	370c      	adds	r7, #12
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd4:	4770      	bx	lr

0800ecd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ecd6:	b480      	push	{r7}
 800ecd8:	b083      	sub	sp, #12
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ecde:	bf00      	nop
 800ece0:	370c      	adds	r7, #12
 800ece2:	46bd      	mov	sp, r7
 800ece4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece8:	4770      	bx	lr

0800ecea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ecea:	b480      	push	{r7}
 800ecec:	b083      	sub	sp, #12
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ecf2:	bf00      	nop
 800ecf4:	370c      	adds	r7, #12
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr
	...

0800ed00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b085      	sub	sp, #20
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	4a40      	ldr	r2, [pc, #256]	; (800ee14 <TIM_Base_SetConfig+0x114>)
 800ed14:	4293      	cmp	r3, r2
 800ed16:	d013      	beq.n	800ed40 <TIM_Base_SetConfig+0x40>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed1e:	d00f      	beq.n	800ed40 <TIM_Base_SetConfig+0x40>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	4a3d      	ldr	r2, [pc, #244]	; (800ee18 <TIM_Base_SetConfig+0x118>)
 800ed24:	4293      	cmp	r3, r2
 800ed26:	d00b      	beq.n	800ed40 <TIM_Base_SetConfig+0x40>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	4a3c      	ldr	r2, [pc, #240]	; (800ee1c <TIM_Base_SetConfig+0x11c>)
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	d007      	beq.n	800ed40 <TIM_Base_SetConfig+0x40>
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	4a3b      	ldr	r2, [pc, #236]	; (800ee20 <TIM_Base_SetConfig+0x120>)
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d003      	beq.n	800ed40 <TIM_Base_SetConfig+0x40>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	4a3a      	ldr	r2, [pc, #232]	; (800ee24 <TIM_Base_SetConfig+0x124>)
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	d108      	bne.n	800ed52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	685b      	ldr	r3, [r3, #4]
 800ed4c:	68fa      	ldr	r2, [r7, #12]
 800ed4e:	4313      	orrs	r3, r2
 800ed50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	4a2f      	ldr	r2, [pc, #188]	; (800ee14 <TIM_Base_SetConfig+0x114>)
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d02b      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed60:	d027      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	4a2c      	ldr	r2, [pc, #176]	; (800ee18 <TIM_Base_SetConfig+0x118>)
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d023      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	4a2b      	ldr	r2, [pc, #172]	; (800ee1c <TIM_Base_SetConfig+0x11c>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d01f      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	4a2a      	ldr	r2, [pc, #168]	; (800ee20 <TIM_Base_SetConfig+0x120>)
 800ed76:	4293      	cmp	r3, r2
 800ed78:	d01b      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	4a29      	ldr	r2, [pc, #164]	; (800ee24 <TIM_Base_SetConfig+0x124>)
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d017      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	4a28      	ldr	r2, [pc, #160]	; (800ee28 <TIM_Base_SetConfig+0x128>)
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d013      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	4a27      	ldr	r2, [pc, #156]	; (800ee2c <TIM_Base_SetConfig+0x12c>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d00f      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	4a26      	ldr	r2, [pc, #152]	; (800ee30 <TIM_Base_SetConfig+0x130>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d00b      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	4a25      	ldr	r2, [pc, #148]	; (800ee34 <TIM_Base_SetConfig+0x134>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d007      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	4a24      	ldr	r2, [pc, #144]	; (800ee38 <TIM_Base_SetConfig+0x138>)
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d003      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	4a23      	ldr	r2, [pc, #140]	; (800ee3c <TIM_Base_SetConfig+0x13c>)
 800edae:	4293      	cmp	r3, r2
 800edb0:	d108      	bne.n	800edc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800edb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	68db      	ldr	r3, [r3, #12]
 800edbe:	68fa      	ldr	r2, [r7, #12]
 800edc0:	4313      	orrs	r3, r2
 800edc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	695b      	ldr	r3, [r3, #20]
 800edce:	4313      	orrs	r3, r2
 800edd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	68fa      	ldr	r2, [r7, #12]
 800edd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	689a      	ldr	r2, [r3, #8]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	681a      	ldr	r2, [r3, #0]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	4a0a      	ldr	r2, [pc, #40]	; (800ee14 <TIM_Base_SetConfig+0x114>)
 800edec:	4293      	cmp	r3, r2
 800edee:	d003      	beq.n	800edf8 <TIM_Base_SetConfig+0xf8>
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	4a0c      	ldr	r2, [pc, #48]	; (800ee24 <TIM_Base_SetConfig+0x124>)
 800edf4:	4293      	cmp	r3, r2
 800edf6:	d103      	bne.n	800ee00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	691a      	ldr	r2, [r3, #16]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2201      	movs	r2, #1
 800ee04:	615a      	str	r2, [r3, #20]
}
 800ee06:	bf00      	nop
 800ee08:	3714      	adds	r7, #20
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee10:	4770      	bx	lr
 800ee12:	bf00      	nop
 800ee14:	40010000 	.word	0x40010000
 800ee18:	40000400 	.word	0x40000400
 800ee1c:	40000800 	.word	0x40000800
 800ee20:	40000c00 	.word	0x40000c00
 800ee24:	40010400 	.word	0x40010400
 800ee28:	40014000 	.word	0x40014000
 800ee2c:	40014400 	.word	0x40014400
 800ee30:	40014800 	.word	0x40014800
 800ee34:	40001800 	.word	0x40001800
 800ee38:	40001c00 	.word	0x40001c00
 800ee3c:	40002000 	.word	0x40002000

0800ee40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b083      	sub	sp, #12
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ee48:	bf00      	nop
 800ee4a:	370c      	adds	r7, #12
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee52:	4770      	bx	lr

0800ee54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b083      	sub	sp, #12
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ee5c:	bf00      	nop
 800ee5e:	370c      	adds	r7, #12
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr

0800ee68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b083      	sub	sp, #12
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ee70:	bf00      	nop
 800ee72:	370c      	adds	r7, #12
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr

0800ee7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b082      	sub	sp, #8
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d101      	bne.n	800ee8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	e040      	b.n	800ef10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d106      	bne.n	800eea4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	2200      	movs	r2, #0
 800ee9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f7f7 fa84 	bl	80063ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2224      	movs	r2, #36	; 0x24
 800eea8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	681a      	ldr	r2, [r3, #0]
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	f022 0201 	bic.w	r2, r2, #1
 800eeb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f000 f8b0 	bl	800f020 <UART_SetConfig>
 800eec0:	4603      	mov	r3, r0
 800eec2:	2b01      	cmp	r3, #1
 800eec4:	d101      	bne.n	800eeca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800eec6:	2301      	movs	r3, #1
 800eec8:	e022      	b.n	800ef10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d002      	beq.n	800eed8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f000 fb08 	bl	800f4e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	685a      	ldr	r2, [r3, #4]
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eee6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	689a      	ldr	r2, [r3, #8]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eef6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	681a      	ldr	r2, [r3, #0]
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f042 0201 	orr.w	r2, r2, #1
 800ef06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f000 fb8f 	bl	800f62c <UART_CheckIdleState>
 800ef0e:	4603      	mov	r3, r0
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3708      	adds	r7, #8
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b08a      	sub	sp, #40	; 0x28
 800ef1c:	af02      	add	r7, sp, #8
 800ef1e:	60f8      	str	r0, [r7, #12]
 800ef20:	60b9      	str	r1, [r7, #8]
 800ef22:	603b      	str	r3, [r7, #0]
 800ef24:	4613      	mov	r3, r2
 800ef26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef2c:	2b20      	cmp	r3, #32
 800ef2e:	d171      	bne.n	800f014 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d002      	beq.n	800ef3c <HAL_UART_Transmit+0x24>
 800ef36:	88fb      	ldrh	r3, [r7, #6]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d101      	bne.n	800ef40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	e06a      	b.n	800f016 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2200      	movs	r2, #0
 800ef44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	2221      	movs	r2, #33	; 0x21
 800ef4c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ef4e:	f7fc ffad 	bl	800beac <HAL_GetTick>
 800ef52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	88fa      	ldrh	r2, [r7, #6]
 800ef58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	88fa      	ldrh	r2, [r7, #6]
 800ef60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	689b      	ldr	r3, [r3, #8]
 800ef68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef6c:	d108      	bne.n	800ef80 <HAL_UART_Transmit+0x68>
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	691b      	ldr	r3, [r3, #16]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d104      	bne.n	800ef80 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800ef76:	2300      	movs	r3, #0
 800ef78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	61bb      	str	r3, [r7, #24]
 800ef7e:	e003      	b.n	800ef88 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ef84:	2300      	movs	r3, #0
 800ef86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ef88:	e02c      	b.n	800efe4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	9300      	str	r3, [sp, #0]
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	2200      	movs	r2, #0
 800ef92:	2180      	movs	r1, #128	; 0x80
 800ef94:	68f8      	ldr	r0, [r7, #12]
 800ef96:	f000 fb96 	bl	800f6c6 <UART_WaitOnFlagUntilTimeout>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d001      	beq.n	800efa4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800efa0:	2303      	movs	r3, #3
 800efa2:	e038      	b.n	800f016 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800efa4:	69fb      	ldr	r3, [r7, #28]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d10b      	bne.n	800efc2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800efaa:	69bb      	ldr	r3, [r7, #24]
 800efac:	881b      	ldrh	r3, [r3, #0]
 800efae:	461a      	mov	r2, r3
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800efb8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800efba:	69bb      	ldr	r3, [r7, #24]
 800efbc:	3302      	adds	r3, #2
 800efbe:	61bb      	str	r3, [r7, #24]
 800efc0:	e007      	b.n	800efd2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800efc2:	69fb      	ldr	r3, [r7, #28]
 800efc4:	781a      	ldrb	r2, [r3, #0]
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800efcc:	69fb      	ldr	r3, [r7, #28]
 800efce:	3301      	adds	r3, #1
 800efd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800efd8:	b29b      	uxth	r3, r3
 800efda:	3b01      	subs	r3, #1
 800efdc:	b29a      	uxth	r2, r3
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800efea:	b29b      	uxth	r3, r3
 800efec:	2b00      	cmp	r3, #0
 800efee:	d1cc      	bne.n	800ef8a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	9300      	str	r3, [sp, #0]
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	2200      	movs	r2, #0
 800eff8:	2140      	movs	r1, #64	; 0x40
 800effa:	68f8      	ldr	r0, [r7, #12]
 800effc:	f000 fb63 	bl	800f6c6 <UART_WaitOnFlagUntilTimeout>
 800f000:	4603      	mov	r3, r0
 800f002:	2b00      	cmp	r3, #0
 800f004:	d001      	beq.n	800f00a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800f006:	2303      	movs	r3, #3
 800f008:	e005      	b.n	800f016 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2220      	movs	r2, #32
 800f00e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800f010:	2300      	movs	r3, #0
 800f012:	e000      	b.n	800f016 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800f014:	2302      	movs	r3, #2
  }
}
 800f016:	4618      	mov	r0, r3
 800f018:	3720      	adds	r7, #32
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}
	...

0800f020 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b088      	sub	sp, #32
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f028:	2300      	movs	r3, #0
 800f02a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	689a      	ldr	r2, [r3, #8]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	691b      	ldr	r3, [r3, #16]
 800f034:	431a      	orrs	r2, r3
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	695b      	ldr	r3, [r3, #20]
 800f03a:	431a      	orrs	r2, r3
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	69db      	ldr	r3, [r3, #28]
 800f040:	4313      	orrs	r3, r2
 800f042:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	681a      	ldr	r2, [r3, #0]
 800f04a:	4ba6      	ldr	r3, [pc, #664]	; (800f2e4 <UART_SetConfig+0x2c4>)
 800f04c:	4013      	ands	r3, r2
 800f04e:	687a      	ldr	r2, [r7, #4]
 800f050:	6812      	ldr	r2, [r2, #0]
 800f052:	6979      	ldr	r1, [r7, #20]
 800f054:	430b      	orrs	r3, r1
 800f056:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	685b      	ldr	r3, [r3, #4]
 800f05e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	68da      	ldr	r2, [r3, #12]
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	430a      	orrs	r2, r1
 800f06c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	699b      	ldr	r3, [r3, #24]
 800f072:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6a1b      	ldr	r3, [r3, #32]
 800f078:	697a      	ldr	r2, [r7, #20]
 800f07a:	4313      	orrs	r3, r2
 800f07c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	689b      	ldr	r3, [r3, #8]
 800f084:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	697a      	ldr	r2, [r7, #20]
 800f08e:	430a      	orrs	r2, r1
 800f090:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	4a94      	ldr	r2, [pc, #592]	; (800f2e8 <UART_SetConfig+0x2c8>)
 800f098:	4293      	cmp	r3, r2
 800f09a:	d120      	bne.n	800f0de <UART_SetConfig+0xbe>
 800f09c:	4b93      	ldr	r3, [pc, #588]	; (800f2ec <UART_SetConfig+0x2cc>)
 800f09e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0a2:	f003 0303 	and.w	r3, r3, #3
 800f0a6:	2b03      	cmp	r3, #3
 800f0a8:	d816      	bhi.n	800f0d8 <UART_SetConfig+0xb8>
 800f0aa:	a201      	add	r2, pc, #4	; (adr r2, 800f0b0 <UART_SetConfig+0x90>)
 800f0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0b0:	0800f0c1 	.word	0x0800f0c1
 800f0b4:	0800f0cd 	.word	0x0800f0cd
 800f0b8:	0800f0c7 	.word	0x0800f0c7
 800f0bc:	0800f0d3 	.word	0x0800f0d3
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	77fb      	strb	r3, [r7, #31]
 800f0c4:	e150      	b.n	800f368 <UART_SetConfig+0x348>
 800f0c6:	2302      	movs	r3, #2
 800f0c8:	77fb      	strb	r3, [r7, #31]
 800f0ca:	e14d      	b.n	800f368 <UART_SetConfig+0x348>
 800f0cc:	2304      	movs	r3, #4
 800f0ce:	77fb      	strb	r3, [r7, #31]
 800f0d0:	e14a      	b.n	800f368 <UART_SetConfig+0x348>
 800f0d2:	2308      	movs	r3, #8
 800f0d4:	77fb      	strb	r3, [r7, #31]
 800f0d6:	e147      	b.n	800f368 <UART_SetConfig+0x348>
 800f0d8:	2310      	movs	r3, #16
 800f0da:	77fb      	strb	r3, [r7, #31]
 800f0dc:	e144      	b.n	800f368 <UART_SetConfig+0x348>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	4a83      	ldr	r2, [pc, #524]	; (800f2f0 <UART_SetConfig+0x2d0>)
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	d132      	bne.n	800f14e <UART_SetConfig+0x12e>
 800f0e8:	4b80      	ldr	r3, [pc, #512]	; (800f2ec <UART_SetConfig+0x2cc>)
 800f0ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0ee:	f003 030c 	and.w	r3, r3, #12
 800f0f2:	2b0c      	cmp	r3, #12
 800f0f4:	d828      	bhi.n	800f148 <UART_SetConfig+0x128>
 800f0f6:	a201      	add	r2, pc, #4	; (adr r2, 800f0fc <UART_SetConfig+0xdc>)
 800f0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0fc:	0800f131 	.word	0x0800f131
 800f100:	0800f149 	.word	0x0800f149
 800f104:	0800f149 	.word	0x0800f149
 800f108:	0800f149 	.word	0x0800f149
 800f10c:	0800f13d 	.word	0x0800f13d
 800f110:	0800f149 	.word	0x0800f149
 800f114:	0800f149 	.word	0x0800f149
 800f118:	0800f149 	.word	0x0800f149
 800f11c:	0800f137 	.word	0x0800f137
 800f120:	0800f149 	.word	0x0800f149
 800f124:	0800f149 	.word	0x0800f149
 800f128:	0800f149 	.word	0x0800f149
 800f12c:	0800f143 	.word	0x0800f143
 800f130:	2300      	movs	r3, #0
 800f132:	77fb      	strb	r3, [r7, #31]
 800f134:	e118      	b.n	800f368 <UART_SetConfig+0x348>
 800f136:	2302      	movs	r3, #2
 800f138:	77fb      	strb	r3, [r7, #31]
 800f13a:	e115      	b.n	800f368 <UART_SetConfig+0x348>
 800f13c:	2304      	movs	r3, #4
 800f13e:	77fb      	strb	r3, [r7, #31]
 800f140:	e112      	b.n	800f368 <UART_SetConfig+0x348>
 800f142:	2308      	movs	r3, #8
 800f144:	77fb      	strb	r3, [r7, #31]
 800f146:	e10f      	b.n	800f368 <UART_SetConfig+0x348>
 800f148:	2310      	movs	r3, #16
 800f14a:	77fb      	strb	r3, [r7, #31]
 800f14c:	e10c      	b.n	800f368 <UART_SetConfig+0x348>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	4a68      	ldr	r2, [pc, #416]	; (800f2f4 <UART_SetConfig+0x2d4>)
 800f154:	4293      	cmp	r3, r2
 800f156:	d120      	bne.n	800f19a <UART_SetConfig+0x17a>
 800f158:	4b64      	ldr	r3, [pc, #400]	; (800f2ec <UART_SetConfig+0x2cc>)
 800f15a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f15e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f162:	2b30      	cmp	r3, #48	; 0x30
 800f164:	d013      	beq.n	800f18e <UART_SetConfig+0x16e>
 800f166:	2b30      	cmp	r3, #48	; 0x30
 800f168:	d814      	bhi.n	800f194 <UART_SetConfig+0x174>
 800f16a:	2b20      	cmp	r3, #32
 800f16c:	d009      	beq.n	800f182 <UART_SetConfig+0x162>
 800f16e:	2b20      	cmp	r3, #32
 800f170:	d810      	bhi.n	800f194 <UART_SetConfig+0x174>
 800f172:	2b00      	cmp	r3, #0
 800f174:	d002      	beq.n	800f17c <UART_SetConfig+0x15c>
 800f176:	2b10      	cmp	r3, #16
 800f178:	d006      	beq.n	800f188 <UART_SetConfig+0x168>
 800f17a:	e00b      	b.n	800f194 <UART_SetConfig+0x174>
 800f17c:	2300      	movs	r3, #0
 800f17e:	77fb      	strb	r3, [r7, #31]
 800f180:	e0f2      	b.n	800f368 <UART_SetConfig+0x348>
 800f182:	2302      	movs	r3, #2
 800f184:	77fb      	strb	r3, [r7, #31]
 800f186:	e0ef      	b.n	800f368 <UART_SetConfig+0x348>
 800f188:	2304      	movs	r3, #4
 800f18a:	77fb      	strb	r3, [r7, #31]
 800f18c:	e0ec      	b.n	800f368 <UART_SetConfig+0x348>
 800f18e:	2308      	movs	r3, #8
 800f190:	77fb      	strb	r3, [r7, #31]
 800f192:	e0e9      	b.n	800f368 <UART_SetConfig+0x348>
 800f194:	2310      	movs	r3, #16
 800f196:	77fb      	strb	r3, [r7, #31]
 800f198:	e0e6      	b.n	800f368 <UART_SetConfig+0x348>
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	4a56      	ldr	r2, [pc, #344]	; (800f2f8 <UART_SetConfig+0x2d8>)
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d120      	bne.n	800f1e6 <UART_SetConfig+0x1c6>
 800f1a4:	4b51      	ldr	r3, [pc, #324]	; (800f2ec <UART_SetConfig+0x2cc>)
 800f1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f1ae:	2bc0      	cmp	r3, #192	; 0xc0
 800f1b0:	d013      	beq.n	800f1da <UART_SetConfig+0x1ba>
 800f1b2:	2bc0      	cmp	r3, #192	; 0xc0
 800f1b4:	d814      	bhi.n	800f1e0 <UART_SetConfig+0x1c0>
 800f1b6:	2b80      	cmp	r3, #128	; 0x80
 800f1b8:	d009      	beq.n	800f1ce <UART_SetConfig+0x1ae>
 800f1ba:	2b80      	cmp	r3, #128	; 0x80
 800f1bc:	d810      	bhi.n	800f1e0 <UART_SetConfig+0x1c0>
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d002      	beq.n	800f1c8 <UART_SetConfig+0x1a8>
 800f1c2:	2b40      	cmp	r3, #64	; 0x40
 800f1c4:	d006      	beq.n	800f1d4 <UART_SetConfig+0x1b4>
 800f1c6:	e00b      	b.n	800f1e0 <UART_SetConfig+0x1c0>
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	77fb      	strb	r3, [r7, #31]
 800f1cc:	e0cc      	b.n	800f368 <UART_SetConfig+0x348>
 800f1ce:	2302      	movs	r3, #2
 800f1d0:	77fb      	strb	r3, [r7, #31]
 800f1d2:	e0c9      	b.n	800f368 <UART_SetConfig+0x348>
 800f1d4:	2304      	movs	r3, #4
 800f1d6:	77fb      	strb	r3, [r7, #31]
 800f1d8:	e0c6      	b.n	800f368 <UART_SetConfig+0x348>
 800f1da:	2308      	movs	r3, #8
 800f1dc:	77fb      	strb	r3, [r7, #31]
 800f1de:	e0c3      	b.n	800f368 <UART_SetConfig+0x348>
 800f1e0:	2310      	movs	r3, #16
 800f1e2:	77fb      	strb	r3, [r7, #31]
 800f1e4:	e0c0      	b.n	800f368 <UART_SetConfig+0x348>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	4a44      	ldr	r2, [pc, #272]	; (800f2fc <UART_SetConfig+0x2dc>)
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d125      	bne.n	800f23c <UART_SetConfig+0x21c>
 800f1f0:	4b3e      	ldr	r3, [pc, #248]	; (800f2ec <UART_SetConfig+0x2cc>)
 800f1f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f1fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f1fe:	d017      	beq.n	800f230 <UART_SetConfig+0x210>
 800f200:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f204:	d817      	bhi.n	800f236 <UART_SetConfig+0x216>
 800f206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f20a:	d00b      	beq.n	800f224 <UART_SetConfig+0x204>
 800f20c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f210:	d811      	bhi.n	800f236 <UART_SetConfig+0x216>
 800f212:	2b00      	cmp	r3, #0
 800f214:	d003      	beq.n	800f21e <UART_SetConfig+0x1fe>
 800f216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f21a:	d006      	beq.n	800f22a <UART_SetConfig+0x20a>
 800f21c:	e00b      	b.n	800f236 <UART_SetConfig+0x216>
 800f21e:	2300      	movs	r3, #0
 800f220:	77fb      	strb	r3, [r7, #31]
 800f222:	e0a1      	b.n	800f368 <UART_SetConfig+0x348>
 800f224:	2302      	movs	r3, #2
 800f226:	77fb      	strb	r3, [r7, #31]
 800f228:	e09e      	b.n	800f368 <UART_SetConfig+0x348>
 800f22a:	2304      	movs	r3, #4
 800f22c:	77fb      	strb	r3, [r7, #31]
 800f22e:	e09b      	b.n	800f368 <UART_SetConfig+0x348>
 800f230:	2308      	movs	r3, #8
 800f232:	77fb      	strb	r3, [r7, #31]
 800f234:	e098      	b.n	800f368 <UART_SetConfig+0x348>
 800f236:	2310      	movs	r3, #16
 800f238:	77fb      	strb	r3, [r7, #31]
 800f23a:	e095      	b.n	800f368 <UART_SetConfig+0x348>
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	4a2f      	ldr	r2, [pc, #188]	; (800f300 <UART_SetConfig+0x2e0>)
 800f242:	4293      	cmp	r3, r2
 800f244:	d125      	bne.n	800f292 <UART_SetConfig+0x272>
 800f246:	4b29      	ldr	r3, [pc, #164]	; (800f2ec <UART_SetConfig+0x2cc>)
 800f248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f24c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f250:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f254:	d017      	beq.n	800f286 <UART_SetConfig+0x266>
 800f256:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f25a:	d817      	bhi.n	800f28c <UART_SetConfig+0x26c>
 800f25c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f260:	d00b      	beq.n	800f27a <UART_SetConfig+0x25a>
 800f262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f266:	d811      	bhi.n	800f28c <UART_SetConfig+0x26c>
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d003      	beq.n	800f274 <UART_SetConfig+0x254>
 800f26c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f270:	d006      	beq.n	800f280 <UART_SetConfig+0x260>
 800f272:	e00b      	b.n	800f28c <UART_SetConfig+0x26c>
 800f274:	2301      	movs	r3, #1
 800f276:	77fb      	strb	r3, [r7, #31]
 800f278:	e076      	b.n	800f368 <UART_SetConfig+0x348>
 800f27a:	2302      	movs	r3, #2
 800f27c:	77fb      	strb	r3, [r7, #31]
 800f27e:	e073      	b.n	800f368 <UART_SetConfig+0x348>
 800f280:	2304      	movs	r3, #4
 800f282:	77fb      	strb	r3, [r7, #31]
 800f284:	e070      	b.n	800f368 <UART_SetConfig+0x348>
 800f286:	2308      	movs	r3, #8
 800f288:	77fb      	strb	r3, [r7, #31]
 800f28a:	e06d      	b.n	800f368 <UART_SetConfig+0x348>
 800f28c:	2310      	movs	r3, #16
 800f28e:	77fb      	strb	r3, [r7, #31]
 800f290:	e06a      	b.n	800f368 <UART_SetConfig+0x348>
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	4a1b      	ldr	r2, [pc, #108]	; (800f304 <UART_SetConfig+0x2e4>)
 800f298:	4293      	cmp	r3, r2
 800f29a:	d138      	bne.n	800f30e <UART_SetConfig+0x2ee>
 800f29c:	4b13      	ldr	r3, [pc, #76]	; (800f2ec <UART_SetConfig+0x2cc>)
 800f29e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2a2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800f2a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f2aa:	d017      	beq.n	800f2dc <UART_SetConfig+0x2bc>
 800f2ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f2b0:	d82a      	bhi.n	800f308 <UART_SetConfig+0x2e8>
 800f2b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2b6:	d00b      	beq.n	800f2d0 <UART_SetConfig+0x2b0>
 800f2b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2bc:	d824      	bhi.n	800f308 <UART_SetConfig+0x2e8>
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d003      	beq.n	800f2ca <UART_SetConfig+0x2aa>
 800f2c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2c6:	d006      	beq.n	800f2d6 <UART_SetConfig+0x2b6>
 800f2c8:	e01e      	b.n	800f308 <UART_SetConfig+0x2e8>
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	77fb      	strb	r3, [r7, #31]
 800f2ce:	e04b      	b.n	800f368 <UART_SetConfig+0x348>
 800f2d0:	2302      	movs	r3, #2
 800f2d2:	77fb      	strb	r3, [r7, #31]
 800f2d4:	e048      	b.n	800f368 <UART_SetConfig+0x348>
 800f2d6:	2304      	movs	r3, #4
 800f2d8:	77fb      	strb	r3, [r7, #31]
 800f2da:	e045      	b.n	800f368 <UART_SetConfig+0x348>
 800f2dc:	2308      	movs	r3, #8
 800f2de:	77fb      	strb	r3, [r7, #31]
 800f2e0:	e042      	b.n	800f368 <UART_SetConfig+0x348>
 800f2e2:	bf00      	nop
 800f2e4:	efff69f3 	.word	0xefff69f3
 800f2e8:	40011000 	.word	0x40011000
 800f2ec:	40023800 	.word	0x40023800
 800f2f0:	40004400 	.word	0x40004400
 800f2f4:	40004800 	.word	0x40004800
 800f2f8:	40004c00 	.word	0x40004c00
 800f2fc:	40005000 	.word	0x40005000
 800f300:	40011400 	.word	0x40011400
 800f304:	40007800 	.word	0x40007800
 800f308:	2310      	movs	r3, #16
 800f30a:	77fb      	strb	r3, [r7, #31]
 800f30c:	e02c      	b.n	800f368 <UART_SetConfig+0x348>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	4a72      	ldr	r2, [pc, #456]	; (800f4dc <UART_SetConfig+0x4bc>)
 800f314:	4293      	cmp	r3, r2
 800f316:	d125      	bne.n	800f364 <UART_SetConfig+0x344>
 800f318:	4b71      	ldr	r3, [pc, #452]	; (800f4e0 <UART_SetConfig+0x4c0>)
 800f31a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f31e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f322:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f326:	d017      	beq.n	800f358 <UART_SetConfig+0x338>
 800f328:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f32c:	d817      	bhi.n	800f35e <UART_SetConfig+0x33e>
 800f32e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f332:	d00b      	beq.n	800f34c <UART_SetConfig+0x32c>
 800f334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f338:	d811      	bhi.n	800f35e <UART_SetConfig+0x33e>
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d003      	beq.n	800f346 <UART_SetConfig+0x326>
 800f33e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f342:	d006      	beq.n	800f352 <UART_SetConfig+0x332>
 800f344:	e00b      	b.n	800f35e <UART_SetConfig+0x33e>
 800f346:	2300      	movs	r3, #0
 800f348:	77fb      	strb	r3, [r7, #31]
 800f34a:	e00d      	b.n	800f368 <UART_SetConfig+0x348>
 800f34c:	2302      	movs	r3, #2
 800f34e:	77fb      	strb	r3, [r7, #31]
 800f350:	e00a      	b.n	800f368 <UART_SetConfig+0x348>
 800f352:	2304      	movs	r3, #4
 800f354:	77fb      	strb	r3, [r7, #31]
 800f356:	e007      	b.n	800f368 <UART_SetConfig+0x348>
 800f358:	2308      	movs	r3, #8
 800f35a:	77fb      	strb	r3, [r7, #31]
 800f35c:	e004      	b.n	800f368 <UART_SetConfig+0x348>
 800f35e:	2310      	movs	r3, #16
 800f360:	77fb      	strb	r3, [r7, #31]
 800f362:	e001      	b.n	800f368 <UART_SetConfig+0x348>
 800f364:	2310      	movs	r3, #16
 800f366:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	69db      	ldr	r3, [r3, #28]
 800f36c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f370:	d15b      	bne.n	800f42a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800f372:	7ffb      	ldrb	r3, [r7, #31]
 800f374:	2b08      	cmp	r3, #8
 800f376:	d828      	bhi.n	800f3ca <UART_SetConfig+0x3aa>
 800f378:	a201      	add	r2, pc, #4	; (adr r2, 800f380 <UART_SetConfig+0x360>)
 800f37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f37e:	bf00      	nop
 800f380:	0800f3a5 	.word	0x0800f3a5
 800f384:	0800f3ad 	.word	0x0800f3ad
 800f388:	0800f3b5 	.word	0x0800f3b5
 800f38c:	0800f3cb 	.word	0x0800f3cb
 800f390:	0800f3bb 	.word	0x0800f3bb
 800f394:	0800f3cb 	.word	0x0800f3cb
 800f398:	0800f3cb 	.word	0x0800f3cb
 800f39c:	0800f3cb 	.word	0x0800f3cb
 800f3a0:	0800f3c3 	.word	0x0800f3c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f3a4:	f7fe fe08 	bl	800dfb8 <HAL_RCC_GetPCLK1Freq>
 800f3a8:	61b8      	str	r0, [r7, #24]
        break;
 800f3aa:	e013      	b.n	800f3d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f3ac:	f7fe fe18 	bl	800dfe0 <HAL_RCC_GetPCLK2Freq>
 800f3b0:	61b8      	str	r0, [r7, #24]
        break;
 800f3b2:	e00f      	b.n	800f3d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f3b4:	4b4b      	ldr	r3, [pc, #300]	; (800f4e4 <UART_SetConfig+0x4c4>)
 800f3b6:	61bb      	str	r3, [r7, #24]
        break;
 800f3b8:	e00c      	b.n	800f3d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f3ba:	f7fe fceb 	bl	800dd94 <HAL_RCC_GetSysClockFreq>
 800f3be:	61b8      	str	r0, [r7, #24]
        break;
 800f3c0:	e008      	b.n	800f3d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f3c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f3c6:	61bb      	str	r3, [r7, #24]
        break;
 800f3c8:	e004      	b.n	800f3d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	77bb      	strb	r3, [r7, #30]
        break;
 800f3d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f3d4:	69bb      	ldr	r3, [r7, #24]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d074      	beq.n	800f4c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f3da:	69bb      	ldr	r3, [r7, #24]
 800f3dc:	005a      	lsls	r2, r3, #1
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	685b      	ldr	r3, [r3, #4]
 800f3e2:	085b      	lsrs	r3, r3, #1
 800f3e4:	441a      	add	r2, r3
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	685b      	ldr	r3, [r3, #4]
 800f3ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f3f0:	693b      	ldr	r3, [r7, #16]
 800f3f2:	2b0f      	cmp	r3, #15
 800f3f4:	d916      	bls.n	800f424 <UART_SetConfig+0x404>
 800f3f6:	693b      	ldr	r3, [r7, #16]
 800f3f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3fc:	d212      	bcs.n	800f424 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f3fe:	693b      	ldr	r3, [r7, #16]
 800f400:	b29b      	uxth	r3, r3
 800f402:	f023 030f 	bic.w	r3, r3, #15
 800f406:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	085b      	lsrs	r3, r3, #1
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	f003 0307 	and.w	r3, r3, #7
 800f412:	b29a      	uxth	r2, r3
 800f414:	89fb      	ldrh	r3, [r7, #14]
 800f416:	4313      	orrs	r3, r2
 800f418:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	89fa      	ldrh	r2, [r7, #14]
 800f420:	60da      	str	r2, [r3, #12]
 800f422:	e04f      	b.n	800f4c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f424:	2301      	movs	r3, #1
 800f426:	77bb      	strb	r3, [r7, #30]
 800f428:	e04c      	b.n	800f4c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f42a:	7ffb      	ldrb	r3, [r7, #31]
 800f42c:	2b08      	cmp	r3, #8
 800f42e:	d828      	bhi.n	800f482 <UART_SetConfig+0x462>
 800f430:	a201      	add	r2, pc, #4	; (adr r2, 800f438 <UART_SetConfig+0x418>)
 800f432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f436:	bf00      	nop
 800f438:	0800f45d 	.word	0x0800f45d
 800f43c:	0800f465 	.word	0x0800f465
 800f440:	0800f46d 	.word	0x0800f46d
 800f444:	0800f483 	.word	0x0800f483
 800f448:	0800f473 	.word	0x0800f473
 800f44c:	0800f483 	.word	0x0800f483
 800f450:	0800f483 	.word	0x0800f483
 800f454:	0800f483 	.word	0x0800f483
 800f458:	0800f47b 	.word	0x0800f47b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f45c:	f7fe fdac 	bl	800dfb8 <HAL_RCC_GetPCLK1Freq>
 800f460:	61b8      	str	r0, [r7, #24]
        break;
 800f462:	e013      	b.n	800f48c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f464:	f7fe fdbc 	bl	800dfe0 <HAL_RCC_GetPCLK2Freq>
 800f468:	61b8      	str	r0, [r7, #24]
        break;
 800f46a:	e00f      	b.n	800f48c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f46c:	4b1d      	ldr	r3, [pc, #116]	; (800f4e4 <UART_SetConfig+0x4c4>)
 800f46e:	61bb      	str	r3, [r7, #24]
        break;
 800f470:	e00c      	b.n	800f48c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f472:	f7fe fc8f 	bl	800dd94 <HAL_RCC_GetSysClockFreq>
 800f476:	61b8      	str	r0, [r7, #24]
        break;
 800f478:	e008      	b.n	800f48c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f47a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f47e:	61bb      	str	r3, [r7, #24]
        break;
 800f480:	e004      	b.n	800f48c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800f482:	2300      	movs	r3, #0
 800f484:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f486:	2301      	movs	r3, #1
 800f488:	77bb      	strb	r3, [r7, #30]
        break;
 800f48a:	bf00      	nop
    }

    if (pclk != 0U)
 800f48c:	69bb      	ldr	r3, [r7, #24]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d018      	beq.n	800f4c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	085a      	lsrs	r2, r3, #1
 800f498:	69bb      	ldr	r3, [r7, #24]
 800f49a:	441a      	add	r2, r3
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	685b      	ldr	r3, [r3, #4]
 800f4a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	2b0f      	cmp	r3, #15
 800f4aa:	d909      	bls.n	800f4c0 <UART_SetConfig+0x4a0>
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f4b2:	d205      	bcs.n	800f4c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f4b4:	693b      	ldr	r3, [r7, #16]
 800f4b6:	b29a      	uxth	r2, r3
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	60da      	str	r2, [r3, #12]
 800f4be:	e001      	b.n	800f4c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800f4d0:	7fbb      	ldrb	r3, [r7, #30]
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	3720      	adds	r7, #32
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}
 800f4da:	bf00      	nop
 800f4dc:	40007c00 	.word	0x40007c00
 800f4e0:	40023800 	.word	0x40023800
 800f4e4:	00f42400 	.word	0x00f42400

0800f4e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b083      	sub	sp, #12
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4f4:	f003 0301 	and.w	r3, r3, #1
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d00a      	beq.n	800f512 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	685b      	ldr	r3, [r3, #4]
 800f502:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	430a      	orrs	r2, r1
 800f510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f516:	f003 0302 	and.w	r3, r3, #2
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d00a      	beq.n	800f534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	430a      	orrs	r2, r1
 800f532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f538:	f003 0304 	and.w	r3, r3, #4
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d00a      	beq.n	800f556 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	685b      	ldr	r3, [r3, #4]
 800f546:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	430a      	orrs	r2, r1
 800f554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f55a:	f003 0308 	and.w	r3, r3, #8
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d00a      	beq.n	800f578 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	430a      	orrs	r2, r1
 800f576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f57c:	f003 0310 	and.w	r3, r3, #16
 800f580:	2b00      	cmp	r3, #0
 800f582:	d00a      	beq.n	800f59a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	689b      	ldr	r3, [r3, #8]
 800f58a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	430a      	orrs	r2, r1
 800f598:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f59e:	f003 0320 	and.w	r3, r3, #32
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d00a      	beq.n	800f5bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	689b      	ldr	r3, [r3, #8]
 800f5ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	430a      	orrs	r2, r1
 800f5ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d01a      	beq.n	800f5fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	685b      	ldr	r3, [r3, #4]
 800f5ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	430a      	orrs	r2, r1
 800f5dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f5e6:	d10a      	bne.n	800f5fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	430a      	orrs	r2, r1
 800f5fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f606:	2b00      	cmp	r3, #0
 800f608:	d00a      	beq.n	800f620 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	430a      	orrs	r2, r1
 800f61e:	605a      	str	r2, [r3, #4]
  }
}
 800f620:	bf00      	nop
 800f622:	370c      	adds	r7, #12
 800f624:	46bd      	mov	sp, r7
 800f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62a:	4770      	bx	lr

0800f62c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b086      	sub	sp, #24
 800f630:	af02      	add	r7, sp, #8
 800f632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2200      	movs	r2, #0
 800f638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f63c:	f7fc fc36 	bl	800beac <HAL_GetTick>
 800f640:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	f003 0308 	and.w	r3, r3, #8
 800f64c:	2b08      	cmp	r3, #8
 800f64e:	d10e      	bne.n	800f66e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f650:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f654:	9300      	str	r3, [sp, #0]
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	2200      	movs	r2, #0
 800f65a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f000 f831 	bl	800f6c6 <UART_WaitOnFlagUntilTimeout>
 800f664:	4603      	mov	r3, r0
 800f666:	2b00      	cmp	r3, #0
 800f668:	d001      	beq.n	800f66e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f66a:	2303      	movs	r3, #3
 800f66c:	e027      	b.n	800f6be <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	f003 0304 	and.w	r3, r3, #4
 800f678:	2b04      	cmp	r3, #4
 800f67a:	d10e      	bne.n	800f69a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f67c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f680:	9300      	str	r3, [sp, #0]
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	2200      	movs	r2, #0
 800f686:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f000 f81b 	bl	800f6c6 <UART_WaitOnFlagUntilTimeout>
 800f690:	4603      	mov	r3, r0
 800f692:	2b00      	cmp	r3, #0
 800f694:	d001      	beq.n	800f69a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f696:	2303      	movs	r3, #3
 800f698:	e011      	b.n	800f6be <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2220      	movs	r2, #32
 800f69e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2220      	movs	r2, #32
 800f6a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800f6bc:	2300      	movs	r3, #0
}
 800f6be:	4618      	mov	r0, r3
 800f6c0:	3710      	adds	r7, #16
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}

0800f6c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f6c6:	b580      	push	{r7, lr}
 800f6c8:	b09c      	sub	sp, #112	; 0x70
 800f6ca:	af00      	add	r7, sp, #0
 800f6cc:	60f8      	str	r0, [r7, #12]
 800f6ce:	60b9      	str	r1, [r7, #8]
 800f6d0:	603b      	str	r3, [r7, #0]
 800f6d2:	4613      	mov	r3, r2
 800f6d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f6d6:	e0a7      	b.n	800f828 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f6d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f6da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6de:	f000 80a3 	beq.w	800f828 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f6e2:	f7fc fbe3 	bl	800beac <HAL_GetTick>
 800f6e6:	4602      	mov	r2, r0
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	1ad3      	subs	r3, r2, r3
 800f6ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d302      	bcc.n	800f6f8 <UART_WaitOnFlagUntilTimeout+0x32>
 800f6f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d13f      	bne.n	800f778 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f700:	e853 3f00 	ldrex	r3, [r3]
 800f704:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f708:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f70c:	667b      	str	r3, [r7, #100]	; 0x64
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	461a      	mov	r2, r3
 800f714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f716:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f718:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f71a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f71c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f71e:	e841 2300 	strex	r3, r2, [r1]
 800f722:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f726:	2b00      	cmp	r3, #0
 800f728:	d1e6      	bne.n	800f6f8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	3308      	adds	r3, #8
 800f730:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f734:	e853 3f00 	ldrex	r3, [r3]
 800f738:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f73c:	f023 0301 	bic.w	r3, r3, #1
 800f740:	663b      	str	r3, [r7, #96]	; 0x60
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	3308      	adds	r3, #8
 800f748:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f74a:	64ba      	str	r2, [r7, #72]	; 0x48
 800f74c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f74e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f750:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f752:	e841 2300 	strex	r3, r2, [r1]
 800f756:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d1e5      	bne.n	800f72a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	2220      	movs	r2, #32
 800f762:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	2220      	movs	r2, #32
 800f768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2200      	movs	r2, #0
 800f770:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800f774:	2303      	movs	r3, #3
 800f776:	e068      	b.n	800f84a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	f003 0304 	and.w	r3, r3, #4
 800f782:	2b00      	cmp	r3, #0
 800f784:	d050      	beq.n	800f828 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	69db      	ldr	r3, [r3, #28]
 800f78c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f794:	d148      	bne.n	800f828 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f79e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7a8:	e853 3f00 	ldrex	r3, [r3]
 800f7ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f7b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	461a      	mov	r2, r3
 800f7bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7be:	637b      	str	r3, [r7, #52]	; 0x34
 800f7c0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f7c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7c6:	e841 2300 	strex	r3, r2, [r1]
 800f7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d1e6      	bne.n	800f7a0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	3308      	adds	r3, #8
 800f7d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	e853 3f00 	ldrex	r3, [r3]
 800f7e0:	613b      	str	r3, [r7, #16]
   return(result);
 800f7e2:	693b      	ldr	r3, [r7, #16]
 800f7e4:	f023 0301 	bic.w	r3, r3, #1
 800f7e8:	66bb      	str	r3, [r7, #104]	; 0x68
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	3308      	adds	r3, #8
 800f7f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f7f2:	623a      	str	r2, [r7, #32]
 800f7f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7f6:	69f9      	ldr	r1, [r7, #28]
 800f7f8:	6a3a      	ldr	r2, [r7, #32]
 800f7fa:	e841 2300 	strex	r3, r2, [r1]
 800f7fe:	61bb      	str	r3, [r7, #24]
   return(result);
 800f800:	69bb      	ldr	r3, [r7, #24]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d1e5      	bne.n	800f7d2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	2220      	movs	r2, #32
 800f80a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	2220      	movs	r2, #32
 800f810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	2220      	movs	r2, #32
 800f818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	2200      	movs	r2, #0
 800f820:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800f824:	2303      	movs	r3, #3
 800f826:	e010      	b.n	800f84a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	69da      	ldr	r2, [r3, #28]
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	4013      	ands	r3, r2
 800f832:	68ba      	ldr	r2, [r7, #8]
 800f834:	429a      	cmp	r2, r3
 800f836:	bf0c      	ite	eq
 800f838:	2301      	moveq	r3, #1
 800f83a:	2300      	movne	r3, #0
 800f83c:	b2db      	uxtb	r3, r3
 800f83e:	461a      	mov	r2, r3
 800f840:	79fb      	ldrb	r3, [r7, #7]
 800f842:	429a      	cmp	r2, r3
 800f844:	f43f af48 	beq.w	800f6d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f848:	2300      	movs	r3, #0
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	3770      	adds	r7, #112	; 0x70
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
	...

0800f854 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f854:	b084      	sub	sp, #16
 800f856:	b580      	push	{r7, lr}
 800f858:	b084      	sub	sp, #16
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	6078      	str	r0, [r7, #4]
 800f85e:	f107 001c 	add.w	r0, r7, #28
 800f862:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f868:	2b01      	cmp	r3, #1
 800f86a:	d120      	bne.n	800f8ae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f870:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	68da      	ldr	r2, [r3, #12]
 800f87c:	4b20      	ldr	r3, [pc, #128]	; (800f900 <USB_CoreInit+0xac>)
 800f87e:	4013      	ands	r3, r2
 800f880:	687a      	ldr	r2, [r7, #4]
 800f882:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	68db      	ldr	r3, [r3, #12]
 800f888:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f892:	2b01      	cmp	r3, #1
 800f894:	d105      	bne.n	800f8a2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	68db      	ldr	r3, [r3, #12]
 800f89a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f000 fa96 	bl	800fdd4 <USB_CoreReset>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	73fb      	strb	r3, [r7, #15]
 800f8ac:	e010      	b.n	800f8d0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	68db      	ldr	r3, [r3, #12]
 800f8b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f000 fa8a 	bl	800fdd4 <USB_CoreReset>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800f8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8d2:	2b01      	cmp	r3, #1
 800f8d4:	d10b      	bne.n	800f8ee <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	689b      	ldr	r3, [r3, #8]
 800f8da:	f043 0206 	orr.w	r2, r3, #6
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	689b      	ldr	r3, [r3, #8]
 800f8e6:	f043 0220 	orr.w	r2, r3, #32
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f8ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3710      	adds	r7, #16
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f8fa:	b004      	add	sp, #16
 800f8fc:	4770      	bx	lr
 800f8fe:	bf00      	nop
 800f900:	ffbdffbf 	.word	0xffbdffbf

0800f904 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f904:	b480      	push	{r7}
 800f906:	b083      	sub	sp, #12
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	689b      	ldr	r3, [r3, #8]
 800f910:	f023 0201 	bic.w	r2, r3, #1
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f918:	2300      	movs	r3, #0
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	370c      	adds	r7, #12
 800f91e:	46bd      	mov	sp, r7
 800f920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f924:	4770      	bx	lr

0800f926 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f926:	b580      	push	{r7, lr}
 800f928:	b084      	sub	sp, #16
 800f92a:	af00      	add	r7, sp, #0
 800f92c:	6078      	str	r0, [r7, #4]
 800f92e:	460b      	mov	r3, r1
 800f930:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f932:	2300      	movs	r3, #0
 800f934:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	68db      	ldr	r3, [r3, #12]
 800f93a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f942:	78fb      	ldrb	r3, [r7, #3]
 800f944:	2b01      	cmp	r3, #1
 800f946:	d115      	bne.n	800f974 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	68db      	ldr	r3, [r3, #12]
 800f94c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f954:	2001      	movs	r0, #1
 800f956:	f7fc fab5 	bl	800bec4 <HAL_Delay>
      ms++;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	3301      	adds	r3, #1
 800f95e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f000 fa29 	bl	800fdb8 <USB_GetMode>
 800f966:	4603      	mov	r3, r0
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d01e      	beq.n	800f9aa <USB_SetCurrentMode+0x84>
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	2b31      	cmp	r3, #49	; 0x31
 800f970:	d9f0      	bls.n	800f954 <USB_SetCurrentMode+0x2e>
 800f972:	e01a      	b.n	800f9aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f974:	78fb      	ldrb	r3, [r7, #3]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d115      	bne.n	800f9a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	68db      	ldr	r3, [r3, #12]
 800f97e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f986:	2001      	movs	r0, #1
 800f988:	f7fc fa9c 	bl	800bec4 <HAL_Delay>
      ms++;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	3301      	adds	r3, #1
 800f990:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f000 fa10 	bl	800fdb8 <USB_GetMode>
 800f998:	4603      	mov	r3, r0
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d005      	beq.n	800f9aa <USB_SetCurrentMode+0x84>
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	2b31      	cmp	r3, #49	; 0x31
 800f9a2:	d9f0      	bls.n	800f986 <USB_SetCurrentMode+0x60>
 800f9a4:	e001      	b.n	800f9aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	e005      	b.n	800f9b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	2b32      	cmp	r3, #50	; 0x32
 800f9ae:	d101      	bne.n	800f9b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f9b0:	2301      	movs	r3, #1
 800f9b2:	e000      	b.n	800f9b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f9b4:	2300      	movs	r3, #0
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3710      	adds	r7, #16
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}
	...

0800f9c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f9c0:	b084      	sub	sp, #16
 800f9c2:	b580      	push	{r7, lr}
 800f9c4:	b086      	sub	sp, #24
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	6078      	str	r0, [r7, #4]
 800f9ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f9ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f9da:	2300      	movs	r3, #0
 800f9dc:	613b      	str	r3, [r7, #16]
 800f9de:	e009      	b.n	800f9f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f9e0:	687a      	ldr	r2, [r7, #4]
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	3340      	adds	r3, #64	; 0x40
 800f9e6:	009b      	lsls	r3, r3, #2
 800f9e8:	4413      	add	r3, r2
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	3301      	adds	r3, #1
 800f9f2:	613b      	str	r3, [r7, #16]
 800f9f4:	693b      	ldr	r3, [r7, #16]
 800f9f6:	2b0e      	cmp	r3, #14
 800f9f8:	d9f2      	bls.n	800f9e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f9fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d11c      	bne.n	800fa3a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa06:	685b      	ldr	r3, [r3, #4]
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa0e:	f043 0302 	orr.w	r3, r3, #2
 800fa12:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa18:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	601a      	str	r2, [r3, #0]
 800fa38:	e005      	b.n	800fa46 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	2300      	movs	r3, #0
 800fa50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa58:	4619      	mov	r1, r3
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa60:	461a      	mov	r2, r3
 800fa62:	680b      	ldr	r3, [r1, #0]
 800fa64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fa66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa68:	2b01      	cmp	r3, #1
 800fa6a:	d10c      	bne.n	800fa86 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fa6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d104      	bne.n	800fa7c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fa72:	2100      	movs	r1, #0
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f000 f965 	bl	800fd44 <USB_SetDevSpeed>
 800fa7a:	e008      	b.n	800fa8e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fa7c:	2101      	movs	r1, #1
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f000 f960 	bl	800fd44 <USB_SetDevSpeed>
 800fa84:	e003      	b.n	800fa8e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fa86:	2103      	movs	r1, #3
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f000 f95b 	bl	800fd44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fa8e:	2110      	movs	r1, #16
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f000 f8f3 	bl	800fc7c <USB_FlushTxFifo>
 800fa96:	4603      	mov	r3, r0
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d001      	beq.n	800faa0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f000 f91f 	bl	800fce4 <USB_FlushRxFifo>
 800faa6:	4603      	mov	r3, r0
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d001      	beq.n	800fab0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800faac:	2301      	movs	r3, #1
 800faae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fab6:	461a      	mov	r2, r3
 800fab8:	2300      	movs	r3, #0
 800faba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fac2:	461a      	mov	r2, r3
 800fac4:	2300      	movs	r3, #0
 800fac6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800face:	461a      	mov	r2, r3
 800fad0:	2300      	movs	r3, #0
 800fad2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fad4:	2300      	movs	r3, #0
 800fad6:	613b      	str	r3, [r7, #16]
 800fad8:	e043      	b.n	800fb62 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	015a      	lsls	r2, r3, #5
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	4413      	add	r3, r2
 800fae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800faec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800faf0:	d118      	bne.n	800fb24 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800faf2:	693b      	ldr	r3, [r7, #16]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d10a      	bne.n	800fb0e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	015a      	lsls	r2, r3, #5
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	4413      	add	r3, r2
 800fb00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb04:	461a      	mov	r2, r3
 800fb06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fb0a:	6013      	str	r3, [r2, #0]
 800fb0c:	e013      	b.n	800fb36 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fb0e:	693b      	ldr	r3, [r7, #16]
 800fb10:	015a      	lsls	r2, r3, #5
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	4413      	add	r3, r2
 800fb16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fb20:	6013      	str	r3, [r2, #0]
 800fb22:	e008      	b.n	800fb36 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fb24:	693b      	ldr	r3, [r7, #16]
 800fb26:	015a      	lsls	r2, r3, #5
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	4413      	add	r3, r2
 800fb2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb30:	461a      	mov	r2, r3
 800fb32:	2300      	movs	r3, #0
 800fb34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	015a      	lsls	r2, r3, #5
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	4413      	add	r3, r2
 800fb3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb42:	461a      	mov	r2, r3
 800fb44:	2300      	movs	r3, #0
 800fb46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fb48:	693b      	ldr	r3, [r7, #16]
 800fb4a:	015a      	lsls	r2, r3, #5
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	4413      	add	r3, r2
 800fb50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb54:	461a      	mov	r2, r3
 800fb56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fb5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fb5c:	693b      	ldr	r3, [r7, #16]
 800fb5e:	3301      	adds	r3, #1
 800fb60:	613b      	str	r3, [r7, #16]
 800fb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb64:	693a      	ldr	r2, [r7, #16]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d3b7      	bcc.n	800fada <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	613b      	str	r3, [r7, #16]
 800fb6e:	e043      	b.n	800fbf8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	015a      	lsls	r2, r3, #5
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	4413      	add	r3, r2
 800fb78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fb82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fb86:	d118      	bne.n	800fbba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d10a      	bne.n	800fba4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fb8e:	693b      	ldr	r3, [r7, #16]
 800fb90:	015a      	lsls	r2, r3, #5
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	4413      	add	r3, r2
 800fb96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fba0:	6013      	str	r3, [r2, #0]
 800fba2:	e013      	b.n	800fbcc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	015a      	lsls	r2, r3, #5
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	4413      	add	r3, r2
 800fbac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fbb6:	6013      	str	r3, [r2, #0]
 800fbb8:	e008      	b.n	800fbcc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	015a      	lsls	r2, r3, #5
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	4413      	add	r3, r2
 800fbc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbc6:	461a      	mov	r2, r3
 800fbc8:	2300      	movs	r3, #0
 800fbca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	015a      	lsls	r2, r3, #5
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	4413      	add	r3, r2
 800fbd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbd8:	461a      	mov	r2, r3
 800fbda:	2300      	movs	r3, #0
 800fbdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	015a      	lsls	r2, r3, #5
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	4413      	add	r3, r2
 800fbe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbea:	461a      	mov	r2, r3
 800fbec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fbf0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	613b      	str	r3, [r7, #16]
 800fbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfa:	693a      	ldr	r2, [r7, #16]
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	d3b7      	bcc.n	800fb70 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc06:	691b      	ldr	r3, [r3, #16]
 800fc08:	68fa      	ldr	r2, [r7, #12]
 800fc0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fc0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fc12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2200      	movs	r2, #0
 800fc18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fc20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d105      	bne.n	800fc34 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	699b      	ldr	r3, [r3, #24]
 800fc2c:	f043 0210 	orr.w	r2, r3, #16
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	699a      	ldr	r2, [r3, #24]
 800fc38:	4b0e      	ldr	r3, [pc, #56]	; (800fc74 <USB_DevInit+0x2b4>)
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	687a      	ldr	r2, [r7, #4]
 800fc3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fc40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d005      	beq.n	800fc52 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	699b      	ldr	r3, [r3, #24]
 800fc4a:	f043 0208 	orr.w	r2, r3, #8
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fc52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc54:	2b01      	cmp	r3, #1
 800fc56:	d105      	bne.n	800fc64 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	699a      	ldr	r2, [r3, #24]
 800fc5c:	4b06      	ldr	r3, [pc, #24]	; (800fc78 <USB_DevInit+0x2b8>)
 800fc5e:	4313      	orrs	r3, r2
 800fc60:	687a      	ldr	r2, [r7, #4]
 800fc62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fc64:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3718      	adds	r7, #24
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fc70:	b004      	add	sp, #16
 800fc72:	4770      	bx	lr
 800fc74:	803c3800 	.word	0x803c3800
 800fc78:	40000004 	.word	0x40000004

0800fc7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b085      	sub	sp, #20
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fc86:	2300      	movs	r3, #0
 800fc88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	4a13      	ldr	r2, [pc, #76]	; (800fce0 <USB_FlushTxFifo+0x64>)
 800fc94:	4293      	cmp	r3, r2
 800fc96:	d901      	bls.n	800fc9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800fc98:	2303      	movs	r3, #3
 800fc9a:	e01b      	b.n	800fcd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	691b      	ldr	r3, [r3, #16]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	daf2      	bge.n	800fc8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800fca4:	2300      	movs	r3, #0
 800fca6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	019b      	lsls	r3, r3, #6
 800fcac:	f043 0220 	orr.w	r2, r3, #32
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	3301      	adds	r3, #1
 800fcb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	4a08      	ldr	r2, [pc, #32]	; (800fce0 <USB_FlushTxFifo+0x64>)
 800fcbe:	4293      	cmp	r3, r2
 800fcc0:	d901      	bls.n	800fcc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800fcc2:	2303      	movs	r3, #3
 800fcc4:	e006      	b.n	800fcd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	691b      	ldr	r3, [r3, #16]
 800fcca:	f003 0320 	and.w	r3, r3, #32
 800fcce:	2b20      	cmp	r3, #32
 800fcd0:	d0f0      	beq.n	800fcb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800fcd2:	2300      	movs	r3, #0
}
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	3714      	adds	r7, #20
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr
 800fce0:	00030d40 	.word	0x00030d40

0800fce4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fce4:	b480      	push	{r7}
 800fce6:	b085      	sub	sp, #20
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fcec:	2300      	movs	r3, #0
 800fcee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	4a11      	ldr	r2, [pc, #68]	; (800fd40 <USB_FlushRxFifo+0x5c>)
 800fcfa:	4293      	cmp	r3, r2
 800fcfc:	d901      	bls.n	800fd02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800fcfe:	2303      	movs	r3, #3
 800fd00:	e018      	b.n	800fd34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	691b      	ldr	r3, [r3, #16]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	daf2      	bge.n	800fcf0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	2210      	movs	r2, #16
 800fd12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	3301      	adds	r3, #1
 800fd18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	4a08      	ldr	r2, [pc, #32]	; (800fd40 <USB_FlushRxFifo+0x5c>)
 800fd1e:	4293      	cmp	r3, r2
 800fd20:	d901      	bls.n	800fd26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800fd22:	2303      	movs	r3, #3
 800fd24:	e006      	b.n	800fd34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	691b      	ldr	r3, [r3, #16]
 800fd2a:	f003 0310 	and.w	r3, r3, #16
 800fd2e:	2b10      	cmp	r3, #16
 800fd30:	d0f0      	beq.n	800fd14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800fd32:	2300      	movs	r3, #0
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	3714      	adds	r7, #20
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3e:	4770      	bx	lr
 800fd40:	00030d40 	.word	0x00030d40

0800fd44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fd44:	b480      	push	{r7}
 800fd46:	b085      	sub	sp, #20
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
 800fd4c:	460b      	mov	r3, r1
 800fd4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	78fb      	ldrb	r3, [r7, #3]
 800fd5e:	68f9      	ldr	r1, [r7, #12]
 800fd60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd64:	4313      	orrs	r3, r2
 800fd66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fd68:	2300      	movs	r3, #0
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3714      	adds	r7, #20
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd74:	4770      	bx	lr

0800fd76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fd76:	b480      	push	{r7}
 800fd78:	b085      	sub	sp, #20
 800fd7a:	af00      	add	r7, sp, #0
 800fd7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	68fa      	ldr	r2, [r7, #12]
 800fd8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fd90:	f023 0303 	bic.w	r3, r3, #3
 800fd94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd9c:	685b      	ldr	r3, [r3, #4]
 800fd9e:	68fa      	ldr	r2, [r7, #12]
 800fda0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fda4:	f043 0302 	orr.w	r3, r3, #2
 800fda8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fdaa:	2300      	movs	r3, #0
}
 800fdac:	4618      	mov	r0, r3
 800fdae:	3714      	adds	r7, #20
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb6:	4770      	bx	lr

0800fdb8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fdb8:	b480      	push	{r7}
 800fdba:	b083      	sub	sp, #12
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	695b      	ldr	r3, [r3, #20]
 800fdc4:	f003 0301 	and.w	r3, r3, #1
}
 800fdc8:	4618      	mov	r0, r3
 800fdca:	370c      	adds	r7, #12
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd2:	4770      	bx	lr

0800fdd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fdd4:	b480      	push	{r7}
 800fdd6:	b085      	sub	sp, #20
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fddc:	2300      	movs	r3, #0
 800fdde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	3301      	adds	r3, #1
 800fde4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	4a13      	ldr	r2, [pc, #76]	; (800fe38 <USB_CoreReset+0x64>)
 800fdea:	4293      	cmp	r3, r2
 800fdec:	d901      	bls.n	800fdf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fdee:	2303      	movs	r3, #3
 800fdf0:	e01b      	b.n	800fe2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	691b      	ldr	r3, [r3, #16]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	daf2      	bge.n	800fde0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	691b      	ldr	r3, [r3, #16]
 800fe02:	f043 0201 	orr.w	r2, r3, #1
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	3301      	adds	r3, #1
 800fe0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	4a09      	ldr	r2, [pc, #36]	; (800fe38 <USB_CoreReset+0x64>)
 800fe14:	4293      	cmp	r3, r2
 800fe16:	d901      	bls.n	800fe1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fe18:	2303      	movs	r3, #3
 800fe1a:	e006      	b.n	800fe2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	691b      	ldr	r3, [r3, #16]
 800fe20:	f003 0301 	and.w	r3, r3, #1
 800fe24:	2b01      	cmp	r3, #1
 800fe26:	d0f0      	beq.n	800fe0a <USB_CoreReset+0x36>

  return HAL_OK;
 800fe28:	2300      	movs	r3, #0
}
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	3714      	adds	r7, #20
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe34:	4770      	bx	lr
 800fe36:	bf00      	nop
 800fe38:	00030d40 	.word	0x00030d40

0800fe3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fe3c:	b480      	push	{r7}
 800fe3e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800fe40:	bf00      	nop
 800fe42:	46bd      	mov	sp, r7
 800fe44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe48:	4770      	bx	lr
	...

0800fe4c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fe4c:	b480      	push	{r7}
 800fe4e:	b085      	sub	sp, #20
 800fe50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe52:	f3ef 8305 	mrs	r3, IPSR
 800fe56:	60bb      	str	r3, [r7, #8]
  return(result);
 800fe58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d10f      	bne.n	800fe7e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe5e:	f3ef 8310 	mrs	r3, PRIMASK
 800fe62:	607b      	str	r3, [r7, #4]
  return(result);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d105      	bne.n	800fe76 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fe6a:	f3ef 8311 	mrs	r3, BASEPRI
 800fe6e:	603b      	str	r3, [r7, #0]
  return(result);
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d007      	beq.n	800fe86 <osKernelInitialize+0x3a>
 800fe76:	4b0e      	ldr	r3, [pc, #56]	; (800feb0 <osKernelInitialize+0x64>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	2b02      	cmp	r3, #2
 800fe7c:	d103      	bne.n	800fe86 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800fe7e:	f06f 0305 	mvn.w	r3, #5
 800fe82:	60fb      	str	r3, [r7, #12]
 800fe84:	e00c      	b.n	800fea0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fe86:	4b0a      	ldr	r3, [pc, #40]	; (800feb0 <osKernelInitialize+0x64>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d105      	bne.n	800fe9a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fe8e:	4b08      	ldr	r3, [pc, #32]	; (800feb0 <osKernelInitialize+0x64>)
 800fe90:	2201      	movs	r2, #1
 800fe92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fe94:	2300      	movs	r3, #0
 800fe96:	60fb      	str	r3, [r7, #12]
 800fe98:	e002      	b.n	800fea0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800fe9a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800fea0:	68fb      	ldr	r3, [r7, #12]
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3714      	adds	r7, #20
 800fea6:	46bd      	mov	sp, r7
 800fea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feac:	4770      	bx	lr
 800feae:	bf00      	nop
 800feb0:	200017cc 	.word	0x200017cc

0800feb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b084      	sub	sp, #16
 800feb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800feba:	f3ef 8305 	mrs	r3, IPSR
 800febe:	60bb      	str	r3, [r7, #8]
  return(result);
 800fec0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d10f      	bne.n	800fee6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fec6:	f3ef 8310 	mrs	r3, PRIMASK
 800feca:	607b      	str	r3, [r7, #4]
  return(result);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d105      	bne.n	800fede <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fed2:	f3ef 8311 	mrs	r3, BASEPRI
 800fed6:	603b      	str	r3, [r7, #0]
  return(result);
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d007      	beq.n	800feee <osKernelStart+0x3a>
 800fede:	4b0f      	ldr	r3, [pc, #60]	; (800ff1c <osKernelStart+0x68>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	2b02      	cmp	r3, #2
 800fee4:	d103      	bne.n	800feee <osKernelStart+0x3a>
    stat = osErrorISR;
 800fee6:	f06f 0305 	mvn.w	r3, #5
 800feea:	60fb      	str	r3, [r7, #12]
 800feec:	e010      	b.n	800ff10 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800feee:	4b0b      	ldr	r3, [pc, #44]	; (800ff1c <osKernelStart+0x68>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	2b01      	cmp	r3, #1
 800fef4:	d109      	bne.n	800ff0a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fef6:	f7ff ffa1 	bl	800fe3c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800fefa:	4b08      	ldr	r3, [pc, #32]	; (800ff1c <osKernelStart+0x68>)
 800fefc:	2202      	movs	r2, #2
 800fefe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ff00:	f001 fd70 	bl	80119e4 <vTaskStartScheduler>
      stat = osOK;
 800ff04:	2300      	movs	r3, #0
 800ff06:	60fb      	str	r3, [r7, #12]
 800ff08:	e002      	b.n	800ff10 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ff0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ff0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ff10:	68fb      	ldr	r3, [r7, #12]
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	3710      	adds	r7, #16
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}
 800ff1a:	bf00      	nop
 800ff1c:	200017cc 	.word	0x200017cc

0800ff20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b090      	sub	sp, #64	; 0x40
 800ff24:	af04      	add	r7, sp, #16
 800ff26:	60f8      	str	r0, [r7, #12]
 800ff28:	60b9      	str	r1, [r7, #8]
 800ff2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff30:	f3ef 8305 	mrs	r3, IPSR
 800ff34:	61fb      	str	r3, [r7, #28]
  return(result);
 800ff36:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	f040 808f 	bne.w	801005c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff3e:	f3ef 8310 	mrs	r3, PRIMASK
 800ff42:	61bb      	str	r3, [r7, #24]
  return(result);
 800ff44:	69bb      	ldr	r3, [r7, #24]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d105      	bne.n	800ff56 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ff4a:	f3ef 8311 	mrs	r3, BASEPRI
 800ff4e:	617b      	str	r3, [r7, #20]
  return(result);
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d003      	beq.n	800ff5e <osThreadNew+0x3e>
 800ff56:	4b44      	ldr	r3, [pc, #272]	; (8010068 <osThreadNew+0x148>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	2b02      	cmp	r3, #2
 800ff5c:	d07e      	beq.n	801005c <osThreadNew+0x13c>
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d07b      	beq.n	801005c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800ff64:	2380      	movs	r3, #128	; 0x80
 800ff66:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800ff68:	2318      	movs	r3, #24
 800ff6a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800ff70:	f04f 33ff 	mov.w	r3, #4294967295
 800ff74:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d045      	beq.n	8010008 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d002      	beq.n	800ff8a <osThreadNew+0x6a>
        name = attr->name;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	699b      	ldr	r3, [r3, #24]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d002      	beq.n	800ff98 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	699b      	ldr	r3, [r3, #24]
 800ff96:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ff98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d008      	beq.n	800ffb0 <osThreadNew+0x90>
 800ff9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffa0:	2b38      	cmp	r3, #56	; 0x38
 800ffa2:	d805      	bhi.n	800ffb0 <osThreadNew+0x90>
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	685b      	ldr	r3, [r3, #4]
 800ffa8:	f003 0301 	and.w	r3, r3, #1
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d001      	beq.n	800ffb4 <osThreadNew+0x94>
        return (NULL);
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	e054      	b.n	801005e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	695b      	ldr	r3, [r3, #20]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d003      	beq.n	800ffc4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	695b      	ldr	r3, [r3, #20]
 800ffc0:	089b      	lsrs	r3, r3, #2
 800ffc2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	689b      	ldr	r3, [r3, #8]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d00e      	beq.n	800ffea <osThreadNew+0xca>
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	68db      	ldr	r3, [r3, #12]
 800ffd0:	2bbb      	cmp	r3, #187	; 0xbb
 800ffd2:	d90a      	bls.n	800ffea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d006      	beq.n	800ffea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	695b      	ldr	r3, [r3, #20]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d002      	beq.n	800ffea <osThreadNew+0xca>
        mem = 1;
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	623b      	str	r3, [r7, #32]
 800ffe8:	e010      	b.n	801000c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	689b      	ldr	r3, [r3, #8]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d10c      	bne.n	801000c <osThreadNew+0xec>
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	68db      	ldr	r3, [r3, #12]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d108      	bne.n	801000c <osThreadNew+0xec>
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	691b      	ldr	r3, [r3, #16]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d104      	bne.n	801000c <osThreadNew+0xec>
          mem = 0;
 8010002:	2300      	movs	r3, #0
 8010004:	623b      	str	r3, [r7, #32]
 8010006:	e001      	b.n	801000c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8010008:	2300      	movs	r3, #0
 801000a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 801000c:	6a3b      	ldr	r3, [r7, #32]
 801000e:	2b01      	cmp	r3, #1
 8010010:	d110      	bne.n	8010034 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8010016:	687a      	ldr	r2, [r7, #4]
 8010018:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801001a:	9202      	str	r2, [sp, #8]
 801001c:	9301      	str	r3, [sp, #4]
 801001e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010020:	9300      	str	r3, [sp, #0]
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010026:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010028:	68f8      	ldr	r0, [r7, #12]
 801002a:	f001 fae5 	bl	80115f8 <xTaskCreateStatic>
 801002e:	4603      	mov	r3, r0
 8010030:	613b      	str	r3, [r7, #16]
 8010032:	e013      	b.n	801005c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8010034:	6a3b      	ldr	r3, [r7, #32]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d110      	bne.n	801005c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801003a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801003c:	b29a      	uxth	r2, r3
 801003e:	f107 0310 	add.w	r3, r7, #16
 8010042:	9301      	str	r3, [sp, #4]
 8010044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010046:	9300      	str	r3, [sp, #0]
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801004c:	68f8      	ldr	r0, [r7, #12]
 801004e:	f001 fb36 	bl	80116be <xTaskCreate>
 8010052:	4603      	mov	r3, r0
 8010054:	2b01      	cmp	r3, #1
 8010056:	d001      	beq.n	801005c <osThreadNew+0x13c>
          hTask = NULL;
 8010058:	2300      	movs	r3, #0
 801005a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 801005c:	693b      	ldr	r3, [r7, #16]
}
 801005e:	4618      	mov	r0, r3
 8010060:	3730      	adds	r7, #48	; 0x30
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
 8010066:	bf00      	nop
 8010068:	200017cc 	.word	0x200017cc

0801006c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 801006c:	b580      	push	{r7, lr}
 801006e:	b086      	sub	sp, #24
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010074:	f3ef 8305 	mrs	r3, IPSR
 8010078:	613b      	str	r3, [r7, #16]
  return(result);
 801007a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 801007c:	2b00      	cmp	r3, #0
 801007e:	d10f      	bne.n	80100a0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010080:	f3ef 8310 	mrs	r3, PRIMASK
 8010084:	60fb      	str	r3, [r7, #12]
  return(result);
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d105      	bne.n	8010098 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801008c:	f3ef 8311 	mrs	r3, BASEPRI
 8010090:	60bb      	str	r3, [r7, #8]
  return(result);
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d007      	beq.n	80100a8 <osDelay+0x3c>
 8010098:	4b0a      	ldr	r3, [pc, #40]	; (80100c4 <osDelay+0x58>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	2b02      	cmp	r3, #2
 801009e:	d103      	bne.n	80100a8 <osDelay+0x3c>
    stat = osErrorISR;
 80100a0:	f06f 0305 	mvn.w	r3, #5
 80100a4:	617b      	str	r3, [r7, #20]
 80100a6:	e007      	b.n	80100b8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80100a8:	2300      	movs	r3, #0
 80100aa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d002      	beq.n	80100b8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f001 fc60 	bl	8011978 <vTaskDelay>
    }
  }

  return (stat);
 80100b8:	697b      	ldr	r3, [r7, #20]
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3718      	adds	r7, #24
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}
 80100c2:	bf00      	nop
 80100c4:	200017cc 	.word	0x200017cc

080100c8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b08c      	sub	sp, #48	; 0x30
 80100cc:	af02      	add	r7, sp, #8
 80100ce:	60f8      	str	r0, [r7, #12]
 80100d0:	60b9      	str	r1, [r7, #8]
 80100d2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80100d4:	2300      	movs	r3, #0
 80100d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100d8:	f3ef 8305 	mrs	r3, IPSR
 80100dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80100de:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	f040 8086 	bne.w	80101f2 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80100e6:	f3ef 8310 	mrs	r3, PRIMASK
 80100ea:	617b      	str	r3, [r7, #20]
  return(result);
 80100ec:	697b      	ldr	r3, [r7, #20]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d105      	bne.n	80100fe <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80100f2:	f3ef 8311 	mrs	r3, BASEPRI
 80100f6:	613b      	str	r3, [r7, #16]
  return(result);
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d003      	beq.n	8010106 <osSemaphoreNew+0x3e>
 80100fe:	4b3f      	ldr	r3, [pc, #252]	; (80101fc <osSemaphoreNew+0x134>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	2b02      	cmp	r3, #2
 8010104:	d075      	beq.n	80101f2 <osSemaphoreNew+0x12a>
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d072      	beq.n	80101f2 <osSemaphoreNew+0x12a>
 801010c:	68ba      	ldr	r2, [r7, #8]
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	429a      	cmp	r2, r3
 8010112:	d86e      	bhi.n	80101f2 <osSemaphoreNew+0x12a>
    mem = -1;
 8010114:	f04f 33ff 	mov.w	r3, #4294967295
 8010118:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d015      	beq.n	801014c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	689b      	ldr	r3, [r3, #8]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d006      	beq.n	8010136 <osSemaphoreNew+0x6e>
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	68db      	ldr	r3, [r3, #12]
 801012c:	2b4f      	cmp	r3, #79	; 0x4f
 801012e:	d902      	bls.n	8010136 <osSemaphoreNew+0x6e>
        mem = 1;
 8010130:	2301      	movs	r3, #1
 8010132:	623b      	str	r3, [r7, #32]
 8010134:	e00c      	b.n	8010150 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	689b      	ldr	r3, [r3, #8]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d108      	bne.n	8010150 <osSemaphoreNew+0x88>
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	68db      	ldr	r3, [r3, #12]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d104      	bne.n	8010150 <osSemaphoreNew+0x88>
          mem = 0;
 8010146:	2300      	movs	r3, #0
 8010148:	623b      	str	r3, [r7, #32]
 801014a:	e001      	b.n	8010150 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 801014c:	2300      	movs	r3, #0
 801014e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8010150:	6a3b      	ldr	r3, [r7, #32]
 8010152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010156:	d04c      	beq.n	80101f2 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	2b01      	cmp	r3, #1
 801015c:	d128      	bne.n	80101b0 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 801015e:	6a3b      	ldr	r3, [r7, #32]
 8010160:	2b01      	cmp	r3, #1
 8010162:	d10a      	bne.n	801017a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	689b      	ldr	r3, [r3, #8]
 8010168:	2203      	movs	r2, #3
 801016a:	9200      	str	r2, [sp, #0]
 801016c:	2200      	movs	r2, #0
 801016e:	2100      	movs	r1, #0
 8010170:	2001      	movs	r0, #1
 8010172:	f000 fa55 	bl	8010620 <xQueueGenericCreateStatic>
 8010176:	6278      	str	r0, [r7, #36]	; 0x24
 8010178:	e005      	b.n	8010186 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 801017a:	2203      	movs	r2, #3
 801017c:	2100      	movs	r1, #0
 801017e:	2001      	movs	r0, #1
 8010180:	f000 fad0 	bl	8010724 <xQueueGenericCreate>
 8010184:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010188:	2b00      	cmp	r3, #0
 801018a:	d022      	beq.n	80101d2 <osSemaphoreNew+0x10a>
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d01f      	beq.n	80101d2 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010192:	2300      	movs	r3, #0
 8010194:	2200      	movs	r2, #0
 8010196:	2100      	movs	r1, #0
 8010198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801019a:	f000 fb9b 	bl	80108d4 <xQueueGenericSend>
 801019e:	4603      	mov	r3, r0
 80101a0:	2b01      	cmp	r3, #1
 80101a2:	d016      	beq.n	80101d2 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80101a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101a6:	f001 f851 	bl	801124c <vQueueDelete>
            hSemaphore = NULL;
 80101aa:	2300      	movs	r3, #0
 80101ac:	627b      	str	r3, [r7, #36]	; 0x24
 80101ae:	e010      	b.n	80101d2 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80101b0:	6a3b      	ldr	r3, [r7, #32]
 80101b2:	2b01      	cmp	r3, #1
 80101b4:	d108      	bne.n	80101c8 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	689b      	ldr	r3, [r3, #8]
 80101ba:	461a      	mov	r2, r3
 80101bc:	68b9      	ldr	r1, [r7, #8]
 80101be:	68f8      	ldr	r0, [r7, #12]
 80101c0:	f000 fb15 	bl	80107ee <xQueueCreateCountingSemaphoreStatic>
 80101c4:	6278      	str	r0, [r7, #36]	; 0x24
 80101c6:	e004      	b.n	80101d2 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80101c8:	68b9      	ldr	r1, [r7, #8]
 80101ca:	68f8      	ldr	r0, [r7, #12]
 80101cc:	f000 fb4a 	bl	8010864 <xQueueCreateCountingSemaphore>
 80101d0:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80101d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d00c      	beq.n	80101f2 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d003      	beq.n	80101e6 <osSemaphoreNew+0x11e>
          name = attr->name;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	61fb      	str	r3, [r7, #28]
 80101e4:	e001      	b.n	80101ea <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80101e6:	2300      	movs	r3, #0
 80101e8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80101ea:	69f9      	ldr	r1, [r7, #28]
 80101ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101ee:	f001 f97b 	bl	80114e8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80101f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80101f4:	4618      	mov	r0, r3
 80101f6:	3728      	adds	r7, #40	; 0x28
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}
 80101fc:	200017cc 	.word	0x200017cc

08010200 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010200:	b580      	push	{r7, lr}
 8010202:	b088      	sub	sp, #32
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801020e:	2300      	movs	r3, #0
 8010210:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010212:	69bb      	ldr	r3, [r7, #24]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d103      	bne.n	8010220 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010218:	f06f 0303 	mvn.w	r3, #3
 801021c:	61fb      	str	r3, [r7, #28]
 801021e:	e04b      	b.n	80102b8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010220:	f3ef 8305 	mrs	r3, IPSR
 8010224:	617b      	str	r3, [r7, #20]
  return(result);
 8010226:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010228:	2b00      	cmp	r3, #0
 801022a:	d10f      	bne.n	801024c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801022c:	f3ef 8310 	mrs	r3, PRIMASK
 8010230:	613b      	str	r3, [r7, #16]
  return(result);
 8010232:	693b      	ldr	r3, [r7, #16]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d105      	bne.n	8010244 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010238:	f3ef 8311 	mrs	r3, BASEPRI
 801023c:	60fb      	str	r3, [r7, #12]
  return(result);
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d026      	beq.n	8010292 <osSemaphoreAcquire+0x92>
 8010244:	4b1f      	ldr	r3, [pc, #124]	; (80102c4 <osSemaphoreAcquire+0xc4>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	2b02      	cmp	r3, #2
 801024a:	d122      	bne.n	8010292 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d003      	beq.n	801025a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8010252:	f06f 0303 	mvn.w	r3, #3
 8010256:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010258:	e02d      	b.n	80102b6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 801025a:	2300      	movs	r3, #0
 801025c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801025e:	f107 0308 	add.w	r3, r7, #8
 8010262:	461a      	mov	r2, r3
 8010264:	2100      	movs	r1, #0
 8010266:	69b8      	ldr	r0, [r7, #24]
 8010268:	f000 ff6a 	bl	8011140 <xQueueReceiveFromISR>
 801026c:	4603      	mov	r3, r0
 801026e:	2b01      	cmp	r3, #1
 8010270:	d003      	beq.n	801027a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8010272:	f06f 0302 	mvn.w	r3, #2
 8010276:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010278:	e01d      	b.n	80102b6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d01a      	beq.n	80102b6 <osSemaphoreAcquire+0xb6>
 8010280:	4b11      	ldr	r3, [pc, #68]	; (80102c8 <osSemaphoreAcquire+0xc8>)
 8010282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010286:	601a      	str	r2, [r3, #0]
 8010288:	f3bf 8f4f 	dsb	sy
 801028c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8010290:	e011      	b.n	80102b6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010292:	6839      	ldr	r1, [r7, #0]
 8010294:	69b8      	ldr	r0, [r7, #24]
 8010296:	f000 fe3f 	bl	8010f18 <xQueueSemaphoreTake>
 801029a:	4603      	mov	r3, r0
 801029c:	2b01      	cmp	r3, #1
 801029e:	d00b      	beq.n	80102b8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d003      	beq.n	80102ae <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80102a6:	f06f 0301 	mvn.w	r3, #1
 80102aa:	61fb      	str	r3, [r7, #28]
 80102ac:	e004      	b.n	80102b8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80102ae:	f06f 0302 	mvn.w	r3, #2
 80102b2:	61fb      	str	r3, [r7, #28]
 80102b4:	e000      	b.n	80102b8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80102b6:	bf00      	nop
      }
    }
  }

  return (stat);
 80102b8:	69fb      	ldr	r3, [r7, #28]
}
 80102ba:	4618      	mov	r0, r3
 80102bc:	3720      	adds	r7, #32
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
 80102c2:	bf00      	nop
 80102c4:	200017cc 	.word	0x200017cc
 80102c8:	e000ed04 	.word	0xe000ed04

080102cc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b088      	sub	sp, #32
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80102d8:	2300      	movs	r3, #0
 80102da:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80102dc:	69bb      	ldr	r3, [r7, #24]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d103      	bne.n	80102ea <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80102e2:	f06f 0303 	mvn.w	r3, #3
 80102e6:	61fb      	str	r3, [r7, #28]
 80102e8:	e03e      	b.n	8010368 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102ea:	f3ef 8305 	mrs	r3, IPSR
 80102ee:	617b      	str	r3, [r7, #20]
  return(result);
 80102f0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d10f      	bne.n	8010316 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102f6:	f3ef 8310 	mrs	r3, PRIMASK
 80102fa:	613b      	str	r3, [r7, #16]
  return(result);
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d105      	bne.n	801030e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010302:	f3ef 8311 	mrs	r3, BASEPRI
 8010306:	60fb      	str	r3, [r7, #12]
  return(result);
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d01e      	beq.n	801034c <osSemaphoreRelease+0x80>
 801030e:	4b19      	ldr	r3, [pc, #100]	; (8010374 <osSemaphoreRelease+0xa8>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	2b02      	cmp	r3, #2
 8010314:	d11a      	bne.n	801034c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8010316:	2300      	movs	r3, #0
 8010318:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801031a:	f107 0308 	add.w	r3, r7, #8
 801031e:	4619      	mov	r1, r3
 8010320:	69b8      	ldr	r0, [r7, #24]
 8010322:	f000 fc7d 	bl	8010c20 <xQueueGiveFromISR>
 8010326:	4603      	mov	r3, r0
 8010328:	2b01      	cmp	r3, #1
 801032a:	d003      	beq.n	8010334 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 801032c:	f06f 0302 	mvn.w	r3, #2
 8010330:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010332:	e018      	b.n	8010366 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d015      	beq.n	8010366 <osSemaphoreRelease+0x9a>
 801033a:	4b0f      	ldr	r3, [pc, #60]	; (8010378 <osSemaphoreRelease+0xac>)
 801033c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010340:	601a      	str	r2, [r3, #0]
 8010342:	f3bf 8f4f 	dsb	sy
 8010346:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801034a:	e00c      	b.n	8010366 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801034c:	2300      	movs	r3, #0
 801034e:	2200      	movs	r2, #0
 8010350:	2100      	movs	r1, #0
 8010352:	69b8      	ldr	r0, [r7, #24]
 8010354:	f000 fabe 	bl	80108d4 <xQueueGenericSend>
 8010358:	4603      	mov	r3, r0
 801035a:	2b01      	cmp	r3, #1
 801035c:	d004      	beq.n	8010368 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 801035e:	f06f 0302 	mvn.w	r3, #2
 8010362:	61fb      	str	r3, [r7, #28]
 8010364:	e000      	b.n	8010368 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010366:	bf00      	nop
    }
  }

  return (stat);
 8010368:	69fb      	ldr	r3, [r7, #28]
}
 801036a:	4618      	mov	r0, r3
 801036c:	3720      	adds	r7, #32
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}
 8010372:	bf00      	nop
 8010374:	200017cc 	.word	0x200017cc
 8010378:	e000ed04 	.word	0xe000ed04

0801037c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801037c:	b480      	push	{r7}
 801037e:	b085      	sub	sp, #20
 8010380:	af00      	add	r7, sp, #0
 8010382:	60f8      	str	r0, [r7, #12]
 8010384:	60b9      	str	r1, [r7, #8]
 8010386:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	4a07      	ldr	r2, [pc, #28]	; (80103a8 <vApplicationGetIdleTaskMemory+0x2c>)
 801038c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801038e:	68bb      	ldr	r3, [r7, #8]
 8010390:	4a06      	ldr	r2, [pc, #24]	; (80103ac <vApplicationGetIdleTaskMemory+0x30>)
 8010392:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2280      	movs	r2, #128	; 0x80
 8010398:	601a      	str	r2, [r3, #0]
}
 801039a:	bf00      	nop
 801039c:	3714      	adds	r7, #20
 801039e:	46bd      	mov	sp, r7
 80103a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a4:	4770      	bx	lr
 80103a6:	bf00      	nop
 80103a8:	200017d0 	.word	0x200017d0
 80103ac:	2000188c 	.word	0x2000188c

080103b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80103b0:	b480      	push	{r7}
 80103b2:	b085      	sub	sp, #20
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	60f8      	str	r0, [r7, #12]
 80103b8:	60b9      	str	r1, [r7, #8]
 80103ba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	4a07      	ldr	r2, [pc, #28]	; (80103dc <vApplicationGetTimerTaskMemory+0x2c>)
 80103c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	4a06      	ldr	r2, [pc, #24]	; (80103e0 <vApplicationGetTimerTaskMemory+0x30>)
 80103c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80103ce:	601a      	str	r2, [r3, #0]
}
 80103d0:	bf00      	nop
 80103d2:	3714      	adds	r7, #20
 80103d4:	46bd      	mov	sp, r7
 80103d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103da:	4770      	bx	lr
 80103dc:	20001a8c 	.word	0x20001a8c
 80103e0:	20001b48 	.word	0x20001b48

080103e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80103e4:	b480      	push	{r7}
 80103e6:	b083      	sub	sp, #12
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f103 0208 	add.w	r2, r3, #8
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f04f 32ff 	mov.w	r2, #4294967295
 80103fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f103 0208 	add.w	r2, r3, #8
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f103 0208 	add.w	r2, r3, #8
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2200      	movs	r2, #0
 8010416:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010418:	bf00      	nop
 801041a:	370c      	adds	r7, #12
 801041c:	46bd      	mov	sp, r7
 801041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010422:	4770      	bx	lr

08010424 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010424:	b480      	push	{r7}
 8010426:	b083      	sub	sp, #12
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2200      	movs	r2, #0
 8010430:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010432:	bf00      	nop
 8010434:	370c      	adds	r7, #12
 8010436:	46bd      	mov	sp, r7
 8010438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043c:	4770      	bx	lr

0801043e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801043e:	b480      	push	{r7}
 8010440:	b085      	sub	sp, #20
 8010442:	af00      	add	r7, sp, #0
 8010444:	6078      	str	r0, [r7, #4]
 8010446:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	685b      	ldr	r3, [r3, #4]
 801044c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	68fa      	ldr	r2, [r7, #12]
 8010452:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	689a      	ldr	r2, [r3, #8]
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	689b      	ldr	r3, [r3, #8]
 8010460:	683a      	ldr	r2, [r7, #0]
 8010462:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	683a      	ldr	r2, [r7, #0]
 8010468:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	687a      	ldr	r2, [r7, #4]
 801046e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	1c5a      	adds	r2, r3, #1
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	601a      	str	r2, [r3, #0]
}
 801047a:	bf00      	nop
 801047c:	3714      	adds	r7, #20
 801047e:	46bd      	mov	sp, r7
 8010480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010484:	4770      	bx	lr

08010486 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010486:	b480      	push	{r7}
 8010488:	b085      	sub	sp, #20
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
 801048e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	f1b3 3fff 	cmp.w	r3, #4294967295
 801049c:	d103      	bne.n	80104a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	691b      	ldr	r3, [r3, #16]
 80104a2:	60fb      	str	r3, [r7, #12]
 80104a4:	e00c      	b.n	80104c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	3308      	adds	r3, #8
 80104aa:	60fb      	str	r3, [r7, #12]
 80104ac:	e002      	b.n	80104b4 <vListInsert+0x2e>
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	685b      	ldr	r3, [r3, #4]
 80104b2:	60fb      	str	r3, [r7, #12]
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	685b      	ldr	r3, [r3, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	68ba      	ldr	r2, [r7, #8]
 80104bc:	429a      	cmp	r2, r3
 80104be:	d2f6      	bcs.n	80104ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	685a      	ldr	r2, [r3, #4]
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	685b      	ldr	r3, [r3, #4]
 80104cc:	683a      	ldr	r2, [r7, #0]
 80104ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	68fa      	ldr	r2, [r7, #12]
 80104d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	683a      	ldr	r2, [r7, #0]
 80104da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	687a      	ldr	r2, [r7, #4]
 80104e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	1c5a      	adds	r2, r3, #1
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	601a      	str	r2, [r3, #0]
}
 80104ec:	bf00      	nop
 80104ee:	3714      	adds	r7, #20
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr

080104f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80104f8:	b480      	push	{r7}
 80104fa:	b085      	sub	sp, #20
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	691b      	ldr	r3, [r3, #16]
 8010504:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	685b      	ldr	r3, [r3, #4]
 801050a:	687a      	ldr	r2, [r7, #4]
 801050c:	6892      	ldr	r2, [r2, #8]
 801050e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	689b      	ldr	r3, [r3, #8]
 8010514:	687a      	ldr	r2, [r7, #4]
 8010516:	6852      	ldr	r2, [r2, #4]
 8010518:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	685b      	ldr	r3, [r3, #4]
 801051e:	687a      	ldr	r2, [r7, #4]
 8010520:	429a      	cmp	r2, r3
 8010522:	d103      	bne.n	801052c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	689a      	ldr	r2, [r3, #8]
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2200      	movs	r2, #0
 8010530:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	1e5a      	subs	r2, r3, #1
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	681b      	ldr	r3, [r3, #0]
}
 8010540:	4618      	mov	r0, r3
 8010542:	3714      	adds	r7, #20
 8010544:	46bd      	mov	sp, r7
 8010546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054a:	4770      	bx	lr

0801054c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b084      	sub	sp, #16
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d10c      	bne.n	801057a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010564:	b672      	cpsid	i
 8010566:	f383 8811 	msr	BASEPRI, r3
 801056a:	f3bf 8f6f 	isb	sy
 801056e:	f3bf 8f4f 	dsb	sy
 8010572:	b662      	cpsie	i
 8010574:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010576:	bf00      	nop
 8010578:	e7fe      	b.n	8010578 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 801057a:	f002 fcf7 	bl	8012f6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	681a      	ldr	r2, [r3, #0]
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010586:	68f9      	ldr	r1, [r7, #12]
 8010588:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801058a:	fb01 f303 	mul.w	r3, r1, r3
 801058e:	441a      	add	r2, r3
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	2200      	movs	r2, #0
 8010598:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	681a      	ldr	r2, [r3, #0]
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	681a      	ldr	r2, [r3, #0]
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105aa:	3b01      	subs	r3, #1
 80105ac:	68f9      	ldr	r1, [r7, #12]
 80105ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80105b0:	fb01 f303 	mul.w	r3, r1, r3
 80105b4:	441a      	add	r2, r3
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	22ff      	movs	r2, #255	; 0xff
 80105be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	22ff      	movs	r2, #255	; 0xff
 80105c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d114      	bne.n	80105fa <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	691b      	ldr	r3, [r3, #16]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d01a      	beq.n	801060e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	3310      	adds	r3, #16
 80105dc:	4618      	mov	r0, r3
 80105de:	f001 fca9 	bl	8011f34 <xTaskRemoveFromEventList>
 80105e2:	4603      	mov	r3, r0
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d012      	beq.n	801060e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80105e8:	4b0c      	ldr	r3, [pc, #48]	; (801061c <xQueueGenericReset+0xd0>)
 80105ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105ee:	601a      	str	r2, [r3, #0]
 80105f0:	f3bf 8f4f 	dsb	sy
 80105f4:	f3bf 8f6f 	isb	sy
 80105f8:	e009      	b.n	801060e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	3310      	adds	r3, #16
 80105fe:	4618      	mov	r0, r3
 8010600:	f7ff fef0 	bl	80103e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	3324      	adds	r3, #36	; 0x24
 8010608:	4618      	mov	r0, r3
 801060a:	f7ff feeb 	bl	80103e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801060e:	f002 fce1 	bl	8012fd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010612:	2301      	movs	r3, #1
}
 8010614:	4618      	mov	r0, r3
 8010616:	3710      	adds	r7, #16
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}
 801061c:	e000ed04 	.word	0xe000ed04

08010620 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010620:	b580      	push	{r7, lr}
 8010622:	b08e      	sub	sp, #56	; 0x38
 8010624:	af02      	add	r7, sp, #8
 8010626:	60f8      	str	r0, [r7, #12]
 8010628:	60b9      	str	r1, [r7, #8]
 801062a:	607a      	str	r2, [r7, #4]
 801062c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d10c      	bne.n	801064e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8010634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010638:	b672      	cpsid	i
 801063a:	f383 8811 	msr	BASEPRI, r3
 801063e:	f3bf 8f6f 	isb	sy
 8010642:	f3bf 8f4f 	dsb	sy
 8010646:	b662      	cpsie	i
 8010648:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801064a:	bf00      	nop
 801064c:	e7fe      	b.n	801064c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d10c      	bne.n	801066e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8010654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010658:	b672      	cpsid	i
 801065a:	f383 8811 	msr	BASEPRI, r3
 801065e:	f3bf 8f6f 	isb	sy
 8010662:	f3bf 8f4f 	dsb	sy
 8010666:	b662      	cpsie	i
 8010668:	627b      	str	r3, [r7, #36]	; 0x24
}
 801066a:	bf00      	nop
 801066c:	e7fe      	b.n	801066c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d002      	beq.n	801067a <xQueueGenericCreateStatic+0x5a>
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d001      	beq.n	801067e <xQueueGenericCreateStatic+0x5e>
 801067a:	2301      	movs	r3, #1
 801067c:	e000      	b.n	8010680 <xQueueGenericCreateStatic+0x60>
 801067e:	2300      	movs	r3, #0
 8010680:	2b00      	cmp	r3, #0
 8010682:	d10c      	bne.n	801069e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8010684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010688:	b672      	cpsid	i
 801068a:	f383 8811 	msr	BASEPRI, r3
 801068e:	f3bf 8f6f 	isb	sy
 8010692:	f3bf 8f4f 	dsb	sy
 8010696:	b662      	cpsie	i
 8010698:	623b      	str	r3, [r7, #32]
}
 801069a:	bf00      	nop
 801069c:	e7fe      	b.n	801069c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d102      	bne.n	80106aa <xQueueGenericCreateStatic+0x8a>
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d101      	bne.n	80106ae <xQueueGenericCreateStatic+0x8e>
 80106aa:	2301      	movs	r3, #1
 80106ac:	e000      	b.n	80106b0 <xQueueGenericCreateStatic+0x90>
 80106ae:	2300      	movs	r3, #0
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d10c      	bne.n	80106ce <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80106b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106b8:	b672      	cpsid	i
 80106ba:	f383 8811 	msr	BASEPRI, r3
 80106be:	f3bf 8f6f 	isb	sy
 80106c2:	f3bf 8f4f 	dsb	sy
 80106c6:	b662      	cpsie	i
 80106c8:	61fb      	str	r3, [r7, #28]
}
 80106ca:	bf00      	nop
 80106cc:	e7fe      	b.n	80106cc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80106ce:	2350      	movs	r3, #80	; 0x50
 80106d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	2b50      	cmp	r3, #80	; 0x50
 80106d6:	d00c      	beq.n	80106f2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80106d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106dc:	b672      	cpsid	i
 80106de:	f383 8811 	msr	BASEPRI, r3
 80106e2:	f3bf 8f6f 	isb	sy
 80106e6:	f3bf 8f4f 	dsb	sy
 80106ea:	b662      	cpsie	i
 80106ec:	61bb      	str	r3, [r7, #24]
}
 80106ee:	bf00      	nop
 80106f0:	e7fe      	b.n	80106f0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80106f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80106f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d00d      	beq.n	801071a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80106fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010700:	2201      	movs	r2, #1
 8010702:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010706:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801070a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801070c:	9300      	str	r3, [sp, #0]
 801070e:	4613      	mov	r3, r2
 8010710:	687a      	ldr	r2, [r7, #4]
 8010712:	68b9      	ldr	r1, [r7, #8]
 8010714:	68f8      	ldr	r0, [r7, #12]
 8010716:	f000 f847 	bl	80107a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801071a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801071c:	4618      	mov	r0, r3
 801071e:	3730      	adds	r7, #48	; 0x30
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}

08010724 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010724:	b580      	push	{r7, lr}
 8010726:	b08a      	sub	sp, #40	; 0x28
 8010728:	af02      	add	r7, sp, #8
 801072a:	60f8      	str	r0, [r7, #12]
 801072c:	60b9      	str	r1, [r7, #8]
 801072e:	4613      	mov	r3, r2
 8010730:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d10c      	bne.n	8010752 <xQueueGenericCreate+0x2e>
	__asm volatile
 8010738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801073c:	b672      	cpsid	i
 801073e:	f383 8811 	msr	BASEPRI, r3
 8010742:	f3bf 8f6f 	isb	sy
 8010746:	f3bf 8f4f 	dsb	sy
 801074a:	b662      	cpsie	i
 801074c:	613b      	str	r3, [r7, #16]
}
 801074e:	bf00      	nop
 8010750:	e7fe      	b.n	8010750 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d102      	bne.n	801075e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010758:	2300      	movs	r3, #0
 801075a:	61fb      	str	r3, [r7, #28]
 801075c:	e004      	b.n	8010768 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	68ba      	ldr	r2, [r7, #8]
 8010762:	fb02 f303 	mul.w	r3, r2, r3
 8010766:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010768:	69fb      	ldr	r3, [r7, #28]
 801076a:	3350      	adds	r3, #80	; 0x50
 801076c:	4618      	mov	r0, r3
 801076e:	f002 fd29 	bl	80131c4 <pvPortMalloc>
 8010772:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010774:	69bb      	ldr	r3, [r7, #24]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d011      	beq.n	801079e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801077a:	69bb      	ldr	r3, [r7, #24]
 801077c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801077e:	697b      	ldr	r3, [r7, #20]
 8010780:	3350      	adds	r3, #80	; 0x50
 8010782:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010784:	69bb      	ldr	r3, [r7, #24]
 8010786:	2200      	movs	r2, #0
 8010788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801078c:	79fa      	ldrb	r2, [r7, #7]
 801078e:	69bb      	ldr	r3, [r7, #24]
 8010790:	9300      	str	r3, [sp, #0]
 8010792:	4613      	mov	r3, r2
 8010794:	697a      	ldr	r2, [r7, #20]
 8010796:	68b9      	ldr	r1, [r7, #8]
 8010798:	68f8      	ldr	r0, [r7, #12]
 801079a:	f000 f805 	bl	80107a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801079e:	69bb      	ldr	r3, [r7, #24]
	}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3720      	adds	r7, #32
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b084      	sub	sp, #16
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	60f8      	str	r0, [r7, #12]
 80107b0:	60b9      	str	r1, [r7, #8]
 80107b2:	607a      	str	r2, [r7, #4]
 80107b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d103      	bne.n	80107c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80107bc:	69bb      	ldr	r3, [r7, #24]
 80107be:	69ba      	ldr	r2, [r7, #24]
 80107c0:	601a      	str	r2, [r3, #0]
 80107c2:	e002      	b.n	80107ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80107c4:	69bb      	ldr	r3, [r7, #24]
 80107c6:	687a      	ldr	r2, [r7, #4]
 80107c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80107ca:	69bb      	ldr	r3, [r7, #24]
 80107cc:	68fa      	ldr	r2, [r7, #12]
 80107ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80107d0:	69bb      	ldr	r3, [r7, #24]
 80107d2:	68ba      	ldr	r2, [r7, #8]
 80107d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80107d6:	2101      	movs	r1, #1
 80107d8:	69b8      	ldr	r0, [r7, #24]
 80107da:	f7ff feb7 	bl	801054c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80107de:	69bb      	ldr	r3, [r7, #24]
 80107e0:	78fa      	ldrb	r2, [r7, #3]
 80107e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80107e6:	bf00      	nop
 80107e8:	3710      	adds	r7, #16
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}

080107ee <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80107ee:	b580      	push	{r7, lr}
 80107f0:	b08a      	sub	sp, #40	; 0x28
 80107f2:	af02      	add	r7, sp, #8
 80107f4:	60f8      	str	r0, [r7, #12]
 80107f6:	60b9      	str	r1, [r7, #8]
 80107f8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d10c      	bne.n	801081a <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8010800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010804:	b672      	cpsid	i
 8010806:	f383 8811 	msr	BASEPRI, r3
 801080a:	f3bf 8f6f 	isb	sy
 801080e:	f3bf 8f4f 	dsb	sy
 8010812:	b662      	cpsie	i
 8010814:	61bb      	str	r3, [r7, #24]
}
 8010816:	bf00      	nop
 8010818:	e7fe      	b.n	8010818 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 801081a:	68ba      	ldr	r2, [r7, #8]
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	429a      	cmp	r2, r3
 8010820:	d90c      	bls.n	801083c <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8010822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010826:	b672      	cpsid	i
 8010828:	f383 8811 	msr	BASEPRI, r3
 801082c:	f3bf 8f6f 	isb	sy
 8010830:	f3bf 8f4f 	dsb	sy
 8010834:	b662      	cpsie	i
 8010836:	617b      	str	r3, [r7, #20]
}
 8010838:	bf00      	nop
 801083a:	e7fe      	b.n	801083a <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801083c:	2302      	movs	r3, #2
 801083e:	9300      	str	r3, [sp, #0]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2200      	movs	r2, #0
 8010844:	2100      	movs	r1, #0
 8010846:	68f8      	ldr	r0, [r7, #12]
 8010848:	f7ff feea 	bl	8010620 <xQueueGenericCreateStatic>
 801084c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801084e:	69fb      	ldr	r3, [r7, #28]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d002      	beq.n	801085a <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010854:	69fb      	ldr	r3, [r7, #28]
 8010856:	68ba      	ldr	r2, [r7, #8]
 8010858:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801085a:	69fb      	ldr	r3, [r7, #28]
	}
 801085c:	4618      	mov	r0, r3
 801085e:	3720      	adds	r7, #32
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}

08010864 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010864:	b580      	push	{r7, lr}
 8010866:	b086      	sub	sp, #24
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d10c      	bne.n	801088e <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8010874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010878:	b672      	cpsid	i
 801087a:	f383 8811 	msr	BASEPRI, r3
 801087e:	f3bf 8f6f 	isb	sy
 8010882:	f3bf 8f4f 	dsb	sy
 8010886:	b662      	cpsie	i
 8010888:	613b      	str	r3, [r7, #16]
}
 801088a:	bf00      	nop
 801088c:	e7fe      	b.n	801088c <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 801088e:	683a      	ldr	r2, [r7, #0]
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	429a      	cmp	r2, r3
 8010894:	d90c      	bls.n	80108b0 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8010896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801089a:	b672      	cpsid	i
 801089c:	f383 8811 	msr	BASEPRI, r3
 80108a0:	f3bf 8f6f 	isb	sy
 80108a4:	f3bf 8f4f 	dsb	sy
 80108a8:	b662      	cpsie	i
 80108aa:	60fb      	str	r3, [r7, #12]
}
 80108ac:	bf00      	nop
 80108ae:	e7fe      	b.n	80108ae <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80108b0:	2202      	movs	r2, #2
 80108b2:	2100      	movs	r1, #0
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f7ff ff35 	bl	8010724 <xQueueGenericCreate>
 80108ba:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80108bc:	697b      	ldr	r3, [r7, #20]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d002      	beq.n	80108c8 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	683a      	ldr	r2, [r7, #0]
 80108c6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80108c8:	697b      	ldr	r3, [r7, #20]
	}
 80108ca:	4618      	mov	r0, r3
 80108cc:	3718      	adds	r7, #24
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}
	...

080108d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b08e      	sub	sp, #56	; 0x38
 80108d8:	af00      	add	r7, sp, #0
 80108da:	60f8      	str	r0, [r7, #12]
 80108dc:	60b9      	str	r1, [r7, #8]
 80108de:	607a      	str	r2, [r7, #4]
 80108e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80108e2:	2300      	movs	r3, #0
 80108e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80108ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d10c      	bne.n	801090a <xQueueGenericSend+0x36>
	__asm volatile
 80108f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108f4:	b672      	cpsid	i
 80108f6:	f383 8811 	msr	BASEPRI, r3
 80108fa:	f3bf 8f6f 	isb	sy
 80108fe:	f3bf 8f4f 	dsb	sy
 8010902:	b662      	cpsie	i
 8010904:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010906:	bf00      	nop
 8010908:	e7fe      	b.n	8010908 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801090a:	68bb      	ldr	r3, [r7, #8]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d103      	bne.n	8010918 <xQueueGenericSend+0x44>
 8010910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010914:	2b00      	cmp	r3, #0
 8010916:	d101      	bne.n	801091c <xQueueGenericSend+0x48>
 8010918:	2301      	movs	r3, #1
 801091a:	e000      	b.n	801091e <xQueueGenericSend+0x4a>
 801091c:	2300      	movs	r3, #0
 801091e:	2b00      	cmp	r3, #0
 8010920:	d10c      	bne.n	801093c <xQueueGenericSend+0x68>
	__asm volatile
 8010922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010926:	b672      	cpsid	i
 8010928:	f383 8811 	msr	BASEPRI, r3
 801092c:	f3bf 8f6f 	isb	sy
 8010930:	f3bf 8f4f 	dsb	sy
 8010934:	b662      	cpsie	i
 8010936:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010938:	bf00      	nop
 801093a:	e7fe      	b.n	801093a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801093c:	683b      	ldr	r3, [r7, #0]
 801093e:	2b02      	cmp	r3, #2
 8010940:	d103      	bne.n	801094a <xQueueGenericSend+0x76>
 8010942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010946:	2b01      	cmp	r3, #1
 8010948:	d101      	bne.n	801094e <xQueueGenericSend+0x7a>
 801094a:	2301      	movs	r3, #1
 801094c:	e000      	b.n	8010950 <xQueueGenericSend+0x7c>
 801094e:	2300      	movs	r3, #0
 8010950:	2b00      	cmp	r3, #0
 8010952:	d10c      	bne.n	801096e <xQueueGenericSend+0x9a>
	__asm volatile
 8010954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010958:	b672      	cpsid	i
 801095a:	f383 8811 	msr	BASEPRI, r3
 801095e:	f3bf 8f6f 	isb	sy
 8010962:	f3bf 8f4f 	dsb	sy
 8010966:	b662      	cpsie	i
 8010968:	623b      	str	r3, [r7, #32]
}
 801096a:	bf00      	nop
 801096c:	e7fe      	b.n	801096c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801096e:	f001 fcab 	bl	80122c8 <xTaskGetSchedulerState>
 8010972:	4603      	mov	r3, r0
 8010974:	2b00      	cmp	r3, #0
 8010976:	d102      	bne.n	801097e <xQueueGenericSend+0xaa>
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d101      	bne.n	8010982 <xQueueGenericSend+0xae>
 801097e:	2301      	movs	r3, #1
 8010980:	e000      	b.n	8010984 <xQueueGenericSend+0xb0>
 8010982:	2300      	movs	r3, #0
 8010984:	2b00      	cmp	r3, #0
 8010986:	d10c      	bne.n	80109a2 <xQueueGenericSend+0xce>
	__asm volatile
 8010988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801098c:	b672      	cpsid	i
 801098e:	f383 8811 	msr	BASEPRI, r3
 8010992:	f3bf 8f6f 	isb	sy
 8010996:	f3bf 8f4f 	dsb	sy
 801099a:	b662      	cpsie	i
 801099c:	61fb      	str	r3, [r7, #28]
}
 801099e:	bf00      	nop
 80109a0:	e7fe      	b.n	80109a0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80109a2:	f002 fae3 	bl	8012f6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80109a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109ae:	429a      	cmp	r2, r3
 80109b0:	d302      	bcc.n	80109b8 <xQueueGenericSend+0xe4>
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	2b02      	cmp	r3, #2
 80109b6:	d129      	bne.n	8010a0c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80109b8:	683a      	ldr	r2, [r7, #0]
 80109ba:	68b9      	ldr	r1, [r7, #8]
 80109bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109be:	f000 fc82 	bl	80112c6 <prvCopyDataToQueue>
 80109c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80109c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d010      	beq.n	80109ee <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80109cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ce:	3324      	adds	r3, #36	; 0x24
 80109d0:	4618      	mov	r0, r3
 80109d2:	f001 faaf 	bl	8011f34 <xTaskRemoveFromEventList>
 80109d6:	4603      	mov	r3, r0
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d013      	beq.n	8010a04 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80109dc:	4b3f      	ldr	r3, [pc, #252]	; (8010adc <xQueueGenericSend+0x208>)
 80109de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109e2:	601a      	str	r2, [r3, #0]
 80109e4:	f3bf 8f4f 	dsb	sy
 80109e8:	f3bf 8f6f 	isb	sy
 80109ec:	e00a      	b.n	8010a04 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80109ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d007      	beq.n	8010a04 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80109f4:	4b39      	ldr	r3, [pc, #228]	; (8010adc <xQueueGenericSend+0x208>)
 80109f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109fa:	601a      	str	r2, [r3, #0]
 80109fc:	f3bf 8f4f 	dsb	sy
 8010a00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010a04:	f002 fae6 	bl	8012fd4 <vPortExitCritical>
				return pdPASS;
 8010a08:	2301      	movs	r3, #1
 8010a0a:	e063      	b.n	8010ad4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d103      	bne.n	8010a1a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010a12:	f002 fadf 	bl	8012fd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010a16:	2300      	movs	r3, #0
 8010a18:	e05c      	b.n	8010ad4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d106      	bne.n	8010a2e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010a20:	f107 0314 	add.w	r3, r7, #20
 8010a24:	4618      	mov	r0, r3
 8010a26:	f001 faeb 	bl	8012000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010a2e:	f002 fad1 	bl	8012fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010a32:	f001 f84b 	bl	8011acc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010a36:	f002 fa99 	bl	8012f6c <vPortEnterCritical>
 8010a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a40:	b25b      	sxtb	r3, r3
 8010a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a46:	d103      	bne.n	8010a50 <xQueueGenericSend+0x17c>
 8010a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a56:	b25b      	sxtb	r3, r3
 8010a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a5c:	d103      	bne.n	8010a66 <xQueueGenericSend+0x192>
 8010a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a60:	2200      	movs	r2, #0
 8010a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a66:	f002 fab5 	bl	8012fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010a6a:	1d3a      	adds	r2, r7, #4
 8010a6c:	f107 0314 	add.w	r3, r7, #20
 8010a70:	4611      	mov	r1, r2
 8010a72:	4618      	mov	r0, r3
 8010a74:	f001 fada 	bl	801202c <xTaskCheckForTimeOut>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d124      	bne.n	8010ac8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010a7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a80:	f000 fd19 	bl	80114b6 <prvIsQueueFull>
 8010a84:	4603      	mov	r3, r0
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d018      	beq.n	8010abc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a8c:	3310      	adds	r3, #16
 8010a8e:	687a      	ldr	r2, [r7, #4]
 8010a90:	4611      	mov	r1, r2
 8010a92:	4618      	mov	r0, r3
 8010a94:	f001 f9fa 	bl	8011e8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a9a:	f000 fca4 	bl	80113e6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010a9e:	f001 f823 	bl	8011ae8 <xTaskResumeAll>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	f47f af7c 	bne.w	80109a2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8010aaa:	4b0c      	ldr	r3, [pc, #48]	; (8010adc <xQueueGenericSend+0x208>)
 8010aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ab0:	601a      	str	r2, [r3, #0]
 8010ab2:	f3bf 8f4f 	dsb	sy
 8010ab6:	f3bf 8f6f 	isb	sy
 8010aba:	e772      	b.n	80109a2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010abe:	f000 fc92 	bl	80113e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010ac2:	f001 f811 	bl	8011ae8 <xTaskResumeAll>
 8010ac6:	e76c      	b.n	80109a2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010aca:	f000 fc8c 	bl	80113e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010ace:	f001 f80b 	bl	8011ae8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010ad2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	3738      	adds	r7, #56	; 0x38
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}
 8010adc:	e000ed04 	.word	0xe000ed04

08010ae0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b08e      	sub	sp, #56	; 0x38
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	60f8      	str	r0, [r7, #12]
 8010ae8:	60b9      	str	r1, [r7, #8]
 8010aea:	607a      	str	r2, [r7, #4]
 8010aec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d10c      	bne.n	8010b12 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8010af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010afc:	b672      	cpsid	i
 8010afe:	f383 8811 	msr	BASEPRI, r3
 8010b02:	f3bf 8f6f 	isb	sy
 8010b06:	f3bf 8f4f 	dsb	sy
 8010b0a:	b662      	cpsie	i
 8010b0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010b0e:	bf00      	nop
 8010b10:	e7fe      	b.n	8010b10 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d103      	bne.n	8010b20 <xQueueGenericSendFromISR+0x40>
 8010b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d101      	bne.n	8010b24 <xQueueGenericSendFromISR+0x44>
 8010b20:	2301      	movs	r3, #1
 8010b22:	e000      	b.n	8010b26 <xQueueGenericSendFromISR+0x46>
 8010b24:	2300      	movs	r3, #0
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d10c      	bne.n	8010b44 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8010b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b2e:	b672      	cpsid	i
 8010b30:	f383 8811 	msr	BASEPRI, r3
 8010b34:	f3bf 8f6f 	isb	sy
 8010b38:	f3bf 8f4f 	dsb	sy
 8010b3c:	b662      	cpsie	i
 8010b3e:	623b      	str	r3, [r7, #32]
}
 8010b40:	bf00      	nop
 8010b42:	e7fe      	b.n	8010b42 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	2b02      	cmp	r3, #2
 8010b48:	d103      	bne.n	8010b52 <xQueueGenericSendFromISR+0x72>
 8010b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b4e:	2b01      	cmp	r3, #1
 8010b50:	d101      	bne.n	8010b56 <xQueueGenericSendFromISR+0x76>
 8010b52:	2301      	movs	r3, #1
 8010b54:	e000      	b.n	8010b58 <xQueueGenericSendFromISR+0x78>
 8010b56:	2300      	movs	r3, #0
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d10c      	bne.n	8010b76 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8010b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b60:	b672      	cpsid	i
 8010b62:	f383 8811 	msr	BASEPRI, r3
 8010b66:	f3bf 8f6f 	isb	sy
 8010b6a:	f3bf 8f4f 	dsb	sy
 8010b6e:	b662      	cpsie	i
 8010b70:	61fb      	str	r3, [r7, #28]
}
 8010b72:	bf00      	nop
 8010b74:	e7fe      	b.n	8010b74 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010b76:	f002 fae1 	bl	801313c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010b7a:	f3ef 8211 	mrs	r2, BASEPRI
 8010b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b82:	b672      	cpsid	i
 8010b84:	f383 8811 	msr	BASEPRI, r3
 8010b88:	f3bf 8f6f 	isb	sy
 8010b8c:	f3bf 8f4f 	dsb	sy
 8010b90:	b662      	cpsie	i
 8010b92:	61ba      	str	r2, [r7, #24]
 8010b94:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010b96:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010b98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ba2:	429a      	cmp	r2, r3
 8010ba4:	d302      	bcc.n	8010bac <xQueueGenericSendFromISR+0xcc>
 8010ba6:	683b      	ldr	r3, [r7, #0]
 8010ba8:	2b02      	cmp	r3, #2
 8010baa:	d12c      	bne.n	8010c06 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010bb6:	683a      	ldr	r2, [r7, #0]
 8010bb8:	68b9      	ldr	r1, [r7, #8]
 8010bba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bbc:	f000 fb83 	bl	80112c6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010bc0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bc8:	d112      	bne.n	8010bf0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d016      	beq.n	8010c00 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd4:	3324      	adds	r3, #36	; 0x24
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f001 f9ac 	bl	8011f34 <xTaskRemoveFromEventList>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d00e      	beq.n	8010c00 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d00b      	beq.n	8010c00 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2201      	movs	r2, #1
 8010bec:	601a      	str	r2, [r3, #0]
 8010bee:	e007      	b.n	8010c00 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010bf0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010bf4:	3301      	adds	r3, #1
 8010bf6:	b2db      	uxtb	r3, r3
 8010bf8:	b25a      	sxtb	r2, r3
 8010bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010c00:	2301      	movs	r3, #1
 8010c02:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010c04:	e001      	b.n	8010c0a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010c06:	2300      	movs	r3, #0
 8010c08:	637b      	str	r3, [r7, #52]	; 0x34
 8010c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c0c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010c14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3738      	adds	r7, #56	; 0x38
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}

08010c20 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b08e      	sub	sp, #56	; 0x38
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d10c      	bne.n	8010c4e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8010c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c38:	b672      	cpsid	i
 8010c3a:	f383 8811 	msr	BASEPRI, r3
 8010c3e:	f3bf 8f6f 	isb	sy
 8010c42:	f3bf 8f4f 	dsb	sy
 8010c46:	b662      	cpsie	i
 8010c48:	623b      	str	r3, [r7, #32]
}
 8010c4a:	bf00      	nop
 8010c4c:	e7fe      	b.n	8010c4c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d00c      	beq.n	8010c70 <xQueueGiveFromISR+0x50>
	__asm volatile
 8010c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c5a:	b672      	cpsid	i
 8010c5c:	f383 8811 	msr	BASEPRI, r3
 8010c60:	f3bf 8f6f 	isb	sy
 8010c64:	f3bf 8f4f 	dsb	sy
 8010c68:	b662      	cpsie	i
 8010c6a:	61fb      	str	r3, [r7, #28]
}
 8010c6c:	bf00      	nop
 8010c6e:	e7fe      	b.n	8010c6e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d103      	bne.n	8010c80 <xQueueGiveFromISR+0x60>
 8010c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c7a:	689b      	ldr	r3, [r3, #8]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d101      	bne.n	8010c84 <xQueueGiveFromISR+0x64>
 8010c80:	2301      	movs	r3, #1
 8010c82:	e000      	b.n	8010c86 <xQueueGiveFromISR+0x66>
 8010c84:	2300      	movs	r3, #0
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d10c      	bne.n	8010ca4 <xQueueGiveFromISR+0x84>
	__asm volatile
 8010c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c8e:	b672      	cpsid	i
 8010c90:	f383 8811 	msr	BASEPRI, r3
 8010c94:	f3bf 8f6f 	isb	sy
 8010c98:	f3bf 8f4f 	dsb	sy
 8010c9c:	b662      	cpsie	i
 8010c9e:	61bb      	str	r3, [r7, #24]
}
 8010ca0:	bf00      	nop
 8010ca2:	e7fe      	b.n	8010ca2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010ca4:	f002 fa4a 	bl	801313c <vPortValidateInterruptPriority>
	__asm volatile
 8010ca8:	f3ef 8211 	mrs	r2, BASEPRI
 8010cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb0:	b672      	cpsid	i
 8010cb2:	f383 8811 	msr	BASEPRI, r3
 8010cb6:	f3bf 8f6f 	isb	sy
 8010cba:	f3bf 8f4f 	dsb	sy
 8010cbe:	b662      	cpsie	i
 8010cc0:	617a      	str	r2, [r7, #20]
 8010cc2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010cc4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ccc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d22b      	bcs.n	8010d30 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce4:	1c5a      	adds	r2, r3, #1
 8010ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010cea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cf2:	d112      	bne.n	8010d1a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d016      	beq.n	8010d2a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cfe:	3324      	adds	r3, #36	; 0x24
 8010d00:	4618      	mov	r0, r3
 8010d02:	f001 f917 	bl	8011f34 <xTaskRemoveFromEventList>
 8010d06:	4603      	mov	r3, r0
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d00e      	beq.n	8010d2a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d00b      	beq.n	8010d2a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	2201      	movs	r2, #1
 8010d16:	601a      	str	r2, [r3, #0]
 8010d18:	e007      	b.n	8010d2a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d1e:	3301      	adds	r3, #1
 8010d20:	b2db      	uxtb	r3, r3
 8010d22:	b25a      	sxtb	r2, r3
 8010d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8010d2e:	e001      	b.n	8010d34 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010d30:	2300      	movs	r3, #0
 8010d32:	637b      	str	r3, [r7, #52]	; 0x34
 8010d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d36:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	f383 8811 	msr	BASEPRI, r3
}
 8010d3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3738      	adds	r7, #56	; 0x38
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
	...

08010d4c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b08c      	sub	sp, #48	; 0x30
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	60f8      	str	r0, [r7, #12]
 8010d54:	60b9      	str	r1, [r7, #8]
 8010d56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010d58:	2300      	movs	r3, #0
 8010d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d10c      	bne.n	8010d80 <xQueueReceive+0x34>
	__asm volatile
 8010d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d6a:	b672      	cpsid	i
 8010d6c:	f383 8811 	msr	BASEPRI, r3
 8010d70:	f3bf 8f6f 	isb	sy
 8010d74:	f3bf 8f4f 	dsb	sy
 8010d78:	b662      	cpsie	i
 8010d7a:	623b      	str	r3, [r7, #32]
}
 8010d7c:	bf00      	nop
 8010d7e:	e7fe      	b.n	8010d7e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d103      	bne.n	8010d8e <xQueueReceive+0x42>
 8010d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d101      	bne.n	8010d92 <xQueueReceive+0x46>
 8010d8e:	2301      	movs	r3, #1
 8010d90:	e000      	b.n	8010d94 <xQueueReceive+0x48>
 8010d92:	2300      	movs	r3, #0
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d10c      	bne.n	8010db2 <xQueueReceive+0x66>
	__asm volatile
 8010d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d9c:	b672      	cpsid	i
 8010d9e:	f383 8811 	msr	BASEPRI, r3
 8010da2:	f3bf 8f6f 	isb	sy
 8010da6:	f3bf 8f4f 	dsb	sy
 8010daa:	b662      	cpsie	i
 8010dac:	61fb      	str	r3, [r7, #28]
}
 8010dae:	bf00      	nop
 8010db0:	e7fe      	b.n	8010db0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010db2:	f001 fa89 	bl	80122c8 <xTaskGetSchedulerState>
 8010db6:	4603      	mov	r3, r0
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d102      	bne.n	8010dc2 <xQueueReceive+0x76>
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d101      	bne.n	8010dc6 <xQueueReceive+0x7a>
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	e000      	b.n	8010dc8 <xQueueReceive+0x7c>
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d10c      	bne.n	8010de6 <xQueueReceive+0x9a>
	__asm volatile
 8010dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd0:	b672      	cpsid	i
 8010dd2:	f383 8811 	msr	BASEPRI, r3
 8010dd6:	f3bf 8f6f 	isb	sy
 8010dda:	f3bf 8f4f 	dsb	sy
 8010dde:	b662      	cpsie	i
 8010de0:	61bb      	str	r3, [r7, #24]
}
 8010de2:	bf00      	nop
 8010de4:	e7fe      	b.n	8010de4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010de6:	f002 f8c1 	bl	8012f6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d01f      	beq.n	8010e36 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010df6:	68b9      	ldr	r1, [r7, #8]
 8010df8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010dfa:	f000 face 	bl	801139a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e00:	1e5a      	subs	r2, r3, #1
 8010e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e04:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e08:	691b      	ldr	r3, [r3, #16]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d00f      	beq.n	8010e2e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e10:	3310      	adds	r3, #16
 8010e12:	4618      	mov	r0, r3
 8010e14:	f001 f88e 	bl	8011f34 <xTaskRemoveFromEventList>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d007      	beq.n	8010e2e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010e1e:	4b3d      	ldr	r3, [pc, #244]	; (8010f14 <xQueueReceive+0x1c8>)
 8010e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e24:	601a      	str	r2, [r3, #0]
 8010e26:	f3bf 8f4f 	dsb	sy
 8010e2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010e2e:	f002 f8d1 	bl	8012fd4 <vPortExitCritical>
				return pdPASS;
 8010e32:	2301      	movs	r3, #1
 8010e34:	e069      	b.n	8010f0a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d103      	bne.n	8010e44 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010e3c:	f002 f8ca 	bl	8012fd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010e40:	2300      	movs	r3, #0
 8010e42:	e062      	b.n	8010f0a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d106      	bne.n	8010e58 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010e4a:	f107 0310 	add.w	r3, r7, #16
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f001 f8d6 	bl	8012000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010e54:	2301      	movs	r3, #1
 8010e56:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010e58:	f002 f8bc 	bl	8012fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010e5c:	f000 fe36 	bl	8011acc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010e60:	f002 f884 	bl	8012f6c <vPortEnterCritical>
 8010e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e6a:	b25b      	sxtb	r3, r3
 8010e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e70:	d103      	bne.n	8010e7a <xQueueReceive+0x12e>
 8010e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e74:	2200      	movs	r2, #0
 8010e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e80:	b25b      	sxtb	r3, r3
 8010e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e86:	d103      	bne.n	8010e90 <xQueueReceive+0x144>
 8010e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010e90:	f002 f8a0 	bl	8012fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010e94:	1d3a      	adds	r2, r7, #4
 8010e96:	f107 0310 	add.w	r3, r7, #16
 8010e9a:	4611      	mov	r1, r2
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f001 f8c5 	bl	801202c <xTaskCheckForTimeOut>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d123      	bne.n	8010ef0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010eaa:	f000 faee 	bl	801148a <prvIsQueueEmpty>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d017      	beq.n	8010ee4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb6:	3324      	adds	r3, #36	; 0x24
 8010eb8:	687a      	ldr	r2, [r7, #4]
 8010eba:	4611      	mov	r1, r2
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f000 ffe5 	bl	8011e8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ec4:	f000 fa8f 	bl	80113e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010ec8:	f000 fe0e 	bl	8011ae8 <xTaskResumeAll>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d189      	bne.n	8010de6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8010ed2:	4b10      	ldr	r3, [pc, #64]	; (8010f14 <xQueueReceive+0x1c8>)
 8010ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ed8:	601a      	str	r2, [r3, #0]
 8010eda:	f3bf 8f4f 	dsb	sy
 8010ede:	f3bf 8f6f 	isb	sy
 8010ee2:	e780      	b.n	8010de6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ee6:	f000 fa7e 	bl	80113e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010eea:	f000 fdfd 	bl	8011ae8 <xTaskResumeAll>
 8010eee:	e77a      	b.n	8010de6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ef2:	f000 fa78 	bl	80113e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010ef6:	f000 fdf7 	bl	8011ae8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010efc:	f000 fac5 	bl	801148a <prvIsQueueEmpty>
 8010f00:	4603      	mov	r3, r0
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	f43f af6f 	beq.w	8010de6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010f08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	3730      	adds	r7, #48	; 0x30
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}
 8010f12:	bf00      	nop
 8010f14:	e000ed04 	.word	0xe000ed04

08010f18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b08e      	sub	sp, #56	; 0x38
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
 8010f20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010f22:	2300      	movs	r3, #0
 8010f24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d10c      	bne.n	8010f4e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8010f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f38:	b672      	cpsid	i
 8010f3a:	f383 8811 	msr	BASEPRI, r3
 8010f3e:	f3bf 8f6f 	isb	sy
 8010f42:	f3bf 8f4f 	dsb	sy
 8010f46:	b662      	cpsie	i
 8010f48:	623b      	str	r3, [r7, #32]
}
 8010f4a:	bf00      	nop
 8010f4c:	e7fe      	b.n	8010f4c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d00c      	beq.n	8010f70 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8010f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f5a:	b672      	cpsid	i
 8010f5c:	f383 8811 	msr	BASEPRI, r3
 8010f60:	f3bf 8f6f 	isb	sy
 8010f64:	f3bf 8f4f 	dsb	sy
 8010f68:	b662      	cpsie	i
 8010f6a:	61fb      	str	r3, [r7, #28]
}
 8010f6c:	bf00      	nop
 8010f6e:	e7fe      	b.n	8010f6e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010f70:	f001 f9aa 	bl	80122c8 <xTaskGetSchedulerState>
 8010f74:	4603      	mov	r3, r0
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d102      	bne.n	8010f80 <xQueueSemaphoreTake+0x68>
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d101      	bne.n	8010f84 <xQueueSemaphoreTake+0x6c>
 8010f80:	2301      	movs	r3, #1
 8010f82:	e000      	b.n	8010f86 <xQueueSemaphoreTake+0x6e>
 8010f84:	2300      	movs	r3, #0
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d10c      	bne.n	8010fa4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8010f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f8e:	b672      	cpsid	i
 8010f90:	f383 8811 	msr	BASEPRI, r3
 8010f94:	f3bf 8f6f 	isb	sy
 8010f98:	f3bf 8f4f 	dsb	sy
 8010f9c:	b662      	cpsie	i
 8010f9e:	61bb      	str	r3, [r7, #24]
}
 8010fa0:	bf00      	nop
 8010fa2:	e7fe      	b.n	8010fa2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010fa4:	f001 ffe2 	bl	8012f6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d024      	beq.n	8010ffe <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fb6:	1e5a      	subs	r2, r3, #1
 8010fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d104      	bne.n	8010fce <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010fc4:	f001 fafe 	bl	80125c4 <pvTaskIncrementMutexHeldCount>
 8010fc8:	4602      	mov	r2, r0
 8010fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fcc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd0:	691b      	ldr	r3, [r3, #16]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d00f      	beq.n	8010ff6 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd8:	3310      	adds	r3, #16
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f000 ffaa 	bl	8011f34 <xTaskRemoveFromEventList>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d007      	beq.n	8010ff6 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010fe6:	4b55      	ldr	r3, [pc, #340]	; (801113c <xQueueSemaphoreTake+0x224>)
 8010fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fec:	601a      	str	r2, [r3, #0]
 8010fee:	f3bf 8f4f 	dsb	sy
 8010ff2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010ff6:	f001 ffed 	bl	8012fd4 <vPortExitCritical>
				return pdPASS;
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	e099      	b.n	8011132 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d113      	bne.n	801102c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011006:	2b00      	cmp	r3, #0
 8011008:	d00c      	beq.n	8011024 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 801100a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801100e:	b672      	cpsid	i
 8011010:	f383 8811 	msr	BASEPRI, r3
 8011014:	f3bf 8f6f 	isb	sy
 8011018:	f3bf 8f4f 	dsb	sy
 801101c:	b662      	cpsie	i
 801101e:	617b      	str	r3, [r7, #20]
}
 8011020:	bf00      	nop
 8011022:	e7fe      	b.n	8011022 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011024:	f001 ffd6 	bl	8012fd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011028:	2300      	movs	r3, #0
 801102a:	e082      	b.n	8011132 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801102c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801102e:	2b00      	cmp	r3, #0
 8011030:	d106      	bne.n	8011040 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011032:	f107 030c 	add.w	r3, r7, #12
 8011036:	4618      	mov	r0, r3
 8011038:	f000 ffe2 	bl	8012000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801103c:	2301      	movs	r3, #1
 801103e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011040:	f001 ffc8 	bl	8012fd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011044:	f000 fd42 	bl	8011acc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011048:	f001 ff90 	bl	8012f6c <vPortEnterCritical>
 801104c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801104e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011052:	b25b      	sxtb	r3, r3
 8011054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011058:	d103      	bne.n	8011062 <xQueueSemaphoreTake+0x14a>
 801105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801105c:	2200      	movs	r2, #0
 801105e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011068:	b25b      	sxtb	r3, r3
 801106a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801106e:	d103      	bne.n	8011078 <xQueueSemaphoreTake+0x160>
 8011070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011072:	2200      	movs	r2, #0
 8011074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011078:	f001 ffac 	bl	8012fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801107c:	463a      	mov	r2, r7
 801107e:	f107 030c 	add.w	r3, r7, #12
 8011082:	4611      	mov	r1, r2
 8011084:	4618      	mov	r0, r3
 8011086:	f000 ffd1 	bl	801202c <xTaskCheckForTimeOut>
 801108a:	4603      	mov	r3, r0
 801108c:	2b00      	cmp	r3, #0
 801108e:	d132      	bne.n	80110f6 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011092:	f000 f9fa 	bl	801148a <prvIsQueueEmpty>
 8011096:	4603      	mov	r3, r0
 8011098:	2b00      	cmp	r3, #0
 801109a:	d026      	beq.n	80110ea <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801109c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d109      	bne.n	80110b8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80110a4:	f001 ff62 	bl	8012f6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80110a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110aa:	689b      	ldr	r3, [r3, #8]
 80110ac:	4618      	mov	r0, r3
 80110ae:	f001 f929 	bl	8012304 <xTaskPriorityInherit>
 80110b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80110b4:	f001 ff8e 	bl	8012fd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80110b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ba:	3324      	adds	r3, #36	; 0x24
 80110bc:	683a      	ldr	r2, [r7, #0]
 80110be:	4611      	mov	r1, r2
 80110c0:	4618      	mov	r0, r3
 80110c2:	f000 fee3 	bl	8011e8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80110c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110c8:	f000 f98d 	bl	80113e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80110cc:	f000 fd0c 	bl	8011ae8 <xTaskResumeAll>
 80110d0:	4603      	mov	r3, r0
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	f47f af66 	bne.w	8010fa4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80110d8:	4b18      	ldr	r3, [pc, #96]	; (801113c <xQueueSemaphoreTake+0x224>)
 80110da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110de:	601a      	str	r2, [r3, #0]
 80110e0:	f3bf 8f4f 	dsb	sy
 80110e4:	f3bf 8f6f 	isb	sy
 80110e8:	e75c      	b.n	8010fa4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80110ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110ec:	f000 f97b 	bl	80113e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80110f0:	f000 fcfa 	bl	8011ae8 <xTaskResumeAll>
 80110f4:	e756      	b.n	8010fa4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80110f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110f8:	f000 f975 	bl	80113e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80110fc:	f000 fcf4 	bl	8011ae8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011100:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011102:	f000 f9c2 	bl	801148a <prvIsQueueEmpty>
 8011106:	4603      	mov	r3, r0
 8011108:	2b00      	cmp	r3, #0
 801110a:	f43f af4b 	beq.w	8010fa4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801110e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011110:	2b00      	cmp	r3, #0
 8011112:	d00d      	beq.n	8011130 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8011114:	f001 ff2a 	bl	8012f6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011118:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801111a:	f000 f8bc 	bl	8011296 <prvGetDisinheritPriorityAfterTimeout>
 801111e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011122:	689b      	ldr	r3, [r3, #8]
 8011124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011126:	4618      	mov	r0, r3
 8011128:	f001 f9c6 	bl	80124b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801112c:	f001 ff52 	bl	8012fd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011130:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011132:	4618      	mov	r0, r3
 8011134:	3738      	adds	r7, #56	; 0x38
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}
 801113a:	bf00      	nop
 801113c:	e000ed04 	.word	0xe000ed04

08011140 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b08e      	sub	sp, #56	; 0x38
 8011144:	af00      	add	r7, sp, #0
 8011146:	60f8      	str	r0, [r7, #12]
 8011148:	60b9      	str	r1, [r7, #8]
 801114a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011152:	2b00      	cmp	r3, #0
 8011154:	d10c      	bne.n	8011170 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8011156:	f04f 0350 	mov.w	r3, #80	; 0x50
 801115a:	b672      	cpsid	i
 801115c:	f383 8811 	msr	BASEPRI, r3
 8011160:	f3bf 8f6f 	isb	sy
 8011164:	f3bf 8f4f 	dsb	sy
 8011168:	b662      	cpsie	i
 801116a:	623b      	str	r3, [r7, #32]
}
 801116c:	bf00      	nop
 801116e:	e7fe      	b.n	801116e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d103      	bne.n	801117e <xQueueReceiveFromISR+0x3e>
 8011176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801117a:	2b00      	cmp	r3, #0
 801117c:	d101      	bne.n	8011182 <xQueueReceiveFromISR+0x42>
 801117e:	2301      	movs	r3, #1
 8011180:	e000      	b.n	8011184 <xQueueReceiveFromISR+0x44>
 8011182:	2300      	movs	r3, #0
 8011184:	2b00      	cmp	r3, #0
 8011186:	d10c      	bne.n	80111a2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8011188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801118c:	b672      	cpsid	i
 801118e:	f383 8811 	msr	BASEPRI, r3
 8011192:	f3bf 8f6f 	isb	sy
 8011196:	f3bf 8f4f 	dsb	sy
 801119a:	b662      	cpsie	i
 801119c:	61fb      	str	r3, [r7, #28]
}
 801119e:	bf00      	nop
 80111a0:	e7fe      	b.n	80111a0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80111a2:	f001 ffcb 	bl	801313c <vPortValidateInterruptPriority>
	__asm volatile
 80111a6:	f3ef 8211 	mrs	r2, BASEPRI
 80111aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111ae:	b672      	cpsid	i
 80111b0:	f383 8811 	msr	BASEPRI, r3
 80111b4:	f3bf 8f6f 	isb	sy
 80111b8:	f3bf 8f4f 	dsb	sy
 80111bc:	b662      	cpsie	i
 80111be:	61ba      	str	r2, [r7, #24]
 80111c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80111c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80111c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80111c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80111cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d02f      	beq.n	8011232 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80111d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80111d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80111dc:	68b9      	ldr	r1, [r7, #8]
 80111de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111e0:	f000 f8db 	bl	801139a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80111e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111e6:	1e5a      	subs	r2, r3, #1
 80111e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80111ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80111f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111f4:	d112      	bne.n	801121c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f8:	691b      	ldr	r3, [r3, #16]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d016      	beq.n	801122c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011200:	3310      	adds	r3, #16
 8011202:	4618      	mov	r0, r3
 8011204:	f000 fe96 	bl	8011f34 <xTaskRemoveFromEventList>
 8011208:	4603      	mov	r3, r0
 801120a:	2b00      	cmp	r3, #0
 801120c:	d00e      	beq.n	801122c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d00b      	beq.n	801122c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2201      	movs	r2, #1
 8011218:	601a      	str	r2, [r3, #0]
 801121a:	e007      	b.n	801122c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801121c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011220:	3301      	adds	r3, #1
 8011222:	b2db      	uxtb	r3, r3
 8011224:	b25a      	sxtb	r2, r3
 8011226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801122c:	2301      	movs	r3, #1
 801122e:	637b      	str	r3, [r7, #52]	; 0x34
 8011230:	e001      	b.n	8011236 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8011232:	2300      	movs	r3, #0
 8011234:	637b      	str	r3, [r7, #52]	; 0x34
 8011236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011238:	613b      	str	r3, [r7, #16]
	__asm volatile
 801123a:	693b      	ldr	r3, [r7, #16]
 801123c:	f383 8811 	msr	BASEPRI, r3
}
 8011240:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011244:	4618      	mov	r0, r3
 8011246:	3738      	adds	r7, #56	; 0x38
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}

0801124c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b084      	sub	sp, #16
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d10c      	bne.n	8011278 <vQueueDelete+0x2c>
	__asm volatile
 801125e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011262:	b672      	cpsid	i
 8011264:	f383 8811 	msr	BASEPRI, r3
 8011268:	f3bf 8f6f 	isb	sy
 801126c:	f3bf 8f4f 	dsb	sy
 8011270:	b662      	cpsie	i
 8011272:	60bb      	str	r3, [r7, #8]
}
 8011274:	bf00      	nop
 8011276:	e7fe      	b.n	8011276 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011278:	68f8      	ldr	r0, [r7, #12]
 801127a:	f000 f95f 	bl	801153c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011284:	2b00      	cmp	r3, #0
 8011286:	d102      	bne.n	801128e <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8011288:	68f8      	ldr	r0, [r7, #12]
 801128a:	f002 f865 	bl	8013358 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801128e:	bf00      	nop
 8011290:	3710      	adds	r7, #16
 8011292:	46bd      	mov	sp, r7
 8011294:	bd80      	pop	{r7, pc}

08011296 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011296:	b480      	push	{r7}
 8011298:	b085      	sub	sp, #20
 801129a:	af00      	add	r7, sp, #0
 801129c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d006      	beq.n	80112b4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80112b0:	60fb      	str	r3, [r7, #12]
 80112b2:	e001      	b.n	80112b8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80112b4:	2300      	movs	r3, #0
 80112b6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80112b8:	68fb      	ldr	r3, [r7, #12]
	}
 80112ba:	4618      	mov	r0, r3
 80112bc:	3714      	adds	r7, #20
 80112be:	46bd      	mov	sp, r7
 80112c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c4:	4770      	bx	lr

080112c6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80112c6:	b580      	push	{r7, lr}
 80112c8:	b086      	sub	sp, #24
 80112ca:	af00      	add	r7, sp, #0
 80112cc:	60f8      	str	r0, [r7, #12]
 80112ce:	60b9      	str	r1, [r7, #8]
 80112d0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80112d2:	2300      	movs	r3, #0
 80112d4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112da:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d10d      	bne.n	8011300 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d14d      	bne.n	8011388 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	689b      	ldr	r3, [r3, #8]
 80112f0:	4618      	mov	r0, r3
 80112f2:	f001 f86f 	bl	80123d4 <xTaskPriorityDisinherit>
 80112f6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	2200      	movs	r2, #0
 80112fc:	609a      	str	r2, [r3, #8]
 80112fe:	e043      	b.n	8011388 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d119      	bne.n	801133a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	6858      	ldr	r0, [r3, #4]
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801130e:	461a      	mov	r2, r3
 8011310:	68b9      	ldr	r1, [r7, #8]
 8011312:	f002 fa5e 	bl	80137d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	685a      	ldr	r2, [r3, #4]
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801131e:	441a      	add	r2, r3
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	685a      	ldr	r2, [r3, #4]
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	689b      	ldr	r3, [r3, #8]
 801132c:	429a      	cmp	r2, r3
 801132e:	d32b      	bcc.n	8011388 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	681a      	ldr	r2, [r3, #0]
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	605a      	str	r2, [r3, #4]
 8011338:	e026      	b.n	8011388 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	68d8      	ldr	r0, [r3, #12]
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011342:	461a      	mov	r2, r3
 8011344:	68b9      	ldr	r1, [r7, #8]
 8011346:	f002 fa44 	bl	80137d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	68da      	ldr	r2, [r3, #12]
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011352:	425b      	negs	r3, r3
 8011354:	441a      	add	r2, r3
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	68da      	ldr	r2, [r3, #12]
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	429a      	cmp	r2, r3
 8011364:	d207      	bcs.n	8011376 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	689a      	ldr	r2, [r3, #8]
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801136e:	425b      	negs	r3, r3
 8011370:	441a      	add	r2, r3
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	2b02      	cmp	r3, #2
 801137a:	d105      	bne.n	8011388 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801137c:	693b      	ldr	r3, [r7, #16]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d002      	beq.n	8011388 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011382:	693b      	ldr	r3, [r7, #16]
 8011384:	3b01      	subs	r3, #1
 8011386:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011388:	693b      	ldr	r3, [r7, #16]
 801138a:	1c5a      	adds	r2, r3, #1
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011390:	697b      	ldr	r3, [r7, #20]
}
 8011392:	4618      	mov	r0, r3
 8011394:	3718      	adds	r7, #24
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}

0801139a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801139a:	b580      	push	{r7, lr}
 801139c:	b082      	sub	sp, #8
 801139e:	af00      	add	r7, sp, #0
 80113a0:	6078      	str	r0, [r7, #4]
 80113a2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d018      	beq.n	80113de <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	68da      	ldr	r2, [r3, #12]
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113b4:	441a      	add	r2, r3
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	68da      	ldr	r2, [r3, #12]
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	689b      	ldr	r3, [r3, #8]
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d303      	bcc.n	80113ce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681a      	ldr	r2, [r3, #0]
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	68d9      	ldr	r1, [r3, #12]
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113d6:	461a      	mov	r2, r3
 80113d8:	6838      	ldr	r0, [r7, #0]
 80113da:	f002 f9fa 	bl	80137d2 <memcpy>
	}
}
 80113de:	bf00      	nop
 80113e0:	3708      	adds	r7, #8
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}

080113e6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80113e6:	b580      	push	{r7, lr}
 80113e8:	b084      	sub	sp, #16
 80113ea:	af00      	add	r7, sp, #0
 80113ec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80113ee:	f001 fdbd 	bl	8012f6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80113f8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80113fa:	e011      	b.n	8011420 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011400:	2b00      	cmp	r3, #0
 8011402:	d012      	beq.n	801142a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	3324      	adds	r3, #36	; 0x24
 8011408:	4618      	mov	r0, r3
 801140a:	f000 fd93 	bl	8011f34 <xTaskRemoveFromEventList>
 801140e:	4603      	mov	r3, r0
 8011410:	2b00      	cmp	r3, #0
 8011412:	d001      	beq.n	8011418 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011414:	f000 fe70 	bl	80120f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011418:	7bfb      	ldrb	r3, [r7, #15]
 801141a:	3b01      	subs	r3, #1
 801141c:	b2db      	uxtb	r3, r3
 801141e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011424:	2b00      	cmp	r3, #0
 8011426:	dce9      	bgt.n	80113fc <prvUnlockQueue+0x16>
 8011428:	e000      	b.n	801142c <prvUnlockQueue+0x46>
					break;
 801142a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	22ff      	movs	r2, #255	; 0xff
 8011430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011434:	f001 fdce 	bl	8012fd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011438:	f001 fd98 	bl	8012f6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011442:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011444:	e011      	b.n	801146a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	691b      	ldr	r3, [r3, #16]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d012      	beq.n	8011474 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	3310      	adds	r3, #16
 8011452:	4618      	mov	r0, r3
 8011454:	f000 fd6e 	bl	8011f34 <xTaskRemoveFromEventList>
 8011458:	4603      	mov	r3, r0
 801145a:	2b00      	cmp	r3, #0
 801145c:	d001      	beq.n	8011462 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801145e:	f000 fe4b 	bl	80120f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011462:	7bbb      	ldrb	r3, [r7, #14]
 8011464:	3b01      	subs	r3, #1
 8011466:	b2db      	uxtb	r3, r3
 8011468:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801146a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801146e:	2b00      	cmp	r3, #0
 8011470:	dce9      	bgt.n	8011446 <prvUnlockQueue+0x60>
 8011472:	e000      	b.n	8011476 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011474:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	22ff      	movs	r2, #255	; 0xff
 801147a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801147e:	f001 fda9 	bl	8012fd4 <vPortExitCritical>
}
 8011482:	bf00      	nop
 8011484:	3710      	adds	r7, #16
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}

0801148a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801148a:	b580      	push	{r7, lr}
 801148c:	b084      	sub	sp, #16
 801148e:	af00      	add	r7, sp, #0
 8011490:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011492:	f001 fd6b 	bl	8012f6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801149a:	2b00      	cmp	r3, #0
 801149c:	d102      	bne.n	80114a4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801149e:	2301      	movs	r3, #1
 80114a0:	60fb      	str	r3, [r7, #12]
 80114a2:	e001      	b.n	80114a8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80114a4:	2300      	movs	r3, #0
 80114a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80114a8:	f001 fd94 	bl	8012fd4 <vPortExitCritical>

	return xReturn;
 80114ac:	68fb      	ldr	r3, [r7, #12]
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	3710      	adds	r7, #16
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}

080114b6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80114b6:	b580      	push	{r7, lr}
 80114b8:	b084      	sub	sp, #16
 80114ba:	af00      	add	r7, sp, #0
 80114bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80114be:	f001 fd55 	bl	8012f6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d102      	bne.n	80114d4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80114ce:	2301      	movs	r3, #1
 80114d0:	60fb      	str	r3, [r7, #12]
 80114d2:	e001      	b.n	80114d8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80114d4:	2300      	movs	r3, #0
 80114d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80114d8:	f001 fd7c 	bl	8012fd4 <vPortExitCritical>

	return xReturn;
 80114dc:	68fb      	ldr	r3, [r7, #12]
}
 80114de:	4618      	mov	r0, r3
 80114e0:	3710      	adds	r7, #16
 80114e2:	46bd      	mov	sp, r7
 80114e4:	bd80      	pop	{r7, pc}
	...

080114e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80114e8:	b480      	push	{r7}
 80114ea:	b085      	sub	sp, #20
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
 80114f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80114f2:	2300      	movs	r3, #0
 80114f4:	60fb      	str	r3, [r7, #12]
 80114f6:	e014      	b.n	8011522 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80114f8:	4a0f      	ldr	r2, [pc, #60]	; (8011538 <vQueueAddToRegistry+0x50>)
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d10b      	bne.n	801151c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011504:	490c      	ldr	r1, [pc, #48]	; (8011538 <vQueueAddToRegistry+0x50>)
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	683a      	ldr	r2, [r7, #0]
 801150a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801150e:	4a0a      	ldr	r2, [pc, #40]	; (8011538 <vQueueAddToRegistry+0x50>)
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	00db      	lsls	r3, r3, #3
 8011514:	4413      	add	r3, r2
 8011516:	687a      	ldr	r2, [r7, #4]
 8011518:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801151a:	e006      	b.n	801152a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	3301      	adds	r3, #1
 8011520:	60fb      	str	r3, [r7, #12]
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	2b07      	cmp	r3, #7
 8011526:	d9e7      	bls.n	80114f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011528:	bf00      	nop
 801152a:	bf00      	nop
 801152c:	3714      	adds	r7, #20
 801152e:	46bd      	mov	sp, r7
 8011530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011534:	4770      	bx	lr
 8011536:	bf00      	nop
 8011538:	20001f48 	.word	0x20001f48

0801153c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801153c:	b480      	push	{r7}
 801153e:	b085      	sub	sp, #20
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011544:	2300      	movs	r3, #0
 8011546:	60fb      	str	r3, [r7, #12]
 8011548:	e016      	b.n	8011578 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801154a:	4a10      	ldr	r2, [pc, #64]	; (801158c <vQueueUnregisterQueue+0x50>)
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	00db      	lsls	r3, r3, #3
 8011550:	4413      	add	r3, r2
 8011552:	685b      	ldr	r3, [r3, #4]
 8011554:	687a      	ldr	r2, [r7, #4]
 8011556:	429a      	cmp	r2, r3
 8011558:	d10b      	bne.n	8011572 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801155a:	4a0c      	ldr	r2, [pc, #48]	; (801158c <vQueueUnregisterQueue+0x50>)
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	2100      	movs	r1, #0
 8011560:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011564:	4a09      	ldr	r2, [pc, #36]	; (801158c <vQueueUnregisterQueue+0x50>)
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	00db      	lsls	r3, r3, #3
 801156a:	4413      	add	r3, r2
 801156c:	2200      	movs	r2, #0
 801156e:	605a      	str	r2, [r3, #4]
				break;
 8011570:	e006      	b.n	8011580 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	3301      	adds	r3, #1
 8011576:	60fb      	str	r3, [r7, #12]
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	2b07      	cmp	r3, #7
 801157c:	d9e5      	bls.n	801154a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801157e:	bf00      	nop
 8011580:	bf00      	nop
 8011582:	3714      	adds	r7, #20
 8011584:	46bd      	mov	sp, r7
 8011586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158a:	4770      	bx	lr
 801158c:	20001f48 	.word	0x20001f48

08011590 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011590:	b580      	push	{r7, lr}
 8011592:	b086      	sub	sp, #24
 8011594:	af00      	add	r7, sp, #0
 8011596:	60f8      	str	r0, [r7, #12]
 8011598:	60b9      	str	r1, [r7, #8]
 801159a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80115a0:	f001 fce4 	bl	8012f6c <vPortEnterCritical>
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80115aa:	b25b      	sxtb	r3, r3
 80115ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115b0:	d103      	bne.n	80115ba <vQueueWaitForMessageRestricted+0x2a>
 80115b2:	697b      	ldr	r3, [r7, #20]
 80115b4:	2200      	movs	r2, #0
 80115b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80115ba:	697b      	ldr	r3, [r7, #20]
 80115bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115c0:	b25b      	sxtb	r3, r3
 80115c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115c6:	d103      	bne.n	80115d0 <vQueueWaitForMessageRestricted+0x40>
 80115c8:	697b      	ldr	r3, [r7, #20]
 80115ca:	2200      	movs	r2, #0
 80115cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80115d0:	f001 fd00 	bl	8012fd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80115d4:	697b      	ldr	r3, [r7, #20]
 80115d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d106      	bne.n	80115ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	3324      	adds	r3, #36	; 0x24
 80115e0:	687a      	ldr	r2, [r7, #4]
 80115e2:	68b9      	ldr	r1, [r7, #8]
 80115e4:	4618      	mov	r0, r3
 80115e6:	f000 fc77 	bl	8011ed8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80115ea:	6978      	ldr	r0, [r7, #20]
 80115ec:	f7ff fefb 	bl	80113e6 <prvUnlockQueue>
	}
 80115f0:	bf00      	nop
 80115f2:	3718      	adds	r7, #24
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}

080115f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b08e      	sub	sp, #56	; 0x38
 80115fc:	af04      	add	r7, sp, #16
 80115fe:	60f8      	str	r0, [r7, #12]
 8011600:	60b9      	str	r1, [r7, #8]
 8011602:	607a      	str	r2, [r7, #4]
 8011604:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011608:	2b00      	cmp	r3, #0
 801160a:	d10c      	bne.n	8011626 <xTaskCreateStatic+0x2e>
	__asm volatile
 801160c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011610:	b672      	cpsid	i
 8011612:	f383 8811 	msr	BASEPRI, r3
 8011616:	f3bf 8f6f 	isb	sy
 801161a:	f3bf 8f4f 	dsb	sy
 801161e:	b662      	cpsie	i
 8011620:	623b      	str	r3, [r7, #32]
}
 8011622:	bf00      	nop
 8011624:	e7fe      	b.n	8011624 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8011626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011628:	2b00      	cmp	r3, #0
 801162a:	d10c      	bne.n	8011646 <xTaskCreateStatic+0x4e>
	__asm volatile
 801162c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011630:	b672      	cpsid	i
 8011632:	f383 8811 	msr	BASEPRI, r3
 8011636:	f3bf 8f6f 	isb	sy
 801163a:	f3bf 8f4f 	dsb	sy
 801163e:	b662      	cpsie	i
 8011640:	61fb      	str	r3, [r7, #28]
}
 8011642:	bf00      	nop
 8011644:	e7fe      	b.n	8011644 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011646:	23bc      	movs	r3, #188	; 0xbc
 8011648:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	2bbc      	cmp	r3, #188	; 0xbc
 801164e:	d00c      	beq.n	801166a <xTaskCreateStatic+0x72>
	__asm volatile
 8011650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011654:	b672      	cpsid	i
 8011656:	f383 8811 	msr	BASEPRI, r3
 801165a:	f3bf 8f6f 	isb	sy
 801165e:	f3bf 8f4f 	dsb	sy
 8011662:	b662      	cpsie	i
 8011664:	61bb      	str	r3, [r7, #24]
}
 8011666:	bf00      	nop
 8011668:	e7fe      	b.n	8011668 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801166a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801166c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801166e:	2b00      	cmp	r3, #0
 8011670:	d01e      	beq.n	80116b0 <xTaskCreateStatic+0xb8>
 8011672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011674:	2b00      	cmp	r3, #0
 8011676:	d01b      	beq.n	80116b0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801167a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801167e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011680:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011684:	2202      	movs	r2, #2
 8011686:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801168a:	2300      	movs	r3, #0
 801168c:	9303      	str	r3, [sp, #12]
 801168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011690:	9302      	str	r3, [sp, #8]
 8011692:	f107 0314 	add.w	r3, r7, #20
 8011696:	9301      	str	r3, [sp, #4]
 8011698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801169a:	9300      	str	r3, [sp, #0]
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	687a      	ldr	r2, [r7, #4]
 80116a0:	68b9      	ldr	r1, [r7, #8]
 80116a2:	68f8      	ldr	r0, [r7, #12]
 80116a4:	f000 f850 	bl	8011748 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80116a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80116aa:	f000 f8f5 	bl	8011898 <prvAddNewTaskToReadyList>
 80116ae:	e001      	b.n	80116b4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80116b0:	2300      	movs	r3, #0
 80116b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80116b4:	697b      	ldr	r3, [r7, #20]
	}
 80116b6:	4618      	mov	r0, r3
 80116b8:	3728      	adds	r7, #40	; 0x28
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bd80      	pop	{r7, pc}

080116be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80116be:	b580      	push	{r7, lr}
 80116c0:	b08c      	sub	sp, #48	; 0x30
 80116c2:	af04      	add	r7, sp, #16
 80116c4:	60f8      	str	r0, [r7, #12]
 80116c6:	60b9      	str	r1, [r7, #8]
 80116c8:	603b      	str	r3, [r7, #0]
 80116ca:	4613      	mov	r3, r2
 80116cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80116ce:	88fb      	ldrh	r3, [r7, #6]
 80116d0:	009b      	lsls	r3, r3, #2
 80116d2:	4618      	mov	r0, r3
 80116d4:	f001 fd76 	bl	80131c4 <pvPortMalloc>
 80116d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80116da:	697b      	ldr	r3, [r7, #20]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d00e      	beq.n	80116fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80116e0:	20bc      	movs	r0, #188	; 0xbc
 80116e2:	f001 fd6f 	bl	80131c4 <pvPortMalloc>
 80116e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80116e8:	69fb      	ldr	r3, [r7, #28]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d003      	beq.n	80116f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80116ee:	69fb      	ldr	r3, [r7, #28]
 80116f0:	697a      	ldr	r2, [r7, #20]
 80116f2:	631a      	str	r2, [r3, #48]	; 0x30
 80116f4:	e005      	b.n	8011702 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80116f6:	6978      	ldr	r0, [r7, #20]
 80116f8:	f001 fe2e 	bl	8013358 <vPortFree>
 80116fc:	e001      	b.n	8011702 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80116fe:	2300      	movs	r3, #0
 8011700:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011702:	69fb      	ldr	r3, [r7, #28]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d017      	beq.n	8011738 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011708:	69fb      	ldr	r3, [r7, #28]
 801170a:	2200      	movs	r2, #0
 801170c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011710:	88fa      	ldrh	r2, [r7, #6]
 8011712:	2300      	movs	r3, #0
 8011714:	9303      	str	r3, [sp, #12]
 8011716:	69fb      	ldr	r3, [r7, #28]
 8011718:	9302      	str	r3, [sp, #8]
 801171a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801171c:	9301      	str	r3, [sp, #4]
 801171e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011720:	9300      	str	r3, [sp, #0]
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	68b9      	ldr	r1, [r7, #8]
 8011726:	68f8      	ldr	r0, [r7, #12]
 8011728:	f000 f80e 	bl	8011748 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801172c:	69f8      	ldr	r0, [r7, #28]
 801172e:	f000 f8b3 	bl	8011898 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011732:	2301      	movs	r3, #1
 8011734:	61bb      	str	r3, [r7, #24]
 8011736:	e002      	b.n	801173e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011738:	f04f 33ff 	mov.w	r3, #4294967295
 801173c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801173e:	69bb      	ldr	r3, [r7, #24]
	}
 8011740:	4618      	mov	r0, r3
 8011742:	3720      	adds	r7, #32
 8011744:	46bd      	mov	sp, r7
 8011746:	bd80      	pop	{r7, pc}

08011748 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b088      	sub	sp, #32
 801174c:	af00      	add	r7, sp, #0
 801174e:	60f8      	str	r0, [r7, #12]
 8011750:	60b9      	str	r1, [r7, #8]
 8011752:	607a      	str	r2, [r7, #4]
 8011754:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011758:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	009b      	lsls	r3, r3, #2
 801175e:	461a      	mov	r2, r3
 8011760:	21a5      	movs	r1, #165	; 0xa5
 8011762:	f002 f844 	bl	80137ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801176a:	6879      	ldr	r1, [r7, #4]
 801176c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011770:	440b      	add	r3, r1
 8011772:	009b      	lsls	r3, r3, #2
 8011774:	4413      	add	r3, r2
 8011776:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011778:	69bb      	ldr	r3, [r7, #24]
 801177a:	f023 0307 	bic.w	r3, r3, #7
 801177e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011780:	69bb      	ldr	r3, [r7, #24]
 8011782:	f003 0307 	and.w	r3, r3, #7
 8011786:	2b00      	cmp	r3, #0
 8011788:	d00c      	beq.n	80117a4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 801178a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801178e:	b672      	cpsid	i
 8011790:	f383 8811 	msr	BASEPRI, r3
 8011794:	f3bf 8f6f 	isb	sy
 8011798:	f3bf 8f4f 	dsb	sy
 801179c:	b662      	cpsie	i
 801179e:	617b      	str	r3, [r7, #20]
}
 80117a0:	bf00      	nop
 80117a2:	e7fe      	b.n	80117a2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d01f      	beq.n	80117ea <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80117aa:	2300      	movs	r3, #0
 80117ac:	61fb      	str	r3, [r7, #28]
 80117ae:	e012      	b.n	80117d6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117b0:	68ba      	ldr	r2, [r7, #8]
 80117b2:	69fb      	ldr	r3, [r7, #28]
 80117b4:	4413      	add	r3, r2
 80117b6:	7819      	ldrb	r1, [r3, #0]
 80117b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117ba:	69fb      	ldr	r3, [r7, #28]
 80117bc:	4413      	add	r3, r2
 80117be:	3334      	adds	r3, #52	; 0x34
 80117c0:	460a      	mov	r2, r1
 80117c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80117c4:	68ba      	ldr	r2, [r7, #8]
 80117c6:	69fb      	ldr	r3, [r7, #28]
 80117c8:	4413      	add	r3, r2
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d006      	beq.n	80117de <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80117d0:	69fb      	ldr	r3, [r7, #28]
 80117d2:	3301      	adds	r3, #1
 80117d4:	61fb      	str	r3, [r7, #28]
 80117d6:	69fb      	ldr	r3, [r7, #28]
 80117d8:	2b0f      	cmp	r3, #15
 80117da:	d9e9      	bls.n	80117b0 <prvInitialiseNewTask+0x68>
 80117dc:	e000      	b.n	80117e0 <prvInitialiseNewTask+0x98>
			{
				break;
 80117de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80117e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117e2:	2200      	movs	r2, #0
 80117e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80117e8:	e003      	b.n	80117f2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80117ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ec:	2200      	movs	r2, #0
 80117ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80117f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117f4:	2b37      	cmp	r3, #55	; 0x37
 80117f6:	d901      	bls.n	80117fc <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80117f8:	2337      	movs	r3, #55	; 0x37
 80117fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80117fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011800:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011806:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801180a:	2200      	movs	r2, #0
 801180c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801180e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011810:	3304      	adds	r3, #4
 8011812:	4618      	mov	r0, r3
 8011814:	f7fe fe06 	bl	8010424 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801181a:	3318      	adds	r3, #24
 801181c:	4618      	mov	r0, r3
 801181e:	f7fe fe01 	bl	8010424 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011826:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801182a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801182e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011830:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011836:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801183a:	2200      	movs	r2, #0
 801183c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011842:	2200      	movs	r2, #0
 8011844:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801184a:	3354      	adds	r3, #84	; 0x54
 801184c:	2260      	movs	r2, #96	; 0x60
 801184e:	2100      	movs	r1, #0
 8011850:	4618      	mov	r0, r3
 8011852:	f001 ffcc 	bl	80137ee <memset>
 8011856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011858:	4a0c      	ldr	r2, [pc, #48]	; (801188c <prvInitialiseNewTask+0x144>)
 801185a:	659a      	str	r2, [r3, #88]	; 0x58
 801185c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801185e:	4a0c      	ldr	r2, [pc, #48]	; (8011890 <prvInitialiseNewTask+0x148>)
 8011860:	65da      	str	r2, [r3, #92]	; 0x5c
 8011862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011864:	4a0b      	ldr	r2, [pc, #44]	; (8011894 <prvInitialiseNewTask+0x14c>)
 8011866:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011868:	683a      	ldr	r2, [r7, #0]
 801186a:	68f9      	ldr	r1, [r7, #12]
 801186c:	69b8      	ldr	r0, [r7, #24]
 801186e:	f001 fa6d 	bl	8012d4c <pxPortInitialiseStack>
 8011872:	4602      	mov	r2, r0
 8011874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011876:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801187a:	2b00      	cmp	r3, #0
 801187c:	d002      	beq.n	8011884 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801187e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011882:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011884:	bf00      	nop
 8011886:	3720      	adds	r7, #32
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}
 801188c:	080186f0 	.word	0x080186f0
 8011890:	08018710 	.word	0x08018710
 8011894:	080186d0 	.word	0x080186d0

08011898 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b082      	sub	sp, #8
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80118a0:	f001 fb64 	bl	8012f6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80118a4:	4b2d      	ldr	r3, [pc, #180]	; (801195c <prvAddNewTaskToReadyList+0xc4>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	3301      	adds	r3, #1
 80118aa:	4a2c      	ldr	r2, [pc, #176]	; (801195c <prvAddNewTaskToReadyList+0xc4>)
 80118ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80118ae:	4b2c      	ldr	r3, [pc, #176]	; (8011960 <prvAddNewTaskToReadyList+0xc8>)
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d109      	bne.n	80118ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80118b6:	4a2a      	ldr	r2, [pc, #168]	; (8011960 <prvAddNewTaskToReadyList+0xc8>)
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80118bc:	4b27      	ldr	r3, [pc, #156]	; (801195c <prvAddNewTaskToReadyList+0xc4>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	2b01      	cmp	r3, #1
 80118c2:	d110      	bne.n	80118e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80118c4:	f000 fc3c 	bl	8012140 <prvInitialiseTaskLists>
 80118c8:	e00d      	b.n	80118e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80118ca:	4b26      	ldr	r3, [pc, #152]	; (8011964 <prvAddNewTaskToReadyList+0xcc>)
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d109      	bne.n	80118e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80118d2:	4b23      	ldr	r3, [pc, #140]	; (8011960 <prvAddNewTaskToReadyList+0xc8>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118dc:	429a      	cmp	r2, r3
 80118de:	d802      	bhi.n	80118e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80118e0:	4a1f      	ldr	r2, [pc, #124]	; (8011960 <prvAddNewTaskToReadyList+0xc8>)
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80118e6:	4b20      	ldr	r3, [pc, #128]	; (8011968 <prvAddNewTaskToReadyList+0xd0>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	3301      	adds	r3, #1
 80118ec:	4a1e      	ldr	r2, [pc, #120]	; (8011968 <prvAddNewTaskToReadyList+0xd0>)
 80118ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80118f0:	4b1d      	ldr	r3, [pc, #116]	; (8011968 <prvAddNewTaskToReadyList+0xd0>)
 80118f2:	681a      	ldr	r2, [r3, #0]
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118fc:	4b1b      	ldr	r3, [pc, #108]	; (801196c <prvAddNewTaskToReadyList+0xd4>)
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	429a      	cmp	r2, r3
 8011902:	d903      	bls.n	801190c <prvAddNewTaskToReadyList+0x74>
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011908:	4a18      	ldr	r2, [pc, #96]	; (801196c <prvAddNewTaskToReadyList+0xd4>)
 801190a:	6013      	str	r3, [r2, #0]
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011910:	4613      	mov	r3, r2
 8011912:	009b      	lsls	r3, r3, #2
 8011914:	4413      	add	r3, r2
 8011916:	009b      	lsls	r3, r3, #2
 8011918:	4a15      	ldr	r2, [pc, #84]	; (8011970 <prvAddNewTaskToReadyList+0xd8>)
 801191a:	441a      	add	r2, r3
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	3304      	adds	r3, #4
 8011920:	4619      	mov	r1, r3
 8011922:	4610      	mov	r0, r2
 8011924:	f7fe fd8b 	bl	801043e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011928:	f001 fb54 	bl	8012fd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801192c:	4b0d      	ldr	r3, [pc, #52]	; (8011964 <prvAddNewTaskToReadyList+0xcc>)
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d00e      	beq.n	8011952 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011934:	4b0a      	ldr	r3, [pc, #40]	; (8011960 <prvAddNewTaskToReadyList+0xc8>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801193e:	429a      	cmp	r2, r3
 8011940:	d207      	bcs.n	8011952 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011942:	4b0c      	ldr	r3, [pc, #48]	; (8011974 <prvAddNewTaskToReadyList+0xdc>)
 8011944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011948:	601a      	str	r2, [r3, #0]
 801194a:	f3bf 8f4f 	dsb	sy
 801194e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011952:	bf00      	nop
 8011954:	3708      	adds	r7, #8
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}
 801195a:	bf00      	nop
 801195c:	2000245c 	.word	0x2000245c
 8011960:	20001f88 	.word	0x20001f88
 8011964:	20002468 	.word	0x20002468
 8011968:	20002478 	.word	0x20002478
 801196c:	20002464 	.word	0x20002464
 8011970:	20001f8c 	.word	0x20001f8c
 8011974:	e000ed04 	.word	0xe000ed04

08011978 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011978:	b580      	push	{r7, lr}
 801197a:	b084      	sub	sp, #16
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011980:	2300      	movs	r3, #0
 8011982:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d019      	beq.n	80119be <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801198a:	4b14      	ldr	r3, [pc, #80]	; (80119dc <vTaskDelay+0x64>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d00c      	beq.n	80119ac <vTaskDelay+0x34>
	__asm volatile
 8011992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011996:	b672      	cpsid	i
 8011998:	f383 8811 	msr	BASEPRI, r3
 801199c:	f3bf 8f6f 	isb	sy
 80119a0:	f3bf 8f4f 	dsb	sy
 80119a4:	b662      	cpsie	i
 80119a6:	60bb      	str	r3, [r7, #8]
}
 80119a8:	bf00      	nop
 80119aa:	e7fe      	b.n	80119aa <vTaskDelay+0x32>
			vTaskSuspendAll();
 80119ac:	f000 f88e 	bl	8011acc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80119b0:	2100      	movs	r1, #0
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f000 fe1a 	bl	80125ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80119b8:	f000 f896 	bl	8011ae8 <xTaskResumeAll>
 80119bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d107      	bne.n	80119d4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80119c4:	4b06      	ldr	r3, [pc, #24]	; (80119e0 <vTaskDelay+0x68>)
 80119c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119ca:	601a      	str	r2, [r3, #0]
 80119cc:	f3bf 8f4f 	dsb	sy
 80119d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80119d4:	bf00      	nop
 80119d6:	3710      	adds	r7, #16
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}
 80119dc:	20002484 	.word	0x20002484
 80119e0:	e000ed04 	.word	0xe000ed04

080119e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b08a      	sub	sp, #40	; 0x28
 80119e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80119ea:	2300      	movs	r3, #0
 80119ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80119ee:	2300      	movs	r3, #0
 80119f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80119f2:	463a      	mov	r2, r7
 80119f4:	1d39      	adds	r1, r7, #4
 80119f6:	f107 0308 	add.w	r3, r7, #8
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7fe fcbe 	bl	801037c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011a00:	6839      	ldr	r1, [r7, #0]
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	68ba      	ldr	r2, [r7, #8]
 8011a06:	9202      	str	r2, [sp, #8]
 8011a08:	9301      	str	r3, [sp, #4]
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	9300      	str	r3, [sp, #0]
 8011a0e:	2300      	movs	r3, #0
 8011a10:	460a      	mov	r2, r1
 8011a12:	4926      	ldr	r1, [pc, #152]	; (8011aac <vTaskStartScheduler+0xc8>)
 8011a14:	4826      	ldr	r0, [pc, #152]	; (8011ab0 <vTaskStartScheduler+0xcc>)
 8011a16:	f7ff fdef 	bl	80115f8 <xTaskCreateStatic>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	4a25      	ldr	r2, [pc, #148]	; (8011ab4 <vTaskStartScheduler+0xd0>)
 8011a1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011a20:	4b24      	ldr	r3, [pc, #144]	; (8011ab4 <vTaskStartScheduler+0xd0>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d002      	beq.n	8011a2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011a28:	2301      	movs	r3, #1
 8011a2a:	617b      	str	r3, [r7, #20]
 8011a2c:	e001      	b.n	8011a32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011a32:	697b      	ldr	r3, [r7, #20]
 8011a34:	2b01      	cmp	r3, #1
 8011a36:	d102      	bne.n	8011a3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011a38:	f000 fe2c 	bl	8012694 <xTimerCreateTimerTask>
 8011a3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	2b01      	cmp	r3, #1
 8011a42:	d11d      	bne.n	8011a80 <vTaskStartScheduler+0x9c>
	__asm volatile
 8011a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a48:	b672      	cpsid	i
 8011a4a:	f383 8811 	msr	BASEPRI, r3
 8011a4e:	f3bf 8f6f 	isb	sy
 8011a52:	f3bf 8f4f 	dsb	sy
 8011a56:	b662      	cpsie	i
 8011a58:	613b      	str	r3, [r7, #16]
}
 8011a5a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011a5c:	4b16      	ldr	r3, [pc, #88]	; (8011ab8 <vTaskStartScheduler+0xd4>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	3354      	adds	r3, #84	; 0x54
 8011a62:	4a16      	ldr	r2, [pc, #88]	; (8011abc <vTaskStartScheduler+0xd8>)
 8011a64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011a66:	4b16      	ldr	r3, [pc, #88]	; (8011ac0 <vTaskStartScheduler+0xdc>)
 8011a68:	f04f 32ff 	mov.w	r2, #4294967295
 8011a6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011a6e:	4b15      	ldr	r3, [pc, #84]	; (8011ac4 <vTaskStartScheduler+0xe0>)
 8011a70:	2201      	movs	r2, #1
 8011a72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011a74:	4b14      	ldr	r3, [pc, #80]	; (8011ac8 <vTaskStartScheduler+0xe4>)
 8011a76:	2200      	movs	r2, #0
 8011a78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011a7a:	f001 f9f9 	bl	8012e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011a7e:	e010      	b.n	8011aa2 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011a80:	697b      	ldr	r3, [r7, #20]
 8011a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a86:	d10c      	bne.n	8011aa2 <vTaskStartScheduler+0xbe>
	__asm volatile
 8011a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a8c:	b672      	cpsid	i
 8011a8e:	f383 8811 	msr	BASEPRI, r3
 8011a92:	f3bf 8f6f 	isb	sy
 8011a96:	f3bf 8f4f 	dsb	sy
 8011a9a:	b662      	cpsie	i
 8011a9c:	60fb      	str	r3, [r7, #12]
}
 8011a9e:	bf00      	nop
 8011aa0:	e7fe      	b.n	8011aa0 <vTaskStartScheduler+0xbc>
}
 8011aa2:	bf00      	nop
 8011aa4:	3718      	adds	r7, #24
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}
 8011aaa:	bf00      	nop
 8011aac:	0801848c 	.word	0x0801848c
 8011ab0:	08012111 	.word	0x08012111
 8011ab4:	20002480 	.word	0x20002480
 8011ab8:	20001f88 	.word	0x20001f88
 8011abc:	200001c0 	.word	0x200001c0
 8011ac0:	2000247c 	.word	0x2000247c
 8011ac4:	20002468 	.word	0x20002468
 8011ac8:	20002460 	.word	0x20002460

08011acc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011acc:	b480      	push	{r7}
 8011ace:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011ad0:	4b04      	ldr	r3, [pc, #16]	; (8011ae4 <vTaskSuspendAll+0x18>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	3301      	adds	r3, #1
 8011ad6:	4a03      	ldr	r2, [pc, #12]	; (8011ae4 <vTaskSuspendAll+0x18>)
 8011ad8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011ada:	bf00      	nop
 8011adc:	46bd      	mov	sp, r7
 8011ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae2:	4770      	bx	lr
 8011ae4:	20002484 	.word	0x20002484

08011ae8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b084      	sub	sp, #16
 8011aec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011aee:	2300      	movs	r3, #0
 8011af0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011af2:	2300      	movs	r3, #0
 8011af4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011af6:	4b43      	ldr	r3, [pc, #268]	; (8011c04 <xTaskResumeAll+0x11c>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d10c      	bne.n	8011b18 <xTaskResumeAll+0x30>
	__asm volatile
 8011afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b02:	b672      	cpsid	i
 8011b04:	f383 8811 	msr	BASEPRI, r3
 8011b08:	f3bf 8f6f 	isb	sy
 8011b0c:	f3bf 8f4f 	dsb	sy
 8011b10:	b662      	cpsie	i
 8011b12:	603b      	str	r3, [r7, #0]
}
 8011b14:	bf00      	nop
 8011b16:	e7fe      	b.n	8011b16 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011b18:	f001 fa28 	bl	8012f6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011b1c:	4b39      	ldr	r3, [pc, #228]	; (8011c04 <xTaskResumeAll+0x11c>)
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	3b01      	subs	r3, #1
 8011b22:	4a38      	ldr	r2, [pc, #224]	; (8011c04 <xTaskResumeAll+0x11c>)
 8011b24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b26:	4b37      	ldr	r3, [pc, #220]	; (8011c04 <xTaskResumeAll+0x11c>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d162      	bne.n	8011bf4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011b2e:	4b36      	ldr	r3, [pc, #216]	; (8011c08 <xTaskResumeAll+0x120>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d05e      	beq.n	8011bf4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011b36:	e02f      	b.n	8011b98 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b38:	4b34      	ldr	r3, [pc, #208]	; (8011c0c <xTaskResumeAll+0x124>)
 8011b3a:	68db      	ldr	r3, [r3, #12]
 8011b3c:	68db      	ldr	r3, [r3, #12]
 8011b3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	3318      	adds	r3, #24
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7fe fcd7 	bl	80104f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	3304      	adds	r3, #4
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7fe fcd2 	bl	80104f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b58:	4b2d      	ldr	r3, [pc, #180]	; (8011c10 <xTaskResumeAll+0x128>)
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	429a      	cmp	r2, r3
 8011b5e:	d903      	bls.n	8011b68 <xTaskResumeAll+0x80>
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b64:	4a2a      	ldr	r2, [pc, #168]	; (8011c10 <xTaskResumeAll+0x128>)
 8011b66:	6013      	str	r3, [r2, #0]
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b6c:	4613      	mov	r3, r2
 8011b6e:	009b      	lsls	r3, r3, #2
 8011b70:	4413      	add	r3, r2
 8011b72:	009b      	lsls	r3, r3, #2
 8011b74:	4a27      	ldr	r2, [pc, #156]	; (8011c14 <xTaskResumeAll+0x12c>)
 8011b76:	441a      	add	r2, r3
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	3304      	adds	r3, #4
 8011b7c:	4619      	mov	r1, r3
 8011b7e:	4610      	mov	r0, r2
 8011b80:	f7fe fc5d 	bl	801043e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b88:	4b23      	ldr	r3, [pc, #140]	; (8011c18 <xTaskResumeAll+0x130>)
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	d302      	bcc.n	8011b98 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8011b92:	4b22      	ldr	r3, [pc, #136]	; (8011c1c <xTaskResumeAll+0x134>)
 8011b94:	2201      	movs	r2, #1
 8011b96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011b98:	4b1c      	ldr	r3, [pc, #112]	; (8011c0c <xTaskResumeAll+0x124>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d1cb      	bne.n	8011b38 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d001      	beq.n	8011baa <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011ba6:	f000 fb6f 	bl	8012288 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011baa:	4b1d      	ldr	r3, [pc, #116]	; (8011c20 <xTaskResumeAll+0x138>)
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d010      	beq.n	8011bd8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011bb6:	f000 f847 	bl	8011c48 <xTaskIncrementTick>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d002      	beq.n	8011bc6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8011bc0:	4b16      	ldr	r3, [pc, #88]	; (8011c1c <xTaskResumeAll+0x134>)
 8011bc2:	2201      	movs	r2, #1
 8011bc4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	3b01      	subs	r3, #1
 8011bca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d1f1      	bne.n	8011bb6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8011bd2:	4b13      	ldr	r3, [pc, #76]	; (8011c20 <xTaskResumeAll+0x138>)
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011bd8:	4b10      	ldr	r3, [pc, #64]	; (8011c1c <xTaskResumeAll+0x134>)
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d009      	beq.n	8011bf4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011be0:	2301      	movs	r3, #1
 8011be2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011be4:	4b0f      	ldr	r3, [pc, #60]	; (8011c24 <xTaskResumeAll+0x13c>)
 8011be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bea:	601a      	str	r2, [r3, #0]
 8011bec:	f3bf 8f4f 	dsb	sy
 8011bf0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011bf4:	f001 f9ee 	bl	8012fd4 <vPortExitCritical>

	return xAlreadyYielded;
 8011bf8:	68bb      	ldr	r3, [r7, #8]
}
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	3710      	adds	r7, #16
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}
 8011c02:	bf00      	nop
 8011c04:	20002484 	.word	0x20002484
 8011c08:	2000245c 	.word	0x2000245c
 8011c0c:	2000241c 	.word	0x2000241c
 8011c10:	20002464 	.word	0x20002464
 8011c14:	20001f8c 	.word	0x20001f8c
 8011c18:	20001f88 	.word	0x20001f88
 8011c1c:	20002470 	.word	0x20002470
 8011c20:	2000246c 	.word	0x2000246c
 8011c24:	e000ed04 	.word	0xe000ed04

08011c28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011c28:	b480      	push	{r7}
 8011c2a:	b083      	sub	sp, #12
 8011c2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011c2e:	4b05      	ldr	r3, [pc, #20]	; (8011c44 <xTaskGetTickCount+0x1c>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011c34:	687b      	ldr	r3, [r7, #4]
}
 8011c36:	4618      	mov	r0, r3
 8011c38:	370c      	adds	r7, #12
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c40:	4770      	bx	lr
 8011c42:	bf00      	nop
 8011c44:	20002460 	.word	0x20002460

08011c48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b086      	sub	sp, #24
 8011c4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c52:	4b50      	ldr	r3, [pc, #320]	; (8011d94 <xTaskIncrementTick+0x14c>)
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	f040 808b 	bne.w	8011d72 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011c5c:	4b4e      	ldr	r3, [pc, #312]	; (8011d98 <xTaskIncrementTick+0x150>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	3301      	adds	r3, #1
 8011c62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011c64:	4a4c      	ldr	r2, [pc, #304]	; (8011d98 <xTaskIncrementTick+0x150>)
 8011c66:	693b      	ldr	r3, [r7, #16]
 8011c68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d122      	bne.n	8011cb6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8011c70:	4b4a      	ldr	r3, [pc, #296]	; (8011d9c <xTaskIncrementTick+0x154>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d00c      	beq.n	8011c94 <xTaskIncrementTick+0x4c>
	__asm volatile
 8011c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c7e:	b672      	cpsid	i
 8011c80:	f383 8811 	msr	BASEPRI, r3
 8011c84:	f3bf 8f6f 	isb	sy
 8011c88:	f3bf 8f4f 	dsb	sy
 8011c8c:	b662      	cpsie	i
 8011c8e:	603b      	str	r3, [r7, #0]
}
 8011c90:	bf00      	nop
 8011c92:	e7fe      	b.n	8011c92 <xTaskIncrementTick+0x4a>
 8011c94:	4b41      	ldr	r3, [pc, #260]	; (8011d9c <xTaskIncrementTick+0x154>)
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	60fb      	str	r3, [r7, #12]
 8011c9a:	4b41      	ldr	r3, [pc, #260]	; (8011da0 <xTaskIncrementTick+0x158>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	4a3f      	ldr	r2, [pc, #252]	; (8011d9c <xTaskIncrementTick+0x154>)
 8011ca0:	6013      	str	r3, [r2, #0]
 8011ca2:	4a3f      	ldr	r2, [pc, #252]	; (8011da0 <xTaskIncrementTick+0x158>)
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	6013      	str	r3, [r2, #0]
 8011ca8:	4b3e      	ldr	r3, [pc, #248]	; (8011da4 <xTaskIncrementTick+0x15c>)
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	3301      	adds	r3, #1
 8011cae:	4a3d      	ldr	r2, [pc, #244]	; (8011da4 <xTaskIncrementTick+0x15c>)
 8011cb0:	6013      	str	r3, [r2, #0]
 8011cb2:	f000 fae9 	bl	8012288 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011cb6:	4b3c      	ldr	r3, [pc, #240]	; (8011da8 <xTaskIncrementTick+0x160>)
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	693a      	ldr	r2, [r7, #16]
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	d349      	bcc.n	8011d54 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011cc0:	4b36      	ldr	r3, [pc, #216]	; (8011d9c <xTaskIncrementTick+0x154>)
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d104      	bne.n	8011cd4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011cca:	4b37      	ldr	r3, [pc, #220]	; (8011da8 <xTaskIncrementTick+0x160>)
 8011ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8011cd0:	601a      	str	r2, [r3, #0]
					break;
 8011cd2:	e03f      	b.n	8011d54 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011cd4:	4b31      	ldr	r3, [pc, #196]	; (8011d9c <xTaskIncrementTick+0x154>)
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	68db      	ldr	r3, [r3, #12]
 8011cda:	68db      	ldr	r3, [r3, #12]
 8011cdc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	685b      	ldr	r3, [r3, #4]
 8011ce2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011ce4:	693a      	ldr	r2, [r7, #16]
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d203      	bcs.n	8011cf4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011cec:	4a2e      	ldr	r2, [pc, #184]	; (8011da8 <xTaskIncrementTick+0x160>)
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011cf2:	e02f      	b.n	8011d54 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	3304      	adds	r3, #4
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f7fe fbfd 	bl	80104f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d004      	beq.n	8011d10 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011d06:	68bb      	ldr	r3, [r7, #8]
 8011d08:	3318      	adds	r3, #24
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f7fe fbf4 	bl	80104f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011d10:	68bb      	ldr	r3, [r7, #8]
 8011d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d14:	4b25      	ldr	r3, [pc, #148]	; (8011dac <xTaskIncrementTick+0x164>)
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	d903      	bls.n	8011d24 <xTaskIncrementTick+0xdc>
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d20:	4a22      	ldr	r2, [pc, #136]	; (8011dac <xTaskIncrementTick+0x164>)
 8011d22:	6013      	str	r3, [r2, #0]
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d28:	4613      	mov	r3, r2
 8011d2a:	009b      	lsls	r3, r3, #2
 8011d2c:	4413      	add	r3, r2
 8011d2e:	009b      	lsls	r3, r3, #2
 8011d30:	4a1f      	ldr	r2, [pc, #124]	; (8011db0 <xTaskIncrementTick+0x168>)
 8011d32:	441a      	add	r2, r3
 8011d34:	68bb      	ldr	r3, [r7, #8]
 8011d36:	3304      	adds	r3, #4
 8011d38:	4619      	mov	r1, r3
 8011d3a:	4610      	mov	r0, r2
 8011d3c:	f7fe fb7f 	bl	801043e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d44:	4b1b      	ldr	r3, [pc, #108]	; (8011db4 <xTaskIncrementTick+0x16c>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	d3b8      	bcc.n	8011cc0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8011d4e:	2301      	movs	r3, #1
 8011d50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011d52:	e7b5      	b.n	8011cc0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011d54:	4b17      	ldr	r3, [pc, #92]	; (8011db4 <xTaskIncrementTick+0x16c>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d5a:	4915      	ldr	r1, [pc, #84]	; (8011db0 <xTaskIncrementTick+0x168>)
 8011d5c:	4613      	mov	r3, r2
 8011d5e:	009b      	lsls	r3, r3, #2
 8011d60:	4413      	add	r3, r2
 8011d62:	009b      	lsls	r3, r3, #2
 8011d64:	440b      	add	r3, r1
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	2b01      	cmp	r3, #1
 8011d6a:	d907      	bls.n	8011d7c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	617b      	str	r3, [r7, #20]
 8011d70:	e004      	b.n	8011d7c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011d72:	4b11      	ldr	r3, [pc, #68]	; (8011db8 <xTaskIncrementTick+0x170>)
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	3301      	adds	r3, #1
 8011d78:	4a0f      	ldr	r2, [pc, #60]	; (8011db8 <xTaskIncrementTick+0x170>)
 8011d7a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011d7c:	4b0f      	ldr	r3, [pc, #60]	; (8011dbc <xTaskIncrementTick+0x174>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d001      	beq.n	8011d88 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8011d84:	2301      	movs	r3, #1
 8011d86:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011d88:	697b      	ldr	r3, [r7, #20]
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3718      	adds	r7, #24
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}
 8011d92:	bf00      	nop
 8011d94:	20002484 	.word	0x20002484
 8011d98:	20002460 	.word	0x20002460
 8011d9c:	20002414 	.word	0x20002414
 8011da0:	20002418 	.word	0x20002418
 8011da4:	20002474 	.word	0x20002474
 8011da8:	2000247c 	.word	0x2000247c
 8011dac:	20002464 	.word	0x20002464
 8011db0:	20001f8c 	.word	0x20001f8c
 8011db4:	20001f88 	.word	0x20001f88
 8011db8:	2000246c 	.word	0x2000246c
 8011dbc:	20002470 	.word	0x20002470

08011dc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	b085      	sub	sp, #20
 8011dc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011dc6:	4b2b      	ldr	r3, [pc, #172]	; (8011e74 <vTaskSwitchContext+0xb4>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d003      	beq.n	8011dd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011dce:	4b2a      	ldr	r3, [pc, #168]	; (8011e78 <vTaskSwitchContext+0xb8>)
 8011dd0:	2201      	movs	r2, #1
 8011dd2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011dd4:	e048      	b.n	8011e68 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8011dd6:	4b28      	ldr	r3, [pc, #160]	; (8011e78 <vTaskSwitchContext+0xb8>)
 8011dd8:	2200      	movs	r2, #0
 8011dda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ddc:	4b27      	ldr	r3, [pc, #156]	; (8011e7c <vTaskSwitchContext+0xbc>)
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	60fb      	str	r3, [r7, #12]
 8011de2:	e012      	b.n	8011e0a <vTaskSwitchContext+0x4a>
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d10c      	bne.n	8011e04 <vTaskSwitchContext+0x44>
	__asm volatile
 8011dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dee:	b672      	cpsid	i
 8011df0:	f383 8811 	msr	BASEPRI, r3
 8011df4:	f3bf 8f6f 	isb	sy
 8011df8:	f3bf 8f4f 	dsb	sy
 8011dfc:	b662      	cpsie	i
 8011dfe:	607b      	str	r3, [r7, #4]
}
 8011e00:	bf00      	nop
 8011e02:	e7fe      	b.n	8011e02 <vTaskSwitchContext+0x42>
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	3b01      	subs	r3, #1
 8011e08:	60fb      	str	r3, [r7, #12]
 8011e0a:	491d      	ldr	r1, [pc, #116]	; (8011e80 <vTaskSwitchContext+0xc0>)
 8011e0c:	68fa      	ldr	r2, [r7, #12]
 8011e0e:	4613      	mov	r3, r2
 8011e10:	009b      	lsls	r3, r3, #2
 8011e12:	4413      	add	r3, r2
 8011e14:	009b      	lsls	r3, r3, #2
 8011e16:	440b      	add	r3, r1
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d0e2      	beq.n	8011de4 <vTaskSwitchContext+0x24>
 8011e1e:	68fa      	ldr	r2, [r7, #12]
 8011e20:	4613      	mov	r3, r2
 8011e22:	009b      	lsls	r3, r3, #2
 8011e24:	4413      	add	r3, r2
 8011e26:	009b      	lsls	r3, r3, #2
 8011e28:	4a15      	ldr	r2, [pc, #84]	; (8011e80 <vTaskSwitchContext+0xc0>)
 8011e2a:	4413      	add	r3, r2
 8011e2c:	60bb      	str	r3, [r7, #8]
 8011e2e:	68bb      	ldr	r3, [r7, #8]
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	685a      	ldr	r2, [r3, #4]
 8011e34:	68bb      	ldr	r3, [r7, #8]
 8011e36:	605a      	str	r2, [r3, #4]
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	685a      	ldr	r2, [r3, #4]
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	3308      	adds	r3, #8
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d104      	bne.n	8011e4e <vTaskSwitchContext+0x8e>
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	685b      	ldr	r3, [r3, #4]
 8011e48:	685a      	ldr	r2, [r3, #4]
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	605a      	str	r2, [r3, #4]
 8011e4e:	68bb      	ldr	r3, [r7, #8]
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	68db      	ldr	r3, [r3, #12]
 8011e54:	4a0b      	ldr	r2, [pc, #44]	; (8011e84 <vTaskSwitchContext+0xc4>)
 8011e56:	6013      	str	r3, [r2, #0]
 8011e58:	4a08      	ldr	r2, [pc, #32]	; (8011e7c <vTaskSwitchContext+0xbc>)
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011e5e:	4b09      	ldr	r3, [pc, #36]	; (8011e84 <vTaskSwitchContext+0xc4>)
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	3354      	adds	r3, #84	; 0x54
 8011e64:	4a08      	ldr	r2, [pc, #32]	; (8011e88 <vTaskSwitchContext+0xc8>)
 8011e66:	6013      	str	r3, [r2, #0]
}
 8011e68:	bf00      	nop
 8011e6a:	3714      	adds	r7, #20
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e72:	4770      	bx	lr
 8011e74:	20002484 	.word	0x20002484
 8011e78:	20002470 	.word	0x20002470
 8011e7c:	20002464 	.word	0x20002464
 8011e80:	20001f8c 	.word	0x20001f8c
 8011e84:	20001f88 	.word	0x20001f88
 8011e88:	200001c0 	.word	0x200001c0

08011e8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b084      	sub	sp, #16
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
 8011e94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d10c      	bne.n	8011eb6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8011e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ea0:	b672      	cpsid	i
 8011ea2:	f383 8811 	msr	BASEPRI, r3
 8011ea6:	f3bf 8f6f 	isb	sy
 8011eaa:	f3bf 8f4f 	dsb	sy
 8011eae:	b662      	cpsie	i
 8011eb0:	60fb      	str	r3, [r7, #12]
}
 8011eb2:	bf00      	nop
 8011eb4:	e7fe      	b.n	8011eb4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011eb6:	4b07      	ldr	r3, [pc, #28]	; (8011ed4 <vTaskPlaceOnEventList+0x48>)
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	3318      	adds	r3, #24
 8011ebc:	4619      	mov	r1, r3
 8011ebe:	6878      	ldr	r0, [r7, #4]
 8011ec0:	f7fe fae1 	bl	8010486 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011ec4:	2101      	movs	r1, #1
 8011ec6:	6838      	ldr	r0, [r7, #0]
 8011ec8:	f000 fb90 	bl	80125ec <prvAddCurrentTaskToDelayedList>
}
 8011ecc:	bf00      	nop
 8011ece:	3710      	adds	r7, #16
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}
 8011ed4:	20001f88 	.word	0x20001f88

08011ed8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b086      	sub	sp, #24
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	60f8      	str	r0, [r7, #12]
 8011ee0:	60b9      	str	r1, [r7, #8]
 8011ee2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d10c      	bne.n	8011f04 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8011eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eee:	b672      	cpsid	i
 8011ef0:	f383 8811 	msr	BASEPRI, r3
 8011ef4:	f3bf 8f6f 	isb	sy
 8011ef8:	f3bf 8f4f 	dsb	sy
 8011efc:	b662      	cpsie	i
 8011efe:	617b      	str	r3, [r7, #20]
}
 8011f00:	bf00      	nop
 8011f02:	e7fe      	b.n	8011f02 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011f04:	4b0a      	ldr	r3, [pc, #40]	; (8011f30 <vTaskPlaceOnEventListRestricted+0x58>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	3318      	adds	r3, #24
 8011f0a:	4619      	mov	r1, r3
 8011f0c:	68f8      	ldr	r0, [r7, #12]
 8011f0e:	f7fe fa96 	bl	801043e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d002      	beq.n	8011f1e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8011f18:	f04f 33ff 	mov.w	r3, #4294967295
 8011f1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011f1e:	6879      	ldr	r1, [r7, #4]
 8011f20:	68b8      	ldr	r0, [r7, #8]
 8011f22:	f000 fb63 	bl	80125ec <prvAddCurrentTaskToDelayedList>
	}
 8011f26:	bf00      	nop
 8011f28:	3718      	adds	r7, #24
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}
 8011f2e:	bf00      	nop
 8011f30:	20001f88 	.word	0x20001f88

08011f34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b086      	sub	sp, #24
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	68db      	ldr	r3, [r3, #12]
 8011f40:	68db      	ldr	r3, [r3, #12]
 8011f42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011f44:	693b      	ldr	r3, [r7, #16]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d10c      	bne.n	8011f64 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8011f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f4e:	b672      	cpsid	i
 8011f50:	f383 8811 	msr	BASEPRI, r3
 8011f54:	f3bf 8f6f 	isb	sy
 8011f58:	f3bf 8f4f 	dsb	sy
 8011f5c:	b662      	cpsie	i
 8011f5e:	60fb      	str	r3, [r7, #12]
}
 8011f60:	bf00      	nop
 8011f62:	e7fe      	b.n	8011f62 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011f64:	693b      	ldr	r3, [r7, #16]
 8011f66:	3318      	adds	r3, #24
 8011f68:	4618      	mov	r0, r3
 8011f6a:	f7fe fac5 	bl	80104f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011f6e:	4b1e      	ldr	r3, [pc, #120]	; (8011fe8 <xTaskRemoveFromEventList+0xb4>)
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d11d      	bne.n	8011fb2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011f76:	693b      	ldr	r3, [r7, #16]
 8011f78:	3304      	adds	r3, #4
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f7fe fabc 	bl	80104f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011f80:	693b      	ldr	r3, [r7, #16]
 8011f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f84:	4b19      	ldr	r3, [pc, #100]	; (8011fec <xTaskRemoveFromEventList+0xb8>)
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	429a      	cmp	r2, r3
 8011f8a:	d903      	bls.n	8011f94 <xTaskRemoveFromEventList+0x60>
 8011f8c:	693b      	ldr	r3, [r7, #16]
 8011f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f90:	4a16      	ldr	r2, [pc, #88]	; (8011fec <xTaskRemoveFromEventList+0xb8>)
 8011f92:	6013      	str	r3, [r2, #0]
 8011f94:	693b      	ldr	r3, [r7, #16]
 8011f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f98:	4613      	mov	r3, r2
 8011f9a:	009b      	lsls	r3, r3, #2
 8011f9c:	4413      	add	r3, r2
 8011f9e:	009b      	lsls	r3, r3, #2
 8011fa0:	4a13      	ldr	r2, [pc, #76]	; (8011ff0 <xTaskRemoveFromEventList+0xbc>)
 8011fa2:	441a      	add	r2, r3
 8011fa4:	693b      	ldr	r3, [r7, #16]
 8011fa6:	3304      	adds	r3, #4
 8011fa8:	4619      	mov	r1, r3
 8011faa:	4610      	mov	r0, r2
 8011fac:	f7fe fa47 	bl	801043e <vListInsertEnd>
 8011fb0:	e005      	b.n	8011fbe <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011fb2:	693b      	ldr	r3, [r7, #16]
 8011fb4:	3318      	adds	r3, #24
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	480e      	ldr	r0, [pc, #56]	; (8011ff4 <xTaskRemoveFromEventList+0xc0>)
 8011fba:	f7fe fa40 	bl	801043e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011fbe:	693b      	ldr	r3, [r7, #16]
 8011fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fc2:	4b0d      	ldr	r3, [pc, #52]	; (8011ff8 <xTaskRemoveFromEventList+0xc4>)
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	d905      	bls.n	8011fd8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011fcc:	2301      	movs	r3, #1
 8011fce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011fd0:	4b0a      	ldr	r3, [pc, #40]	; (8011ffc <xTaskRemoveFromEventList+0xc8>)
 8011fd2:	2201      	movs	r2, #1
 8011fd4:	601a      	str	r2, [r3, #0]
 8011fd6:	e001      	b.n	8011fdc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011fdc:	697b      	ldr	r3, [r7, #20]
}
 8011fde:	4618      	mov	r0, r3
 8011fe0:	3718      	adds	r7, #24
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	bd80      	pop	{r7, pc}
 8011fe6:	bf00      	nop
 8011fe8:	20002484 	.word	0x20002484
 8011fec:	20002464 	.word	0x20002464
 8011ff0:	20001f8c 	.word	0x20001f8c
 8011ff4:	2000241c 	.word	0x2000241c
 8011ff8:	20001f88 	.word	0x20001f88
 8011ffc:	20002470 	.word	0x20002470

08012000 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012000:	b480      	push	{r7}
 8012002:	b083      	sub	sp, #12
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012008:	4b06      	ldr	r3, [pc, #24]	; (8012024 <vTaskInternalSetTimeOutState+0x24>)
 801200a:	681a      	ldr	r2, [r3, #0]
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012010:	4b05      	ldr	r3, [pc, #20]	; (8012028 <vTaskInternalSetTimeOutState+0x28>)
 8012012:	681a      	ldr	r2, [r3, #0]
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	605a      	str	r2, [r3, #4]
}
 8012018:	bf00      	nop
 801201a:	370c      	adds	r7, #12
 801201c:	46bd      	mov	sp, r7
 801201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012022:	4770      	bx	lr
 8012024:	20002474 	.word	0x20002474
 8012028:	20002460 	.word	0x20002460

0801202c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b088      	sub	sp, #32
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d10c      	bne.n	8012056 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 801203c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012040:	b672      	cpsid	i
 8012042:	f383 8811 	msr	BASEPRI, r3
 8012046:	f3bf 8f6f 	isb	sy
 801204a:	f3bf 8f4f 	dsb	sy
 801204e:	b662      	cpsie	i
 8012050:	613b      	str	r3, [r7, #16]
}
 8012052:	bf00      	nop
 8012054:	e7fe      	b.n	8012054 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d10c      	bne.n	8012076 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 801205c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012060:	b672      	cpsid	i
 8012062:	f383 8811 	msr	BASEPRI, r3
 8012066:	f3bf 8f6f 	isb	sy
 801206a:	f3bf 8f4f 	dsb	sy
 801206e:	b662      	cpsie	i
 8012070:	60fb      	str	r3, [r7, #12]
}
 8012072:	bf00      	nop
 8012074:	e7fe      	b.n	8012074 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8012076:	f000 ff79 	bl	8012f6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801207a:	4b1d      	ldr	r3, [pc, #116]	; (80120f0 <xTaskCheckForTimeOut+0xc4>)
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	685b      	ldr	r3, [r3, #4]
 8012084:	69ba      	ldr	r2, [r7, #24]
 8012086:	1ad3      	subs	r3, r2, r3
 8012088:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801208a:	683b      	ldr	r3, [r7, #0]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012092:	d102      	bne.n	801209a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012094:	2300      	movs	r3, #0
 8012096:	61fb      	str	r3, [r7, #28]
 8012098:	e023      	b.n	80120e2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681a      	ldr	r2, [r3, #0]
 801209e:	4b15      	ldr	r3, [pc, #84]	; (80120f4 <xTaskCheckForTimeOut+0xc8>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	429a      	cmp	r2, r3
 80120a4:	d007      	beq.n	80120b6 <xTaskCheckForTimeOut+0x8a>
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	685b      	ldr	r3, [r3, #4]
 80120aa:	69ba      	ldr	r2, [r7, #24]
 80120ac:	429a      	cmp	r2, r3
 80120ae:	d302      	bcc.n	80120b6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80120b0:	2301      	movs	r3, #1
 80120b2:	61fb      	str	r3, [r7, #28]
 80120b4:	e015      	b.n	80120e2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	697a      	ldr	r2, [r7, #20]
 80120bc:	429a      	cmp	r2, r3
 80120be:	d20b      	bcs.n	80120d8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80120c0:	683b      	ldr	r3, [r7, #0]
 80120c2:	681a      	ldr	r2, [r3, #0]
 80120c4:	697b      	ldr	r3, [r7, #20]
 80120c6:	1ad2      	subs	r2, r2, r3
 80120c8:	683b      	ldr	r3, [r7, #0]
 80120ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80120cc:	6878      	ldr	r0, [r7, #4]
 80120ce:	f7ff ff97 	bl	8012000 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80120d2:	2300      	movs	r3, #0
 80120d4:	61fb      	str	r3, [r7, #28]
 80120d6:	e004      	b.n	80120e2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	2200      	movs	r2, #0
 80120dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80120de:	2301      	movs	r3, #1
 80120e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80120e2:	f000 ff77 	bl	8012fd4 <vPortExitCritical>

	return xReturn;
 80120e6:	69fb      	ldr	r3, [r7, #28]
}
 80120e8:	4618      	mov	r0, r3
 80120ea:	3720      	adds	r7, #32
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bd80      	pop	{r7, pc}
 80120f0:	20002460 	.word	0x20002460
 80120f4:	20002474 	.word	0x20002474

080120f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80120f8:	b480      	push	{r7}
 80120fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80120fc:	4b03      	ldr	r3, [pc, #12]	; (801210c <vTaskMissedYield+0x14>)
 80120fe:	2201      	movs	r2, #1
 8012100:	601a      	str	r2, [r3, #0]
}
 8012102:	bf00      	nop
 8012104:	46bd      	mov	sp, r7
 8012106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210a:	4770      	bx	lr
 801210c:	20002470 	.word	0x20002470

08012110 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b082      	sub	sp, #8
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012118:	f000 f852 	bl	80121c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801211c:	4b06      	ldr	r3, [pc, #24]	; (8012138 <prvIdleTask+0x28>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	2b01      	cmp	r3, #1
 8012122:	d9f9      	bls.n	8012118 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012124:	4b05      	ldr	r3, [pc, #20]	; (801213c <prvIdleTask+0x2c>)
 8012126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801212a:	601a      	str	r2, [r3, #0]
 801212c:	f3bf 8f4f 	dsb	sy
 8012130:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012134:	e7f0      	b.n	8012118 <prvIdleTask+0x8>
 8012136:	bf00      	nop
 8012138:	20001f8c 	.word	0x20001f8c
 801213c:	e000ed04 	.word	0xe000ed04

08012140 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b082      	sub	sp, #8
 8012144:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012146:	2300      	movs	r3, #0
 8012148:	607b      	str	r3, [r7, #4]
 801214a:	e00c      	b.n	8012166 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801214c:	687a      	ldr	r2, [r7, #4]
 801214e:	4613      	mov	r3, r2
 8012150:	009b      	lsls	r3, r3, #2
 8012152:	4413      	add	r3, r2
 8012154:	009b      	lsls	r3, r3, #2
 8012156:	4a12      	ldr	r2, [pc, #72]	; (80121a0 <prvInitialiseTaskLists+0x60>)
 8012158:	4413      	add	r3, r2
 801215a:	4618      	mov	r0, r3
 801215c:	f7fe f942 	bl	80103e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	3301      	adds	r3, #1
 8012164:	607b      	str	r3, [r7, #4]
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2b37      	cmp	r3, #55	; 0x37
 801216a:	d9ef      	bls.n	801214c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801216c:	480d      	ldr	r0, [pc, #52]	; (80121a4 <prvInitialiseTaskLists+0x64>)
 801216e:	f7fe f939 	bl	80103e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012172:	480d      	ldr	r0, [pc, #52]	; (80121a8 <prvInitialiseTaskLists+0x68>)
 8012174:	f7fe f936 	bl	80103e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012178:	480c      	ldr	r0, [pc, #48]	; (80121ac <prvInitialiseTaskLists+0x6c>)
 801217a:	f7fe f933 	bl	80103e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801217e:	480c      	ldr	r0, [pc, #48]	; (80121b0 <prvInitialiseTaskLists+0x70>)
 8012180:	f7fe f930 	bl	80103e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012184:	480b      	ldr	r0, [pc, #44]	; (80121b4 <prvInitialiseTaskLists+0x74>)
 8012186:	f7fe f92d 	bl	80103e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801218a:	4b0b      	ldr	r3, [pc, #44]	; (80121b8 <prvInitialiseTaskLists+0x78>)
 801218c:	4a05      	ldr	r2, [pc, #20]	; (80121a4 <prvInitialiseTaskLists+0x64>)
 801218e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012190:	4b0a      	ldr	r3, [pc, #40]	; (80121bc <prvInitialiseTaskLists+0x7c>)
 8012192:	4a05      	ldr	r2, [pc, #20]	; (80121a8 <prvInitialiseTaskLists+0x68>)
 8012194:	601a      	str	r2, [r3, #0]
}
 8012196:	bf00      	nop
 8012198:	3708      	adds	r7, #8
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}
 801219e:	bf00      	nop
 80121a0:	20001f8c 	.word	0x20001f8c
 80121a4:	200023ec 	.word	0x200023ec
 80121a8:	20002400 	.word	0x20002400
 80121ac:	2000241c 	.word	0x2000241c
 80121b0:	20002430 	.word	0x20002430
 80121b4:	20002448 	.word	0x20002448
 80121b8:	20002414 	.word	0x20002414
 80121bc:	20002418 	.word	0x20002418

080121c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b082      	sub	sp, #8
 80121c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80121c6:	e019      	b.n	80121fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80121c8:	f000 fed0 	bl	8012f6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80121cc:	4b10      	ldr	r3, [pc, #64]	; (8012210 <prvCheckTasksWaitingTermination+0x50>)
 80121ce:	68db      	ldr	r3, [r3, #12]
 80121d0:	68db      	ldr	r3, [r3, #12]
 80121d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	3304      	adds	r3, #4
 80121d8:	4618      	mov	r0, r3
 80121da:	f7fe f98d 	bl	80104f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80121de:	4b0d      	ldr	r3, [pc, #52]	; (8012214 <prvCheckTasksWaitingTermination+0x54>)
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	3b01      	subs	r3, #1
 80121e4:	4a0b      	ldr	r2, [pc, #44]	; (8012214 <prvCheckTasksWaitingTermination+0x54>)
 80121e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80121e8:	4b0b      	ldr	r3, [pc, #44]	; (8012218 <prvCheckTasksWaitingTermination+0x58>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	3b01      	subs	r3, #1
 80121ee:	4a0a      	ldr	r2, [pc, #40]	; (8012218 <prvCheckTasksWaitingTermination+0x58>)
 80121f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80121f2:	f000 feef 	bl	8012fd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80121f6:	6878      	ldr	r0, [r7, #4]
 80121f8:	f000 f810 	bl	801221c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80121fc:	4b06      	ldr	r3, [pc, #24]	; (8012218 <prvCheckTasksWaitingTermination+0x58>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d1e1      	bne.n	80121c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012204:	bf00      	nop
 8012206:	bf00      	nop
 8012208:	3708      	adds	r7, #8
 801220a:	46bd      	mov	sp, r7
 801220c:	bd80      	pop	{r7, pc}
 801220e:	bf00      	nop
 8012210:	20002430 	.word	0x20002430
 8012214:	2000245c 	.word	0x2000245c
 8012218:	20002444 	.word	0x20002444

0801221c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801221c:	b580      	push	{r7, lr}
 801221e:	b084      	sub	sp, #16
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	3354      	adds	r3, #84	; 0x54
 8012228:	4618      	mov	r0, r3
 801222a:	f002 f9d3 	bl	80145d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8012234:	2b00      	cmp	r3, #0
 8012236:	d108      	bne.n	801224a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801223c:	4618      	mov	r0, r3
 801223e:	f001 f88b 	bl	8013358 <vPortFree>
				vPortFree( pxTCB );
 8012242:	6878      	ldr	r0, [r7, #4]
 8012244:	f001 f888 	bl	8013358 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012248:	e01a      	b.n	8012280 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8012250:	2b01      	cmp	r3, #1
 8012252:	d103      	bne.n	801225c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f001 f87f 	bl	8013358 <vPortFree>
	}
 801225a:	e011      	b.n	8012280 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8012262:	2b02      	cmp	r3, #2
 8012264:	d00c      	beq.n	8012280 <prvDeleteTCB+0x64>
	__asm volatile
 8012266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801226a:	b672      	cpsid	i
 801226c:	f383 8811 	msr	BASEPRI, r3
 8012270:	f3bf 8f6f 	isb	sy
 8012274:	f3bf 8f4f 	dsb	sy
 8012278:	b662      	cpsie	i
 801227a:	60fb      	str	r3, [r7, #12]
}
 801227c:	bf00      	nop
 801227e:	e7fe      	b.n	801227e <prvDeleteTCB+0x62>
	}
 8012280:	bf00      	nop
 8012282:	3710      	adds	r7, #16
 8012284:	46bd      	mov	sp, r7
 8012286:	bd80      	pop	{r7, pc}

08012288 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012288:	b480      	push	{r7}
 801228a:	b083      	sub	sp, #12
 801228c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801228e:	4b0c      	ldr	r3, [pc, #48]	; (80122c0 <prvResetNextTaskUnblockTime+0x38>)
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d104      	bne.n	80122a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012298:	4b0a      	ldr	r3, [pc, #40]	; (80122c4 <prvResetNextTaskUnblockTime+0x3c>)
 801229a:	f04f 32ff 	mov.w	r2, #4294967295
 801229e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80122a0:	e008      	b.n	80122b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80122a2:	4b07      	ldr	r3, [pc, #28]	; (80122c0 <prvResetNextTaskUnblockTime+0x38>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	68db      	ldr	r3, [r3, #12]
 80122a8:	68db      	ldr	r3, [r3, #12]
 80122aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	685b      	ldr	r3, [r3, #4]
 80122b0:	4a04      	ldr	r2, [pc, #16]	; (80122c4 <prvResetNextTaskUnblockTime+0x3c>)
 80122b2:	6013      	str	r3, [r2, #0]
}
 80122b4:	bf00      	nop
 80122b6:	370c      	adds	r7, #12
 80122b8:	46bd      	mov	sp, r7
 80122ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122be:	4770      	bx	lr
 80122c0:	20002414 	.word	0x20002414
 80122c4:	2000247c 	.word	0x2000247c

080122c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80122c8:	b480      	push	{r7}
 80122ca:	b083      	sub	sp, #12
 80122cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80122ce:	4b0b      	ldr	r3, [pc, #44]	; (80122fc <xTaskGetSchedulerState+0x34>)
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d102      	bne.n	80122dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80122d6:	2301      	movs	r3, #1
 80122d8:	607b      	str	r3, [r7, #4]
 80122da:	e008      	b.n	80122ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80122dc:	4b08      	ldr	r3, [pc, #32]	; (8012300 <xTaskGetSchedulerState+0x38>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d102      	bne.n	80122ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80122e4:	2302      	movs	r3, #2
 80122e6:	607b      	str	r3, [r7, #4]
 80122e8:	e001      	b.n	80122ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80122ea:	2300      	movs	r3, #0
 80122ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80122ee:	687b      	ldr	r3, [r7, #4]
	}
 80122f0:	4618      	mov	r0, r3
 80122f2:	370c      	adds	r7, #12
 80122f4:	46bd      	mov	sp, r7
 80122f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fa:	4770      	bx	lr
 80122fc:	20002468 	.word	0x20002468
 8012300:	20002484 	.word	0x20002484

08012304 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012304:	b580      	push	{r7, lr}
 8012306:	b084      	sub	sp, #16
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012310:	2300      	movs	r3, #0
 8012312:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d051      	beq.n	80123be <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801231a:	68bb      	ldr	r3, [r7, #8]
 801231c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801231e:	4b2a      	ldr	r3, [pc, #168]	; (80123c8 <xTaskPriorityInherit+0xc4>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012324:	429a      	cmp	r2, r3
 8012326:	d241      	bcs.n	80123ac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012328:	68bb      	ldr	r3, [r7, #8]
 801232a:	699b      	ldr	r3, [r3, #24]
 801232c:	2b00      	cmp	r3, #0
 801232e:	db06      	blt.n	801233e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012330:	4b25      	ldr	r3, [pc, #148]	; (80123c8 <xTaskPriorityInherit+0xc4>)
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012336:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801233a:	68bb      	ldr	r3, [r7, #8]
 801233c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801233e:	68bb      	ldr	r3, [r7, #8]
 8012340:	6959      	ldr	r1, [r3, #20]
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012346:	4613      	mov	r3, r2
 8012348:	009b      	lsls	r3, r3, #2
 801234a:	4413      	add	r3, r2
 801234c:	009b      	lsls	r3, r3, #2
 801234e:	4a1f      	ldr	r2, [pc, #124]	; (80123cc <xTaskPriorityInherit+0xc8>)
 8012350:	4413      	add	r3, r2
 8012352:	4299      	cmp	r1, r3
 8012354:	d122      	bne.n	801239c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012356:	68bb      	ldr	r3, [r7, #8]
 8012358:	3304      	adds	r3, #4
 801235a:	4618      	mov	r0, r3
 801235c:	f7fe f8cc 	bl	80104f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012360:	4b19      	ldr	r3, [pc, #100]	; (80123c8 <xTaskPriorityInherit+0xc4>)
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012366:	68bb      	ldr	r3, [r7, #8]
 8012368:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801236e:	4b18      	ldr	r3, [pc, #96]	; (80123d0 <xTaskPriorityInherit+0xcc>)
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	429a      	cmp	r2, r3
 8012374:	d903      	bls.n	801237e <xTaskPriorityInherit+0x7a>
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801237a:	4a15      	ldr	r2, [pc, #84]	; (80123d0 <xTaskPriorityInherit+0xcc>)
 801237c:	6013      	str	r3, [r2, #0]
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012382:	4613      	mov	r3, r2
 8012384:	009b      	lsls	r3, r3, #2
 8012386:	4413      	add	r3, r2
 8012388:	009b      	lsls	r3, r3, #2
 801238a:	4a10      	ldr	r2, [pc, #64]	; (80123cc <xTaskPriorityInherit+0xc8>)
 801238c:	441a      	add	r2, r3
 801238e:	68bb      	ldr	r3, [r7, #8]
 8012390:	3304      	adds	r3, #4
 8012392:	4619      	mov	r1, r3
 8012394:	4610      	mov	r0, r2
 8012396:	f7fe f852 	bl	801043e <vListInsertEnd>
 801239a:	e004      	b.n	80123a6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801239c:	4b0a      	ldr	r3, [pc, #40]	; (80123c8 <xTaskPriorityInherit+0xc4>)
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123a2:	68bb      	ldr	r3, [r7, #8]
 80123a4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80123a6:	2301      	movs	r3, #1
 80123a8:	60fb      	str	r3, [r7, #12]
 80123aa:	e008      	b.n	80123be <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80123ac:	68bb      	ldr	r3, [r7, #8]
 80123ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80123b0:	4b05      	ldr	r3, [pc, #20]	; (80123c8 <xTaskPriorityInherit+0xc4>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123b6:	429a      	cmp	r2, r3
 80123b8:	d201      	bcs.n	80123be <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80123ba:	2301      	movs	r3, #1
 80123bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80123be:	68fb      	ldr	r3, [r7, #12]
	}
 80123c0:	4618      	mov	r0, r3
 80123c2:	3710      	adds	r7, #16
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}
 80123c8:	20001f88 	.word	0x20001f88
 80123cc:	20001f8c 	.word	0x20001f8c
 80123d0:	20002464 	.word	0x20002464

080123d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b086      	sub	sp, #24
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80123e0:	2300      	movs	r3, #0
 80123e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d05a      	beq.n	80124a0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80123ea:	4b30      	ldr	r3, [pc, #192]	; (80124ac <xTaskPriorityDisinherit+0xd8>)
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	693a      	ldr	r2, [r7, #16]
 80123f0:	429a      	cmp	r2, r3
 80123f2:	d00c      	beq.n	801240e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80123f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123f8:	b672      	cpsid	i
 80123fa:	f383 8811 	msr	BASEPRI, r3
 80123fe:	f3bf 8f6f 	isb	sy
 8012402:	f3bf 8f4f 	dsb	sy
 8012406:	b662      	cpsie	i
 8012408:	60fb      	str	r3, [r7, #12]
}
 801240a:	bf00      	nop
 801240c:	e7fe      	b.n	801240c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801240e:	693b      	ldr	r3, [r7, #16]
 8012410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012412:	2b00      	cmp	r3, #0
 8012414:	d10c      	bne.n	8012430 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8012416:	f04f 0350 	mov.w	r3, #80	; 0x50
 801241a:	b672      	cpsid	i
 801241c:	f383 8811 	msr	BASEPRI, r3
 8012420:	f3bf 8f6f 	isb	sy
 8012424:	f3bf 8f4f 	dsb	sy
 8012428:	b662      	cpsie	i
 801242a:	60bb      	str	r3, [r7, #8]
}
 801242c:	bf00      	nop
 801242e:	e7fe      	b.n	801242e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8012430:	693b      	ldr	r3, [r7, #16]
 8012432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012434:	1e5a      	subs	r2, r3, #1
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801243a:	693b      	ldr	r3, [r7, #16]
 801243c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801243e:	693b      	ldr	r3, [r7, #16]
 8012440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012442:	429a      	cmp	r2, r3
 8012444:	d02c      	beq.n	80124a0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012446:	693b      	ldr	r3, [r7, #16]
 8012448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801244a:	2b00      	cmp	r3, #0
 801244c:	d128      	bne.n	80124a0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801244e:	693b      	ldr	r3, [r7, #16]
 8012450:	3304      	adds	r3, #4
 8012452:	4618      	mov	r0, r3
 8012454:	f7fe f850 	bl	80104f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012458:	693b      	ldr	r3, [r7, #16]
 801245a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801245c:	693b      	ldr	r3, [r7, #16]
 801245e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012460:	693b      	ldr	r3, [r7, #16]
 8012462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012464:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012468:	693b      	ldr	r3, [r7, #16]
 801246a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801246c:	693b      	ldr	r3, [r7, #16]
 801246e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012470:	4b0f      	ldr	r3, [pc, #60]	; (80124b0 <xTaskPriorityDisinherit+0xdc>)
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	429a      	cmp	r2, r3
 8012476:	d903      	bls.n	8012480 <xTaskPriorityDisinherit+0xac>
 8012478:	693b      	ldr	r3, [r7, #16]
 801247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801247c:	4a0c      	ldr	r2, [pc, #48]	; (80124b0 <xTaskPriorityDisinherit+0xdc>)
 801247e:	6013      	str	r3, [r2, #0]
 8012480:	693b      	ldr	r3, [r7, #16]
 8012482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012484:	4613      	mov	r3, r2
 8012486:	009b      	lsls	r3, r3, #2
 8012488:	4413      	add	r3, r2
 801248a:	009b      	lsls	r3, r3, #2
 801248c:	4a09      	ldr	r2, [pc, #36]	; (80124b4 <xTaskPriorityDisinherit+0xe0>)
 801248e:	441a      	add	r2, r3
 8012490:	693b      	ldr	r3, [r7, #16]
 8012492:	3304      	adds	r3, #4
 8012494:	4619      	mov	r1, r3
 8012496:	4610      	mov	r0, r2
 8012498:	f7fd ffd1 	bl	801043e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801249c:	2301      	movs	r3, #1
 801249e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80124a0:	697b      	ldr	r3, [r7, #20]
	}
 80124a2:	4618      	mov	r0, r3
 80124a4:	3718      	adds	r7, #24
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}
 80124aa:	bf00      	nop
 80124ac:	20001f88 	.word	0x20001f88
 80124b0:	20002464 	.word	0x20002464
 80124b4:	20001f8c 	.word	0x20001f8c

080124b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b088      	sub	sp, #32
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
 80124c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80124c6:	2301      	movs	r3, #1
 80124c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d06e      	beq.n	80125ae <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80124d0:	69bb      	ldr	r3, [r7, #24]
 80124d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d10c      	bne.n	80124f2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80124d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124dc:	b672      	cpsid	i
 80124de:	f383 8811 	msr	BASEPRI, r3
 80124e2:	f3bf 8f6f 	isb	sy
 80124e6:	f3bf 8f4f 	dsb	sy
 80124ea:	b662      	cpsie	i
 80124ec:	60fb      	str	r3, [r7, #12]
}
 80124ee:	bf00      	nop
 80124f0:	e7fe      	b.n	80124f0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80124f2:	69bb      	ldr	r3, [r7, #24]
 80124f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80124f6:	683a      	ldr	r2, [r7, #0]
 80124f8:	429a      	cmp	r2, r3
 80124fa:	d902      	bls.n	8012502 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80124fc:	683b      	ldr	r3, [r7, #0]
 80124fe:	61fb      	str	r3, [r7, #28]
 8012500:	e002      	b.n	8012508 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012502:	69bb      	ldr	r3, [r7, #24]
 8012504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012506:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012508:	69bb      	ldr	r3, [r7, #24]
 801250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801250c:	69fa      	ldr	r2, [r7, #28]
 801250e:	429a      	cmp	r2, r3
 8012510:	d04d      	beq.n	80125ae <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012512:	69bb      	ldr	r3, [r7, #24]
 8012514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012516:	697a      	ldr	r2, [r7, #20]
 8012518:	429a      	cmp	r2, r3
 801251a:	d148      	bne.n	80125ae <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801251c:	4b26      	ldr	r3, [pc, #152]	; (80125b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	69ba      	ldr	r2, [r7, #24]
 8012522:	429a      	cmp	r2, r3
 8012524:	d10c      	bne.n	8012540 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8012526:	f04f 0350 	mov.w	r3, #80	; 0x50
 801252a:	b672      	cpsid	i
 801252c:	f383 8811 	msr	BASEPRI, r3
 8012530:	f3bf 8f6f 	isb	sy
 8012534:	f3bf 8f4f 	dsb	sy
 8012538:	b662      	cpsie	i
 801253a:	60bb      	str	r3, [r7, #8]
}
 801253c:	bf00      	nop
 801253e:	e7fe      	b.n	801253e <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012540:	69bb      	ldr	r3, [r7, #24]
 8012542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012544:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012546:	69bb      	ldr	r3, [r7, #24]
 8012548:	69fa      	ldr	r2, [r7, #28]
 801254a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801254c:	69bb      	ldr	r3, [r7, #24]
 801254e:	699b      	ldr	r3, [r3, #24]
 8012550:	2b00      	cmp	r3, #0
 8012552:	db04      	blt.n	801255e <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012554:	69fb      	ldr	r3, [r7, #28]
 8012556:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801255a:	69bb      	ldr	r3, [r7, #24]
 801255c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801255e:	69bb      	ldr	r3, [r7, #24]
 8012560:	6959      	ldr	r1, [r3, #20]
 8012562:	693a      	ldr	r2, [r7, #16]
 8012564:	4613      	mov	r3, r2
 8012566:	009b      	lsls	r3, r3, #2
 8012568:	4413      	add	r3, r2
 801256a:	009b      	lsls	r3, r3, #2
 801256c:	4a13      	ldr	r2, [pc, #76]	; (80125bc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801256e:	4413      	add	r3, r2
 8012570:	4299      	cmp	r1, r3
 8012572:	d11c      	bne.n	80125ae <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012574:	69bb      	ldr	r3, [r7, #24]
 8012576:	3304      	adds	r3, #4
 8012578:	4618      	mov	r0, r3
 801257a:	f7fd ffbd 	bl	80104f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801257e:	69bb      	ldr	r3, [r7, #24]
 8012580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012582:	4b0f      	ldr	r3, [pc, #60]	; (80125c0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	429a      	cmp	r2, r3
 8012588:	d903      	bls.n	8012592 <vTaskPriorityDisinheritAfterTimeout+0xda>
 801258a:	69bb      	ldr	r3, [r7, #24]
 801258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801258e:	4a0c      	ldr	r2, [pc, #48]	; (80125c0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8012590:	6013      	str	r3, [r2, #0]
 8012592:	69bb      	ldr	r3, [r7, #24]
 8012594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012596:	4613      	mov	r3, r2
 8012598:	009b      	lsls	r3, r3, #2
 801259a:	4413      	add	r3, r2
 801259c:	009b      	lsls	r3, r3, #2
 801259e:	4a07      	ldr	r2, [pc, #28]	; (80125bc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80125a0:	441a      	add	r2, r3
 80125a2:	69bb      	ldr	r3, [r7, #24]
 80125a4:	3304      	adds	r3, #4
 80125a6:	4619      	mov	r1, r3
 80125a8:	4610      	mov	r0, r2
 80125aa:	f7fd ff48 	bl	801043e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80125ae:	bf00      	nop
 80125b0:	3720      	adds	r7, #32
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bd80      	pop	{r7, pc}
 80125b6:	bf00      	nop
 80125b8:	20001f88 	.word	0x20001f88
 80125bc:	20001f8c 	.word	0x20001f8c
 80125c0:	20002464 	.word	0x20002464

080125c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80125c4:	b480      	push	{r7}
 80125c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80125c8:	4b07      	ldr	r3, [pc, #28]	; (80125e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d004      	beq.n	80125da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80125d0:	4b05      	ldr	r3, [pc, #20]	; (80125e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80125d6:	3201      	adds	r2, #1
 80125d8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80125da:	4b03      	ldr	r3, [pc, #12]	; (80125e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80125dc:	681b      	ldr	r3, [r3, #0]
	}
 80125de:	4618      	mov	r0, r3
 80125e0:	46bd      	mov	sp, r7
 80125e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e6:	4770      	bx	lr
 80125e8:	20001f88 	.word	0x20001f88

080125ec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b084      	sub	sp, #16
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
 80125f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80125f6:	4b21      	ldr	r3, [pc, #132]	; (801267c <prvAddCurrentTaskToDelayedList+0x90>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80125fc:	4b20      	ldr	r3, [pc, #128]	; (8012680 <prvAddCurrentTaskToDelayedList+0x94>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	3304      	adds	r3, #4
 8012602:	4618      	mov	r0, r3
 8012604:	f7fd ff78 	bl	80104f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801260e:	d10a      	bne.n	8012626 <prvAddCurrentTaskToDelayedList+0x3a>
 8012610:	683b      	ldr	r3, [r7, #0]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d007      	beq.n	8012626 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012616:	4b1a      	ldr	r3, [pc, #104]	; (8012680 <prvAddCurrentTaskToDelayedList+0x94>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	3304      	adds	r3, #4
 801261c:	4619      	mov	r1, r3
 801261e:	4819      	ldr	r0, [pc, #100]	; (8012684 <prvAddCurrentTaskToDelayedList+0x98>)
 8012620:	f7fd ff0d 	bl	801043e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012624:	e026      	b.n	8012674 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012626:	68fa      	ldr	r2, [r7, #12]
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	4413      	add	r3, r2
 801262c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801262e:	4b14      	ldr	r3, [pc, #80]	; (8012680 <prvAddCurrentTaskToDelayedList+0x94>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	68ba      	ldr	r2, [r7, #8]
 8012634:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012636:	68ba      	ldr	r2, [r7, #8]
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	429a      	cmp	r2, r3
 801263c:	d209      	bcs.n	8012652 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801263e:	4b12      	ldr	r3, [pc, #72]	; (8012688 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012640:	681a      	ldr	r2, [r3, #0]
 8012642:	4b0f      	ldr	r3, [pc, #60]	; (8012680 <prvAddCurrentTaskToDelayedList+0x94>)
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	3304      	adds	r3, #4
 8012648:	4619      	mov	r1, r3
 801264a:	4610      	mov	r0, r2
 801264c:	f7fd ff1b 	bl	8010486 <vListInsert>
}
 8012650:	e010      	b.n	8012674 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012652:	4b0e      	ldr	r3, [pc, #56]	; (801268c <prvAddCurrentTaskToDelayedList+0xa0>)
 8012654:	681a      	ldr	r2, [r3, #0]
 8012656:	4b0a      	ldr	r3, [pc, #40]	; (8012680 <prvAddCurrentTaskToDelayedList+0x94>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	3304      	adds	r3, #4
 801265c:	4619      	mov	r1, r3
 801265e:	4610      	mov	r0, r2
 8012660:	f7fd ff11 	bl	8010486 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012664:	4b0a      	ldr	r3, [pc, #40]	; (8012690 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	68ba      	ldr	r2, [r7, #8]
 801266a:	429a      	cmp	r2, r3
 801266c:	d202      	bcs.n	8012674 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801266e:	4a08      	ldr	r2, [pc, #32]	; (8012690 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	6013      	str	r3, [r2, #0]
}
 8012674:	bf00      	nop
 8012676:	3710      	adds	r7, #16
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}
 801267c:	20002460 	.word	0x20002460
 8012680:	20001f88 	.word	0x20001f88
 8012684:	20002448 	.word	0x20002448
 8012688:	20002418 	.word	0x20002418
 801268c:	20002414 	.word	0x20002414
 8012690:	2000247c 	.word	0x2000247c

08012694 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b08a      	sub	sp, #40	; 0x28
 8012698:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801269a:	2300      	movs	r3, #0
 801269c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801269e:	f000 fb15 	bl	8012ccc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80126a2:	4b1d      	ldr	r3, [pc, #116]	; (8012718 <xTimerCreateTimerTask+0x84>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d021      	beq.n	80126ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80126aa:	2300      	movs	r3, #0
 80126ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80126ae:	2300      	movs	r3, #0
 80126b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80126b2:	1d3a      	adds	r2, r7, #4
 80126b4:	f107 0108 	add.w	r1, r7, #8
 80126b8:	f107 030c 	add.w	r3, r7, #12
 80126bc:	4618      	mov	r0, r3
 80126be:	f7fd fe77 	bl	80103b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80126c2:	6879      	ldr	r1, [r7, #4]
 80126c4:	68bb      	ldr	r3, [r7, #8]
 80126c6:	68fa      	ldr	r2, [r7, #12]
 80126c8:	9202      	str	r2, [sp, #8]
 80126ca:	9301      	str	r3, [sp, #4]
 80126cc:	2302      	movs	r3, #2
 80126ce:	9300      	str	r3, [sp, #0]
 80126d0:	2300      	movs	r3, #0
 80126d2:	460a      	mov	r2, r1
 80126d4:	4911      	ldr	r1, [pc, #68]	; (801271c <xTimerCreateTimerTask+0x88>)
 80126d6:	4812      	ldr	r0, [pc, #72]	; (8012720 <xTimerCreateTimerTask+0x8c>)
 80126d8:	f7fe ff8e 	bl	80115f8 <xTaskCreateStatic>
 80126dc:	4603      	mov	r3, r0
 80126de:	4a11      	ldr	r2, [pc, #68]	; (8012724 <xTimerCreateTimerTask+0x90>)
 80126e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80126e2:	4b10      	ldr	r3, [pc, #64]	; (8012724 <xTimerCreateTimerTask+0x90>)
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d001      	beq.n	80126ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80126ea:	2301      	movs	r3, #1
 80126ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80126ee:	697b      	ldr	r3, [r7, #20]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d10c      	bne.n	801270e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80126f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126f8:	b672      	cpsid	i
 80126fa:	f383 8811 	msr	BASEPRI, r3
 80126fe:	f3bf 8f6f 	isb	sy
 8012702:	f3bf 8f4f 	dsb	sy
 8012706:	b662      	cpsie	i
 8012708:	613b      	str	r3, [r7, #16]
}
 801270a:	bf00      	nop
 801270c:	e7fe      	b.n	801270c <xTimerCreateTimerTask+0x78>
	return xReturn;
 801270e:	697b      	ldr	r3, [r7, #20]
}
 8012710:	4618      	mov	r0, r3
 8012712:	3718      	adds	r7, #24
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}
 8012718:	200024b8 	.word	0x200024b8
 801271c:	08018494 	.word	0x08018494
 8012720:	08012865 	.word	0x08012865
 8012724:	200024bc 	.word	0x200024bc

08012728 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b08a      	sub	sp, #40	; 0x28
 801272c:	af00      	add	r7, sp, #0
 801272e:	60f8      	str	r0, [r7, #12]
 8012730:	60b9      	str	r1, [r7, #8]
 8012732:	607a      	str	r2, [r7, #4]
 8012734:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012736:	2300      	movs	r3, #0
 8012738:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d10c      	bne.n	801275a <xTimerGenericCommand+0x32>
	__asm volatile
 8012740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012744:	b672      	cpsid	i
 8012746:	f383 8811 	msr	BASEPRI, r3
 801274a:	f3bf 8f6f 	isb	sy
 801274e:	f3bf 8f4f 	dsb	sy
 8012752:	b662      	cpsie	i
 8012754:	623b      	str	r3, [r7, #32]
}
 8012756:	bf00      	nop
 8012758:	e7fe      	b.n	8012758 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801275a:	4b1a      	ldr	r3, [pc, #104]	; (80127c4 <xTimerGenericCommand+0x9c>)
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d02a      	beq.n	80127b8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012762:	68bb      	ldr	r3, [r7, #8]
 8012764:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801276e:	68bb      	ldr	r3, [r7, #8]
 8012770:	2b05      	cmp	r3, #5
 8012772:	dc18      	bgt.n	80127a6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012774:	f7ff fda8 	bl	80122c8 <xTaskGetSchedulerState>
 8012778:	4603      	mov	r3, r0
 801277a:	2b02      	cmp	r3, #2
 801277c:	d109      	bne.n	8012792 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801277e:	4b11      	ldr	r3, [pc, #68]	; (80127c4 <xTimerGenericCommand+0x9c>)
 8012780:	6818      	ldr	r0, [r3, #0]
 8012782:	f107 0110 	add.w	r1, r7, #16
 8012786:	2300      	movs	r3, #0
 8012788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801278a:	f7fe f8a3 	bl	80108d4 <xQueueGenericSend>
 801278e:	6278      	str	r0, [r7, #36]	; 0x24
 8012790:	e012      	b.n	80127b8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012792:	4b0c      	ldr	r3, [pc, #48]	; (80127c4 <xTimerGenericCommand+0x9c>)
 8012794:	6818      	ldr	r0, [r3, #0]
 8012796:	f107 0110 	add.w	r1, r7, #16
 801279a:	2300      	movs	r3, #0
 801279c:	2200      	movs	r2, #0
 801279e:	f7fe f899 	bl	80108d4 <xQueueGenericSend>
 80127a2:	6278      	str	r0, [r7, #36]	; 0x24
 80127a4:	e008      	b.n	80127b8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80127a6:	4b07      	ldr	r3, [pc, #28]	; (80127c4 <xTimerGenericCommand+0x9c>)
 80127a8:	6818      	ldr	r0, [r3, #0]
 80127aa:	f107 0110 	add.w	r1, r7, #16
 80127ae:	2300      	movs	r3, #0
 80127b0:	683a      	ldr	r2, [r7, #0]
 80127b2:	f7fe f995 	bl	8010ae0 <xQueueGenericSendFromISR>
 80127b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80127b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80127ba:	4618      	mov	r0, r3
 80127bc:	3728      	adds	r7, #40	; 0x28
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd80      	pop	{r7, pc}
 80127c2:	bf00      	nop
 80127c4:	200024b8 	.word	0x200024b8

080127c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b088      	sub	sp, #32
 80127cc:	af02      	add	r7, sp, #8
 80127ce:	6078      	str	r0, [r7, #4]
 80127d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80127d2:	4b23      	ldr	r3, [pc, #140]	; (8012860 <prvProcessExpiredTimer+0x98>)
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	68db      	ldr	r3, [r3, #12]
 80127d8:	68db      	ldr	r3, [r3, #12]
 80127da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80127dc:	697b      	ldr	r3, [r7, #20]
 80127de:	3304      	adds	r3, #4
 80127e0:	4618      	mov	r0, r3
 80127e2:	f7fd fe89 	bl	80104f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80127e6:	697b      	ldr	r3, [r7, #20]
 80127e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80127ec:	f003 0304 	and.w	r3, r3, #4
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d024      	beq.n	801283e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80127f4:	697b      	ldr	r3, [r7, #20]
 80127f6:	699a      	ldr	r2, [r3, #24]
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	18d1      	adds	r1, r2, r3
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	683a      	ldr	r2, [r7, #0]
 8012800:	6978      	ldr	r0, [r7, #20]
 8012802:	f000 f8d3 	bl	80129ac <prvInsertTimerInActiveList>
 8012806:	4603      	mov	r3, r0
 8012808:	2b00      	cmp	r3, #0
 801280a:	d021      	beq.n	8012850 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801280c:	2300      	movs	r3, #0
 801280e:	9300      	str	r3, [sp, #0]
 8012810:	2300      	movs	r3, #0
 8012812:	687a      	ldr	r2, [r7, #4]
 8012814:	2100      	movs	r1, #0
 8012816:	6978      	ldr	r0, [r7, #20]
 8012818:	f7ff ff86 	bl	8012728 <xTimerGenericCommand>
 801281c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801281e:	693b      	ldr	r3, [r7, #16]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d115      	bne.n	8012850 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8012824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012828:	b672      	cpsid	i
 801282a:	f383 8811 	msr	BASEPRI, r3
 801282e:	f3bf 8f6f 	isb	sy
 8012832:	f3bf 8f4f 	dsb	sy
 8012836:	b662      	cpsie	i
 8012838:	60fb      	str	r3, [r7, #12]
}
 801283a:	bf00      	nop
 801283c:	e7fe      	b.n	801283c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801283e:	697b      	ldr	r3, [r7, #20]
 8012840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012844:	f023 0301 	bic.w	r3, r3, #1
 8012848:	b2da      	uxtb	r2, r3
 801284a:	697b      	ldr	r3, [r7, #20]
 801284c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012850:	697b      	ldr	r3, [r7, #20]
 8012852:	6a1b      	ldr	r3, [r3, #32]
 8012854:	6978      	ldr	r0, [r7, #20]
 8012856:	4798      	blx	r3
}
 8012858:	bf00      	nop
 801285a:	3718      	adds	r7, #24
 801285c:	46bd      	mov	sp, r7
 801285e:	bd80      	pop	{r7, pc}
 8012860:	200024b0 	.word	0x200024b0

08012864 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b084      	sub	sp, #16
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801286c:	f107 0308 	add.w	r3, r7, #8
 8012870:	4618      	mov	r0, r3
 8012872:	f000 f857 	bl	8012924 <prvGetNextExpireTime>
 8012876:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	4619      	mov	r1, r3
 801287c:	68f8      	ldr	r0, [r7, #12]
 801287e:	f000 f803 	bl	8012888 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012882:	f000 f8d5 	bl	8012a30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012886:	e7f1      	b.n	801286c <prvTimerTask+0x8>

08012888 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b084      	sub	sp, #16
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
 8012890:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012892:	f7ff f91b 	bl	8011acc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012896:	f107 0308 	add.w	r3, r7, #8
 801289a:	4618      	mov	r0, r3
 801289c:	f000 f866 	bl	801296c <prvSampleTimeNow>
 80128a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80128a2:	68bb      	ldr	r3, [r7, #8]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d130      	bne.n	801290a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d10a      	bne.n	80128c4 <prvProcessTimerOrBlockTask+0x3c>
 80128ae:	687a      	ldr	r2, [r7, #4]
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	429a      	cmp	r2, r3
 80128b4:	d806      	bhi.n	80128c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80128b6:	f7ff f917 	bl	8011ae8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80128ba:	68f9      	ldr	r1, [r7, #12]
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f7ff ff83 	bl	80127c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80128c2:	e024      	b.n	801290e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80128c4:	683b      	ldr	r3, [r7, #0]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d008      	beq.n	80128dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80128ca:	4b13      	ldr	r3, [pc, #76]	; (8012918 <prvProcessTimerOrBlockTask+0x90>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d101      	bne.n	80128d8 <prvProcessTimerOrBlockTask+0x50>
 80128d4:	2301      	movs	r3, #1
 80128d6:	e000      	b.n	80128da <prvProcessTimerOrBlockTask+0x52>
 80128d8:	2300      	movs	r3, #0
 80128da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80128dc:	4b0f      	ldr	r3, [pc, #60]	; (801291c <prvProcessTimerOrBlockTask+0x94>)
 80128de:	6818      	ldr	r0, [r3, #0]
 80128e0:	687a      	ldr	r2, [r7, #4]
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	1ad3      	subs	r3, r2, r3
 80128e6:	683a      	ldr	r2, [r7, #0]
 80128e8:	4619      	mov	r1, r3
 80128ea:	f7fe fe51 	bl	8011590 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80128ee:	f7ff f8fb 	bl	8011ae8 <xTaskResumeAll>
 80128f2:	4603      	mov	r3, r0
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d10a      	bne.n	801290e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80128f8:	4b09      	ldr	r3, [pc, #36]	; (8012920 <prvProcessTimerOrBlockTask+0x98>)
 80128fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128fe:	601a      	str	r2, [r3, #0]
 8012900:	f3bf 8f4f 	dsb	sy
 8012904:	f3bf 8f6f 	isb	sy
}
 8012908:	e001      	b.n	801290e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801290a:	f7ff f8ed 	bl	8011ae8 <xTaskResumeAll>
}
 801290e:	bf00      	nop
 8012910:	3710      	adds	r7, #16
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}
 8012916:	bf00      	nop
 8012918:	200024b4 	.word	0x200024b4
 801291c:	200024b8 	.word	0x200024b8
 8012920:	e000ed04 	.word	0xe000ed04

08012924 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012924:	b480      	push	{r7}
 8012926:	b085      	sub	sp, #20
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801292c:	4b0e      	ldr	r3, [pc, #56]	; (8012968 <prvGetNextExpireTime+0x44>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d101      	bne.n	801293a <prvGetNextExpireTime+0x16>
 8012936:	2201      	movs	r2, #1
 8012938:	e000      	b.n	801293c <prvGetNextExpireTime+0x18>
 801293a:	2200      	movs	r2, #0
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d105      	bne.n	8012954 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012948:	4b07      	ldr	r3, [pc, #28]	; (8012968 <prvGetNextExpireTime+0x44>)
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	68db      	ldr	r3, [r3, #12]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	60fb      	str	r3, [r7, #12]
 8012952:	e001      	b.n	8012958 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012954:	2300      	movs	r3, #0
 8012956:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012958:	68fb      	ldr	r3, [r7, #12]
}
 801295a:	4618      	mov	r0, r3
 801295c:	3714      	adds	r7, #20
 801295e:	46bd      	mov	sp, r7
 8012960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012964:	4770      	bx	lr
 8012966:	bf00      	nop
 8012968:	200024b0 	.word	0x200024b0

0801296c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b084      	sub	sp, #16
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012974:	f7ff f958 	bl	8011c28 <xTaskGetTickCount>
 8012978:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801297a:	4b0b      	ldr	r3, [pc, #44]	; (80129a8 <prvSampleTimeNow+0x3c>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	68fa      	ldr	r2, [r7, #12]
 8012980:	429a      	cmp	r2, r3
 8012982:	d205      	bcs.n	8012990 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012984:	f000 f93c 	bl	8012c00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2201      	movs	r2, #1
 801298c:	601a      	str	r2, [r3, #0]
 801298e:	e002      	b.n	8012996 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	2200      	movs	r2, #0
 8012994:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012996:	4a04      	ldr	r2, [pc, #16]	; (80129a8 <prvSampleTimeNow+0x3c>)
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801299c:	68fb      	ldr	r3, [r7, #12]
}
 801299e:	4618      	mov	r0, r3
 80129a0:	3710      	adds	r7, #16
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}
 80129a6:	bf00      	nop
 80129a8:	200024c0 	.word	0x200024c0

080129ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b086      	sub	sp, #24
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	60f8      	str	r0, [r7, #12]
 80129b4:	60b9      	str	r1, [r7, #8]
 80129b6:	607a      	str	r2, [r7, #4]
 80129b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80129ba:	2300      	movs	r3, #0
 80129bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	68ba      	ldr	r2, [r7, #8]
 80129c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	68fa      	ldr	r2, [r7, #12]
 80129c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80129ca:	68ba      	ldr	r2, [r7, #8]
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	429a      	cmp	r2, r3
 80129d0:	d812      	bhi.n	80129f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80129d2:	687a      	ldr	r2, [r7, #4]
 80129d4:	683b      	ldr	r3, [r7, #0]
 80129d6:	1ad2      	subs	r2, r2, r3
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	699b      	ldr	r3, [r3, #24]
 80129dc:	429a      	cmp	r2, r3
 80129de:	d302      	bcc.n	80129e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80129e0:	2301      	movs	r3, #1
 80129e2:	617b      	str	r3, [r7, #20]
 80129e4:	e01b      	b.n	8012a1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80129e6:	4b10      	ldr	r3, [pc, #64]	; (8012a28 <prvInsertTimerInActiveList+0x7c>)
 80129e8:	681a      	ldr	r2, [r3, #0]
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	3304      	adds	r3, #4
 80129ee:	4619      	mov	r1, r3
 80129f0:	4610      	mov	r0, r2
 80129f2:	f7fd fd48 	bl	8010486 <vListInsert>
 80129f6:	e012      	b.n	8012a1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80129f8:	687a      	ldr	r2, [r7, #4]
 80129fa:	683b      	ldr	r3, [r7, #0]
 80129fc:	429a      	cmp	r2, r3
 80129fe:	d206      	bcs.n	8012a0e <prvInsertTimerInActiveList+0x62>
 8012a00:	68ba      	ldr	r2, [r7, #8]
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	429a      	cmp	r2, r3
 8012a06:	d302      	bcc.n	8012a0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012a08:	2301      	movs	r3, #1
 8012a0a:	617b      	str	r3, [r7, #20]
 8012a0c:	e007      	b.n	8012a1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012a0e:	4b07      	ldr	r3, [pc, #28]	; (8012a2c <prvInsertTimerInActiveList+0x80>)
 8012a10:	681a      	ldr	r2, [r3, #0]
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	3304      	adds	r3, #4
 8012a16:	4619      	mov	r1, r3
 8012a18:	4610      	mov	r0, r2
 8012a1a:	f7fd fd34 	bl	8010486 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012a1e:	697b      	ldr	r3, [r7, #20]
}
 8012a20:	4618      	mov	r0, r3
 8012a22:	3718      	adds	r7, #24
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}
 8012a28:	200024b4 	.word	0x200024b4
 8012a2c:	200024b0 	.word	0x200024b0

08012a30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b08e      	sub	sp, #56	; 0x38
 8012a34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012a36:	e0d0      	b.n	8012bda <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	da1a      	bge.n	8012a74 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012a3e:	1d3b      	adds	r3, r7, #4
 8012a40:	3304      	adds	r3, #4
 8012a42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d10c      	bne.n	8012a64 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8012a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a4e:	b672      	cpsid	i
 8012a50:	f383 8811 	msr	BASEPRI, r3
 8012a54:	f3bf 8f6f 	isb	sy
 8012a58:	f3bf 8f4f 	dsb	sy
 8012a5c:	b662      	cpsie	i
 8012a5e:	61fb      	str	r3, [r7, #28]
}
 8012a60:	bf00      	nop
 8012a62:	e7fe      	b.n	8012a62 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a6a:	6850      	ldr	r0, [r2, #4]
 8012a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a6e:	6892      	ldr	r2, [r2, #8]
 8012a70:	4611      	mov	r1, r2
 8012a72:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	f2c0 80ae 	blt.w	8012bd8 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a82:	695b      	ldr	r3, [r3, #20]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d004      	beq.n	8012a92 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a8a:	3304      	adds	r3, #4
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f7fd fd33 	bl	80104f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012a92:	463b      	mov	r3, r7
 8012a94:	4618      	mov	r0, r3
 8012a96:	f7ff ff69 	bl	801296c <prvSampleTimeNow>
 8012a9a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	2b09      	cmp	r3, #9
 8012aa0:	f200 809b 	bhi.w	8012bda <prvProcessReceivedCommands+0x1aa>
 8012aa4:	a201      	add	r2, pc, #4	; (adr r2, 8012aac <prvProcessReceivedCommands+0x7c>)
 8012aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aaa:	bf00      	nop
 8012aac:	08012ad5 	.word	0x08012ad5
 8012ab0:	08012ad5 	.word	0x08012ad5
 8012ab4:	08012ad5 	.word	0x08012ad5
 8012ab8:	08012b4d 	.word	0x08012b4d
 8012abc:	08012b61 	.word	0x08012b61
 8012ac0:	08012baf 	.word	0x08012baf
 8012ac4:	08012ad5 	.word	0x08012ad5
 8012ac8:	08012ad5 	.word	0x08012ad5
 8012acc:	08012b4d 	.word	0x08012b4d
 8012ad0:	08012b61 	.word	0x08012b61
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ad6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ada:	f043 0301 	orr.w	r3, r3, #1
 8012ade:	b2da      	uxtb	r2, r3
 8012ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ae2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012ae6:	68ba      	ldr	r2, [r7, #8]
 8012ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aea:	699b      	ldr	r3, [r3, #24]
 8012aec:	18d1      	adds	r1, r2, r3
 8012aee:	68bb      	ldr	r3, [r7, #8]
 8012af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012af4:	f7ff ff5a 	bl	80129ac <prvInsertTimerInActiveList>
 8012af8:	4603      	mov	r3, r0
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d06d      	beq.n	8012bda <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b00:	6a1b      	ldr	r3, [r3, #32]
 8012b02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b0c:	f003 0304 	and.w	r3, r3, #4
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d062      	beq.n	8012bda <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012b14:	68ba      	ldr	r2, [r7, #8]
 8012b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b18:	699b      	ldr	r3, [r3, #24]
 8012b1a:	441a      	add	r2, r3
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	9300      	str	r3, [sp, #0]
 8012b20:	2300      	movs	r3, #0
 8012b22:	2100      	movs	r1, #0
 8012b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b26:	f7ff fdff 	bl	8012728 <xTimerGenericCommand>
 8012b2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012b2c:	6a3b      	ldr	r3, [r7, #32]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d153      	bne.n	8012bda <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8012b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b36:	b672      	cpsid	i
 8012b38:	f383 8811 	msr	BASEPRI, r3
 8012b3c:	f3bf 8f6f 	isb	sy
 8012b40:	f3bf 8f4f 	dsb	sy
 8012b44:	b662      	cpsie	i
 8012b46:	61bb      	str	r3, [r7, #24]
}
 8012b48:	bf00      	nop
 8012b4a:	e7fe      	b.n	8012b4a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b52:	f023 0301 	bic.w	r3, r3, #1
 8012b56:	b2da      	uxtb	r2, r3
 8012b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012b5e:	e03c      	b.n	8012bda <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b66:	f043 0301 	orr.w	r3, r3, #1
 8012b6a:	b2da      	uxtb	r2, r3
 8012b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012b72:	68ba      	ldr	r2, [r7, #8]
 8012b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b76:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b7a:	699b      	ldr	r3, [r3, #24]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d10c      	bne.n	8012b9a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8012b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b84:	b672      	cpsid	i
 8012b86:	f383 8811 	msr	BASEPRI, r3
 8012b8a:	f3bf 8f6f 	isb	sy
 8012b8e:	f3bf 8f4f 	dsb	sy
 8012b92:	b662      	cpsie	i
 8012b94:	617b      	str	r3, [r7, #20]
}
 8012b96:	bf00      	nop
 8012b98:	e7fe      	b.n	8012b98 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b9c:	699a      	ldr	r2, [r3, #24]
 8012b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba0:	18d1      	adds	r1, r2, r3
 8012ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ba8:	f7ff ff00 	bl	80129ac <prvInsertTimerInActiveList>
					break;
 8012bac:	e015      	b.n	8012bda <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012bb4:	f003 0302 	and.w	r3, r3, #2
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d103      	bne.n	8012bc4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8012bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012bbe:	f000 fbcb 	bl	8013358 <vPortFree>
 8012bc2:	e00a      	b.n	8012bda <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012bca:	f023 0301 	bic.w	r3, r3, #1
 8012bce:	b2da      	uxtb	r2, r3
 8012bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012bd6:	e000      	b.n	8012bda <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012bd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012bda:	4b08      	ldr	r3, [pc, #32]	; (8012bfc <prvProcessReceivedCommands+0x1cc>)
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	1d39      	adds	r1, r7, #4
 8012be0:	2200      	movs	r2, #0
 8012be2:	4618      	mov	r0, r3
 8012be4:	f7fe f8b2 	bl	8010d4c <xQueueReceive>
 8012be8:	4603      	mov	r3, r0
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	f47f af24 	bne.w	8012a38 <prvProcessReceivedCommands+0x8>
	}
}
 8012bf0:	bf00      	nop
 8012bf2:	bf00      	nop
 8012bf4:	3730      	adds	r7, #48	; 0x30
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bd80      	pop	{r7, pc}
 8012bfa:	bf00      	nop
 8012bfc:	200024b8 	.word	0x200024b8

08012c00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b088      	sub	sp, #32
 8012c04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012c06:	e04a      	b.n	8012c9e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012c08:	4b2e      	ldr	r3, [pc, #184]	; (8012cc4 <prvSwitchTimerLists+0xc4>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	68db      	ldr	r3, [r3, #12]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c12:	4b2c      	ldr	r3, [pc, #176]	; (8012cc4 <prvSwitchTimerLists+0xc4>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	68db      	ldr	r3, [r3, #12]
 8012c18:	68db      	ldr	r3, [r3, #12]
 8012c1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	3304      	adds	r3, #4
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7fd fc69 	bl	80104f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	6a1b      	ldr	r3, [r3, #32]
 8012c2a:	68f8      	ldr	r0, [r7, #12]
 8012c2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012c34:	f003 0304 	and.w	r3, r3, #4
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d030      	beq.n	8012c9e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	699b      	ldr	r3, [r3, #24]
 8012c40:	693a      	ldr	r2, [r7, #16]
 8012c42:	4413      	add	r3, r2
 8012c44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012c46:	68ba      	ldr	r2, [r7, #8]
 8012c48:	693b      	ldr	r3, [r7, #16]
 8012c4a:	429a      	cmp	r2, r3
 8012c4c:	d90e      	bls.n	8012c6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	68ba      	ldr	r2, [r7, #8]
 8012c52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	68fa      	ldr	r2, [r7, #12]
 8012c58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012c5a:	4b1a      	ldr	r3, [pc, #104]	; (8012cc4 <prvSwitchTimerLists+0xc4>)
 8012c5c:	681a      	ldr	r2, [r3, #0]
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	3304      	adds	r3, #4
 8012c62:	4619      	mov	r1, r3
 8012c64:	4610      	mov	r0, r2
 8012c66:	f7fd fc0e 	bl	8010486 <vListInsert>
 8012c6a:	e018      	b.n	8012c9e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	9300      	str	r3, [sp, #0]
 8012c70:	2300      	movs	r3, #0
 8012c72:	693a      	ldr	r2, [r7, #16]
 8012c74:	2100      	movs	r1, #0
 8012c76:	68f8      	ldr	r0, [r7, #12]
 8012c78:	f7ff fd56 	bl	8012728 <xTimerGenericCommand>
 8012c7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d10c      	bne.n	8012c9e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8012c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c88:	b672      	cpsid	i
 8012c8a:	f383 8811 	msr	BASEPRI, r3
 8012c8e:	f3bf 8f6f 	isb	sy
 8012c92:	f3bf 8f4f 	dsb	sy
 8012c96:	b662      	cpsie	i
 8012c98:	603b      	str	r3, [r7, #0]
}
 8012c9a:	bf00      	nop
 8012c9c:	e7fe      	b.n	8012c9c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012c9e:	4b09      	ldr	r3, [pc, #36]	; (8012cc4 <prvSwitchTimerLists+0xc4>)
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d1af      	bne.n	8012c08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012ca8:	4b06      	ldr	r3, [pc, #24]	; (8012cc4 <prvSwitchTimerLists+0xc4>)
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012cae:	4b06      	ldr	r3, [pc, #24]	; (8012cc8 <prvSwitchTimerLists+0xc8>)
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	4a04      	ldr	r2, [pc, #16]	; (8012cc4 <prvSwitchTimerLists+0xc4>)
 8012cb4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012cb6:	4a04      	ldr	r2, [pc, #16]	; (8012cc8 <prvSwitchTimerLists+0xc8>)
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	6013      	str	r3, [r2, #0]
}
 8012cbc:	bf00      	nop
 8012cbe:	3718      	adds	r7, #24
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	bd80      	pop	{r7, pc}
 8012cc4:	200024b0 	.word	0x200024b0
 8012cc8:	200024b4 	.word	0x200024b4

08012ccc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b082      	sub	sp, #8
 8012cd0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012cd2:	f000 f94b 	bl	8012f6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012cd6:	4b15      	ldr	r3, [pc, #84]	; (8012d2c <prvCheckForValidListAndQueue+0x60>)
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d120      	bne.n	8012d20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012cde:	4814      	ldr	r0, [pc, #80]	; (8012d30 <prvCheckForValidListAndQueue+0x64>)
 8012ce0:	f7fd fb80 	bl	80103e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012ce4:	4813      	ldr	r0, [pc, #76]	; (8012d34 <prvCheckForValidListAndQueue+0x68>)
 8012ce6:	f7fd fb7d 	bl	80103e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012cea:	4b13      	ldr	r3, [pc, #76]	; (8012d38 <prvCheckForValidListAndQueue+0x6c>)
 8012cec:	4a10      	ldr	r2, [pc, #64]	; (8012d30 <prvCheckForValidListAndQueue+0x64>)
 8012cee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012cf0:	4b12      	ldr	r3, [pc, #72]	; (8012d3c <prvCheckForValidListAndQueue+0x70>)
 8012cf2:	4a10      	ldr	r2, [pc, #64]	; (8012d34 <prvCheckForValidListAndQueue+0x68>)
 8012cf4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	9300      	str	r3, [sp, #0]
 8012cfa:	4b11      	ldr	r3, [pc, #68]	; (8012d40 <prvCheckForValidListAndQueue+0x74>)
 8012cfc:	4a11      	ldr	r2, [pc, #68]	; (8012d44 <prvCheckForValidListAndQueue+0x78>)
 8012cfe:	2110      	movs	r1, #16
 8012d00:	200a      	movs	r0, #10
 8012d02:	f7fd fc8d 	bl	8010620 <xQueueGenericCreateStatic>
 8012d06:	4603      	mov	r3, r0
 8012d08:	4a08      	ldr	r2, [pc, #32]	; (8012d2c <prvCheckForValidListAndQueue+0x60>)
 8012d0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012d0c:	4b07      	ldr	r3, [pc, #28]	; (8012d2c <prvCheckForValidListAndQueue+0x60>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d005      	beq.n	8012d20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012d14:	4b05      	ldr	r3, [pc, #20]	; (8012d2c <prvCheckForValidListAndQueue+0x60>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	490b      	ldr	r1, [pc, #44]	; (8012d48 <prvCheckForValidListAndQueue+0x7c>)
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f7fe fbe4 	bl	80114e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012d20:	f000 f958 	bl	8012fd4 <vPortExitCritical>
}
 8012d24:	bf00      	nop
 8012d26:	46bd      	mov	sp, r7
 8012d28:	bd80      	pop	{r7, pc}
 8012d2a:	bf00      	nop
 8012d2c:	200024b8 	.word	0x200024b8
 8012d30:	20002488 	.word	0x20002488
 8012d34:	2000249c 	.word	0x2000249c
 8012d38:	200024b0 	.word	0x200024b0
 8012d3c:	200024b4 	.word	0x200024b4
 8012d40:	20002564 	.word	0x20002564
 8012d44:	200024c4 	.word	0x200024c4
 8012d48:	0801849c 	.word	0x0801849c

08012d4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012d4c:	b480      	push	{r7}
 8012d4e:	b085      	sub	sp, #20
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	60f8      	str	r0, [r7, #12]
 8012d54:	60b9      	str	r1, [r7, #8]
 8012d56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	3b04      	subs	r3, #4
 8012d5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012d64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	3b04      	subs	r3, #4
 8012d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012d6c:	68bb      	ldr	r3, [r7, #8]
 8012d6e:	f023 0201 	bic.w	r2, r3, #1
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	3b04      	subs	r3, #4
 8012d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012d7c:	4a0c      	ldr	r2, [pc, #48]	; (8012db0 <pxPortInitialiseStack+0x64>)
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	3b14      	subs	r3, #20
 8012d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012d88:	687a      	ldr	r2, [r7, #4]
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	3b04      	subs	r3, #4
 8012d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	f06f 0202 	mvn.w	r2, #2
 8012d9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	3b20      	subs	r3, #32
 8012da0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012da2:	68fb      	ldr	r3, [r7, #12]
}
 8012da4:	4618      	mov	r0, r3
 8012da6:	3714      	adds	r7, #20
 8012da8:	46bd      	mov	sp, r7
 8012daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dae:	4770      	bx	lr
 8012db0:	08012db5 	.word	0x08012db5

08012db4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012db4:	b480      	push	{r7}
 8012db6:	b085      	sub	sp, #20
 8012db8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012dba:	2300      	movs	r3, #0
 8012dbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012dbe:	4b14      	ldr	r3, [pc, #80]	; (8012e10 <prvTaskExitError+0x5c>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dc6:	d00c      	beq.n	8012de2 <prvTaskExitError+0x2e>
	__asm volatile
 8012dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dcc:	b672      	cpsid	i
 8012dce:	f383 8811 	msr	BASEPRI, r3
 8012dd2:	f3bf 8f6f 	isb	sy
 8012dd6:	f3bf 8f4f 	dsb	sy
 8012dda:	b662      	cpsie	i
 8012ddc:	60fb      	str	r3, [r7, #12]
}
 8012dde:	bf00      	nop
 8012de0:	e7fe      	b.n	8012de0 <prvTaskExitError+0x2c>
	__asm volatile
 8012de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012de6:	b672      	cpsid	i
 8012de8:	f383 8811 	msr	BASEPRI, r3
 8012dec:	f3bf 8f6f 	isb	sy
 8012df0:	f3bf 8f4f 	dsb	sy
 8012df4:	b662      	cpsie	i
 8012df6:	60bb      	str	r3, [r7, #8]
}
 8012df8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012dfa:	bf00      	nop
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d0fc      	beq.n	8012dfc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012e02:	bf00      	nop
 8012e04:	bf00      	nop
 8012e06:	3714      	adds	r7, #20
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0e:	4770      	bx	lr
 8012e10:	200001bc 	.word	0x200001bc
	...

08012e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012e20:	4b07      	ldr	r3, [pc, #28]	; (8012e40 <pxCurrentTCBConst2>)
 8012e22:	6819      	ldr	r1, [r3, #0]
 8012e24:	6808      	ldr	r0, [r1, #0]
 8012e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e2a:	f380 8809 	msr	PSP, r0
 8012e2e:	f3bf 8f6f 	isb	sy
 8012e32:	f04f 0000 	mov.w	r0, #0
 8012e36:	f380 8811 	msr	BASEPRI, r0
 8012e3a:	4770      	bx	lr
 8012e3c:	f3af 8000 	nop.w

08012e40 <pxCurrentTCBConst2>:
 8012e40:	20001f88 	.word	0x20001f88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012e44:	bf00      	nop
 8012e46:	bf00      	nop

08012e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012e48:	4808      	ldr	r0, [pc, #32]	; (8012e6c <prvPortStartFirstTask+0x24>)
 8012e4a:	6800      	ldr	r0, [r0, #0]
 8012e4c:	6800      	ldr	r0, [r0, #0]
 8012e4e:	f380 8808 	msr	MSP, r0
 8012e52:	f04f 0000 	mov.w	r0, #0
 8012e56:	f380 8814 	msr	CONTROL, r0
 8012e5a:	b662      	cpsie	i
 8012e5c:	b661      	cpsie	f
 8012e5e:	f3bf 8f4f 	dsb	sy
 8012e62:	f3bf 8f6f 	isb	sy
 8012e66:	df00      	svc	0
 8012e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012e6a:	bf00      	nop
 8012e6c:	e000ed08 	.word	0xe000ed08

08012e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b084      	sub	sp, #16
 8012e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012e76:	4b37      	ldr	r3, [pc, #220]	; (8012f54 <xPortStartScheduler+0xe4>)
 8012e78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	781b      	ldrb	r3, [r3, #0]
 8012e7e:	b2db      	uxtb	r3, r3
 8012e80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	22ff      	movs	r2, #255	; 0xff
 8012e86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	781b      	ldrb	r3, [r3, #0]
 8012e8c:	b2db      	uxtb	r3, r3
 8012e8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012e90:	78fb      	ldrb	r3, [r7, #3]
 8012e92:	b2db      	uxtb	r3, r3
 8012e94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012e98:	b2da      	uxtb	r2, r3
 8012e9a:	4b2f      	ldr	r3, [pc, #188]	; (8012f58 <xPortStartScheduler+0xe8>)
 8012e9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012e9e:	4b2f      	ldr	r3, [pc, #188]	; (8012f5c <xPortStartScheduler+0xec>)
 8012ea0:	2207      	movs	r2, #7
 8012ea2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012ea4:	e009      	b.n	8012eba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012ea6:	4b2d      	ldr	r3, [pc, #180]	; (8012f5c <xPortStartScheduler+0xec>)
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	3b01      	subs	r3, #1
 8012eac:	4a2b      	ldr	r2, [pc, #172]	; (8012f5c <xPortStartScheduler+0xec>)
 8012eae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012eb0:	78fb      	ldrb	r3, [r7, #3]
 8012eb2:	b2db      	uxtb	r3, r3
 8012eb4:	005b      	lsls	r3, r3, #1
 8012eb6:	b2db      	uxtb	r3, r3
 8012eb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012eba:	78fb      	ldrb	r3, [r7, #3]
 8012ebc:	b2db      	uxtb	r3, r3
 8012ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ec2:	2b80      	cmp	r3, #128	; 0x80
 8012ec4:	d0ef      	beq.n	8012ea6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012ec6:	4b25      	ldr	r3, [pc, #148]	; (8012f5c <xPortStartScheduler+0xec>)
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	f1c3 0307 	rsb	r3, r3, #7
 8012ece:	2b04      	cmp	r3, #4
 8012ed0:	d00c      	beq.n	8012eec <xPortStartScheduler+0x7c>
	__asm volatile
 8012ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ed6:	b672      	cpsid	i
 8012ed8:	f383 8811 	msr	BASEPRI, r3
 8012edc:	f3bf 8f6f 	isb	sy
 8012ee0:	f3bf 8f4f 	dsb	sy
 8012ee4:	b662      	cpsie	i
 8012ee6:	60bb      	str	r3, [r7, #8]
}
 8012ee8:	bf00      	nop
 8012eea:	e7fe      	b.n	8012eea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012eec:	4b1b      	ldr	r3, [pc, #108]	; (8012f5c <xPortStartScheduler+0xec>)
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	021b      	lsls	r3, r3, #8
 8012ef2:	4a1a      	ldr	r2, [pc, #104]	; (8012f5c <xPortStartScheduler+0xec>)
 8012ef4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012ef6:	4b19      	ldr	r3, [pc, #100]	; (8012f5c <xPortStartScheduler+0xec>)
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012efe:	4a17      	ldr	r2, [pc, #92]	; (8012f5c <xPortStartScheduler+0xec>)
 8012f00:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	b2da      	uxtb	r2, r3
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012f0a:	4b15      	ldr	r3, [pc, #84]	; (8012f60 <xPortStartScheduler+0xf0>)
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	4a14      	ldr	r2, [pc, #80]	; (8012f60 <xPortStartScheduler+0xf0>)
 8012f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012f14:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012f16:	4b12      	ldr	r3, [pc, #72]	; (8012f60 <xPortStartScheduler+0xf0>)
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	4a11      	ldr	r2, [pc, #68]	; (8012f60 <xPortStartScheduler+0xf0>)
 8012f1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012f20:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012f22:	f000 f8dd 	bl	80130e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012f26:	4b0f      	ldr	r3, [pc, #60]	; (8012f64 <xPortStartScheduler+0xf4>)
 8012f28:	2200      	movs	r2, #0
 8012f2a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012f2c:	f000 f8fc 	bl	8013128 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012f30:	4b0d      	ldr	r3, [pc, #52]	; (8012f68 <xPortStartScheduler+0xf8>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	4a0c      	ldr	r2, [pc, #48]	; (8012f68 <xPortStartScheduler+0xf8>)
 8012f36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012f3a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012f3c:	f7ff ff84 	bl	8012e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012f40:	f7fe ff3e 	bl	8011dc0 <vTaskSwitchContext>
	prvTaskExitError();
 8012f44:	f7ff ff36 	bl	8012db4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012f48:	2300      	movs	r3, #0
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3710      	adds	r7, #16
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}
 8012f52:	bf00      	nop
 8012f54:	e000e400 	.word	0xe000e400
 8012f58:	200025b4 	.word	0x200025b4
 8012f5c:	200025b8 	.word	0x200025b8
 8012f60:	e000ed20 	.word	0xe000ed20
 8012f64:	200001bc 	.word	0x200001bc
 8012f68:	e000ef34 	.word	0xe000ef34

08012f6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012f6c:	b480      	push	{r7}
 8012f6e:	b083      	sub	sp, #12
 8012f70:	af00      	add	r7, sp, #0
	__asm volatile
 8012f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f76:	b672      	cpsid	i
 8012f78:	f383 8811 	msr	BASEPRI, r3
 8012f7c:	f3bf 8f6f 	isb	sy
 8012f80:	f3bf 8f4f 	dsb	sy
 8012f84:	b662      	cpsie	i
 8012f86:	607b      	str	r3, [r7, #4]
}
 8012f88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012f8a:	4b10      	ldr	r3, [pc, #64]	; (8012fcc <vPortEnterCritical+0x60>)
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	3301      	adds	r3, #1
 8012f90:	4a0e      	ldr	r2, [pc, #56]	; (8012fcc <vPortEnterCritical+0x60>)
 8012f92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012f94:	4b0d      	ldr	r3, [pc, #52]	; (8012fcc <vPortEnterCritical+0x60>)
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	2b01      	cmp	r3, #1
 8012f9a:	d111      	bne.n	8012fc0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012f9c:	4b0c      	ldr	r3, [pc, #48]	; (8012fd0 <vPortEnterCritical+0x64>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	b2db      	uxtb	r3, r3
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d00c      	beq.n	8012fc0 <vPortEnterCritical+0x54>
	__asm volatile
 8012fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012faa:	b672      	cpsid	i
 8012fac:	f383 8811 	msr	BASEPRI, r3
 8012fb0:	f3bf 8f6f 	isb	sy
 8012fb4:	f3bf 8f4f 	dsb	sy
 8012fb8:	b662      	cpsie	i
 8012fba:	603b      	str	r3, [r7, #0]
}
 8012fbc:	bf00      	nop
 8012fbe:	e7fe      	b.n	8012fbe <vPortEnterCritical+0x52>
	}
}
 8012fc0:	bf00      	nop
 8012fc2:	370c      	adds	r7, #12
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fca:	4770      	bx	lr
 8012fcc:	200001bc 	.word	0x200001bc
 8012fd0:	e000ed04 	.word	0xe000ed04

08012fd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012fd4:	b480      	push	{r7}
 8012fd6:	b083      	sub	sp, #12
 8012fd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012fda:	4b13      	ldr	r3, [pc, #76]	; (8013028 <vPortExitCritical+0x54>)
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d10c      	bne.n	8012ffc <vPortExitCritical+0x28>
	__asm volatile
 8012fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fe6:	b672      	cpsid	i
 8012fe8:	f383 8811 	msr	BASEPRI, r3
 8012fec:	f3bf 8f6f 	isb	sy
 8012ff0:	f3bf 8f4f 	dsb	sy
 8012ff4:	b662      	cpsie	i
 8012ff6:	607b      	str	r3, [r7, #4]
}
 8012ff8:	bf00      	nop
 8012ffa:	e7fe      	b.n	8012ffa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8012ffc:	4b0a      	ldr	r3, [pc, #40]	; (8013028 <vPortExitCritical+0x54>)
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	3b01      	subs	r3, #1
 8013002:	4a09      	ldr	r2, [pc, #36]	; (8013028 <vPortExitCritical+0x54>)
 8013004:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013006:	4b08      	ldr	r3, [pc, #32]	; (8013028 <vPortExitCritical+0x54>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d105      	bne.n	801301a <vPortExitCritical+0x46>
 801300e:	2300      	movs	r3, #0
 8013010:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	f383 8811 	msr	BASEPRI, r3
}
 8013018:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801301a:	bf00      	nop
 801301c:	370c      	adds	r7, #12
 801301e:	46bd      	mov	sp, r7
 8013020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013024:	4770      	bx	lr
 8013026:	bf00      	nop
 8013028:	200001bc 	.word	0x200001bc
 801302c:	00000000 	.word	0x00000000

08013030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013030:	f3ef 8009 	mrs	r0, PSP
 8013034:	f3bf 8f6f 	isb	sy
 8013038:	4b15      	ldr	r3, [pc, #84]	; (8013090 <pxCurrentTCBConst>)
 801303a:	681a      	ldr	r2, [r3, #0]
 801303c:	f01e 0f10 	tst.w	lr, #16
 8013040:	bf08      	it	eq
 8013042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801304a:	6010      	str	r0, [r2, #0]
 801304c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013050:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013054:	b672      	cpsid	i
 8013056:	f380 8811 	msr	BASEPRI, r0
 801305a:	f3bf 8f4f 	dsb	sy
 801305e:	f3bf 8f6f 	isb	sy
 8013062:	b662      	cpsie	i
 8013064:	f7fe feac 	bl	8011dc0 <vTaskSwitchContext>
 8013068:	f04f 0000 	mov.w	r0, #0
 801306c:	f380 8811 	msr	BASEPRI, r0
 8013070:	bc09      	pop	{r0, r3}
 8013072:	6819      	ldr	r1, [r3, #0]
 8013074:	6808      	ldr	r0, [r1, #0]
 8013076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801307a:	f01e 0f10 	tst.w	lr, #16
 801307e:	bf08      	it	eq
 8013080:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013084:	f380 8809 	msr	PSP, r0
 8013088:	f3bf 8f6f 	isb	sy
 801308c:	4770      	bx	lr
 801308e:	bf00      	nop

08013090 <pxCurrentTCBConst>:
 8013090:	20001f88 	.word	0x20001f88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013094:	bf00      	nop
 8013096:	bf00      	nop

08013098 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b082      	sub	sp, #8
 801309c:	af00      	add	r7, sp, #0
	__asm volatile
 801309e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130a2:	b672      	cpsid	i
 80130a4:	f383 8811 	msr	BASEPRI, r3
 80130a8:	f3bf 8f6f 	isb	sy
 80130ac:	f3bf 8f4f 	dsb	sy
 80130b0:	b662      	cpsie	i
 80130b2:	607b      	str	r3, [r7, #4]
}
 80130b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80130b6:	f7fe fdc7 	bl	8011c48 <xTaskIncrementTick>
 80130ba:	4603      	mov	r3, r0
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d003      	beq.n	80130c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80130c0:	4b06      	ldr	r3, [pc, #24]	; (80130dc <SysTick_Handler+0x44>)
 80130c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130c6:	601a      	str	r2, [r3, #0]
 80130c8:	2300      	movs	r3, #0
 80130ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80130cc:	683b      	ldr	r3, [r7, #0]
 80130ce:	f383 8811 	msr	BASEPRI, r3
}
 80130d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80130d4:	bf00      	nop
 80130d6:	3708      	adds	r7, #8
 80130d8:	46bd      	mov	sp, r7
 80130da:	bd80      	pop	{r7, pc}
 80130dc:	e000ed04 	.word	0xe000ed04

080130e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80130e0:	b480      	push	{r7}
 80130e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80130e4:	4b0b      	ldr	r3, [pc, #44]	; (8013114 <vPortSetupTimerInterrupt+0x34>)
 80130e6:	2200      	movs	r2, #0
 80130e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80130ea:	4b0b      	ldr	r3, [pc, #44]	; (8013118 <vPortSetupTimerInterrupt+0x38>)
 80130ec:	2200      	movs	r2, #0
 80130ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80130f0:	4b0a      	ldr	r3, [pc, #40]	; (801311c <vPortSetupTimerInterrupt+0x3c>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	4a0a      	ldr	r2, [pc, #40]	; (8013120 <vPortSetupTimerInterrupt+0x40>)
 80130f6:	fba2 2303 	umull	r2, r3, r2, r3
 80130fa:	099b      	lsrs	r3, r3, #6
 80130fc:	4a09      	ldr	r2, [pc, #36]	; (8013124 <vPortSetupTimerInterrupt+0x44>)
 80130fe:	3b01      	subs	r3, #1
 8013100:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013102:	4b04      	ldr	r3, [pc, #16]	; (8013114 <vPortSetupTimerInterrupt+0x34>)
 8013104:	2207      	movs	r2, #7
 8013106:	601a      	str	r2, [r3, #0]
}
 8013108:	bf00      	nop
 801310a:	46bd      	mov	sp, r7
 801310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013110:	4770      	bx	lr
 8013112:	bf00      	nop
 8013114:	e000e010 	.word	0xe000e010
 8013118:	e000e018 	.word	0xe000e018
 801311c:	20000058 	.word	0x20000058
 8013120:	10624dd3 	.word	0x10624dd3
 8013124:	e000e014 	.word	0xe000e014

08013128 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013128:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013138 <vPortEnableVFP+0x10>
 801312c:	6801      	ldr	r1, [r0, #0]
 801312e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013132:	6001      	str	r1, [r0, #0]
 8013134:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013136:	bf00      	nop
 8013138:	e000ed88 	.word	0xe000ed88

0801313c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801313c:	b480      	push	{r7}
 801313e:	b085      	sub	sp, #20
 8013140:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013142:	f3ef 8305 	mrs	r3, IPSR
 8013146:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	2b0f      	cmp	r3, #15
 801314c:	d916      	bls.n	801317c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801314e:	4a19      	ldr	r2, [pc, #100]	; (80131b4 <vPortValidateInterruptPriority+0x78>)
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	4413      	add	r3, r2
 8013154:	781b      	ldrb	r3, [r3, #0]
 8013156:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013158:	4b17      	ldr	r3, [pc, #92]	; (80131b8 <vPortValidateInterruptPriority+0x7c>)
 801315a:	781b      	ldrb	r3, [r3, #0]
 801315c:	7afa      	ldrb	r2, [r7, #11]
 801315e:	429a      	cmp	r2, r3
 8013160:	d20c      	bcs.n	801317c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8013162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013166:	b672      	cpsid	i
 8013168:	f383 8811 	msr	BASEPRI, r3
 801316c:	f3bf 8f6f 	isb	sy
 8013170:	f3bf 8f4f 	dsb	sy
 8013174:	b662      	cpsie	i
 8013176:	607b      	str	r3, [r7, #4]
}
 8013178:	bf00      	nop
 801317a:	e7fe      	b.n	801317a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801317c:	4b0f      	ldr	r3, [pc, #60]	; (80131bc <vPortValidateInterruptPriority+0x80>)
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013184:	4b0e      	ldr	r3, [pc, #56]	; (80131c0 <vPortValidateInterruptPriority+0x84>)
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	429a      	cmp	r2, r3
 801318a:	d90c      	bls.n	80131a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013190:	b672      	cpsid	i
 8013192:	f383 8811 	msr	BASEPRI, r3
 8013196:	f3bf 8f6f 	isb	sy
 801319a:	f3bf 8f4f 	dsb	sy
 801319e:	b662      	cpsie	i
 80131a0:	603b      	str	r3, [r7, #0]
}
 80131a2:	bf00      	nop
 80131a4:	e7fe      	b.n	80131a4 <vPortValidateInterruptPriority+0x68>
	}
 80131a6:	bf00      	nop
 80131a8:	3714      	adds	r7, #20
 80131aa:	46bd      	mov	sp, r7
 80131ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b0:	4770      	bx	lr
 80131b2:	bf00      	nop
 80131b4:	e000e3f0 	.word	0xe000e3f0
 80131b8:	200025b4 	.word	0x200025b4
 80131bc:	e000ed0c 	.word	0xe000ed0c
 80131c0:	200025b8 	.word	0x200025b8

080131c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b08a      	sub	sp, #40	; 0x28
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80131cc:	2300      	movs	r3, #0
 80131ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80131d0:	f7fe fc7c 	bl	8011acc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80131d4:	4b5b      	ldr	r3, [pc, #364]	; (8013344 <pvPortMalloc+0x180>)
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d101      	bne.n	80131e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80131dc:	f000 f91a 	bl	8013414 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80131e0:	4b59      	ldr	r3, [pc, #356]	; (8013348 <pvPortMalloc+0x184>)
 80131e2:	681a      	ldr	r2, [r3, #0]
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	4013      	ands	r3, r2
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	f040 8092 	bne.w	8013312 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d01f      	beq.n	8013234 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80131f4:	2208      	movs	r2, #8
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	4413      	add	r3, r2
 80131fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	f003 0307 	and.w	r3, r3, #7
 8013202:	2b00      	cmp	r3, #0
 8013204:	d016      	beq.n	8013234 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	f023 0307 	bic.w	r3, r3, #7
 801320c:	3308      	adds	r3, #8
 801320e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	f003 0307 	and.w	r3, r3, #7
 8013216:	2b00      	cmp	r3, #0
 8013218:	d00c      	beq.n	8013234 <pvPortMalloc+0x70>
	__asm volatile
 801321a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801321e:	b672      	cpsid	i
 8013220:	f383 8811 	msr	BASEPRI, r3
 8013224:	f3bf 8f6f 	isb	sy
 8013228:	f3bf 8f4f 	dsb	sy
 801322c:	b662      	cpsie	i
 801322e:	617b      	str	r3, [r7, #20]
}
 8013230:	bf00      	nop
 8013232:	e7fe      	b.n	8013232 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d06b      	beq.n	8013312 <pvPortMalloc+0x14e>
 801323a:	4b44      	ldr	r3, [pc, #272]	; (801334c <pvPortMalloc+0x188>)
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	687a      	ldr	r2, [r7, #4]
 8013240:	429a      	cmp	r2, r3
 8013242:	d866      	bhi.n	8013312 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013244:	4b42      	ldr	r3, [pc, #264]	; (8013350 <pvPortMalloc+0x18c>)
 8013246:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013248:	4b41      	ldr	r3, [pc, #260]	; (8013350 <pvPortMalloc+0x18c>)
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801324e:	e004      	b.n	801325a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8013250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013252:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801325c:	685b      	ldr	r3, [r3, #4]
 801325e:	687a      	ldr	r2, [r7, #4]
 8013260:	429a      	cmp	r2, r3
 8013262:	d903      	bls.n	801326c <pvPortMalloc+0xa8>
 8013264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d1f1      	bne.n	8013250 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801326c:	4b35      	ldr	r3, [pc, #212]	; (8013344 <pvPortMalloc+0x180>)
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013272:	429a      	cmp	r2, r3
 8013274:	d04d      	beq.n	8013312 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013276:	6a3b      	ldr	r3, [r7, #32]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	2208      	movs	r2, #8
 801327c:	4413      	add	r3, r2
 801327e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013282:	681a      	ldr	r2, [r3, #0]
 8013284:	6a3b      	ldr	r3, [r7, #32]
 8013286:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801328a:	685a      	ldr	r2, [r3, #4]
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	1ad2      	subs	r2, r2, r3
 8013290:	2308      	movs	r3, #8
 8013292:	005b      	lsls	r3, r3, #1
 8013294:	429a      	cmp	r2, r3
 8013296:	d921      	bls.n	80132dc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	4413      	add	r3, r2
 801329e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80132a0:	69bb      	ldr	r3, [r7, #24]
 80132a2:	f003 0307 	and.w	r3, r3, #7
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d00c      	beq.n	80132c4 <pvPortMalloc+0x100>
	__asm volatile
 80132aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ae:	b672      	cpsid	i
 80132b0:	f383 8811 	msr	BASEPRI, r3
 80132b4:	f3bf 8f6f 	isb	sy
 80132b8:	f3bf 8f4f 	dsb	sy
 80132bc:	b662      	cpsie	i
 80132be:	613b      	str	r3, [r7, #16]
}
 80132c0:	bf00      	nop
 80132c2:	e7fe      	b.n	80132c2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80132c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132c6:	685a      	ldr	r2, [r3, #4]
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	1ad2      	subs	r2, r2, r3
 80132cc:	69bb      	ldr	r3, [r7, #24]
 80132ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80132d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132d2:	687a      	ldr	r2, [r7, #4]
 80132d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80132d6:	69b8      	ldr	r0, [r7, #24]
 80132d8:	f000 f8fe 	bl	80134d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80132dc:	4b1b      	ldr	r3, [pc, #108]	; (801334c <pvPortMalloc+0x188>)
 80132de:	681a      	ldr	r2, [r3, #0]
 80132e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132e2:	685b      	ldr	r3, [r3, #4]
 80132e4:	1ad3      	subs	r3, r2, r3
 80132e6:	4a19      	ldr	r2, [pc, #100]	; (801334c <pvPortMalloc+0x188>)
 80132e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80132ea:	4b18      	ldr	r3, [pc, #96]	; (801334c <pvPortMalloc+0x188>)
 80132ec:	681a      	ldr	r2, [r3, #0]
 80132ee:	4b19      	ldr	r3, [pc, #100]	; (8013354 <pvPortMalloc+0x190>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	429a      	cmp	r2, r3
 80132f4:	d203      	bcs.n	80132fe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80132f6:	4b15      	ldr	r3, [pc, #84]	; (801334c <pvPortMalloc+0x188>)
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	4a16      	ldr	r2, [pc, #88]	; (8013354 <pvPortMalloc+0x190>)
 80132fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80132fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013300:	685a      	ldr	r2, [r3, #4]
 8013302:	4b11      	ldr	r3, [pc, #68]	; (8013348 <pvPortMalloc+0x184>)
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	431a      	orrs	r2, r3
 8013308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801330a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801330e:	2200      	movs	r2, #0
 8013310:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013312:	f7fe fbe9 	bl	8011ae8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013316:	69fb      	ldr	r3, [r7, #28]
 8013318:	f003 0307 	and.w	r3, r3, #7
 801331c:	2b00      	cmp	r3, #0
 801331e:	d00c      	beq.n	801333a <pvPortMalloc+0x176>
	__asm volatile
 8013320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013324:	b672      	cpsid	i
 8013326:	f383 8811 	msr	BASEPRI, r3
 801332a:	f3bf 8f6f 	isb	sy
 801332e:	f3bf 8f4f 	dsb	sy
 8013332:	b662      	cpsie	i
 8013334:	60fb      	str	r3, [r7, #12]
}
 8013336:	bf00      	nop
 8013338:	e7fe      	b.n	8013338 <pvPortMalloc+0x174>
	return pvReturn;
 801333a:	69fb      	ldr	r3, [r7, #28]
}
 801333c:	4618      	mov	r0, r3
 801333e:	3728      	adds	r7, #40	; 0x28
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}
 8013344:	200061c4 	.word	0x200061c4
 8013348:	200061d0 	.word	0x200061d0
 801334c:	200061c8 	.word	0x200061c8
 8013350:	200061bc 	.word	0x200061bc
 8013354:	200061cc 	.word	0x200061cc

08013358 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b086      	sub	sp, #24
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d04c      	beq.n	8013404 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801336a:	2308      	movs	r3, #8
 801336c:	425b      	negs	r3, r3
 801336e:	697a      	ldr	r2, [r7, #20]
 8013370:	4413      	add	r3, r2
 8013372:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013374:	697b      	ldr	r3, [r7, #20]
 8013376:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	685a      	ldr	r2, [r3, #4]
 801337c:	4b23      	ldr	r3, [pc, #140]	; (801340c <vPortFree+0xb4>)
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	4013      	ands	r3, r2
 8013382:	2b00      	cmp	r3, #0
 8013384:	d10c      	bne.n	80133a0 <vPortFree+0x48>
	__asm volatile
 8013386:	f04f 0350 	mov.w	r3, #80	; 0x50
 801338a:	b672      	cpsid	i
 801338c:	f383 8811 	msr	BASEPRI, r3
 8013390:	f3bf 8f6f 	isb	sy
 8013394:	f3bf 8f4f 	dsb	sy
 8013398:	b662      	cpsie	i
 801339a:	60fb      	str	r3, [r7, #12]
}
 801339c:	bf00      	nop
 801339e:	e7fe      	b.n	801339e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80133a0:	693b      	ldr	r3, [r7, #16]
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d00c      	beq.n	80133c2 <vPortFree+0x6a>
	__asm volatile
 80133a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133ac:	b672      	cpsid	i
 80133ae:	f383 8811 	msr	BASEPRI, r3
 80133b2:	f3bf 8f6f 	isb	sy
 80133b6:	f3bf 8f4f 	dsb	sy
 80133ba:	b662      	cpsie	i
 80133bc:	60bb      	str	r3, [r7, #8]
}
 80133be:	bf00      	nop
 80133c0:	e7fe      	b.n	80133c0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80133c2:	693b      	ldr	r3, [r7, #16]
 80133c4:	685a      	ldr	r2, [r3, #4]
 80133c6:	4b11      	ldr	r3, [pc, #68]	; (801340c <vPortFree+0xb4>)
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	4013      	ands	r3, r2
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d019      	beq.n	8013404 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80133d0:	693b      	ldr	r3, [r7, #16]
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d115      	bne.n	8013404 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80133d8:	693b      	ldr	r3, [r7, #16]
 80133da:	685a      	ldr	r2, [r3, #4]
 80133dc:	4b0b      	ldr	r3, [pc, #44]	; (801340c <vPortFree+0xb4>)
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	43db      	mvns	r3, r3
 80133e2:	401a      	ands	r2, r3
 80133e4:	693b      	ldr	r3, [r7, #16]
 80133e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80133e8:	f7fe fb70 	bl	8011acc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80133ec:	693b      	ldr	r3, [r7, #16]
 80133ee:	685a      	ldr	r2, [r3, #4]
 80133f0:	4b07      	ldr	r3, [pc, #28]	; (8013410 <vPortFree+0xb8>)
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	4413      	add	r3, r2
 80133f6:	4a06      	ldr	r2, [pc, #24]	; (8013410 <vPortFree+0xb8>)
 80133f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80133fa:	6938      	ldr	r0, [r7, #16]
 80133fc:	f000 f86c 	bl	80134d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013400:	f7fe fb72 	bl	8011ae8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013404:	bf00      	nop
 8013406:	3718      	adds	r7, #24
 8013408:	46bd      	mov	sp, r7
 801340a:	bd80      	pop	{r7, pc}
 801340c:	200061d0 	.word	0x200061d0
 8013410:	200061c8 	.word	0x200061c8

08013414 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013414:	b480      	push	{r7}
 8013416:	b085      	sub	sp, #20
 8013418:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801341a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801341e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013420:	4b27      	ldr	r3, [pc, #156]	; (80134c0 <prvHeapInit+0xac>)
 8013422:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	f003 0307 	and.w	r3, r3, #7
 801342a:	2b00      	cmp	r3, #0
 801342c:	d00c      	beq.n	8013448 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	3307      	adds	r3, #7
 8013432:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	f023 0307 	bic.w	r3, r3, #7
 801343a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801343c:	68ba      	ldr	r2, [r7, #8]
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	1ad3      	subs	r3, r2, r3
 8013442:	4a1f      	ldr	r2, [pc, #124]	; (80134c0 <prvHeapInit+0xac>)
 8013444:	4413      	add	r3, r2
 8013446:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801344c:	4a1d      	ldr	r2, [pc, #116]	; (80134c4 <prvHeapInit+0xb0>)
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013452:	4b1c      	ldr	r3, [pc, #112]	; (80134c4 <prvHeapInit+0xb0>)
 8013454:	2200      	movs	r2, #0
 8013456:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	68ba      	ldr	r2, [r7, #8]
 801345c:	4413      	add	r3, r2
 801345e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013460:	2208      	movs	r2, #8
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	1a9b      	subs	r3, r3, r2
 8013466:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	f023 0307 	bic.w	r3, r3, #7
 801346e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	4a15      	ldr	r2, [pc, #84]	; (80134c8 <prvHeapInit+0xb4>)
 8013474:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013476:	4b14      	ldr	r3, [pc, #80]	; (80134c8 <prvHeapInit+0xb4>)
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	2200      	movs	r2, #0
 801347c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801347e:	4b12      	ldr	r3, [pc, #72]	; (80134c8 <prvHeapInit+0xb4>)
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	2200      	movs	r2, #0
 8013484:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801348a:	683b      	ldr	r3, [r7, #0]
 801348c:	68fa      	ldr	r2, [r7, #12]
 801348e:	1ad2      	subs	r2, r2, r3
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013494:	4b0c      	ldr	r3, [pc, #48]	; (80134c8 <prvHeapInit+0xb4>)
 8013496:	681a      	ldr	r2, [r3, #0]
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801349c:	683b      	ldr	r3, [r7, #0]
 801349e:	685b      	ldr	r3, [r3, #4]
 80134a0:	4a0a      	ldr	r2, [pc, #40]	; (80134cc <prvHeapInit+0xb8>)
 80134a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	685b      	ldr	r3, [r3, #4]
 80134a8:	4a09      	ldr	r2, [pc, #36]	; (80134d0 <prvHeapInit+0xbc>)
 80134aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80134ac:	4b09      	ldr	r3, [pc, #36]	; (80134d4 <prvHeapInit+0xc0>)
 80134ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80134b2:	601a      	str	r2, [r3, #0]
}
 80134b4:	bf00      	nop
 80134b6:	3714      	adds	r7, #20
 80134b8:	46bd      	mov	sp, r7
 80134ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134be:	4770      	bx	lr
 80134c0:	200025bc 	.word	0x200025bc
 80134c4:	200061bc 	.word	0x200061bc
 80134c8:	200061c4 	.word	0x200061c4
 80134cc:	200061cc 	.word	0x200061cc
 80134d0:	200061c8 	.word	0x200061c8
 80134d4:	200061d0 	.word	0x200061d0

080134d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80134d8:	b480      	push	{r7}
 80134da:	b085      	sub	sp, #20
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80134e0:	4b28      	ldr	r3, [pc, #160]	; (8013584 <prvInsertBlockIntoFreeList+0xac>)
 80134e2:	60fb      	str	r3, [r7, #12]
 80134e4:	e002      	b.n	80134ec <prvInsertBlockIntoFreeList+0x14>
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	60fb      	str	r3, [r7, #12]
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	687a      	ldr	r2, [r7, #4]
 80134f2:	429a      	cmp	r2, r3
 80134f4:	d8f7      	bhi.n	80134e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	685b      	ldr	r3, [r3, #4]
 80134fe:	68ba      	ldr	r2, [r7, #8]
 8013500:	4413      	add	r3, r2
 8013502:	687a      	ldr	r2, [r7, #4]
 8013504:	429a      	cmp	r2, r3
 8013506:	d108      	bne.n	801351a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	685a      	ldr	r2, [r3, #4]
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	685b      	ldr	r3, [r3, #4]
 8013510:	441a      	add	r2, r3
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	685b      	ldr	r3, [r3, #4]
 8013522:	68ba      	ldr	r2, [r7, #8]
 8013524:	441a      	add	r2, r3
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	429a      	cmp	r2, r3
 801352c:	d118      	bne.n	8013560 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	681a      	ldr	r2, [r3, #0]
 8013532:	4b15      	ldr	r3, [pc, #84]	; (8013588 <prvInsertBlockIntoFreeList+0xb0>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	429a      	cmp	r2, r3
 8013538:	d00d      	beq.n	8013556 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	685a      	ldr	r2, [r3, #4]
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	685b      	ldr	r3, [r3, #4]
 8013544:	441a      	add	r2, r3
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	681a      	ldr	r2, [r3, #0]
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	601a      	str	r2, [r3, #0]
 8013554:	e008      	b.n	8013568 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013556:	4b0c      	ldr	r3, [pc, #48]	; (8013588 <prvInsertBlockIntoFreeList+0xb0>)
 8013558:	681a      	ldr	r2, [r3, #0]
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	601a      	str	r2, [r3, #0]
 801355e:	e003      	b.n	8013568 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	681a      	ldr	r2, [r3, #0]
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013568:	68fa      	ldr	r2, [r7, #12]
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	429a      	cmp	r2, r3
 801356e:	d002      	beq.n	8013576 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	687a      	ldr	r2, [r7, #4]
 8013574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013576:	bf00      	nop
 8013578:	3714      	adds	r7, #20
 801357a:	46bd      	mov	sp, r7
 801357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013580:	4770      	bx	lr
 8013582:	bf00      	nop
 8013584:	200061bc 	.word	0x200061bc
 8013588:	200061c4 	.word	0x200061c4

0801358c <__errno>:
 801358c:	4b01      	ldr	r3, [pc, #4]	; (8013594 <__errno+0x8>)
 801358e:	6818      	ldr	r0, [r3, #0]
 8013590:	4770      	bx	lr
 8013592:	bf00      	nop
 8013594:	200001c0 	.word	0x200001c0

08013598 <std>:
 8013598:	2300      	movs	r3, #0
 801359a:	b510      	push	{r4, lr}
 801359c:	4604      	mov	r4, r0
 801359e:	e9c0 3300 	strd	r3, r3, [r0]
 80135a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80135a6:	6083      	str	r3, [r0, #8]
 80135a8:	8181      	strh	r1, [r0, #12]
 80135aa:	6643      	str	r3, [r0, #100]	; 0x64
 80135ac:	81c2      	strh	r2, [r0, #14]
 80135ae:	6183      	str	r3, [r0, #24]
 80135b0:	4619      	mov	r1, r3
 80135b2:	2208      	movs	r2, #8
 80135b4:	305c      	adds	r0, #92	; 0x5c
 80135b6:	f000 f91a 	bl	80137ee <memset>
 80135ba:	4b05      	ldr	r3, [pc, #20]	; (80135d0 <std+0x38>)
 80135bc:	6263      	str	r3, [r4, #36]	; 0x24
 80135be:	4b05      	ldr	r3, [pc, #20]	; (80135d4 <std+0x3c>)
 80135c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80135c2:	4b05      	ldr	r3, [pc, #20]	; (80135d8 <std+0x40>)
 80135c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80135c6:	4b05      	ldr	r3, [pc, #20]	; (80135dc <std+0x44>)
 80135c8:	6224      	str	r4, [r4, #32]
 80135ca:	6323      	str	r3, [r4, #48]	; 0x30
 80135cc:	bd10      	pop	{r4, pc}
 80135ce:	bf00      	nop
 80135d0:	080146f9 	.word	0x080146f9
 80135d4:	0801471b 	.word	0x0801471b
 80135d8:	08014753 	.word	0x08014753
 80135dc:	08014777 	.word	0x08014777

080135e0 <_cleanup_r>:
 80135e0:	4901      	ldr	r1, [pc, #4]	; (80135e8 <_cleanup_r+0x8>)
 80135e2:	f000 b8af 	b.w	8013744 <_fwalk_reent>
 80135e6:	bf00      	nop
 80135e8:	08016181 	.word	0x08016181

080135ec <__sfmoreglue>:
 80135ec:	b570      	push	{r4, r5, r6, lr}
 80135ee:	2268      	movs	r2, #104	; 0x68
 80135f0:	1e4d      	subs	r5, r1, #1
 80135f2:	4355      	muls	r5, r2
 80135f4:	460e      	mov	r6, r1
 80135f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80135fa:	f000 f921 	bl	8013840 <_malloc_r>
 80135fe:	4604      	mov	r4, r0
 8013600:	b140      	cbz	r0, 8013614 <__sfmoreglue+0x28>
 8013602:	2100      	movs	r1, #0
 8013604:	e9c0 1600 	strd	r1, r6, [r0]
 8013608:	300c      	adds	r0, #12
 801360a:	60a0      	str	r0, [r4, #8]
 801360c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013610:	f000 f8ed 	bl	80137ee <memset>
 8013614:	4620      	mov	r0, r4
 8013616:	bd70      	pop	{r4, r5, r6, pc}

08013618 <__sfp_lock_acquire>:
 8013618:	4801      	ldr	r0, [pc, #4]	; (8013620 <__sfp_lock_acquire+0x8>)
 801361a:	f000 b8d8 	b.w	80137ce <__retarget_lock_acquire_recursive>
 801361e:	bf00      	nop
 8013620:	200061d5 	.word	0x200061d5

08013624 <__sfp_lock_release>:
 8013624:	4801      	ldr	r0, [pc, #4]	; (801362c <__sfp_lock_release+0x8>)
 8013626:	f000 b8d3 	b.w	80137d0 <__retarget_lock_release_recursive>
 801362a:	bf00      	nop
 801362c:	200061d5 	.word	0x200061d5

08013630 <__sinit_lock_acquire>:
 8013630:	4801      	ldr	r0, [pc, #4]	; (8013638 <__sinit_lock_acquire+0x8>)
 8013632:	f000 b8cc 	b.w	80137ce <__retarget_lock_acquire_recursive>
 8013636:	bf00      	nop
 8013638:	200061d6 	.word	0x200061d6

0801363c <__sinit_lock_release>:
 801363c:	4801      	ldr	r0, [pc, #4]	; (8013644 <__sinit_lock_release+0x8>)
 801363e:	f000 b8c7 	b.w	80137d0 <__retarget_lock_release_recursive>
 8013642:	bf00      	nop
 8013644:	200061d6 	.word	0x200061d6

08013648 <__sinit>:
 8013648:	b510      	push	{r4, lr}
 801364a:	4604      	mov	r4, r0
 801364c:	f7ff fff0 	bl	8013630 <__sinit_lock_acquire>
 8013650:	69a3      	ldr	r3, [r4, #24]
 8013652:	b11b      	cbz	r3, 801365c <__sinit+0x14>
 8013654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013658:	f7ff bff0 	b.w	801363c <__sinit_lock_release>
 801365c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013660:	6523      	str	r3, [r4, #80]	; 0x50
 8013662:	4b13      	ldr	r3, [pc, #76]	; (80136b0 <__sinit+0x68>)
 8013664:	4a13      	ldr	r2, [pc, #76]	; (80136b4 <__sinit+0x6c>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	62a2      	str	r2, [r4, #40]	; 0x28
 801366a:	42a3      	cmp	r3, r4
 801366c:	bf04      	itt	eq
 801366e:	2301      	moveq	r3, #1
 8013670:	61a3      	streq	r3, [r4, #24]
 8013672:	4620      	mov	r0, r4
 8013674:	f000 f820 	bl	80136b8 <__sfp>
 8013678:	6060      	str	r0, [r4, #4]
 801367a:	4620      	mov	r0, r4
 801367c:	f000 f81c 	bl	80136b8 <__sfp>
 8013680:	60a0      	str	r0, [r4, #8]
 8013682:	4620      	mov	r0, r4
 8013684:	f000 f818 	bl	80136b8 <__sfp>
 8013688:	2200      	movs	r2, #0
 801368a:	60e0      	str	r0, [r4, #12]
 801368c:	2104      	movs	r1, #4
 801368e:	6860      	ldr	r0, [r4, #4]
 8013690:	f7ff ff82 	bl	8013598 <std>
 8013694:	68a0      	ldr	r0, [r4, #8]
 8013696:	2201      	movs	r2, #1
 8013698:	2109      	movs	r1, #9
 801369a:	f7ff ff7d 	bl	8013598 <std>
 801369e:	68e0      	ldr	r0, [r4, #12]
 80136a0:	2202      	movs	r2, #2
 80136a2:	2112      	movs	r1, #18
 80136a4:	f7ff ff78 	bl	8013598 <std>
 80136a8:	2301      	movs	r3, #1
 80136aa:	61a3      	str	r3, [r4, #24]
 80136ac:	e7d2      	b.n	8013654 <__sinit+0xc>
 80136ae:	bf00      	nop
 80136b0:	08018730 	.word	0x08018730
 80136b4:	080135e1 	.word	0x080135e1

080136b8 <__sfp>:
 80136b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136ba:	4607      	mov	r7, r0
 80136bc:	f7ff ffac 	bl	8013618 <__sfp_lock_acquire>
 80136c0:	4b1e      	ldr	r3, [pc, #120]	; (801373c <__sfp+0x84>)
 80136c2:	681e      	ldr	r6, [r3, #0]
 80136c4:	69b3      	ldr	r3, [r6, #24]
 80136c6:	b913      	cbnz	r3, 80136ce <__sfp+0x16>
 80136c8:	4630      	mov	r0, r6
 80136ca:	f7ff ffbd 	bl	8013648 <__sinit>
 80136ce:	3648      	adds	r6, #72	; 0x48
 80136d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80136d4:	3b01      	subs	r3, #1
 80136d6:	d503      	bpl.n	80136e0 <__sfp+0x28>
 80136d8:	6833      	ldr	r3, [r6, #0]
 80136da:	b30b      	cbz	r3, 8013720 <__sfp+0x68>
 80136dc:	6836      	ldr	r6, [r6, #0]
 80136de:	e7f7      	b.n	80136d0 <__sfp+0x18>
 80136e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80136e4:	b9d5      	cbnz	r5, 801371c <__sfp+0x64>
 80136e6:	4b16      	ldr	r3, [pc, #88]	; (8013740 <__sfp+0x88>)
 80136e8:	60e3      	str	r3, [r4, #12]
 80136ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80136ee:	6665      	str	r5, [r4, #100]	; 0x64
 80136f0:	f000 f86c 	bl	80137cc <__retarget_lock_init_recursive>
 80136f4:	f7ff ff96 	bl	8013624 <__sfp_lock_release>
 80136f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80136fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013700:	6025      	str	r5, [r4, #0]
 8013702:	61a5      	str	r5, [r4, #24]
 8013704:	2208      	movs	r2, #8
 8013706:	4629      	mov	r1, r5
 8013708:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801370c:	f000 f86f 	bl	80137ee <memset>
 8013710:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013714:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013718:	4620      	mov	r0, r4
 801371a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801371c:	3468      	adds	r4, #104	; 0x68
 801371e:	e7d9      	b.n	80136d4 <__sfp+0x1c>
 8013720:	2104      	movs	r1, #4
 8013722:	4638      	mov	r0, r7
 8013724:	f7ff ff62 	bl	80135ec <__sfmoreglue>
 8013728:	4604      	mov	r4, r0
 801372a:	6030      	str	r0, [r6, #0]
 801372c:	2800      	cmp	r0, #0
 801372e:	d1d5      	bne.n	80136dc <__sfp+0x24>
 8013730:	f7ff ff78 	bl	8013624 <__sfp_lock_release>
 8013734:	230c      	movs	r3, #12
 8013736:	603b      	str	r3, [r7, #0]
 8013738:	e7ee      	b.n	8013718 <__sfp+0x60>
 801373a:	bf00      	nop
 801373c:	08018730 	.word	0x08018730
 8013740:	ffff0001 	.word	0xffff0001

08013744 <_fwalk_reent>:
 8013744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013748:	4606      	mov	r6, r0
 801374a:	4688      	mov	r8, r1
 801374c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013750:	2700      	movs	r7, #0
 8013752:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013756:	f1b9 0901 	subs.w	r9, r9, #1
 801375a:	d505      	bpl.n	8013768 <_fwalk_reent+0x24>
 801375c:	6824      	ldr	r4, [r4, #0]
 801375e:	2c00      	cmp	r4, #0
 8013760:	d1f7      	bne.n	8013752 <_fwalk_reent+0xe>
 8013762:	4638      	mov	r0, r7
 8013764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013768:	89ab      	ldrh	r3, [r5, #12]
 801376a:	2b01      	cmp	r3, #1
 801376c:	d907      	bls.n	801377e <_fwalk_reent+0x3a>
 801376e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013772:	3301      	adds	r3, #1
 8013774:	d003      	beq.n	801377e <_fwalk_reent+0x3a>
 8013776:	4629      	mov	r1, r5
 8013778:	4630      	mov	r0, r6
 801377a:	47c0      	blx	r8
 801377c:	4307      	orrs	r7, r0
 801377e:	3568      	adds	r5, #104	; 0x68
 8013780:	e7e9      	b.n	8013756 <_fwalk_reent+0x12>
	...

08013784 <__libc_init_array>:
 8013784:	b570      	push	{r4, r5, r6, lr}
 8013786:	4d0d      	ldr	r5, [pc, #52]	; (80137bc <__libc_init_array+0x38>)
 8013788:	4c0d      	ldr	r4, [pc, #52]	; (80137c0 <__libc_init_array+0x3c>)
 801378a:	1b64      	subs	r4, r4, r5
 801378c:	10a4      	asrs	r4, r4, #2
 801378e:	2600      	movs	r6, #0
 8013790:	42a6      	cmp	r6, r4
 8013792:	d109      	bne.n	80137a8 <__libc_init_array+0x24>
 8013794:	4d0b      	ldr	r5, [pc, #44]	; (80137c4 <__libc_init_array+0x40>)
 8013796:	4c0c      	ldr	r4, [pc, #48]	; (80137c8 <__libc_init_array+0x44>)
 8013798:	f004 fd24 	bl	80181e4 <_init>
 801379c:	1b64      	subs	r4, r4, r5
 801379e:	10a4      	asrs	r4, r4, #2
 80137a0:	2600      	movs	r6, #0
 80137a2:	42a6      	cmp	r6, r4
 80137a4:	d105      	bne.n	80137b2 <__libc_init_array+0x2e>
 80137a6:	bd70      	pop	{r4, r5, r6, pc}
 80137a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80137ac:	4798      	blx	r3
 80137ae:	3601      	adds	r6, #1
 80137b0:	e7ee      	b.n	8013790 <__libc_init_array+0xc>
 80137b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80137b6:	4798      	blx	r3
 80137b8:	3601      	adds	r6, #1
 80137ba:	e7f2      	b.n	80137a2 <__libc_init_array+0x1e>
 80137bc:	08018df8 	.word	0x08018df8
 80137c0:	08018df8 	.word	0x08018df8
 80137c4:	08018df8 	.word	0x08018df8
 80137c8:	08018dfc 	.word	0x08018dfc

080137cc <__retarget_lock_init_recursive>:
 80137cc:	4770      	bx	lr

080137ce <__retarget_lock_acquire_recursive>:
 80137ce:	4770      	bx	lr

080137d0 <__retarget_lock_release_recursive>:
 80137d0:	4770      	bx	lr

080137d2 <memcpy>:
 80137d2:	440a      	add	r2, r1
 80137d4:	4291      	cmp	r1, r2
 80137d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80137da:	d100      	bne.n	80137de <memcpy+0xc>
 80137dc:	4770      	bx	lr
 80137de:	b510      	push	{r4, lr}
 80137e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80137e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80137e8:	4291      	cmp	r1, r2
 80137ea:	d1f9      	bne.n	80137e0 <memcpy+0xe>
 80137ec:	bd10      	pop	{r4, pc}

080137ee <memset>:
 80137ee:	4402      	add	r2, r0
 80137f0:	4603      	mov	r3, r0
 80137f2:	4293      	cmp	r3, r2
 80137f4:	d100      	bne.n	80137f8 <memset+0xa>
 80137f6:	4770      	bx	lr
 80137f8:	f803 1b01 	strb.w	r1, [r3], #1
 80137fc:	e7f9      	b.n	80137f2 <memset+0x4>
	...

08013800 <sbrk_aligned>:
 8013800:	b570      	push	{r4, r5, r6, lr}
 8013802:	4e0e      	ldr	r6, [pc, #56]	; (801383c <sbrk_aligned+0x3c>)
 8013804:	460c      	mov	r4, r1
 8013806:	6831      	ldr	r1, [r6, #0]
 8013808:	4605      	mov	r5, r0
 801380a:	b911      	cbnz	r1, 8013812 <sbrk_aligned+0x12>
 801380c:	f000 ff3e 	bl	801468c <_sbrk_r>
 8013810:	6030      	str	r0, [r6, #0]
 8013812:	4621      	mov	r1, r4
 8013814:	4628      	mov	r0, r5
 8013816:	f000 ff39 	bl	801468c <_sbrk_r>
 801381a:	1c43      	adds	r3, r0, #1
 801381c:	d00a      	beq.n	8013834 <sbrk_aligned+0x34>
 801381e:	1cc4      	adds	r4, r0, #3
 8013820:	f024 0403 	bic.w	r4, r4, #3
 8013824:	42a0      	cmp	r0, r4
 8013826:	d007      	beq.n	8013838 <sbrk_aligned+0x38>
 8013828:	1a21      	subs	r1, r4, r0
 801382a:	4628      	mov	r0, r5
 801382c:	f000 ff2e 	bl	801468c <_sbrk_r>
 8013830:	3001      	adds	r0, #1
 8013832:	d101      	bne.n	8013838 <sbrk_aligned+0x38>
 8013834:	f04f 34ff 	mov.w	r4, #4294967295
 8013838:	4620      	mov	r0, r4
 801383a:	bd70      	pop	{r4, r5, r6, pc}
 801383c:	200061dc 	.word	0x200061dc

08013840 <_malloc_r>:
 8013840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013844:	1ccd      	adds	r5, r1, #3
 8013846:	f025 0503 	bic.w	r5, r5, #3
 801384a:	3508      	adds	r5, #8
 801384c:	2d0c      	cmp	r5, #12
 801384e:	bf38      	it	cc
 8013850:	250c      	movcc	r5, #12
 8013852:	2d00      	cmp	r5, #0
 8013854:	4607      	mov	r7, r0
 8013856:	db01      	blt.n	801385c <_malloc_r+0x1c>
 8013858:	42a9      	cmp	r1, r5
 801385a:	d905      	bls.n	8013868 <_malloc_r+0x28>
 801385c:	230c      	movs	r3, #12
 801385e:	603b      	str	r3, [r7, #0]
 8013860:	2600      	movs	r6, #0
 8013862:	4630      	mov	r0, r6
 8013864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013868:	4e2e      	ldr	r6, [pc, #184]	; (8013924 <_malloc_r+0xe4>)
 801386a:	f003 f865 	bl	8016938 <__malloc_lock>
 801386e:	6833      	ldr	r3, [r6, #0]
 8013870:	461c      	mov	r4, r3
 8013872:	bb34      	cbnz	r4, 80138c2 <_malloc_r+0x82>
 8013874:	4629      	mov	r1, r5
 8013876:	4638      	mov	r0, r7
 8013878:	f7ff ffc2 	bl	8013800 <sbrk_aligned>
 801387c:	1c43      	adds	r3, r0, #1
 801387e:	4604      	mov	r4, r0
 8013880:	d14d      	bne.n	801391e <_malloc_r+0xde>
 8013882:	6834      	ldr	r4, [r6, #0]
 8013884:	4626      	mov	r6, r4
 8013886:	2e00      	cmp	r6, #0
 8013888:	d140      	bne.n	801390c <_malloc_r+0xcc>
 801388a:	6823      	ldr	r3, [r4, #0]
 801388c:	4631      	mov	r1, r6
 801388e:	4638      	mov	r0, r7
 8013890:	eb04 0803 	add.w	r8, r4, r3
 8013894:	f000 fefa 	bl	801468c <_sbrk_r>
 8013898:	4580      	cmp	r8, r0
 801389a:	d13a      	bne.n	8013912 <_malloc_r+0xd2>
 801389c:	6821      	ldr	r1, [r4, #0]
 801389e:	3503      	adds	r5, #3
 80138a0:	1a6d      	subs	r5, r5, r1
 80138a2:	f025 0503 	bic.w	r5, r5, #3
 80138a6:	3508      	adds	r5, #8
 80138a8:	2d0c      	cmp	r5, #12
 80138aa:	bf38      	it	cc
 80138ac:	250c      	movcc	r5, #12
 80138ae:	4629      	mov	r1, r5
 80138b0:	4638      	mov	r0, r7
 80138b2:	f7ff ffa5 	bl	8013800 <sbrk_aligned>
 80138b6:	3001      	adds	r0, #1
 80138b8:	d02b      	beq.n	8013912 <_malloc_r+0xd2>
 80138ba:	6823      	ldr	r3, [r4, #0]
 80138bc:	442b      	add	r3, r5
 80138be:	6023      	str	r3, [r4, #0]
 80138c0:	e00e      	b.n	80138e0 <_malloc_r+0xa0>
 80138c2:	6822      	ldr	r2, [r4, #0]
 80138c4:	1b52      	subs	r2, r2, r5
 80138c6:	d41e      	bmi.n	8013906 <_malloc_r+0xc6>
 80138c8:	2a0b      	cmp	r2, #11
 80138ca:	d916      	bls.n	80138fa <_malloc_r+0xba>
 80138cc:	1961      	adds	r1, r4, r5
 80138ce:	42a3      	cmp	r3, r4
 80138d0:	6025      	str	r5, [r4, #0]
 80138d2:	bf18      	it	ne
 80138d4:	6059      	strne	r1, [r3, #4]
 80138d6:	6863      	ldr	r3, [r4, #4]
 80138d8:	bf08      	it	eq
 80138da:	6031      	streq	r1, [r6, #0]
 80138dc:	5162      	str	r2, [r4, r5]
 80138de:	604b      	str	r3, [r1, #4]
 80138e0:	4638      	mov	r0, r7
 80138e2:	f104 060b 	add.w	r6, r4, #11
 80138e6:	f003 f82d 	bl	8016944 <__malloc_unlock>
 80138ea:	f026 0607 	bic.w	r6, r6, #7
 80138ee:	1d23      	adds	r3, r4, #4
 80138f0:	1af2      	subs	r2, r6, r3
 80138f2:	d0b6      	beq.n	8013862 <_malloc_r+0x22>
 80138f4:	1b9b      	subs	r3, r3, r6
 80138f6:	50a3      	str	r3, [r4, r2]
 80138f8:	e7b3      	b.n	8013862 <_malloc_r+0x22>
 80138fa:	6862      	ldr	r2, [r4, #4]
 80138fc:	42a3      	cmp	r3, r4
 80138fe:	bf0c      	ite	eq
 8013900:	6032      	streq	r2, [r6, #0]
 8013902:	605a      	strne	r2, [r3, #4]
 8013904:	e7ec      	b.n	80138e0 <_malloc_r+0xa0>
 8013906:	4623      	mov	r3, r4
 8013908:	6864      	ldr	r4, [r4, #4]
 801390a:	e7b2      	b.n	8013872 <_malloc_r+0x32>
 801390c:	4634      	mov	r4, r6
 801390e:	6876      	ldr	r6, [r6, #4]
 8013910:	e7b9      	b.n	8013886 <_malloc_r+0x46>
 8013912:	230c      	movs	r3, #12
 8013914:	603b      	str	r3, [r7, #0]
 8013916:	4638      	mov	r0, r7
 8013918:	f003 f814 	bl	8016944 <__malloc_unlock>
 801391c:	e7a1      	b.n	8013862 <_malloc_r+0x22>
 801391e:	6025      	str	r5, [r4, #0]
 8013920:	e7de      	b.n	80138e0 <_malloc_r+0xa0>
 8013922:	bf00      	nop
 8013924:	200061d8 	.word	0x200061d8

08013928 <__cvt>:
 8013928:	b5f0      	push	{r4, r5, r6, r7, lr}
 801392a:	ed2d 8b02 	vpush	{d8}
 801392e:	eeb0 8b40 	vmov.f64	d8, d0
 8013932:	b085      	sub	sp, #20
 8013934:	4617      	mov	r7, r2
 8013936:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8013938:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801393a:	ee18 2a90 	vmov	r2, s17
 801393e:	f025 0520 	bic.w	r5, r5, #32
 8013942:	2a00      	cmp	r2, #0
 8013944:	bfb6      	itet	lt
 8013946:	222d      	movlt	r2, #45	; 0x2d
 8013948:	2200      	movge	r2, #0
 801394a:	eeb1 8b40 	vneglt.f64	d8, d0
 801394e:	2d46      	cmp	r5, #70	; 0x46
 8013950:	460c      	mov	r4, r1
 8013952:	701a      	strb	r2, [r3, #0]
 8013954:	d004      	beq.n	8013960 <__cvt+0x38>
 8013956:	2d45      	cmp	r5, #69	; 0x45
 8013958:	d100      	bne.n	801395c <__cvt+0x34>
 801395a:	3401      	adds	r4, #1
 801395c:	2102      	movs	r1, #2
 801395e:	e000      	b.n	8013962 <__cvt+0x3a>
 8013960:	2103      	movs	r1, #3
 8013962:	ab03      	add	r3, sp, #12
 8013964:	9301      	str	r3, [sp, #4]
 8013966:	ab02      	add	r3, sp, #8
 8013968:	9300      	str	r3, [sp, #0]
 801396a:	4622      	mov	r2, r4
 801396c:	4633      	mov	r3, r6
 801396e:	eeb0 0b48 	vmov.f64	d0, d8
 8013972:	f001 fe11 	bl	8015598 <_dtoa_r>
 8013976:	2d47      	cmp	r5, #71	; 0x47
 8013978:	d101      	bne.n	801397e <__cvt+0x56>
 801397a:	07fb      	lsls	r3, r7, #31
 801397c:	d51a      	bpl.n	80139b4 <__cvt+0x8c>
 801397e:	2d46      	cmp	r5, #70	; 0x46
 8013980:	eb00 0204 	add.w	r2, r0, r4
 8013984:	d10c      	bne.n	80139a0 <__cvt+0x78>
 8013986:	7803      	ldrb	r3, [r0, #0]
 8013988:	2b30      	cmp	r3, #48	; 0x30
 801398a:	d107      	bne.n	801399c <__cvt+0x74>
 801398c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013994:	bf1c      	itt	ne
 8013996:	f1c4 0401 	rsbne	r4, r4, #1
 801399a:	6034      	strne	r4, [r6, #0]
 801399c:	6833      	ldr	r3, [r6, #0]
 801399e:	441a      	add	r2, r3
 80139a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80139a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139a8:	bf08      	it	eq
 80139aa:	9203      	streq	r2, [sp, #12]
 80139ac:	2130      	movs	r1, #48	; 0x30
 80139ae:	9b03      	ldr	r3, [sp, #12]
 80139b0:	4293      	cmp	r3, r2
 80139b2:	d307      	bcc.n	80139c4 <__cvt+0x9c>
 80139b4:	9b03      	ldr	r3, [sp, #12]
 80139b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80139b8:	1a1b      	subs	r3, r3, r0
 80139ba:	6013      	str	r3, [r2, #0]
 80139bc:	b005      	add	sp, #20
 80139be:	ecbd 8b02 	vpop	{d8}
 80139c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139c4:	1c5c      	adds	r4, r3, #1
 80139c6:	9403      	str	r4, [sp, #12]
 80139c8:	7019      	strb	r1, [r3, #0]
 80139ca:	e7f0      	b.n	80139ae <__cvt+0x86>

080139cc <__exponent>:
 80139cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80139ce:	4603      	mov	r3, r0
 80139d0:	2900      	cmp	r1, #0
 80139d2:	bfb8      	it	lt
 80139d4:	4249      	neglt	r1, r1
 80139d6:	f803 2b02 	strb.w	r2, [r3], #2
 80139da:	bfb4      	ite	lt
 80139dc:	222d      	movlt	r2, #45	; 0x2d
 80139de:	222b      	movge	r2, #43	; 0x2b
 80139e0:	2909      	cmp	r1, #9
 80139e2:	7042      	strb	r2, [r0, #1]
 80139e4:	dd2a      	ble.n	8013a3c <__exponent+0x70>
 80139e6:	f10d 0407 	add.w	r4, sp, #7
 80139ea:	46a4      	mov	ip, r4
 80139ec:	270a      	movs	r7, #10
 80139ee:	46a6      	mov	lr, r4
 80139f0:	460a      	mov	r2, r1
 80139f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80139f6:	fb07 1516 	mls	r5, r7, r6, r1
 80139fa:	3530      	adds	r5, #48	; 0x30
 80139fc:	2a63      	cmp	r2, #99	; 0x63
 80139fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8013a02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013a06:	4631      	mov	r1, r6
 8013a08:	dcf1      	bgt.n	80139ee <__exponent+0x22>
 8013a0a:	3130      	adds	r1, #48	; 0x30
 8013a0c:	f1ae 0502 	sub.w	r5, lr, #2
 8013a10:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013a14:	1c44      	adds	r4, r0, #1
 8013a16:	4629      	mov	r1, r5
 8013a18:	4561      	cmp	r1, ip
 8013a1a:	d30a      	bcc.n	8013a32 <__exponent+0x66>
 8013a1c:	f10d 0209 	add.w	r2, sp, #9
 8013a20:	eba2 020e 	sub.w	r2, r2, lr
 8013a24:	4565      	cmp	r5, ip
 8013a26:	bf88      	it	hi
 8013a28:	2200      	movhi	r2, #0
 8013a2a:	4413      	add	r3, r2
 8013a2c:	1a18      	subs	r0, r3, r0
 8013a2e:	b003      	add	sp, #12
 8013a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a36:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013a3a:	e7ed      	b.n	8013a18 <__exponent+0x4c>
 8013a3c:	2330      	movs	r3, #48	; 0x30
 8013a3e:	3130      	adds	r1, #48	; 0x30
 8013a40:	7083      	strb	r3, [r0, #2]
 8013a42:	70c1      	strb	r1, [r0, #3]
 8013a44:	1d03      	adds	r3, r0, #4
 8013a46:	e7f1      	b.n	8013a2c <__exponent+0x60>

08013a48 <_printf_float>:
 8013a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a4c:	b08b      	sub	sp, #44	; 0x2c
 8013a4e:	460c      	mov	r4, r1
 8013a50:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8013a54:	4616      	mov	r6, r2
 8013a56:	461f      	mov	r7, r3
 8013a58:	4605      	mov	r5, r0
 8013a5a:	f002 ff3d 	bl	80168d8 <_localeconv_r>
 8013a5e:	f8d0 b000 	ldr.w	fp, [r0]
 8013a62:	4658      	mov	r0, fp
 8013a64:	f7ec fbec 	bl	8000240 <strlen>
 8013a68:	2300      	movs	r3, #0
 8013a6a:	9308      	str	r3, [sp, #32]
 8013a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8013a70:	f894 9018 	ldrb.w	r9, [r4, #24]
 8013a74:	6822      	ldr	r2, [r4, #0]
 8013a76:	3307      	adds	r3, #7
 8013a78:	f023 0307 	bic.w	r3, r3, #7
 8013a7c:	f103 0108 	add.w	r1, r3, #8
 8013a80:	f8c8 1000 	str.w	r1, [r8]
 8013a84:	4682      	mov	sl, r0
 8013a86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013a8a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8013a8e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8013cf0 <_printf_float+0x2a8>
 8013a92:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8013a96:	eeb0 6bc0 	vabs.f64	d6, d0
 8013a9a:	eeb4 6b47 	vcmp.f64	d6, d7
 8013a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aa2:	dd24      	ble.n	8013aee <_printf_float+0xa6>
 8013aa4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aac:	d502      	bpl.n	8013ab4 <_printf_float+0x6c>
 8013aae:	232d      	movs	r3, #45	; 0x2d
 8013ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ab4:	4b90      	ldr	r3, [pc, #576]	; (8013cf8 <_printf_float+0x2b0>)
 8013ab6:	4891      	ldr	r0, [pc, #580]	; (8013cfc <_printf_float+0x2b4>)
 8013ab8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8013abc:	bf94      	ite	ls
 8013abe:	4698      	movls	r8, r3
 8013ac0:	4680      	movhi	r8, r0
 8013ac2:	2303      	movs	r3, #3
 8013ac4:	6123      	str	r3, [r4, #16]
 8013ac6:	f022 0204 	bic.w	r2, r2, #4
 8013aca:	2300      	movs	r3, #0
 8013acc:	6022      	str	r2, [r4, #0]
 8013ace:	9304      	str	r3, [sp, #16]
 8013ad0:	9700      	str	r7, [sp, #0]
 8013ad2:	4633      	mov	r3, r6
 8013ad4:	aa09      	add	r2, sp, #36	; 0x24
 8013ad6:	4621      	mov	r1, r4
 8013ad8:	4628      	mov	r0, r5
 8013ada:	f000 f9d3 	bl	8013e84 <_printf_common>
 8013ade:	3001      	adds	r0, #1
 8013ae0:	f040 808a 	bne.w	8013bf8 <_printf_float+0x1b0>
 8013ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8013ae8:	b00b      	add	sp, #44	; 0x2c
 8013aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aee:	eeb4 0b40 	vcmp.f64	d0, d0
 8013af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013af6:	d709      	bvc.n	8013b0c <_printf_float+0xc4>
 8013af8:	ee10 3a90 	vmov	r3, s1
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	bfbc      	itt	lt
 8013b00:	232d      	movlt	r3, #45	; 0x2d
 8013b02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013b06:	487e      	ldr	r0, [pc, #504]	; (8013d00 <_printf_float+0x2b8>)
 8013b08:	4b7e      	ldr	r3, [pc, #504]	; (8013d04 <_printf_float+0x2bc>)
 8013b0a:	e7d5      	b.n	8013ab8 <_printf_float+0x70>
 8013b0c:	6863      	ldr	r3, [r4, #4]
 8013b0e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8013b12:	9104      	str	r1, [sp, #16]
 8013b14:	1c59      	adds	r1, r3, #1
 8013b16:	d13c      	bne.n	8013b92 <_printf_float+0x14a>
 8013b18:	2306      	movs	r3, #6
 8013b1a:	6063      	str	r3, [r4, #4]
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	9303      	str	r3, [sp, #12]
 8013b20:	ab08      	add	r3, sp, #32
 8013b22:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8013b26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013b2a:	ab07      	add	r3, sp, #28
 8013b2c:	6861      	ldr	r1, [r4, #4]
 8013b2e:	9300      	str	r3, [sp, #0]
 8013b30:	6022      	str	r2, [r4, #0]
 8013b32:	f10d 031b 	add.w	r3, sp, #27
 8013b36:	4628      	mov	r0, r5
 8013b38:	f7ff fef6 	bl	8013928 <__cvt>
 8013b3c:	9b04      	ldr	r3, [sp, #16]
 8013b3e:	9907      	ldr	r1, [sp, #28]
 8013b40:	2b47      	cmp	r3, #71	; 0x47
 8013b42:	4680      	mov	r8, r0
 8013b44:	d108      	bne.n	8013b58 <_printf_float+0x110>
 8013b46:	1cc8      	adds	r0, r1, #3
 8013b48:	db02      	blt.n	8013b50 <_printf_float+0x108>
 8013b4a:	6863      	ldr	r3, [r4, #4]
 8013b4c:	4299      	cmp	r1, r3
 8013b4e:	dd41      	ble.n	8013bd4 <_printf_float+0x18c>
 8013b50:	f1a9 0902 	sub.w	r9, r9, #2
 8013b54:	fa5f f989 	uxtb.w	r9, r9
 8013b58:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013b5c:	d820      	bhi.n	8013ba0 <_printf_float+0x158>
 8013b5e:	3901      	subs	r1, #1
 8013b60:	464a      	mov	r2, r9
 8013b62:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013b66:	9107      	str	r1, [sp, #28]
 8013b68:	f7ff ff30 	bl	80139cc <__exponent>
 8013b6c:	9a08      	ldr	r2, [sp, #32]
 8013b6e:	9004      	str	r0, [sp, #16]
 8013b70:	1813      	adds	r3, r2, r0
 8013b72:	2a01      	cmp	r2, #1
 8013b74:	6123      	str	r3, [r4, #16]
 8013b76:	dc02      	bgt.n	8013b7e <_printf_float+0x136>
 8013b78:	6822      	ldr	r2, [r4, #0]
 8013b7a:	07d2      	lsls	r2, r2, #31
 8013b7c:	d501      	bpl.n	8013b82 <_printf_float+0x13a>
 8013b7e:	3301      	adds	r3, #1
 8013b80:	6123      	str	r3, [r4, #16]
 8013b82:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d0a2      	beq.n	8013ad0 <_printf_float+0x88>
 8013b8a:	232d      	movs	r3, #45	; 0x2d
 8013b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b90:	e79e      	b.n	8013ad0 <_printf_float+0x88>
 8013b92:	9904      	ldr	r1, [sp, #16]
 8013b94:	2947      	cmp	r1, #71	; 0x47
 8013b96:	d1c1      	bne.n	8013b1c <_printf_float+0xd4>
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d1bf      	bne.n	8013b1c <_printf_float+0xd4>
 8013b9c:	2301      	movs	r3, #1
 8013b9e:	e7bc      	b.n	8013b1a <_printf_float+0xd2>
 8013ba0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8013ba4:	d118      	bne.n	8013bd8 <_printf_float+0x190>
 8013ba6:	2900      	cmp	r1, #0
 8013ba8:	6863      	ldr	r3, [r4, #4]
 8013baa:	dd0b      	ble.n	8013bc4 <_printf_float+0x17c>
 8013bac:	6121      	str	r1, [r4, #16]
 8013bae:	b913      	cbnz	r3, 8013bb6 <_printf_float+0x16e>
 8013bb0:	6822      	ldr	r2, [r4, #0]
 8013bb2:	07d0      	lsls	r0, r2, #31
 8013bb4:	d502      	bpl.n	8013bbc <_printf_float+0x174>
 8013bb6:	3301      	adds	r3, #1
 8013bb8:	440b      	add	r3, r1
 8013bba:	6123      	str	r3, [r4, #16]
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	65a1      	str	r1, [r4, #88]	; 0x58
 8013bc0:	9304      	str	r3, [sp, #16]
 8013bc2:	e7de      	b.n	8013b82 <_printf_float+0x13a>
 8013bc4:	b913      	cbnz	r3, 8013bcc <_printf_float+0x184>
 8013bc6:	6822      	ldr	r2, [r4, #0]
 8013bc8:	07d2      	lsls	r2, r2, #31
 8013bca:	d501      	bpl.n	8013bd0 <_printf_float+0x188>
 8013bcc:	3302      	adds	r3, #2
 8013bce:	e7f4      	b.n	8013bba <_printf_float+0x172>
 8013bd0:	2301      	movs	r3, #1
 8013bd2:	e7f2      	b.n	8013bba <_printf_float+0x172>
 8013bd4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8013bd8:	9b08      	ldr	r3, [sp, #32]
 8013bda:	4299      	cmp	r1, r3
 8013bdc:	db05      	blt.n	8013bea <_printf_float+0x1a2>
 8013bde:	6823      	ldr	r3, [r4, #0]
 8013be0:	6121      	str	r1, [r4, #16]
 8013be2:	07d8      	lsls	r0, r3, #31
 8013be4:	d5ea      	bpl.n	8013bbc <_printf_float+0x174>
 8013be6:	1c4b      	adds	r3, r1, #1
 8013be8:	e7e7      	b.n	8013bba <_printf_float+0x172>
 8013bea:	2900      	cmp	r1, #0
 8013bec:	bfd4      	ite	le
 8013bee:	f1c1 0202 	rsble	r2, r1, #2
 8013bf2:	2201      	movgt	r2, #1
 8013bf4:	4413      	add	r3, r2
 8013bf6:	e7e0      	b.n	8013bba <_printf_float+0x172>
 8013bf8:	6823      	ldr	r3, [r4, #0]
 8013bfa:	055a      	lsls	r2, r3, #21
 8013bfc:	d407      	bmi.n	8013c0e <_printf_float+0x1c6>
 8013bfe:	6923      	ldr	r3, [r4, #16]
 8013c00:	4642      	mov	r2, r8
 8013c02:	4631      	mov	r1, r6
 8013c04:	4628      	mov	r0, r5
 8013c06:	47b8      	blx	r7
 8013c08:	3001      	adds	r0, #1
 8013c0a:	d12a      	bne.n	8013c62 <_printf_float+0x21a>
 8013c0c:	e76a      	b.n	8013ae4 <_printf_float+0x9c>
 8013c0e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013c12:	f240 80e2 	bls.w	8013dda <_printf_float+0x392>
 8013c16:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013c1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c22:	d133      	bne.n	8013c8c <_printf_float+0x244>
 8013c24:	4a38      	ldr	r2, [pc, #224]	; (8013d08 <_printf_float+0x2c0>)
 8013c26:	2301      	movs	r3, #1
 8013c28:	4631      	mov	r1, r6
 8013c2a:	4628      	mov	r0, r5
 8013c2c:	47b8      	blx	r7
 8013c2e:	3001      	adds	r0, #1
 8013c30:	f43f af58 	beq.w	8013ae4 <_printf_float+0x9c>
 8013c34:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	db02      	blt.n	8013c42 <_printf_float+0x1fa>
 8013c3c:	6823      	ldr	r3, [r4, #0]
 8013c3e:	07d8      	lsls	r0, r3, #31
 8013c40:	d50f      	bpl.n	8013c62 <_printf_float+0x21a>
 8013c42:	4653      	mov	r3, sl
 8013c44:	465a      	mov	r2, fp
 8013c46:	4631      	mov	r1, r6
 8013c48:	4628      	mov	r0, r5
 8013c4a:	47b8      	blx	r7
 8013c4c:	3001      	adds	r0, #1
 8013c4e:	f43f af49 	beq.w	8013ae4 <_printf_float+0x9c>
 8013c52:	f04f 0800 	mov.w	r8, #0
 8013c56:	f104 091a 	add.w	r9, r4, #26
 8013c5a:	9b08      	ldr	r3, [sp, #32]
 8013c5c:	3b01      	subs	r3, #1
 8013c5e:	4543      	cmp	r3, r8
 8013c60:	dc09      	bgt.n	8013c76 <_printf_float+0x22e>
 8013c62:	6823      	ldr	r3, [r4, #0]
 8013c64:	079b      	lsls	r3, r3, #30
 8013c66:	f100 8108 	bmi.w	8013e7a <_printf_float+0x432>
 8013c6a:	68e0      	ldr	r0, [r4, #12]
 8013c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c6e:	4298      	cmp	r0, r3
 8013c70:	bfb8      	it	lt
 8013c72:	4618      	movlt	r0, r3
 8013c74:	e738      	b.n	8013ae8 <_printf_float+0xa0>
 8013c76:	2301      	movs	r3, #1
 8013c78:	464a      	mov	r2, r9
 8013c7a:	4631      	mov	r1, r6
 8013c7c:	4628      	mov	r0, r5
 8013c7e:	47b8      	blx	r7
 8013c80:	3001      	adds	r0, #1
 8013c82:	f43f af2f 	beq.w	8013ae4 <_printf_float+0x9c>
 8013c86:	f108 0801 	add.w	r8, r8, #1
 8013c8a:	e7e6      	b.n	8013c5a <_printf_float+0x212>
 8013c8c:	9b07      	ldr	r3, [sp, #28]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	dc3c      	bgt.n	8013d0c <_printf_float+0x2c4>
 8013c92:	4a1d      	ldr	r2, [pc, #116]	; (8013d08 <_printf_float+0x2c0>)
 8013c94:	2301      	movs	r3, #1
 8013c96:	4631      	mov	r1, r6
 8013c98:	4628      	mov	r0, r5
 8013c9a:	47b8      	blx	r7
 8013c9c:	3001      	adds	r0, #1
 8013c9e:	f43f af21 	beq.w	8013ae4 <_printf_float+0x9c>
 8013ca2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013ca6:	4313      	orrs	r3, r2
 8013ca8:	d102      	bne.n	8013cb0 <_printf_float+0x268>
 8013caa:	6823      	ldr	r3, [r4, #0]
 8013cac:	07d9      	lsls	r1, r3, #31
 8013cae:	d5d8      	bpl.n	8013c62 <_printf_float+0x21a>
 8013cb0:	4653      	mov	r3, sl
 8013cb2:	465a      	mov	r2, fp
 8013cb4:	4631      	mov	r1, r6
 8013cb6:	4628      	mov	r0, r5
 8013cb8:	47b8      	blx	r7
 8013cba:	3001      	adds	r0, #1
 8013cbc:	f43f af12 	beq.w	8013ae4 <_printf_float+0x9c>
 8013cc0:	f04f 0900 	mov.w	r9, #0
 8013cc4:	f104 0a1a 	add.w	sl, r4, #26
 8013cc8:	9b07      	ldr	r3, [sp, #28]
 8013cca:	425b      	negs	r3, r3
 8013ccc:	454b      	cmp	r3, r9
 8013cce:	dc01      	bgt.n	8013cd4 <_printf_float+0x28c>
 8013cd0:	9b08      	ldr	r3, [sp, #32]
 8013cd2:	e795      	b.n	8013c00 <_printf_float+0x1b8>
 8013cd4:	2301      	movs	r3, #1
 8013cd6:	4652      	mov	r2, sl
 8013cd8:	4631      	mov	r1, r6
 8013cda:	4628      	mov	r0, r5
 8013cdc:	47b8      	blx	r7
 8013cde:	3001      	adds	r0, #1
 8013ce0:	f43f af00 	beq.w	8013ae4 <_printf_float+0x9c>
 8013ce4:	f109 0901 	add.w	r9, r9, #1
 8013ce8:	e7ee      	b.n	8013cc8 <_printf_float+0x280>
 8013cea:	bf00      	nop
 8013cec:	f3af 8000 	nop.w
 8013cf0:	ffffffff 	.word	0xffffffff
 8013cf4:	7fefffff 	.word	0x7fefffff
 8013cf8:	08018734 	.word	0x08018734
 8013cfc:	08018738 	.word	0x08018738
 8013d00:	08018740 	.word	0x08018740
 8013d04:	0801873c 	.word	0x0801873c
 8013d08:	08018744 	.word	0x08018744
 8013d0c:	9a08      	ldr	r2, [sp, #32]
 8013d0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013d10:	429a      	cmp	r2, r3
 8013d12:	bfa8      	it	ge
 8013d14:	461a      	movge	r2, r3
 8013d16:	2a00      	cmp	r2, #0
 8013d18:	4691      	mov	r9, r2
 8013d1a:	dc38      	bgt.n	8013d8e <_printf_float+0x346>
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	9305      	str	r3, [sp, #20]
 8013d20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013d24:	f104 021a 	add.w	r2, r4, #26
 8013d28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013d2a:	9905      	ldr	r1, [sp, #20]
 8013d2c:	9304      	str	r3, [sp, #16]
 8013d2e:	eba3 0309 	sub.w	r3, r3, r9
 8013d32:	428b      	cmp	r3, r1
 8013d34:	dc33      	bgt.n	8013d9e <_printf_float+0x356>
 8013d36:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013d3a:	429a      	cmp	r2, r3
 8013d3c:	db3c      	blt.n	8013db8 <_printf_float+0x370>
 8013d3e:	6823      	ldr	r3, [r4, #0]
 8013d40:	07da      	lsls	r2, r3, #31
 8013d42:	d439      	bmi.n	8013db8 <_printf_float+0x370>
 8013d44:	9b08      	ldr	r3, [sp, #32]
 8013d46:	9a04      	ldr	r2, [sp, #16]
 8013d48:	9907      	ldr	r1, [sp, #28]
 8013d4a:	1a9a      	subs	r2, r3, r2
 8013d4c:	eba3 0901 	sub.w	r9, r3, r1
 8013d50:	4591      	cmp	r9, r2
 8013d52:	bfa8      	it	ge
 8013d54:	4691      	movge	r9, r2
 8013d56:	f1b9 0f00 	cmp.w	r9, #0
 8013d5a:	dc35      	bgt.n	8013dc8 <_printf_float+0x380>
 8013d5c:	f04f 0800 	mov.w	r8, #0
 8013d60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013d64:	f104 0a1a 	add.w	sl, r4, #26
 8013d68:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013d6c:	1a9b      	subs	r3, r3, r2
 8013d6e:	eba3 0309 	sub.w	r3, r3, r9
 8013d72:	4543      	cmp	r3, r8
 8013d74:	f77f af75 	ble.w	8013c62 <_printf_float+0x21a>
 8013d78:	2301      	movs	r3, #1
 8013d7a:	4652      	mov	r2, sl
 8013d7c:	4631      	mov	r1, r6
 8013d7e:	4628      	mov	r0, r5
 8013d80:	47b8      	blx	r7
 8013d82:	3001      	adds	r0, #1
 8013d84:	f43f aeae 	beq.w	8013ae4 <_printf_float+0x9c>
 8013d88:	f108 0801 	add.w	r8, r8, #1
 8013d8c:	e7ec      	b.n	8013d68 <_printf_float+0x320>
 8013d8e:	4613      	mov	r3, r2
 8013d90:	4631      	mov	r1, r6
 8013d92:	4642      	mov	r2, r8
 8013d94:	4628      	mov	r0, r5
 8013d96:	47b8      	blx	r7
 8013d98:	3001      	adds	r0, #1
 8013d9a:	d1bf      	bne.n	8013d1c <_printf_float+0x2d4>
 8013d9c:	e6a2      	b.n	8013ae4 <_printf_float+0x9c>
 8013d9e:	2301      	movs	r3, #1
 8013da0:	4631      	mov	r1, r6
 8013da2:	4628      	mov	r0, r5
 8013da4:	9204      	str	r2, [sp, #16]
 8013da6:	47b8      	blx	r7
 8013da8:	3001      	adds	r0, #1
 8013daa:	f43f ae9b 	beq.w	8013ae4 <_printf_float+0x9c>
 8013dae:	9b05      	ldr	r3, [sp, #20]
 8013db0:	9a04      	ldr	r2, [sp, #16]
 8013db2:	3301      	adds	r3, #1
 8013db4:	9305      	str	r3, [sp, #20]
 8013db6:	e7b7      	b.n	8013d28 <_printf_float+0x2e0>
 8013db8:	4653      	mov	r3, sl
 8013dba:	465a      	mov	r2, fp
 8013dbc:	4631      	mov	r1, r6
 8013dbe:	4628      	mov	r0, r5
 8013dc0:	47b8      	blx	r7
 8013dc2:	3001      	adds	r0, #1
 8013dc4:	d1be      	bne.n	8013d44 <_printf_float+0x2fc>
 8013dc6:	e68d      	b.n	8013ae4 <_printf_float+0x9c>
 8013dc8:	9a04      	ldr	r2, [sp, #16]
 8013dca:	464b      	mov	r3, r9
 8013dcc:	4442      	add	r2, r8
 8013dce:	4631      	mov	r1, r6
 8013dd0:	4628      	mov	r0, r5
 8013dd2:	47b8      	blx	r7
 8013dd4:	3001      	adds	r0, #1
 8013dd6:	d1c1      	bne.n	8013d5c <_printf_float+0x314>
 8013dd8:	e684      	b.n	8013ae4 <_printf_float+0x9c>
 8013dda:	9a08      	ldr	r2, [sp, #32]
 8013ddc:	2a01      	cmp	r2, #1
 8013dde:	dc01      	bgt.n	8013de4 <_printf_float+0x39c>
 8013de0:	07db      	lsls	r3, r3, #31
 8013de2:	d537      	bpl.n	8013e54 <_printf_float+0x40c>
 8013de4:	2301      	movs	r3, #1
 8013de6:	4642      	mov	r2, r8
 8013de8:	4631      	mov	r1, r6
 8013dea:	4628      	mov	r0, r5
 8013dec:	47b8      	blx	r7
 8013dee:	3001      	adds	r0, #1
 8013df0:	f43f ae78 	beq.w	8013ae4 <_printf_float+0x9c>
 8013df4:	4653      	mov	r3, sl
 8013df6:	465a      	mov	r2, fp
 8013df8:	4631      	mov	r1, r6
 8013dfa:	4628      	mov	r0, r5
 8013dfc:	47b8      	blx	r7
 8013dfe:	3001      	adds	r0, #1
 8013e00:	f43f ae70 	beq.w	8013ae4 <_printf_float+0x9c>
 8013e04:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013e08:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e10:	d01b      	beq.n	8013e4a <_printf_float+0x402>
 8013e12:	9b08      	ldr	r3, [sp, #32]
 8013e14:	f108 0201 	add.w	r2, r8, #1
 8013e18:	3b01      	subs	r3, #1
 8013e1a:	4631      	mov	r1, r6
 8013e1c:	4628      	mov	r0, r5
 8013e1e:	47b8      	blx	r7
 8013e20:	3001      	adds	r0, #1
 8013e22:	d10e      	bne.n	8013e42 <_printf_float+0x3fa>
 8013e24:	e65e      	b.n	8013ae4 <_printf_float+0x9c>
 8013e26:	2301      	movs	r3, #1
 8013e28:	464a      	mov	r2, r9
 8013e2a:	4631      	mov	r1, r6
 8013e2c:	4628      	mov	r0, r5
 8013e2e:	47b8      	blx	r7
 8013e30:	3001      	adds	r0, #1
 8013e32:	f43f ae57 	beq.w	8013ae4 <_printf_float+0x9c>
 8013e36:	f108 0801 	add.w	r8, r8, #1
 8013e3a:	9b08      	ldr	r3, [sp, #32]
 8013e3c:	3b01      	subs	r3, #1
 8013e3e:	4543      	cmp	r3, r8
 8013e40:	dcf1      	bgt.n	8013e26 <_printf_float+0x3de>
 8013e42:	9b04      	ldr	r3, [sp, #16]
 8013e44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013e48:	e6db      	b.n	8013c02 <_printf_float+0x1ba>
 8013e4a:	f04f 0800 	mov.w	r8, #0
 8013e4e:	f104 091a 	add.w	r9, r4, #26
 8013e52:	e7f2      	b.n	8013e3a <_printf_float+0x3f2>
 8013e54:	2301      	movs	r3, #1
 8013e56:	4642      	mov	r2, r8
 8013e58:	e7df      	b.n	8013e1a <_printf_float+0x3d2>
 8013e5a:	2301      	movs	r3, #1
 8013e5c:	464a      	mov	r2, r9
 8013e5e:	4631      	mov	r1, r6
 8013e60:	4628      	mov	r0, r5
 8013e62:	47b8      	blx	r7
 8013e64:	3001      	adds	r0, #1
 8013e66:	f43f ae3d 	beq.w	8013ae4 <_printf_float+0x9c>
 8013e6a:	f108 0801 	add.w	r8, r8, #1
 8013e6e:	68e3      	ldr	r3, [r4, #12]
 8013e70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e72:	1a5b      	subs	r3, r3, r1
 8013e74:	4543      	cmp	r3, r8
 8013e76:	dcf0      	bgt.n	8013e5a <_printf_float+0x412>
 8013e78:	e6f7      	b.n	8013c6a <_printf_float+0x222>
 8013e7a:	f04f 0800 	mov.w	r8, #0
 8013e7e:	f104 0919 	add.w	r9, r4, #25
 8013e82:	e7f4      	b.n	8013e6e <_printf_float+0x426>

08013e84 <_printf_common>:
 8013e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e88:	4616      	mov	r6, r2
 8013e8a:	4699      	mov	r9, r3
 8013e8c:	688a      	ldr	r2, [r1, #8]
 8013e8e:	690b      	ldr	r3, [r1, #16]
 8013e90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013e94:	4293      	cmp	r3, r2
 8013e96:	bfb8      	it	lt
 8013e98:	4613      	movlt	r3, r2
 8013e9a:	6033      	str	r3, [r6, #0]
 8013e9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013ea0:	4607      	mov	r7, r0
 8013ea2:	460c      	mov	r4, r1
 8013ea4:	b10a      	cbz	r2, 8013eaa <_printf_common+0x26>
 8013ea6:	3301      	adds	r3, #1
 8013ea8:	6033      	str	r3, [r6, #0]
 8013eaa:	6823      	ldr	r3, [r4, #0]
 8013eac:	0699      	lsls	r1, r3, #26
 8013eae:	bf42      	ittt	mi
 8013eb0:	6833      	ldrmi	r3, [r6, #0]
 8013eb2:	3302      	addmi	r3, #2
 8013eb4:	6033      	strmi	r3, [r6, #0]
 8013eb6:	6825      	ldr	r5, [r4, #0]
 8013eb8:	f015 0506 	ands.w	r5, r5, #6
 8013ebc:	d106      	bne.n	8013ecc <_printf_common+0x48>
 8013ebe:	f104 0a19 	add.w	sl, r4, #25
 8013ec2:	68e3      	ldr	r3, [r4, #12]
 8013ec4:	6832      	ldr	r2, [r6, #0]
 8013ec6:	1a9b      	subs	r3, r3, r2
 8013ec8:	42ab      	cmp	r3, r5
 8013eca:	dc26      	bgt.n	8013f1a <_printf_common+0x96>
 8013ecc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013ed0:	1e13      	subs	r3, r2, #0
 8013ed2:	6822      	ldr	r2, [r4, #0]
 8013ed4:	bf18      	it	ne
 8013ed6:	2301      	movne	r3, #1
 8013ed8:	0692      	lsls	r2, r2, #26
 8013eda:	d42b      	bmi.n	8013f34 <_printf_common+0xb0>
 8013edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013ee0:	4649      	mov	r1, r9
 8013ee2:	4638      	mov	r0, r7
 8013ee4:	47c0      	blx	r8
 8013ee6:	3001      	adds	r0, #1
 8013ee8:	d01e      	beq.n	8013f28 <_printf_common+0xa4>
 8013eea:	6823      	ldr	r3, [r4, #0]
 8013eec:	68e5      	ldr	r5, [r4, #12]
 8013eee:	6832      	ldr	r2, [r6, #0]
 8013ef0:	f003 0306 	and.w	r3, r3, #6
 8013ef4:	2b04      	cmp	r3, #4
 8013ef6:	bf08      	it	eq
 8013ef8:	1aad      	subeq	r5, r5, r2
 8013efa:	68a3      	ldr	r3, [r4, #8]
 8013efc:	6922      	ldr	r2, [r4, #16]
 8013efe:	bf0c      	ite	eq
 8013f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013f04:	2500      	movne	r5, #0
 8013f06:	4293      	cmp	r3, r2
 8013f08:	bfc4      	itt	gt
 8013f0a:	1a9b      	subgt	r3, r3, r2
 8013f0c:	18ed      	addgt	r5, r5, r3
 8013f0e:	2600      	movs	r6, #0
 8013f10:	341a      	adds	r4, #26
 8013f12:	42b5      	cmp	r5, r6
 8013f14:	d11a      	bne.n	8013f4c <_printf_common+0xc8>
 8013f16:	2000      	movs	r0, #0
 8013f18:	e008      	b.n	8013f2c <_printf_common+0xa8>
 8013f1a:	2301      	movs	r3, #1
 8013f1c:	4652      	mov	r2, sl
 8013f1e:	4649      	mov	r1, r9
 8013f20:	4638      	mov	r0, r7
 8013f22:	47c0      	blx	r8
 8013f24:	3001      	adds	r0, #1
 8013f26:	d103      	bne.n	8013f30 <_printf_common+0xac>
 8013f28:	f04f 30ff 	mov.w	r0, #4294967295
 8013f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f30:	3501      	adds	r5, #1
 8013f32:	e7c6      	b.n	8013ec2 <_printf_common+0x3e>
 8013f34:	18e1      	adds	r1, r4, r3
 8013f36:	1c5a      	adds	r2, r3, #1
 8013f38:	2030      	movs	r0, #48	; 0x30
 8013f3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013f3e:	4422      	add	r2, r4
 8013f40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013f44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013f48:	3302      	adds	r3, #2
 8013f4a:	e7c7      	b.n	8013edc <_printf_common+0x58>
 8013f4c:	2301      	movs	r3, #1
 8013f4e:	4622      	mov	r2, r4
 8013f50:	4649      	mov	r1, r9
 8013f52:	4638      	mov	r0, r7
 8013f54:	47c0      	blx	r8
 8013f56:	3001      	adds	r0, #1
 8013f58:	d0e6      	beq.n	8013f28 <_printf_common+0xa4>
 8013f5a:	3601      	adds	r6, #1
 8013f5c:	e7d9      	b.n	8013f12 <_printf_common+0x8e>
	...

08013f60 <_printf_i>:
 8013f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013f64:	7e0f      	ldrb	r7, [r1, #24]
 8013f66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013f68:	2f78      	cmp	r7, #120	; 0x78
 8013f6a:	4691      	mov	r9, r2
 8013f6c:	4680      	mov	r8, r0
 8013f6e:	460c      	mov	r4, r1
 8013f70:	469a      	mov	sl, r3
 8013f72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013f76:	d807      	bhi.n	8013f88 <_printf_i+0x28>
 8013f78:	2f62      	cmp	r7, #98	; 0x62
 8013f7a:	d80a      	bhi.n	8013f92 <_printf_i+0x32>
 8013f7c:	2f00      	cmp	r7, #0
 8013f7e:	f000 80d8 	beq.w	8014132 <_printf_i+0x1d2>
 8013f82:	2f58      	cmp	r7, #88	; 0x58
 8013f84:	f000 80a3 	beq.w	80140ce <_printf_i+0x16e>
 8013f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013f8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013f90:	e03a      	b.n	8014008 <_printf_i+0xa8>
 8013f92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013f96:	2b15      	cmp	r3, #21
 8013f98:	d8f6      	bhi.n	8013f88 <_printf_i+0x28>
 8013f9a:	a101      	add	r1, pc, #4	; (adr r1, 8013fa0 <_printf_i+0x40>)
 8013f9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013fa0:	08013ff9 	.word	0x08013ff9
 8013fa4:	0801400d 	.word	0x0801400d
 8013fa8:	08013f89 	.word	0x08013f89
 8013fac:	08013f89 	.word	0x08013f89
 8013fb0:	08013f89 	.word	0x08013f89
 8013fb4:	08013f89 	.word	0x08013f89
 8013fb8:	0801400d 	.word	0x0801400d
 8013fbc:	08013f89 	.word	0x08013f89
 8013fc0:	08013f89 	.word	0x08013f89
 8013fc4:	08013f89 	.word	0x08013f89
 8013fc8:	08013f89 	.word	0x08013f89
 8013fcc:	08014119 	.word	0x08014119
 8013fd0:	0801403d 	.word	0x0801403d
 8013fd4:	080140fb 	.word	0x080140fb
 8013fd8:	08013f89 	.word	0x08013f89
 8013fdc:	08013f89 	.word	0x08013f89
 8013fe0:	0801413b 	.word	0x0801413b
 8013fe4:	08013f89 	.word	0x08013f89
 8013fe8:	0801403d 	.word	0x0801403d
 8013fec:	08013f89 	.word	0x08013f89
 8013ff0:	08013f89 	.word	0x08013f89
 8013ff4:	08014103 	.word	0x08014103
 8013ff8:	682b      	ldr	r3, [r5, #0]
 8013ffa:	1d1a      	adds	r2, r3, #4
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	602a      	str	r2, [r5, #0]
 8014000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014008:	2301      	movs	r3, #1
 801400a:	e0a3      	b.n	8014154 <_printf_i+0x1f4>
 801400c:	6820      	ldr	r0, [r4, #0]
 801400e:	6829      	ldr	r1, [r5, #0]
 8014010:	0606      	lsls	r6, r0, #24
 8014012:	f101 0304 	add.w	r3, r1, #4
 8014016:	d50a      	bpl.n	801402e <_printf_i+0xce>
 8014018:	680e      	ldr	r6, [r1, #0]
 801401a:	602b      	str	r3, [r5, #0]
 801401c:	2e00      	cmp	r6, #0
 801401e:	da03      	bge.n	8014028 <_printf_i+0xc8>
 8014020:	232d      	movs	r3, #45	; 0x2d
 8014022:	4276      	negs	r6, r6
 8014024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014028:	485e      	ldr	r0, [pc, #376]	; (80141a4 <_printf_i+0x244>)
 801402a:	230a      	movs	r3, #10
 801402c:	e019      	b.n	8014062 <_printf_i+0x102>
 801402e:	680e      	ldr	r6, [r1, #0]
 8014030:	602b      	str	r3, [r5, #0]
 8014032:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014036:	bf18      	it	ne
 8014038:	b236      	sxthne	r6, r6
 801403a:	e7ef      	b.n	801401c <_printf_i+0xbc>
 801403c:	682b      	ldr	r3, [r5, #0]
 801403e:	6820      	ldr	r0, [r4, #0]
 8014040:	1d19      	adds	r1, r3, #4
 8014042:	6029      	str	r1, [r5, #0]
 8014044:	0601      	lsls	r1, r0, #24
 8014046:	d501      	bpl.n	801404c <_printf_i+0xec>
 8014048:	681e      	ldr	r6, [r3, #0]
 801404a:	e002      	b.n	8014052 <_printf_i+0xf2>
 801404c:	0646      	lsls	r6, r0, #25
 801404e:	d5fb      	bpl.n	8014048 <_printf_i+0xe8>
 8014050:	881e      	ldrh	r6, [r3, #0]
 8014052:	4854      	ldr	r0, [pc, #336]	; (80141a4 <_printf_i+0x244>)
 8014054:	2f6f      	cmp	r7, #111	; 0x6f
 8014056:	bf0c      	ite	eq
 8014058:	2308      	moveq	r3, #8
 801405a:	230a      	movne	r3, #10
 801405c:	2100      	movs	r1, #0
 801405e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014062:	6865      	ldr	r5, [r4, #4]
 8014064:	60a5      	str	r5, [r4, #8]
 8014066:	2d00      	cmp	r5, #0
 8014068:	bfa2      	ittt	ge
 801406a:	6821      	ldrge	r1, [r4, #0]
 801406c:	f021 0104 	bicge.w	r1, r1, #4
 8014070:	6021      	strge	r1, [r4, #0]
 8014072:	b90e      	cbnz	r6, 8014078 <_printf_i+0x118>
 8014074:	2d00      	cmp	r5, #0
 8014076:	d04d      	beq.n	8014114 <_printf_i+0x1b4>
 8014078:	4615      	mov	r5, r2
 801407a:	fbb6 f1f3 	udiv	r1, r6, r3
 801407e:	fb03 6711 	mls	r7, r3, r1, r6
 8014082:	5dc7      	ldrb	r7, [r0, r7]
 8014084:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014088:	4637      	mov	r7, r6
 801408a:	42bb      	cmp	r3, r7
 801408c:	460e      	mov	r6, r1
 801408e:	d9f4      	bls.n	801407a <_printf_i+0x11a>
 8014090:	2b08      	cmp	r3, #8
 8014092:	d10b      	bne.n	80140ac <_printf_i+0x14c>
 8014094:	6823      	ldr	r3, [r4, #0]
 8014096:	07de      	lsls	r6, r3, #31
 8014098:	d508      	bpl.n	80140ac <_printf_i+0x14c>
 801409a:	6923      	ldr	r3, [r4, #16]
 801409c:	6861      	ldr	r1, [r4, #4]
 801409e:	4299      	cmp	r1, r3
 80140a0:	bfde      	ittt	le
 80140a2:	2330      	movle	r3, #48	; 0x30
 80140a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80140a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80140ac:	1b52      	subs	r2, r2, r5
 80140ae:	6122      	str	r2, [r4, #16]
 80140b0:	f8cd a000 	str.w	sl, [sp]
 80140b4:	464b      	mov	r3, r9
 80140b6:	aa03      	add	r2, sp, #12
 80140b8:	4621      	mov	r1, r4
 80140ba:	4640      	mov	r0, r8
 80140bc:	f7ff fee2 	bl	8013e84 <_printf_common>
 80140c0:	3001      	adds	r0, #1
 80140c2:	d14c      	bne.n	801415e <_printf_i+0x1fe>
 80140c4:	f04f 30ff 	mov.w	r0, #4294967295
 80140c8:	b004      	add	sp, #16
 80140ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140ce:	4835      	ldr	r0, [pc, #212]	; (80141a4 <_printf_i+0x244>)
 80140d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80140d4:	6829      	ldr	r1, [r5, #0]
 80140d6:	6823      	ldr	r3, [r4, #0]
 80140d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80140dc:	6029      	str	r1, [r5, #0]
 80140de:	061d      	lsls	r5, r3, #24
 80140e0:	d514      	bpl.n	801410c <_printf_i+0x1ac>
 80140e2:	07df      	lsls	r7, r3, #31
 80140e4:	bf44      	itt	mi
 80140e6:	f043 0320 	orrmi.w	r3, r3, #32
 80140ea:	6023      	strmi	r3, [r4, #0]
 80140ec:	b91e      	cbnz	r6, 80140f6 <_printf_i+0x196>
 80140ee:	6823      	ldr	r3, [r4, #0]
 80140f0:	f023 0320 	bic.w	r3, r3, #32
 80140f4:	6023      	str	r3, [r4, #0]
 80140f6:	2310      	movs	r3, #16
 80140f8:	e7b0      	b.n	801405c <_printf_i+0xfc>
 80140fa:	6823      	ldr	r3, [r4, #0]
 80140fc:	f043 0320 	orr.w	r3, r3, #32
 8014100:	6023      	str	r3, [r4, #0]
 8014102:	2378      	movs	r3, #120	; 0x78
 8014104:	4828      	ldr	r0, [pc, #160]	; (80141a8 <_printf_i+0x248>)
 8014106:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801410a:	e7e3      	b.n	80140d4 <_printf_i+0x174>
 801410c:	0659      	lsls	r1, r3, #25
 801410e:	bf48      	it	mi
 8014110:	b2b6      	uxthmi	r6, r6
 8014112:	e7e6      	b.n	80140e2 <_printf_i+0x182>
 8014114:	4615      	mov	r5, r2
 8014116:	e7bb      	b.n	8014090 <_printf_i+0x130>
 8014118:	682b      	ldr	r3, [r5, #0]
 801411a:	6826      	ldr	r6, [r4, #0]
 801411c:	6961      	ldr	r1, [r4, #20]
 801411e:	1d18      	adds	r0, r3, #4
 8014120:	6028      	str	r0, [r5, #0]
 8014122:	0635      	lsls	r5, r6, #24
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	d501      	bpl.n	801412c <_printf_i+0x1cc>
 8014128:	6019      	str	r1, [r3, #0]
 801412a:	e002      	b.n	8014132 <_printf_i+0x1d2>
 801412c:	0670      	lsls	r0, r6, #25
 801412e:	d5fb      	bpl.n	8014128 <_printf_i+0x1c8>
 8014130:	8019      	strh	r1, [r3, #0]
 8014132:	2300      	movs	r3, #0
 8014134:	6123      	str	r3, [r4, #16]
 8014136:	4615      	mov	r5, r2
 8014138:	e7ba      	b.n	80140b0 <_printf_i+0x150>
 801413a:	682b      	ldr	r3, [r5, #0]
 801413c:	1d1a      	adds	r2, r3, #4
 801413e:	602a      	str	r2, [r5, #0]
 8014140:	681d      	ldr	r5, [r3, #0]
 8014142:	6862      	ldr	r2, [r4, #4]
 8014144:	2100      	movs	r1, #0
 8014146:	4628      	mov	r0, r5
 8014148:	f7ec f882 	bl	8000250 <memchr>
 801414c:	b108      	cbz	r0, 8014152 <_printf_i+0x1f2>
 801414e:	1b40      	subs	r0, r0, r5
 8014150:	6060      	str	r0, [r4, #4]
 8014152:	6863      	ldr	r3, [r4, #4]
 8014154:	6123      	str	r3, [r4, #16]
 8014156:	2300      	movs	r3, #0
 8014158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801415c:	e7a8      	b.n	80140b0 <_printf_i+0x150>
 801415e:	6923      	ldr	r3, [r4, #16]
 8014160:	462a      	mov	r2, r5
 8014162:	4649      	mov	r1, r9
 8014164:	4640      	mov	r0, r8
 8014166:	47d0      	blx	sl
 8014168:	3001      	adds	r0, #1
 801416a:	d0ab      	beq.n	80140c4 <_printf_i+0x164>
 801416c:	6823      	ldr	r3, [r4, #0]
 801416e:	079b      	lsls	r3, r3, #30
 8014170:	d413      	bmi.n	801419a <_printf_i+0x23a>
 8014172:	68e0      	ldr	r0, [r4, #12]
 8014174:	9b03      	ldr	r3, [sp, #12]
 8014176:	4298      	cmp	r0, r3
 8014178:	bfb8      	it	lt
 801417a:	4618      	movlt	r0, r3
 801417c:	e7a4      	b.n	80140c8 <_printf_i+0x168>
 801417e:	2301      	movs	r3, #1
 8014180:	4632      	mov	r2, r6
 8014182:	4649      	mov	r1, r9
 8014184:	4640      	mov	r0, r8
 8014186:	47d0      	blx	sl
 8014188:	3001      	adds	r0, #1
 801418a:	d09b      	beq.n	80140c4 <_printf_i+0x164>
 801418c:	3501      	adds	r5, #1
 801418e:	68e3      	ldr	r3, [r4, #12]
 8014190:	9903      	ldr	r1, [sp, #12]
 8014192:	1a5b      	subs	r3, r3, r1
 8014194:	42ab      	cmp	r3, r5
 8014196:	dcf2      	bgt.n	801417e <_printf_i+0x21e>
 8014198:	e7eb      	b.n	8014172 <_printf_i+0x212>
 801419a:	2500      	movs	r5, #0
 801419c:	f104 0619 	add.w	r6, r4, #25
 80141a0:	e7f5      	b.n	801418e <_printf_i+0x22e>
 80141a2:	bf00      	nop
 80141a4:	08018746 	.word	0x08018746
 80141a8:	08018757 	.word	0x08018757

080141ac <_scanf_float>:
 80141ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141b0:	b087      	sub	sp, #28
 80141b2:	4617      	mov	r7, r2
 80141b4:	9303      	str	r3, [sp, #12]
 80141b6:	688b      	ldr	r3, [r1, #8]
 80141b8:	1e5a      	subs	r2, r3, #1
 80141ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80141be:	bf83      	ittte	hi
 80141c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80141c4:	195b      	addhi	r3, r3, r5
 80141c6:	9302      	strhi	r3, [sp, #8]
 80141c8:	2300      	movls	r3, #0
 80141ca:	bf86      	itte	hi
 80141cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80141d0:	608b      	strhi	r3, [r1, #8]
 80141d2:	9302      	strls	r3, [sp, #8]
 80141d4:	680b      	ldr	r3, [r1, #0]
 80141d6:	468b      	mov	fp, r1
 80141d8:	2500      	movs	r5, #0
 80141da:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80141de:	f84b 3b1c 	str.w	r3, [fp], #28
 80141e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80141e6:	4680      	mov	r8, r0
 80141e8:	460c      	mov	r4, r1
 80141ea:	465e      	mov	r6, fp
 80141ec:	46aa      	mov	sl, r5
 80141ee:	46a9      	mov	r9, r5
 80141f0:	9501      	str	r5, [sp, #4]
 80141f2:	68a2      	ldr	r2, [r4, #8]
 80141f4:	b152      	cbz	r2, 801420c <_scanf_float+0x60>
 80141f6:	683b      	ldr	r3, [r7, #0]
 80141f8:	781b      	ldrb	r3, [r3, #0]
 80141fa:	2b4e      	cmp	r3, #78	; 0x4e
 80141fc:	d864      	bhi.n	80142c8 <_scanf_float+0x11c>
 80141fe:	2b40      	cmp	r3, #64	; 0x40
 8014200:	d83c      	bhi.n	801427c <_scanf_float+0xd0>
 8014202:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8014206:	b2c8      	uxtb	r0, r1
 8014208:	280e      	cmp	r0, #14
 801420a:	d93a      	bls.n	8014282 <_scanf_float+0xd6>
 801420c:	f1b9 0f00 	cmp.w	r9, #0
 8014210:	d003      	beq.n	801421a <_scanf_float+0x6e>
 8014212:	6823      	ldr	r3, [r4, #0]
 8014214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014218:	6023      	str	r3, [r4, #0]
 801421a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801421e:	f1ba 0f01 	cmp.w	sl, #1
 8014222:	f200 8113 	bhi.w	801444c <_scanf_float+0x2a0>
 8014226:	455e      	cmp	r6, fp
 8014228:	f200 8105 	bhi.w	8014436 <_scanf_float+0x28a>
 801422c:	2501      	movs	r5, #1
 801422e:	4628      	mov	r0, r5
 8014230:	b007      	add	sp, #28
 8014232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014236:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801423a:	2a0d      	cmp	r2, #13
 801423c:	d8e6      	bhi.n	801420c <_scanf_float+0x60>
 801423e:	a101      	add	r1, pc, #4	; (adr r1, 8014244 <_scanf_float+0x98>)
 8014240:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014244:	08014383 	.word	0x08014383
 8014248:	0801420d 	.word	0x0801420d
 801424c:	0801420d 	.word	0x0801420d
 8014250:	0801420d 	.word	0x0801420d
 8014254:	080143e3 	.word	0x080143e3
 8014258:	080143bb 	.word	0x080143bb
 801425c:	0801420d 	.word	0x0801420d
 8014260:	0801420d 	.word	0x0801420d
 8014264:	08014391 	.word	0x08014391
 8014268:	0801420d 	.word	0x0801420d
 801426c:	0801420d 	.word	0x0801420d
 8014270:	0801420d 	.word	0x0801420d
 8014274:	0801420d 	.word	0x0801420d
 8014278:	08014349 	.word	0x08014349
 801427c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8014280:	e7db      	b.n	801423a <_scanf_float+0x8e>
 8014282:	290e      	cmp	r1, #14
 8014284:	d8c2      	bhi.n	801420c <_scanf_float+0x60>
 8014286:	a001      	add	r0, pc, #4	; (adr r0, 801428c <_scanf_float+0xe0>)
 8014288:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801428c:	0801433b 	.word	0x0801433b
 8014290:	0801420d 	.word	0x0801420d
 8014294:	0801433b 	.word	0x0801433b
 8014298:	080143cf 	.word	0x080143cf
 801429c:	0801420d 	.word	0x0801420d
 80142a0:	080142e9 	.word	0x080142e9
 80142a4:	08014325 	.word	0x08014325
 80142a8:	08014325 	.word	0x08014325
 80142ac:	08014325 	.word	0x08014325
 80142b0:	08014325 	.word	0x08014325
 80142b4:	08014325 	.word	0x08014325
 80142b8:	08014325 	.word	0x08014325
 80142bc:	08014325 	.word	0x08014325
 80142c0:	08014325 	.word	0x08014325
 80142c4:	08014325 	.word	0x08014325
 80142c8:	2b6e      	cmp	r3, #110	; 0x6e
 80142ca:	d809      	bhi.n	80142e0 <_scanf_float+0x134>
 80142cc:	2b60      	cmp	r3, #96	; 0x60
 80142ce:	d8b2      	bhi.n	8014236 <_scanf_float+0x8a>
 80142d0:	2b54      	cmp	r3, #84	; 0x54
 80142d2:	d077      	beq.n	80143c4 <_scanf_float+0x218>
 80142d4:	2b59      	cmp	r3, #89	; 0x59
 80142d6:	d199      	bne.n	801420c <_scanf_float+0x60>
 80142d8:	2d07      	cmp	r5, #7
 80142da:	d197      	bne.n	801420c <_scanf_float+0x60>
 80142dc:	2508      	movs	r5, #8
 80142de:	e029      	b.n	8014334 <_scanf_float+0x188>
 80142e0:	2b74      	cmp	r3, #116	; 0x74
 80142e2:	d06f      	beq.n	80143c4 <_scanf_float+0x218>
 80142e4:	2b79      	cmp	r3, #121	; 0x79
 80142e6:	e7f6      	b.n	80142d6 <_scanf_float+0x12a>
 80142e8:	6821      	ldr	r1, [r4, #0]
 80142ea:	05c8      	lsls	r0, r1, #23
 80142ec:	d51a      	bpl.n	8014324 <_scanf_float+0x178>
 80142ee:	9b02      	ldr	r3, [sp, #8]
 80142f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80142f4:	6021      	str	r1, [r4, #0]
 80142f6:	f109 0901 	add.w	r9, r9, #1
 80142fa:	b11b      	cbz	r3, 8014304 <_scanf_float+0x158>
 80142fc:	3b01      	subs	r3, #1
 80142fe:	3201      	adds	r2, #1
 8014300:	9302      	str	r3, [sp, #8]
 8014302:	60a2      	str	r2, [r4, #8]
 8014304:	68a3      	ldr	r3, [r4, #8]
 8014306:	3b01      	subs	r3, #1
 8014308:	60a3      	str	r3, [r4, #8]
 801430a:	6923      	ldr	r3, [r4, #16]
 801430c:	3301      	adds	r3, #1
 801430e:	6123      	str	r3, [r4, #16]
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	3b01      	subs	r3, #1
 8014314:	2b00      	cmp	r3, #0
 8014316:	607b      	str	r3, [r7, #4]
 8014318:	f340 8084 	ble.w	8014424 <_scanf_float+0x278>
 801431c:	683b      	ldr	r3, [r7, #0]
 801431e:	3301      	adds	r3, #1
 8014320:	603b      	str	r3, [r7, #0]
 8014322:	e766      	b.n	80141f2 <_scanf_float+0x46>
 8014324:	eb1a 0f05 	cmn.w	sl, r5
 8014328:	f47f af70 	bne.w	801420c <_scanf_float+0x60>
 801432c:	6822      	ldr	r2, [r4, #0]
 801432e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8014332:	6022      	str	r2, [r4, #0]
 8014334:	f806 3b01 	strb.w	r3, [r6], #1
 8014338:	e7e4      	b.n	8014304 <_scanf_float+0x158>
 801433a:	6822      	ldr	r2, [r4, #0]
 801433c:	0610      	lsls	r0, r2, #24
 801433e:	f57f af65 	bpl.w	801420c <_scanf_float+0x60>
 8014342:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014346:	e7f4      	b.n	8014332 <_scanf_float+0x186>
 8014348:	f1ba 0f00 	cmp.w	sl, #0
 801434c:	d10e      	bne.n	801436c <_scanf_float+0x1c0>
 801434e:	f1b9 0f00 	cmp.w	r9, #0
 8014352:	d10e      	bne.n	8014372 <_scanf_float+0x1c6>
 8014354:	6822      	ldr	r2, [r4, #0]
 8014356:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801435a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801435e:	d108      	bne.n	8014372 <_scanf_float+0x1c6>
 8014360:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014364:	6022      	str	r2, [r4, #0]
 8014366:	f04f 0a01 	mov.w	sl, #1
 801436a:	e7e3      	b.n	8014334 <_scanf_float+0x188>
 801436c:	f1ba 0f02 	cmp.w	sl, #2
 8014370:	d055      	beq.n	801441e <_scanf_float+0x272>
 8014372:	2d01      	cmp	r5, #1
 8014374:	d002      	beq.n	801437c <_scanf_float+0x1d0>
 8014376:	2d04      	cmp	r5, #4
 8014378:	f47f af48 	bne.w	801420c <_scanf_float+0x60>
 801437c:	3501      	adds	r5, #1
 801437e:	b2ed      	uxtb	r5, r5
 8014380:	e7d8      	b.n	8014334 <_scanf_float+0x188>
 8014382:	f1ba 0f01 	cmp.w	sl, #1
 8014386:	f47f af41 	bne.w	801420c <_scanf_float+0x60>
 801438a:	f04f 0a02 	mov.w	sl, #2
 801438e:	e7d1      	b.n	8014334 <_scanf_float+0x188>
 8014390:	b97d      	cbnz	r5, 80143b2 <_scanf_float+0x206>
 8014392:	f1b9 0f00 	cmp.w	r9, #0
 8014396:	f47f af3c 	bne.w	8014212 <_scanf_float+0x66>
 801439a:	6822      	ldr	r2, [r4, #0]
 801439c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80143a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80143a4:	f47f af39 	bne.w	801421a <_scanf_float+0x6e>
 80143a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80143ac:	6022      	str	r2, [r4, #0]
 80143ae:	2501      	movs	r5, #1
 80143b0:	e7c0      	b.n	8014334 <_scanf_float+0x188>
 80143b2:	2d03      	cmp	r5, #3
 80143b4:	d0e2      	beq.n	801437c <_scanf_float+0x1d0>
 80143b6:	2d05      	cmp	r5, #5
 80143b8:	e7de      	b.n	8014378 <_scanf_float+0x1cc>
 80143ba:	2d02      	cmp	r5, #2
 80143bc:	f47f af26 	bne.w	801420c <_scanf_float+0x60>
 80143c0:	2503      	movs	r5, #3
 80143c2:	e7b7      	b.n	8014334 <_scanf_float+0x188>
 80143c4:	2d06      	cmp	r5, #6
 80143c6:	f47f af21 	bne.w	801420c <_scanf_float+0x60>
 80143ca:	2507      	movs	r5, #7
 80143cc:	e7b2      	b.n	8014334 <_scanf_float+0x188>
 80143ce:	6822      	ldr	r2, [r4, #0]
 80143d0:	0591      	lsls	r1, r2, #22
 80143d2:	f57f af1b 	bpl.w	801420c <_scanf_float+0x60>
 80143d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80143da:	6022      	str	r2, [r4, #0]
 80143dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80143e0:	e7a8      	b.n	8014334 <_scanf_float+0x188>
 80143e2:	6822      	ldr	r2, [r4, #0]
 80143e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80143e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80143ec:	d006      	beq.n	80143fc <_scanf_float+0x250>
 80143ee:	0550      	lsls	r0, r2, #21
 80143f0:	f57f af0c 	bpl.w	801420c <_scanf_float+0x60>
 80143f4:	f1b9 0f00 	cmp.w	r9, #0
 80143f8:	f43f af0f 	beq.w	801421a <_scanf_float+0x6e>
 80143fc:	0591      	lsls	r1, r2, #22
 80143fe:	bf58      	it	pl
 8014400:	9901      	ldrpl	r1, [sp, #4]
 8014402:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014406:	bf58      	it	pl
 8014408:	eba9 0101 	subpl.w	r1, r9, r1
 801440c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8014410:	bf58      	it	pl
 8014412:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014416:	6022      	str	r2, [r4, #0]
 8014418:	f04f 0900 	mov.w	r9, #0
 801441c:	e78a      	b.n	8014334 <_scanf_float+0x188>
 801441e:	f04f 0a03 	mov.w	sl, #3
 8014422:	e787      	b.n	8014334 <_scanf_float+0x188>
 8014424:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014428:	4639      	mov	r1, r7
 801442a:	4640      	mov	r0, r8
 801442c:	4798      	blx	r3
 801442e:	2800      	cmp	r0, #0
 8014430:	f43f aedf 	beq.w	80141f2 <_scanf_float+0x46>
 8014434:	e6ea      	b.n	801420c <_scanf_float+0x60>
 8014436:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801443a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801443e:	463a      	mov	r2, r7
 8014440:	4640      	mov	r0, r8
 8014442:	4798      	blx	r3
 8014444:	6923      	ldr	r3, [r4, #16]
 8014446:	3b01      	subs	r3, #1
 8014448:	6123      	str	r3, [r4, #16]
 801444a:	e6ec      	b.n	8014226 <_scanf_float+0x7a>
 801444c:	1e6b      	subs	r3, r5, #1
 801444e:	2b06      	cmp	r3, #6
 8014450:	d825      	bhi.n	801449e <_scanf_float+0x2f2>
 8014452:	2d02      	cmp	r5, #2
 8014454:	d836      	bhi.n	80144c4 <_scanf_float+0x318>
 8014456:	455e      	cmp	r6, fp
 8014458:	f67f aee8 	bls.w	801422c <_scanf_float+0x80>
 801445c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014460:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014464:	463a      	mov	r2, r7
 8014466:	4640      	mov	r0, r8
 8014468:	4798      	blx	r3
 801446a:	6923      	ldr	r3, [r4, #16]
 801446c:	3b01      	subs	r3, #1
 801446e:	6123      	str	r3, [r4, #16]
 8014470:	e7f1      	b.n	8014456 <_scanf_float+0x2aa>
 8014472:	9802      	ldr	r0, [sp, #8]
 8014474:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014478:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801447c:	9002      	str	r0, [sp, #8]
 801447e:	463a      	mov	r2, r7
 8014480:	4640      	mov	r0, r8
 8014482:	4798      	blx	r3
 8014484:	6923      	ldr	r3, [r4, #16]
 8014486:	3b01      	subs	r3, #1
 8014488:	6123      	str	r3, [r4, #16]
 801448a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801448e:	fa5f fa8a 	uxtb.w	sl, sl
 8014492:	f1ba 0f02 	cmp.w	sl, #2
 8014496:	d1ec      	bne.n	8014472 <_scanf_float+0x2c6>
 8014498:	3d03      	subs	r5, #3
 801449a:	b2ed      	uxtb	r5, r5
 801449c:	1b76      	subs	r6, r6, r5
 801449e:	6823      	ldr	r3, [r4, #0]
 80144a0:	05da      	lsls	r2, r3, #23
 80144a2:	d52f      	bpl.n	8014504 <_scanf_float+0x358>
 80144a4:	055b      	lsls	r3, r3, #21
 80144a6:	d510      	bpl.n	80144ca <_scanf_float+0x31e>
 80144a8:	455e      	cmp	r6, fp
 80144aa:	f67f aebf 	bls.w	801422c <_scanf_float+0x80>
 80144ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80144b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80144b6:	463a      	mov	r2, r7
 80144b8:	4640      	mov	r0, r8
 80144ba:	4798      	blx	r3
 80144bc:	6923      	ldr	r3, [r4, #16]
 80144be:	3b01      	subs	r3, #1
 80144c0:	6123      	str	r3, [r4, #16]
 80144c2:	e7f1      	b.n	80144a8 <_scanf_float+0x2fc>
 80144c4:	46aa      	mov	sl, r5
 80144c6:	9602      	str	r6, [sp, #8]
 80144c8:	e7df      	b.n	801448a <_scanf_float+0x2de>
 80144ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80144ce:	6923      	ldr	r3, [r4, #16]
 80144d0:	2965      	cmp	r1, #101	; 0x65
 80144d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80144d6:	f106 35ff 	add.w	r5, r6, #4294967295
 80144da:	6123      	str	r3, [r4, #16]
 80144dc:	d00c      	beq.n	80144f8 <_scanf_float+0x34c>
 80144de:	2945      	cmp	r1, #69	; 0x45
 80144e0:	d00a      	beq.n	80144f8 <_scanf_float+0x34c>
 80144e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80144e6:	463a      	mov	r2, r7
 80144e8:	4640      	mov	r0, r8
 80144ea:	4798      	blx	r3
 80144ec:	6923      	ldr	r3, [r4, #16]
 80144ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80144f2:	3b01      	subs	r3, #1
 80144f4:	1eb5      	subs	r5, r6, #2
 80144f6:	6123      	str	r3, [r4, #16]
 80144f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80144fc:	463a      	mov	r2, r7
 80144fe:	4640      	mov	r0, r8
 8014500:	4798      	blx	r3
 8014502:	462e      	mov	r6, r5
 8014504:	6825      	ldr	r5, [r4, #0]
 8014506:	f015 0510 	ands.w	r5, r5, #16
 801450a:	d14e      	bne.n	80145aa <_scanf_float+0x3fe>
 801450c:	7035      	strb	r5, [r6, #0]
 801450e:	6823      	ldr	r3, [r4, #0]
 8014510:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014518:	d119      	bne.n	801454e <_scanf_float+0x3a2>
 801451a:	9b01      	ldr	r3, [sp, #4]
 801451c:	454b      	cmp	r3, r9
 801451e:	eba3 0209 	sub.w	r2, r3, r9
 8014522:	d121      	bne.n	8014568 <_scanf_float+0x3bc>
 8014524:	2200      	movs	r2, #0
 8014526:	4659      	mov	r1, fp
 8014528:	4640      	mov	r0, r8
 801452a:	f000 fefb 	bl	8015324 <_strtod_r>
 801452e:	6822      	ldr	r2, [r4, #0]
 8014530:	9b03      	ldr	r3, [sp, #12]
 8014532:	f012 0f02 	tst.w	r2, #2
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	d021      	beq.n	801457e <_scanf_float+0x3d2>
 801453a:	9903      	ldr	r1, [sp, #12]
 801453c:	1d1a      	adds	r2, r3, #4
 801453e:	600a      	str	r2, [r1, #0]
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	ed83 0b00 	vstr	d0, [r3]
 8014546:	68e3      	ldr	r3, [r4, #12]
 8014548:	3301      	adds	r3, #1
 801454a:	60e3      	str	r3, [r4, #12]
 801454c:	e66f      	b.n	801422e <_scanf_float+0x82>
 801454e:	9b04      	ldr	r3, [sp, #16]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d0e7      	beq.n	8014524 <_scanf_float+0x378>
 8014554:	9905      	ldr	r1, [sp, #20]
 8014556:	230a      	movs	r3, #10
 8014558:	462a      	mov	r2, r5
 801455a:	3101      	adds	r1, #1
 801455c:	4640      	mov	r0, r8
 801455e:	f000 ff69 	bl	8015434 <_strtol_r>
 8014562:	9b04      	ldr	r3, [sp, #16]
 8014564:	9e05      	ldr	r6, [sp, #20]
 8014566:	1ac2      	subs	r2, r0, r3
 8014568:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801456c:	429e      	cmp	r6, r3
 801456e:	bf28      	it	cs
 8014570:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8014574:	490e      	ldr	r1, [pc, #56]	; (80145b0 <_scanf_float+0x404>)
 8014576:	4630      	mov	r0, r6
 8014578:	f000 f89e 	bl	80146b8 <siprintf>
 801457c:	e7d2      	b.n	8014524 <_scanf_float+0x378>
 801457e:	9903      	ldr	r1, [sp, #12]
 8014580:	f012 0f04 	tst.w	r2, #4
 8014584:	f103 0204 	add.w	r2, r3, #4
 8014588:	600a      	str	r2, [r1, #0]
 801458a:	d1d9      	bne.n	8014540 <_scanf_float+0x394>
 801458c:	eeb4 0b40 	vcmp.f64	d0, d0
 8014590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014594:	681e      	ldr	r6, [r3, #0]
 8014596:	d705      	bvc.n	80145a4 <_scanf_float+0x3f8>
 8014598:	4806      	ldr	r0, [pc, #24]	; (80145b4 <_scanf_float+0x408>)
 801459a:	f000 f887 	bl	80146ac <nanf>
 801459e:	ed86 0a00 	vstr	s0, [r6]
 80145a2:	e7d0      	b.n	8014546 <_scanf_float+0x39a>
 80145a4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80145a8:	e7f9      	b.n	801459e <_scanf_float+0x3f2>
 80145aa:	2500      	movs	r5, #0
 80145ac:	e63f      	b.n	801422e <_scanf_float+0x82>
 80145ae:	bf00      	nop
 80145b0:	08018768 	.word	0x08018768
 80145b4:	08018b70 	.word	0x08018b70

080145b8 <cleanup_glue>:
 80145b8:	b538      	push	{r3, r4, r5, lr}
 80145ba:	460c      	mov	r4, r1
 80145bc:	6809      	ldr	r1, [r1, #0]
 80145be:	4605      	mov	r5, r0
 80145c0:	b109      	cbz	r1, 80145c6 <cleanup_glue+0xe>
 80145c2:	f7ff fff9 	bl	80145b8 <cleanup_glue>
 80145c6:	4621      	mov	r1, r4
 80145c8:	4628      	mov	r0, r5
 80145ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80145ce:	f002 be93 	b.w	80172f8 <_free_r>
	...

080145d4 <_reclaim_reent>:
 80145d4:	4b2c      	ldr	r3, [pc, #176]	; (8014688 <_reclaim_reent+0xb4>)
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	4283      	cmp	r3, r0
 80145da:	b570      	push	{r4, r5, r6, lr}
 80145dc:	4604      	mov	r4, r0
 80145de:	d051      	beq.n	8014684 <_reclaim_reent+0xb0>
 80145e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80145e2:	b143      	cbz	r3, 80145f6 <_reclaim_reent+0x22>
 80145e4:	68db      	ldr	r3, [r3, #12]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d14a      	bne.n	8014680 <_reclaim_reent+0xac>
 80145ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80145ec:	6819      	ldr	r1, [r3, #0]
 80145ee:	b111      	cbz	r1, 80145f6 <_reclaim_reent+0x22>
 80145f0:	4620      	mov	r0, r4
 80145f2:	f002 fe81 	bl	80172f8 <_free_r>
 80145f6:	6961      	ldr	r1, [r4, #20]
 80145f8:	b111      	cbz	r1, 8014600 <_reclaim_reent+0x2c>
 80145fa:	4620      	mov	r0, r4
 80145fc:	f002 fe7c 	bl	80172f8 <_free_r>
 8014600:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014602:	b111      	cbz	r1, 801460a <_reclaim_reent+0x36>
 8014604:	4620      	mov	r0, r4
 8014606:	f002 fe77 	bl	80172f8 <_free_r>
 801460a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801460c:	b111      	cbz	r1, 8014614 <_reclaim_reent+0x40>
 801460e:	4620      	mov	r0, r4
 8014610:	f002 fe72 	bl	80172f8 <_free_r>
 8014614:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014616:	b111      	cbz	r1, 801461e <_reclaim_reent+0x4a>
 8014618:	4620      	mov	r0, r4
 801461a:	f002 fe6d 	bl	80172f8 <_free_r>
 801461e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014620:	b111      	cbz	r1, 8014628 <_reclaim_reent+0x54>
 8014622:	4620      	mov	r0, r4
 8014624:	f002 fe68 	bl	80172f8 <_free_r>
 8014628:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801462a:	b111      	cbz	r1, 8014632 <_reclaim_reent+0x5e>
 801462c:	4620      	mov	r0, r4
 801462e:	f002 fe63 	bl	80172f8 <_free_r>
 8014632:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014634:	b111      	cbz	r1, 801463c <_reclaim_reent+0x68>
 8014636:	4620      	mov	r0, r4
 8014638:	f002 fe5e 	bl	80172f8 <_free_r>
 801463c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801463e:	b111      	cbz	r1, 8014646 <_reclaim_reent+0x72>
 8014640:	4620      	mov	r0, r4
 8014642:	f002 fe59 	bl	80172f8 <_free_r>
 8014646:	69a3      	ldr	r3, [r4, #24]
 8014648:	b1e3      	cbz	r3, 8014684 <_reclaim_reent+0xb0>
 801464a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801464c:	4620      	mov	r0, r4
 801464e:	4798      	blx	r3
 8014650:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014652:	b1b9      	cbz	r1, 8014684 <_reclaim_reent+0xb0>
 8014654:	4620      	mov	r0, r4
 8014656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801465a:	f7ff bfad 	b.w	80145b8 <cleanup_glue>
 801465e:	5949      	ldr	r1, [r1, r5]
 8014660:	b941      	cbnz	r1, 8014674 <_reclaim_reent+0xa0>
 8014662:	3504      	adds	r5, #4
 8014664:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014666:	2d80      	cmp	r5, #128	; 0x80
 8014668:	68d9      	ldr	r1, [r3, #12]
 801466a:	d1f8      	bne.n	801465e <_reclaim_reent+0x8a>
 801466c:	4620      	mov	r0, r4
 801466e:	f002 fe43 	bl	80172f8 <_free_r>
 8014672:	e7ba      	b.n	80145ea <_reclaim_reent+0x16>
 8014674:	680e      	ldr	r6, [r1, #0]
 8014676:	4620      	mov	r0, r4
 8014678:	f002 fe3e 	bl	80172f8 <_free_r>
 801467c:	4631      	mov	r1, r6
 801467e:	e7ef      	b.n	8014660 <_reclaim_reent+0x8c>
 8014680:	2500      	movs	r5, #0
 8014682:	e7ef      	b.n	8014664 <_reclaim_reent+0x90>
 8014684:	bd70      	pop	{r4, r5, r6, pc}
 8014686:	bf00      	nop
 8014688:	200001c0 	.word	0x200001c0

0801468c <_sbrk_r>:
 801468c:	b538      	push	{r3, r4, r5, lr}
 801468e:	4d06      	ldr	r5, [pc, #24]	; (80146a8 <_sbrk_r+0x1c>)
 8014690:	2300      	movs	r3, #0
 8014692:	4604      	mov	r4, r0
 8014694:	4608      	mov	r0, r1
 8014696:	602b      	str	r3, [r5, #0]
 8014698:	f7f2 fa16 	bl	8006ac8 <_sbrk>
 801469c:	1c43      	adds	r3, r0, #1
 801469e:	d102      	bne.n	80146a6 <_sbrk_r+0x1a>
 80146a0:	682b      	ldr	r3, [r5, #0]
 80146a2:	b103      	cbz	r3, 80146a6 <_sbrk_r+0x1a>
 80146a4:	6023      	str	r3, [r4, #0]
 80146a6:	bd38      	pop	{r3, r4, r5, pc}
 80146a8:	200061e0 	.word	0x200061e0

080146ac <nanf>:
 80146ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80146b4 <nanf+0x8>
 80146b0:	4770      	bx	lr
 80146b2:	bf00      	nop
 80146b4:	7fc00000 	.word	0x7fc00000

080146b8 <siprintf>:
 80146b8:	b40e      	push	{r1, r2, r3}
 80146ba:	b500      	push	{lr}
 80146bc:	b09c      	sub	sp, #112	; 0x70
 80146be:	ab1d      	add	r3, sp, #116	; 0x74
 80146c0:	9002      	str	r0, [sp, #8]
 80146c2:	9006      	str	r0, [sp, #24]
 80146c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80146c8:	4809      	ldr	r0, [pc, #36]	; (80146f0 <siprintf+0x38>)
 80146ca:	9107      	str	r1, [sp, #28]
 80146cc:	9104      	str	r1, [sp, #16]
 80146ce:	4909      	ldr	r1, [pc, #36]	; (80146f4 <siprintf+0x3c>)
 80146d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80146d4:	9105      	str	r1, [sp, #20]
 80146d6:	6800      	ldr	r0, [r0, #0]
 80146d8:	9301      	str	r3, [sp, #4]
 80146da:	a902      	add	r1, sp, #8
 80146dc:	f002 feb4 	bl	8017448 <_svfiprintf_r>
 80146e0:	9b02      	ldr	r3, [sp, #8]
 80146e2:	2200      	movs	r2, #0
 80146e4:	701a      	strb	r2, [r3, #0]
 80146e6:	b01c      	add	sp, #112	; 0x70
 80146e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80146ec:	b003      	add	sp, #12
 80146ee:	4770      	bx	lr
 80146f0:	200001c0 	.word	0x200001c0
 80146f4:	ffff0208 	.word	0xffff0208

080146f8 <__sread>:
 80146f8:	b510      	push	{r4, lr}
 80146fa:	460c      	mov	r4, r1
 80146fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014700:	f002 ffa2 	bl	8017648 <_read_r>
 8014704:	2800      	cmp	r0, #0
 8014706:	bfab      	itete	ge
 8014708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801470a:	89a3      	ldrhlt	r3, [r4, #12]
 801470c:	181b      	addge	r3, r3, r0
 801470e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014712:	bfac      	ite	ge
 8014714:	6563      	strge	r3, [r4, #84]	; 0x54
 8014716:	81a3      	strhlt	r3, [r4, #12]
 8014718:	bd10      	pop	{r4, pc}

0801471a <__swrite>:
 801471a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801471e:	461f      	mov	r7, r3
 8014720:	898b      	ldrh	r3, [r1, #12]
 8014722:	05db      	lsls	r3, r3, #23
 8014724:	4605      	mov	r5, r0
 8014726:	460c      	mov	r4, r1
 8014728:	4616      	mov	r6, r2
 801472a:	d505      	bpl.n	8014738 <__swrite+0x1e>
 801472c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014730:	2302      	movs	r3, #2
 8014732:	2200      	movs	r2, #0
 8014734:	f002 f8d4 	bl	80168e0 <_lseek_r>
 8014738:	89a3      	ldrh	r3, [r4, #12]
 801473a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801473e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014742:	81a3      	strh	r3, [r4, #12]
 8014744:	4632      	mov	r2, r6
 8014746:	463b      	mov	r3, r7
 8014748:	4628      	mov	r0, r5
 801474a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801474e:	f000 be73 	b.w	8015438 <_write_r>

08014752 <__sseek>:
 8014752:	b510      	push	{r4, lr}
 8014754:	460c      	mov	r4, r1
 8014756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801475a:	f002 f8c1 	bl	80168e0 <_lseek_r>
 801475e:	1c43      	adds	r3, r0, #1
 8014760:	89a3      	ldrh	r3, [r4, #12]
 8014762:	bf15      	itete	ne
 8014764:	6560      	strne	r0, [r4, #84]	; 0x54
 8014766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801476a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801476e:	81a3      	strheq	r3, [r4, #12]
 8014770:	bf18      	it	ne
 8014772:	81a3      	strhne	r3, [r4, #12]
 8014774:	bd10      	pop	{r4, pc}

08014776 <__sclose>:
 8014776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801477a:	f000 be6f 	b.w	801545c <_close_r>

0801477e <sulp>:
 801477e:	b570      	push	{r4, r5, r6, lr}
 8014780:	4604      	mov	r4, r0
 8014782:	460d      	mov	r5, r1
 8014784:	4616      	mov	r6, r2
 8014786:	ec45 4b10 	vmov	d0, r4, r5
 801478a:	f002 fc53 	bl	8017034 <__ulp>
 801478e:	b17e      	cbz	r6, 80147b0 <sulp+0x32>
 8014790:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014794:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014798:	2b00      	cmp	r3, #0
 801479a:	dd09      	ble.n	80147b0 <sulp+0x32>
 801479c:	051b      	lsls	r3, r3, #20
 801479e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80147a2:	2000      	movs	r0, #0
 80147a4:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80147a8:	ec41 0b17 	vmov	d7, r0, r1
 80147ac:	ee20 0b07 	vmul.f64	d0, d0, d7
 80147b0:	bd70      	pop	{r4, r5, r6, pc}
 80147b2:	0000      	movs	r0, r0
 80147b4:	0000      	movs	r0, r0
	...

080147b8 <_strtod_l>:
 80147b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147bc:	ed2d 8b0e 	vpush	{d8-d14}
 80147c0:	b097      	sub	sp, #92	; 0x5c
 80147c2:	461f      	mov	r7, r3
 80147c4:	2300      	movs	r3, #0
 80147c6:	9312      	str	r3, [sp, #72]	; 0x48
 80147c8:	4ba1      	ldr	r3, [pc, #644]	; (8014a50 <_strtod_l+0x298>)
 80147ca:	920d      	str	r2, [sp, #52]	; 0x34
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	9307      	str	r3, [sp, #28]
 80147d0:	4604      	mov	r4, r0
 80147d2:	4618      	mov	r0, r3
 80147d4:	468b      	mov	fp, r1
 80147d6:	f7eb fd33 	bl	8000240 <strlen>
 80147da:	f04f 0800 	mov.w	r8, #0
 80147de:	4605      	mov	r5, r0
 80147e0:	f04f 0900 	mov.w	r9, #0
 80147e4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80147e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80147ea:	7813      	ldrb	r3, [r2, #0]
 80147ec:	2b2b      	cmp	r3, #43	; 0x2b
 80147ee:	d04d      	beq.n	801488c <_strtod_l+0xd4>
 80147f0:	d83a      	bhi.n	8014868 <_strtod_l+0xb0>
 80147f2:	2b0d      	cmp	r3, #13
 80147f4:	d833      	bhi.n	801485e <_strtod_l+0xa6>
 80147f6:	2b08      	cmp	r3, #8
 80147f8:	d833      	bhi.n	8014862 <_strtod_l+0xaa>
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d03d      	beq.n	801487a <_strtod_l+0xc2>
 80147fe:	2300      	movs	r3, #0
 8014800:	9308      	str	r3, [sp, #32]
 8014802:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014804:	7833      	ldrb	r3, [r6, #0]
 8014806:	2b30      	cmp	r3, #48	; 0x30
 8014808:	f040 80b0 	bne.w	801496c <_strtod_l+0x1b4>
 801480c:	7873      	ldrb	r3, [r6, #1]
 801480e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014812:	2b58      	cmp	r3, #88	; 0x58
 8014814:	d167      	bne.n	80148e6 <_strtod_l+0x12e>
 8014816:	9b08      	ldr	r3, [sp, #32]
 8014818:	9301      	str	r3, [sp, #4]
 801481a:	ab12      	add	r3, sp, #72	; 0x48
 801481c:	9702      	str	r7, [sp, #8]
 801481e:	9300      	str	r3, [sp, #0]
 8014820:	4a8c      	ldr	r2, [pc, #560]	; (8014a54 <_strtod_l+0x29c>)
 8014822:	ab13      	add	r3, sp, #76	; 0x4c
 8014824:	a911      	add	r1, sp, #68	; 0x44
 8014826:	4620      	mov	r0, r4
 8014828:	f001 fd4e 	bl	80162c8 <__gethex>
 801482c:	f010 0507 	ands.w	r5, r0, #7
 8014830:	4607      	mov	r7, r0
 8014832:	d005      	beq.n	8014840 <_strtod_l+0x88>
 8014834:	2d06      	cmp	r5, #6
 8014836:	d12b      	bne.n	8014890 <_strtod_l+0xd8>
 8014838:	3601      	adds	r6, #1
 801483a:	2300      	movs	r3, #0
 801483c:	9611      	str	r6, [sp, #68]	; 0x44
 801483e:	9308      	str	r3, [sp, #32]
 8014840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014842:	2b00      	cmp	r3, #0
 8014844:	f040 854e 	bne.w	80152e4 <_strtod_l+0xb2c>
 8014848:	9b08      	ldr	r3, [sp, #32]
 801484a:	b1e3      	cbz	r3, 8014886 <_strtod_l+0xce>
 801484c:	ec49 8b17 	vmov	d7, r8, r9
 8014850:	eeb1 0b47 	vneg.f64	d0, d7
 8014854:	b017      	add	sp, #92	; 0x5c
 8014856:	ecbd 8b0e 	vpop	{d8-d14}
 801485a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801485e:	2b20      	cmp	r3, #32
 8014860:	d1cd      	bne.n	80147fe <_strtod_l+0x46>
 8014862:	3201      	adds	r2, #1
 8014864:	9211      	str	r2, [sp, #68]	; 0x44
 8014866:	e7bf      	b.n	80147e8 <_strtod_l+0x30>
 8014868:	2b2d      	cmp	r3, #45	; 0x2d
 801486a:	d1c8      	bne.n	80147fe <_strtod_l+0x46>
 801486c:	2301      	movs	r3, #1
 801486e:	9308      	str	r3, [sp, #32]
 8014870:	1c53      	adds	r3, r2, #1
 8014872:	9311      	str	r3, [sp, #68]	; 0x44
 8014874:	7853      	ldrb	r3, [r2, #1]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d1c3      	bne.n	8014802 <_strtod_l+0x4a>
 801487a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801487c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8014880:	2b00      	cmp	r3, #0
 8014882:	f040 852d 	bne.w	80152e0 <_strtod_l+0xb28>
 8014886:	ec49 8b10 	vmov	d0, r8, r9
 801488a:	e7e3      	b.n	8014854 <_strtod_l+0x9c>
 801488c:	2300      	movs	r3, #0
 801488e:	e7ee      	b.n	801486e <_strtod_l+0xb6>
 8014890:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014892:	b13a      	cbz	r2, 80148a4 <_strtod_l+0xec>
 8014894:	2135      	movs	r1, #53	; 0x35
 8014896:	a814      	add	r0, sp, #80	; 0x50
 8014898:	f002 fcd4 	bl	8017244 <__copybits>
 801489c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801489e:	4620      	mov	r0, r4
 80148a0:	f002 f896 	bl	80169d0 <_Bfree>
 80148a4:	3d01      	subs	r5, #1
 80148a6:	2d04      	cmp	r5, #4
 80148a8:	d806      	bhi.n	80148b8 <_strtod_l+0x100>
 80148aa:	e8df f005 	tbb	[pc, r5]
 80148ae:	030a      	.short	0x030a
 80148b0:	1714      	.short	0x1714
 80148b2:	0a          	.byte	0x0a
 80148b3:	00          	.byte	0x00
 80148b4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80148b8:	073f      	lsls	r7, r7, #28
 80148ba:	d5c1      	bpl.n	8014840 <_strtod_l+0x88>
 80148bc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80148c0:	e7be      	b.n	8014840 <_strtod_l+0x88>
 80148c2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80148c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80148c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80148cc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80148d0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80148d4:	e7f0      	b.n	80148b8 <_strtod_l+0x100>
 80148d6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8014a58 <_strtod_l+0x2a0>
 80148da:	e7ed      	b.n	80148b8 <_strtod_l+0x100>
 80148dc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80148e0:	f04f 38ff 	mov.w	r8, #4294967295
 80148e4:	e7e8      	b.n	80148b8 <_strtod_l+0x100>
 80148e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80148e8:	1c5a      	adds	r2, r3, #1
 80148ea:	9211      	str	r2, [sp, #68]	; 0x44
 80148ec:	785b      	ldrb	r3, [r3, #1]
 80148ee:	2b30      	cmp	r3, #48	; 0x30
 80148f0:	d0f9      	beq.n	80148e6 <_strtod_l+0x12e>
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d0a4      	beq.n	8014840 <_strtod_l+0x88>
 80148f6:	2301      	movs	r3, #1
 80148f8:	f04f 0a00 	mov.w	sl, #0
 80148fc:	9304      	str	r3, [sp, #16]
 80148fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014900:	930a      	str	r3, [sp, #40]	; 0x28
 8014902:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8014906:	f8cd a018 	str.w	sl, [sp, #24]
 801490a:	220a      	movs	r2, #10
 801490c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801490e:	7807      	ldrb	r7, [r0, #0]
 8014910:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8014914:	b2d9      	uxtb	r1, r3
 8014916:	2909      	cmp	r1, #9
 8014918:	d92a      	bls.n	8014970 <_strtod_l+0x1b8>
 801491a:	9907      	ldr	r1, [sp, #28]
 801491c:	462a      	mov	r2, r5
 801491e:	f002 feaf 	bl	8017680 <strncmp>
 8014922:	2800      	cmp	r0, #0
 8014924:	d033      	beq.n	801498e <_strtod_l+0x1d6>
 8014926:	2000      	movs	r0, #0
 8014928:	9b06      	ldr	r3, [sp, #24]
 801492a:	463a      	mov	r2, r7
 801492c:	4601      	mov	r1, r0
 801492e:	4607      	mov	r7, r0
 8014930:	2a65      	cmp	r2, #101	; 0x65
 8014932:	d001      	beq.n	8014938 <_strtod_l+0x180>
 8014934:	2a45      	cmp	r2, #69	; 0x45
 8014936:	d117      	bne.n	8014968 <_strtod_l+0x1b0>
 8014938:	b91b      	cbnz	r3, 8014942 <_strtod_l+0x18a>
 801493a:	9b04      	ldr	r3, [sp, #16]
 801493c:	4303      	orrs	r3, r0
 801493e:	d09c      	beq.n	801487a <_strtod_l+0xc2>
 8014940:	2300      	movs	r3, #0
 8014942:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8014946:	f10b 0201 	add.w	r2, fp, #1
 801494a:	9211      	str	r2, [sp, #68]	; 0x44
 801494c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8014950:	2a2b      	cmp	r2, #43	; 0x2b
 8014952:	d071      	beq.n	8014a38 <_strtod_l+0x280>
 8014954:	2a2d      	cmp	r2, #45	; 0x2d
 8014956:	d077      	beq.n	8014a48 <_strtod_l+0x290>
 8014958:	f04f 0e00 	mov.w	lr, #0
 801495c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8014960:	2d09      	cmp	r5, #9
 8014962:	d97f      	bls.n	8014a64 <_strtod_l+0x2ac>
 8014964:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8014968:	2500      	movs	r5, #0
 801496a:	e09b      	b.n	8014aa4 <_strtod_l+0x2ec>
 801496c:	2300      	movs	r3, #0
 801496e:	e7c3      	b.n	80148f8 <_strtod_l+0x140>
 8014970:	9906      	ldr	r1, [sp, #24]
 8014972:	2908      	cmp	r1, #8
 8014974:	bfdd      	ittte	le
 8014976:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014978:	fb02 3301 	mlale	r3, r2, r1, r3
 801497c:	9309      	strle	r3, [sp, #36]	; 0x24
 801497e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8014982:	9b06      	ldr	r3, [sp, #24]
 8014984:	3001      	adds	r0, #1
 8014986:	3301      	adds	r3, #1
 8014988:	9306      	str	r3, [sp, #24]
 801498a:	9011      	str	r0, [sp, #68]	; 0x44
 801498c:	e7be      	b.n	801490c <_strtod_l+0x154>
 801498e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014990:	195a      	adds	r2, r3, r5
 8014992:	9211      	str	r2, [sp, #68]	; 0x44
 8014994:	5d5a      	ldrb	r2, [r3, r5]
 8014996:	9b06      	ldr	r3, [sp, #24]
 8014998:	b3a3      	cbz	r3, 8014a04 <_strtod_l+0x24c>
 801499a:	4607      	mov	r7, r0
 801499c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80149a0:	2909      	cmp	r1, #9
 80149a2:	d912      	bls.n	80149ca <_strtod_l+0x212>
 80149a4:	2101      	movs	r1, #1
 80149a6:	e7c3      	b.n	8014930 <_strtod_l+0x178>
 80149a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80149aa:	1c5a      	adds	r2, r3, #1
 80149ac:	9211      	str	r2, [sp, #68]	; 0x44
 80149ae:	785a      	ldrb	r2, [r3, #1]
 80149b0:	3001      	adds	r0, #1
 80149b2:	2a30      	cmp	r2, #48	; 0x30
 80149b4:	d0f8      	beq.n	80149a8 <_strtod_l+0x1f0>
 80149b6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80149ba:	2b08      	cmp	r3, #8
 80149bc:	f200 8497 	bhi.w	80152ee <_strtod_l+0xb36>
 80149c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80149c2:	930a      	str	r3, [sp, #40]	; 0x28
 80149c4:	4607      	mov	r7, r0
 80149c6:	2000      	movs	r0, #0
 80149c8:	4603      	mov	r3, r0
 80149ca:	3a30      	subs	r2, #48	; 0x30
 80149cc:	f100 0101 	add.w	r1, r0, #1
 80149d0:	d012      	beq.n	80149f8 <_strtod_l+0x240>
 80149d2:	440f      	add	r7, r1
 80149d4:	eb00 0c03 	add.w	ip, r0, r3
 80149d8:	4619      	mov	r1, r3
 80149da:	250a      	movs	r5, #10
 80149dc:	4561      	cmp	r1, ip
 80149de:	d113      	bne.n	8014a08 <_strtod_l+0x250>
 80149e0:	1819      	adds	r1, r3, r0
 80149e2:	2908      	cmp	r1, #8
 80149e4:	f103 0301 	add.w	r3, r3, #1
 80149e8:	4403      	add	r3, r0
 80149ea:	dc1c      	bgt.n	8014a26 <_strtod_l+0x26e>
 80149ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80149ee:	210a      	movs	r1, #10
 80149f0:	fb01 2200 	mla	r2, r1, r0, r2
 80149f4:	9209      	str	r2, [sp, #36]	; 0x24
 80149f6:	2100      	movs	r1, #0
 80149f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80149fa:	1c50      	adds	r0, r2, #1
 80149fc:	9011      	str	r0, [sp, #68]	; 0x44
 80149fe:	7852      	ldrb	r2, [r2, #1]
 8014a00:	4608      	mov	r0, r1
 8014a02:	e7cb      	b.n	801499c <_strtod_l+0x1e4>
 8014a04:	9806      	ldr	r0, [sp, #24]
 8014a06:	e7d4      	b.n	80149b2 <_strtod_l+0x1fa>
 8014a08:	2908      	cmp	r1, #8
 8014a0a:	dc04      	bgt.n	8014a16 <_strtod_l+0x25e>
 8014a0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8014a0e:	436e      	muls	r6, r5
 8014a10:	9609      	str	r6, [sp, #36]	; 0x24
 8014a12:	3101      	adds	r1, #1
 8014a14:	e7e2      	b.n	80149dc <_strtod_l+0x224>
 8014a16:	f101 0e01 	add.w	lr, r1, #1
 8014a1a:	f1be 0f10 	cmp.w	lr, #16
 8014a1e:	bfd8      	it	le
 8014a20:	fb05 fa0a 	mulle.w	sl, r5, sl
 8014a24:	e7f5      	b.n	8014a12 <_strtod_l+0x25a>
 8014a26:	2b10      	cmp	r3, #16
 8014a28:	bfdc      	itt	le
 8014a2a:	210a      	movle	r1, #10
 8014a2c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8014a30:	e7e1      	b.n	80149f6 <_strtod_l+0x23e>
 8014a32:	2700      	movs	r7, #0
 8014a34:	2101      	movs	r1, #1
 8014a36:	e780      	b.n	801493a <_strtod_l+0x182>
 8014a38:	f04f 0e00 	mov.w	lr, #0
 8014a3c:	f10b 0202 	add.w	r2, fp, #2
 8014a40:	9211      	str	r2, [sp, #68]	; 0x44
 8014a42:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8014a46:	e789      	b.n	801495c <_strtod_l+0x1a4>
 8014a48:	f04f 0e01 	mov.w	lr, #1
 8014a4c:	e7f6      	b.n	8014a3c <_strtod_l+0x284>
 8014a4e:	bf00      	nop
 8014a50:	080189b8 	.word	0x080189b8
 8014a54:	08018770 	.word	0x08018770
 8014a58:	7ff00000 	.word	0x7ff00000
 8014a5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014a5e:	1c55      	adds	r5, r2, #1
 8014a60:	9511      	str	r5, [sp, #68]	; 0x44
 8014a62:	7852      	ldrb	r2, [r2, #1]
 8014a64:	2a30      	cmp	r2, #48	; 0x30
 8014a66:	d0f9      	beq.n	8014a5c <_strtod_l+0x2a4>
 8014a68:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8014a6c:	2d08      	cmp	r5, #8
 8014a6e:	f63f af7b 	bhi.w	8014968 <_strtod_l+0x1b0>
 8014a72:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8014a76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014a78:	9207      	str	r2, [sp, #28]
 8014a7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014a7c:	1c55      	adds	r5, r2, #1
 8014a7e:	9511      	str	r5, [sp, #68]	; 0x44
 8014a80:	7852      	ldrb	r2, [r2, #1]
 8014a82:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8014a86:	2e09      	cmp	r6, #9
 8014a88:	d937      	bls.n	8014afa <_strtod_l+0x342>
 8014a8a:	9e07      	ldr	r6, [sp, #28]
 8014a8c:	1bad      	subs	r5, r5, r6
 8014a8e:	2d08      	cmp	r5, #8
 8014a90:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8014a94:	dc02      	bgt.n	8014a9c <_strtod_l+0x2e4>
 8014a96:	4565      	cmp	r5, ip
 8014a98:	bfa8      	it	ge
 8014a9a:	4665      	movge	r5, ip
 8014a9c:	f1be 0f00 	cmp.w	lr, #0
 8014aa0:	d000      	beq.n	8014aa4 <_strtod_l+0x2ec>
 8014aa2:	426d      	negs	r5, r5
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d14d      	bne.n	8014b44 <_strtod_l+0x38c>
 8014aa8:	9b04      	ldr	r3, [sp, #16]
 8014aaa:	4303      	orrs	r3, r0
 8014aac:	f47f aec8 	bne.w	8014840 <_strtod_l+0x88>
 8014ab0:	2900      	cmp	r1, #0
 8014ab2:	f47f aee2 	bne.w	801487a <_strtod_l+0xc2>
 8014ab6:	2a69      	cmp	r2, #105	; 0x69
 8014ab8:	d027      	beq.n	8014b0a <_strtod_l+0x352>
 8014aba:	dc24      	bgt.n	8014b06 <_strtod_l+0x34e>
 8014abc:	2a49      	cmp	r2, #73	; 0x49
 8014abe:	d024      	beq.n	8014b0a <_strtod_l+0x352>
 8014ac0:	2a4e      	cmp	r2, #78	; 0x4e
 8014ac2:	f47f aeda 	bne.w	801487a <_strtod_l+0xc2>
 8014ac6:	4996      	ldr	r1, [pc, #600]	; (8014d20 <_strtod_l+0x568>)
 8014ac8:	a811      	add	r0, sp, #68	; 0x44
 8014aca:	f001 fe55 	bl	8016778 <__match>
 8014ace:	2800      	cmp	r0, #0
 8014ad0:	f43f aed3 	beq.w	801487a <_strtod_l+0xc2>
 8014ad4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014ad6:	781b      	ldrb	r3, [r3, #0]
 8014ad8:	2b28      	cmp	r3, #40	; 0x28
 8014ada:	d12d      	bne.n	8014b38 <_strtod_l+0x380>
 8014adc:	4991      	ldr	r1, [pc, #580]	; (8014d24 <_strtod_l+0x56c>)
 8014ade:	aa14      	add	r2, sp, #80	; 0x50
 8014ae0:	a811      	add	r0, sp, #68	; 0x44
 8014ae2:	f001 fe5d 	bl	80167a0 <__hexnan>
 8014ae6:	2805      	cmp	r0, #5
 8014ae8:	d126      	bne.n	8014b38 <_strtod_l+0x380>
 8014aea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014aec:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8014af0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014af4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8014af8:	e6a2      	b.n	8014840 <_strtod_l+0x88>
 8014afa:	250a      	movs	r5, #10
 8014afc:	fb05 250c 	mla	r5, r5, ip, r2
 8014b00:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8014b04:	e7b9      	b.n	8014a7a <_strtod_l+0x2c2>
 8014b06:	2a6e      	cmp	r2, #110	; 0x6e
 8014b08:	e7db      	b.n	8014ac2 <_strtod_l+0x30a>
 8014b0a:	4987      	ldr	r1, [pc, #540]	; (8014d28 <_strtod_l+0x570>)
 8014b0c:	a811      	add	r0, sp, #68	; 0x44
 8014b0e:	f001 fe33 	bl	8016778 <__match>
 8014b12:	2800      	cmp	r0, #0
 8014b14:	f43f aeb1 	beq.w	801487a <_strtod_l+0xc2>
 8014b18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014b1a:	4984      	ldr	r1, [pc, #528]	; (8014d2c <_strtod_l+0x574>)
 8014b1c:	3b01      	subs	r3, #1
 8014b1e:	a811      	add	r0, sp, #68	; 0x44
 8014b20:	9311      	str	r3, [sp, #68]	; 0x44
 8014b22:	f001 fe29 	bl	8016778 <__match>
 8014b26:	b910      	cbnz	r0, 8014b2e <_strtod_l+0x376>
 8014b28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014b2a:	3301      	adds	r3, #1
 8014b2c:	9311      	str	r3, [sp, #68]	; 0x44
 8014b2e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8014d40 <_strtod_l+0x588>
 8014b32:	f04f 0800 	mov.w	r8, #0
 8014b36:	e683      	b.n	8014840 <_strtod_l+0x88>
 8014b38:	487d      	ldr	r0, [pc, #500]	; (8014d30 <_strtod_l+0x578>)
 8014b3a:	f002 fd99 	bl	8017670 <nan>
 8014b3e:	ec59 8b10 	vmov	r8, r9, d0
 8014b42:	e67d      	b.n	8014840 <_strtod_l+0x88>
 8014b44:	1bea      	subs	r2, r5, r7
 8014b46:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8014b4a:	9207      	str	r2, [sp, #28]
 8014b4c:	9a06      	ldr	r2, [sp, #24]
 8014b4e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014b52:	2a00      	cmp	r2, #0
 8014b54:	bf08      	it	eq
 8014b56:	461a      	moveq	r2, r3
 8014b58:	2b10      	cmp	r3, #16
 8014b5a:	9206      	str	r2, [sp, #24]
 8014b5c:	461a      	mov	r2, r3
 8014b5e:	bfa8      	it	ge
 8014b60:	2210      	movge	r2, #16
 8014b62:	2b09      	cmp	r3, #9
 8014b64:	ec59 8b17 	vmov	r8, r9, d7
 8014b68:	dd0c      	ble.n	8014b84 <_strtod_l+0x3cc>
 8014b6a:	4972      	ldr	r1, [pc, #456]	; (8014d34 <_strtod_l+0x57c>)
 8014b6c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8014b70:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8014b74:	ee06 aa90 	vmov	s13, sl
 8014b78:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8014b7c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014b80:	ec59 8b16 	vmov	r8, r9, d6
 8014b84:	2b0f      	cmp	r3, #15
 8014b86:	dc36      	bgt.n	8014bf6 <_strtod_l+0x43e>
 8014b88:	9907      	ldr	r1, [sp, #28]
 8014b8a:	2900      	cmp	r1, #0
 8014b8c:	f43f ae58 	beq.w	8014840 <_strtod_l+0x88>
 8014b90:	dd23      	ble.n	8014bda <_strtod_l+0x422>
 8014b92:	2916      	cmp	r1, #22
 8014b94:	dc0b      	bgt.n	8014bae <_strtod_l+0x3f6>
 8014b96:	4b67      	ldr	r3, [pc, #412]	; (8014d34 <_strtod_l+0x57c>)
 8014b98:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8014b9c:	ed93 7b00 	vldr	d7, [r3]
 8014ba0:	ec49 8b16 	vmov	d6, r8, r9
 8014ba4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014ba8:	ec59 8b17 	vmov	r8, r9, d7
 8014bac:	e648      	b.n	8014840 <_strtod_l+0x88>
 8014bae:	9807      	ldr	r0, [sp, #28]
 8014bb0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8014bb4:	4281      	cmp	r1, r0
 8014bb6:	db1e      	blt.n	8014bf6 <_strtod_l+0x43e>
 8014bb8:	4a5e      	ldr	r2, [pc, #376]	; (8014d34 <_strtod_l+0x57c>)
 8014bba:	f1c3 030f 	rsb	r3, r3, #15
 8014bbe:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8014bc2:	ed91 7b00 	vldr	d7, [r1]
 8014bc6:	ec49 8b16 	vmov	d6, r8, r9
 8014bca:	1ac3      	subs	r3, r0, r3
 8014bcc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014bd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014bd4:	ed92 6b00 	vldr	d6, [r2]
 8014bd8:	e7e4      	b.n	8014ba4 <_strtod_l+0x3ec>
 8014bda:	9907      	ldr	r1, [sp, #28]
 8014bdc:	3116      	adds	r1, #22
 8014bde:	db0a      	blt.n	8014bf6 <_strtod_l+0x43e>
 8014be0:	4b54      	ldr	r3, [pc, #336]	; (8014d34 <_strtod_l+0x57c>)
 8014be2:	1b7d      	subs	r5, r7, r5
 8014be4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014be8:	ed95 7b00 	vldr	d7, [r5]
 8014bec:	ec49 8b16 	vmov	d6, r8, r9
 8014bf0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014bf4:	e7d8      	b.n	8014ba8 <_strtod_l+0x3f0>
 8014bf6:	9907      	ldr	r1, [sp, #28]
 8014bf8:	1a9a      	subs	r2, r3, r2
 8014bfa:	440a      	add	r2, r1
 8014bfc:	2a00      	cmp	r2, #0
 8014bfe:	dd6f      	ble.n	8014ce0 <_strtod_l+0x528>
 8014c00:	f012 000f 	ands.w	r0, r2, #15
 8014c04:	d00a      	beq.n	8014c1c <_strtod_l+0x464>
 8014c06:	494b      	ldr	r1, [pc, #300]	; (8014d34 <_strtod_l+0x57c>)
 8014c08:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014c0c:	ed91 7b00 	vldr	d7, [r1]
 8014c10:	ec49 8b16 	vmov	d6, r8, r9
 8014c14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014c18:	ec59 8b17 	vmov	r8, r9, d7
 8014c1c:	f032 020f 	bics.w	r2, r2, #15
 8014c20:	d04f      	beq.n	8014cc2 <_strtod_l+0x50a>
 8014c22:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8014c26:	dd22      	ble.n	8014c6e <_strtod_l+0x4b6>
 8014c28:	2500      	movs	r5, #0
 8014c2a:	462e      	mov	r6, r5
 8014c2c:	9506      	str	r5, [sp, #24]
 8014c2e:	462f      	mov	r7, r5
 8014c30:	2322      	movs	r3, #34	; 0x22
 8014c32:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8014d40 <_strtod_l+0x588>
 8014c36:	6023      	str	r3, [r4, #0]
 8014c38:	f04f 0800 	mov.w	r8, #0
 8014c3c:	9b06      	ldr	r3, [sp, #24]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	f43f adfe 	beq.w	8014840 <_strtod_l+0x88>
 8014c44:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014c46:	4620      	mov	r0, r4
 8014c48:	f001 fec2 	bl	80169d0 <_Bfree>
 8014c4c:	4639      	mov	r1, r7
 8014c4e:	4620      	mov	r0, r4
 8014c50:	f001 febe 	bl	80169d0 <_Bfree>
 8014c54:	4631      	mov	r1, r6
 8014c56:	4620      	mov	r0, r4
 8014c58:	f001 feba 	bl	80169d0 <_Bfree>
 8014c5c:	9906      	ldr	r1, [sp, #24]
 8014c5e:	4620      	mov	r0, r4
 8014c60:	f001 feb6 	bl	80169d0 <_Bfree>
 8014c64:	4629      	mov	r1, r5
 8014c66:	4620      	mov	r0, r4
 8014c68:	f001 feb2 	bl	80169d0 <_Bfree>
 8014c6c:	e5e8      	b.n	8014840 <_strtod_l+0x88>
 8014c6e:	2000      	movs	r0, #0
 8014c70:	ec49 8b17 	vmov	d7, r8, r9
 8014c74:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8014d38 <_strtod_l+0x580>
 8014c78:	1112      	asrs	r2, r2, #4
 8014c7a:	4601      	mov	r1, r0
 8014c7c:	2a01      	cmp	r2, #1
 8014c7e:	dc23      	bgt.n	8014cc8 <_strtod_l+0x510>
 8014c80:	b108      	cbz	r0, 8014c86 <_strtod_l+0x4ce>
 8014c82:	ec59 8b17 	vmov	r8, r9, d7
 8014c86:	4a2c      	ldr	r2, [pc, #176]	; (8014d38 <_strtod_l+0x580>)
 8014c88:	482c      	ldr	r0, [pc, #176]	; (8014d3c <_strtod_l+0x584>)
 8014c8a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8014c8e:	ed92 7b00 	vldr	d7, [r2]
 8014c92:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8014c96:	ec49 8b16 	vmov	d6, r8, r9
 8014c9a:	4a29      	ldr	r2, [pc, #164]	; (8014d40 <_strtod_l+0x588>)
 8014c9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014ca0:	ee17 1a90 	vmov	r1, s15
 8014ca4:	400a      	ands	r2, r1
 8014ca6:	4282      	cmp	r2, r0
 8014ca8:	ec59 8b17 	vmov	r8, r9, d7
 8014cac:	d8bc      	bhi.n	8014c28 <_strtod_l+0x470>
 8014cae:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8014cb2:	4282      	cmp	r2, r0
 8014cb4:	bf86      	itte	hi
 8014cb6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8014d44 <_strtod_l+0x58c>
 8014cba:	f04f 38ff 	movhi.w	r8, #4294967295
 8014cbe:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	9204      	str	r2, [sp, #16]
 8014cc6:	e078      	b.n	8014dba <_strtod_l+0x602>
 8014cc8:	07d6      	lsls	r6, r2, #31
 8014cca:	d504      	bpl.n	8014cd6 <_strtod_l+0x51e>
 8014ccc:	ed9c 6b00 	vldr	d6, [ip]
 8014cd0:	2001      	movs	r0, #1
 8014cd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014cd6:	3101      	adds	r1, #1
 8014cd8:	1052      	asrs	r2, r2, #1
 8014cda:	f10c 0c08 	add.w	ip, ip, #8
 8014cde:	e7cd      	b.n	8014c7c <_strtod_l+0x4c4>
 8014ce0:	d0ef      	beq.n	8014cc2 <_strtod_l+0x50a>
 8014ce2:	4252      	negs	r2, r2
 8014ce4:	f012 000f 	ands.w	r0, r2, #15
 8014ce8:	d00a      	beq.n	8014d00 <_strtod_l+0x548>
 8014cea:	4912      	ldr	r1, [pc, #72]	; (8014d34 <_strtod_l+0x57c>)
 8014cec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014cf0:	ed91 7b00 	vldr	d7, [r1]
 8014cf4:	ec49 8b16 	vmov	d6, r8, r9
 8014cf8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014cfc:	ec59 8b17 	vmov	r8, r9, d7
 8014d00:	1112      	asrs	r2, r2, #4
 8014d02:	d0de      	beq.n	8014cc2 <_strtod_l+0x50a>
 8014d04:	2a1f      	cmp	r2, #31
 8014d06:	dd1f      	ble.n	8014d48 <_strtod_l+0x590>
 8014d08:	2500      	movs	r5, #0
 8014d0a:	462e      	mov	r6, r5
 8014d0c:	9506      	str	r5, [sp, #24]
 8014d0e:	462f      	mov	r7, r5
 8014d10:	2322      	movs	r3, #34	; 0x22
 8014d12:	f04f 0800 	mov.w	r8, #0
 8014d16:	f04f 0900 	mov.w	r9, #0
 8014d1a:	6023      	str	r3, [r4, #0]
 8014d1c:	e78e      	b.n	8014c3c <_strtod_l+0x484>
 8014d1e:	bf00      	nop
 8014d20:	08018741 	.word	0x08018741
 8014d24:	08018784 	.word	0x08018784
 8014d28:	08018739 	.word	0x08018739
 8014d2c:	080188c4 	.word	0x080188c4
 8014d30:	08018b70 	.word	0x08018b70
 8014d34:	08018a50 	.word	0x08018a50
 8014d38:	08018a28 	.word	0x08018a28
 8014d3c:	7ca00000 	.word	0x7ca00000
 8014d40:	7ff00000 	.word	0x7ff00000
 8014d44:	7fefffff 	.word	0x7fefffff
 8014d48:	f012 0110 	ands.w	r1, r2, #16
 8014d4c:	bf18      	it	ne
 8014d4e:	216a      	movne	r1, #106	; 0x6a
 8014d50:	9104      	str	r1, [sp, #16]
 8014d52:	ec49 8b17 	vmov	d7, r8, r9
 8014d56:	49be      	ldr	r1, [pc, #760]	; (8015050 <_strtod_l+0x898>)
 8014d58:	2000      	movs	r0, #0
 8014d5a:	07d6      	lsls	r6, r2, #31
 8014d5c:	d504      	bpl.n	8014d68 <_strtod_l+0x5b0>
 8014d5e:	ed91 6b00 	vldr	d6, [r1]
 8014d62:	2001      	movs	r0, #1
 8014d64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014d68:	1052      	asrs	r2, r2, #1
 8014d6a:	f101 0108 	add.w	r1, r1, #8
 8014d6e:	d1f4      	bne.n	8014d5a <_strtod_l+0x5a2>
 8014d70:	b108      	cbz	r0, 8014d76 <_strtod_l+0x5be>
 8014d72:	ec59 8b17 	vmov	r8, r9, d7
 8014d76:	9a04      	ldr	r2, [sp, #16]
 8014d78:	b1c2      	cbz	r2, 8014dac <_strtod_l+0x5f4>
 8014d7a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8014d7e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8014d82:	2a00      	cmp	r2, #0
 8014d84:	4648      	mov	r0, r9
 8014d86:	dd11      	ble.n	8014dac <_strtod_l+0x5f4>
 8014d88:	2a1f      	cmp	r2, #31
 8014d8a:	f340 812e 	ble.w	8014fea <_strtod_l+0x832>
 8014d8e:	2a34      	cmp	r2, #52	; 0x34
 8014d90:	bfde      	ittt	le
 8014d92:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8014d96:	f04f 32ff 	movle.w	r2, #4294967295
 8014d9a:	fa02 f101 	lslle.w	r1, r2, r1
 8014d9e:	f04f 0800 	mov.w	r8, #0
 8014da2:	bfcc      	ite	gt
 8014da4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8014da8:	ea01 0900 	andle.w	r9, r1, r0
 8014dac:	ec49 8b17 	vmov	d7, r8, r9
 8014db0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014db8:	d0a6      	beq.n	8014d08 <_strtod_l+0x550>
 8014dba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014dbc:	9200      	str	r2, [sp, #0]
 8014dbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014dc0:	9a06      	ldr	r2, [sp, #24]
 8014dc2:	4620      	mov	r0, r4
 8014dc4:	f001 fe6c 	bl	8016aa0 <__s2b>
 8014dc8:	9006      	str	r0, [sp, #24]
 8014dca:	2800      	cmp	r0, #0
 8014dcc:	f43f af2c 	beq.w	8014c28 <_strtod_l+0x470>
 8014dd0:	9b07      	ldr	r3, [sp, #28]
 8014dd2:	1b7d      	subs	r5, r7, r5
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	bfb4      	ite	lt
 8014dd8:	462b      	movlt	r3, r5
 8014dda:	2300      	movge	r3, #0
 8014ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8014dde:	9b07      	ldr	r3, [sp, #28]
 8014de0:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8015030 <_strtod_l+0x878>
 8014de4:	ed9f ab94 	vldr	d10, [pc, #592]	; 8015038 <_strtod_l+0x880>
 8014de8:	ed9f bb95 	vldr	d11, [pc, #596]	; 8015040 <_strtod_l+0x888>
 8014dec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014df0:	2500      	movs	r5, #0
 8014df2:	930c      	str	r3, [sp, #48]	; 0x30
 8014df4:	462e      	mov	r6, r5
 8014df6:	9b06      	ldr	r3, [sp, #24]
 8014df8:	4620      	mov	r0, r4
 8014dfa:	6859      	ldr	r1, [r3, #4]
 8014dfc:	f001 fda8 	bl	8016950 <_Balloc>
 8014e00:	4607      	mov	r7, r0
 8014e02:	2800      	cmp	r0, #0
 8014e04:	f43f af14 	beq.w	8014c30 <_strtod_l+0x478>
 8014e08:	9b06      	ldr	r3, [sp, #24]
 8014e0a:	691a      	ldr	r2, [r3, #16]
 8014e0c:	3202      	adds	r2, #2
 8014e0e:	f103 010c 	add.w	r1, r3, #12
 8014e12:	0092      	lsls	r2, r2, #2
 8014e14:	300c      	adds	r0, #12
 8014e16:	f7fe fcdc 	bl	80137d2 <memcpy>
 8014e1a:	ec49 8b10 	vmov	d0, r8, r9
 8014e1e:	aa14      	add	r2, sp, #80	; 0x50
 8014e20:	a913      	add	r1, sp, #76	; 0x4c
 8014e22:	4620      	mov	r0, r4
 8014e24:	f002 f982 	bl	801712c <__d2b>
 8014e28:	ec49 8b18 	vmov	d8, r8, r9
 8014e2c:	9012      	str	r0, [sp, #72]	; 0x48
 8014e2e:	2800      	cmp	r0, #0
 8014e30:	f43f aefe 	beq.w	8014c30 <_strtod_l+0x478>
 8014e34:	2101      	movs	r1, #1
 8014e36:	4620      	mov	r0, r4
 8014e38:	f001 fecc 	bl	8016bd4 <__i2b>
 8014e3c:	4606      	mov	r6, r0
 8014e3e:	2800      	cmp	r0, #0
 8014e40:	f43f aef6 	beq.w	8014c30 <_strtod_l+0x478>
 8014e44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014e46:	9914      	ldr	r1, [sp, #80]	; 0x50
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	bfab      	itete	ge
 8014e4c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8014e4e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8014e50:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8014e54:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8014e58:	bfac      	ite	ge
 8014e5a:	eb03 0b02 	addge.w	fp, r3, r2
 8014e5e:	eba2 0a03 	sublt.w	sl, r2, r3
 8014e62:	9a04      	ldr	r2, [sp, #16]
 8014e64:	1a9b      	subs	r3, r3, r2
 8014e66:	440b      	add	r3, r1
 8014e68:	4a7a      	ldr	r2, [pc, #488]	; (8015054 <_strtod_l+0x89c>)
 8014e6a:	3b01      	subs	r3, #1
 8014e6c:	4293      	cmp	r3, r2
 8014e6e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8014e72:	f280 80cd 	bge.w	8015010 <_strtod_l+0x858>
 8014e76:	1ad2      	subs	r2, r2, r3
 8014e78:	2a1f      	cmp	r2, #31
 8014e7a:	eba1 0102 	sub.w	r1, r1, r2
 8014e7e:	f04f 0001 	mov.w	r0, #1
 8014e82:	f300 80b9 	bgt.w	8014ff8 <_strtod_l+0x840>
 8014e86:	fa00 f302 	lsl.w	r3, r0, r2
 8014e8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	930a      	str	r3, [sp, #40]	; 0x28
 8014e90:	eb0b 0301 	add.w	r3, fp, r1
 8014e94:	9a04      	ldr	r2, [sp, #16]
 8014e96:	459b      	cmp	fp, r3
 8014e98:	448a      	add	sl, r1
 8014e9a:	4492      	add	sl, r2
 8014e9c:	465a      	mov	r2, fp
 8014e9e:	bfa8      	it	ge
 8014ea0:	461a      	movge	r2, r3
 8014ea2:	4552      	cmp	r2, sl
 8014ea4:	bfa8      	it	ge
 8014ea6:	4652      	movge	r2, sl
 8014ea8:	2a00      	cmp	r2, #0
 8014eaa:	bfc2      	ittt	gt
 8014eac:	1a9b      	subgt	r3, r3, r2
 8014eae:	ebaa 0a02 	subgt.w	sl, sl, r2
 8014eb2:	ebab 0b02 	subgt.w	fp, fp, r2
 8014eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014eb8:	2a00      	cmp	r2, #0
 8014eba:	dd18      	ble.n	8014eee <_strtod_l+0x736>
 8014ebc:	4631      	mov	r1, r6
 8014ebe:	4620      	mov	r0, r4
 8014ec0:	930f      	str	r3, [sp, #60]	; 0x3c
 8014ec2:	f001 ff47 	bl	8016d54 <__pow5mult>
 8014ec6:	4606      	mov	r6, r0
 8014ec8:	2800      	cmp	r0, #0
 8014eca:	f43f aeb1 	beq.w	8014c30 <_strtod_l+0x478>
 8014ece:	4601      	mov	r1, r0
 8014ed0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014ed2:	4620      	mov	r0, r4
 8014ed4:	f001 fe94 	bl	8016c00 <__multiply>
 8014ed8:	900e      	str	r0, [sp, #56]	; 0x38
 8014eda:	2800      	cmp	r0, #0
 8014edc:	f43f aea8 	beq.w	8014c30 <_strtod_l+0x478>
 8014ee0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014ee2:	4620      	mov	r0, r4
 8014ee4:	f001 fd74 	bl	80169d0 <_Bfree>
 8014ee8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014eea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014eec:	9212      	str	r2, [sp, #72]	; 0x48
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	f300 8093 	bgt.w	801501a <_strtod_l+0x862>
 8014ef4:	9b07      	ldr	r3, [sp, #28]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	dd08      	ble.n	8014f0c <_strtod_l+0x754>
 8014efa:	4639      	mov	r1, r7
 8014efc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014efe:	4620      	mov	r0, r4
 8014f00:	f001 ff28 	bl	8016d54 <__pow5mult>
 8014f04:	4607      	mov	r7, r0
 8014f06:	2800      	cmp	r0, #0
 8014f08:	f43f ae92 	beq.w	8014c30 <_strtod_l+0x478>
 8014f0c:	f1ba 0f00 	cmp.w	sl, #0
 8014f10:	dd08      	ble.n	8014f24 <_strtod_l+0x76c>
 8014f12:	4639      	mov	r1, r7
 8014f14:	4652      	mov	r2, sl
 8014f16:	4620      	mov	r0, r4
 8014f18:	f001 ff76 	bl	8016e08 <__lshift>
 8014f1c:	4607      	mov	r7, r0
 8014f1e:	2800      	cmp	r0, #0
 8014f20:	f43f ae86 	beq.w	8014c30 <_strtod_l+0x478>
 8014f24:	f1bb 0f00 	cmp.w	fp, #0
 8014f28:	dd08      	ble.n	8014f3c <_strtod_l+0x784>
 8014f2a:	4631      	mov	r1, r6
 8014f2c:	465a      	mov	r2, fp
 8014f2e:	4620      	mov	r0, r4
 8014f30:	f001 ff6a 	bl	8016e08 <__lshift>
 8014f34:	4606      	mov	r6, r0
 8014f36:	2800      	cmp	r0, #0
 8014f38:	f43f ae7a 	beq.w	8014c30 <_strtod_l+0x478>
 8014f3c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014f3e:	463a      	mov	r2, r7
 8014f40:	4620      	mov	r0, r4
 8014f42:	f001 ffed 	bl	8016f20 <__mdiff>
 8014f46:	4605      	mov	r5, r0
 8014f48:	2800      	cmp	r0, #0
 8014f4a:	f43f ae71 	beq.w	8014c30 <_strtod_l+0x478>
 8014f4e:	2300      	movs	r3, #0
 8014f50:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8014f54:	60c3      	str	r3, [r0, #12]
 8014f56:	4631      	mov	r1, r6
 8014f58:	f001 ffc6 	bl	8016ee8 <__mcmp>
 8014f5c:	2800      	cmp	r0, #0
 8014f5e:	da7d      	bge.n	801505c <_strtod_l+0x8a4>
 8014f60:	ea5a 0308 	orrs.w	r3, sl, r8
 8014f64:	f040 80a3 	bne.w	80150ae <_strtod_l+0x8f6>
 8014f68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	f040 809e 	bne.w	80150ae <_strtod_l+0x8f6>
 8014f72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014f76:	0d1b      	lsrs	r3, r3, #20
 8014f78:	051b      	lsls	r3, r3, #20
 8014f7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014f7e:	f240 8096 	bls.w	80150ae <_strtod_l+0x8f6>
 8014f82:	696b      	ldr	r3, [r5, #20]
 8014f84:	b91b      	cbnz	r3, 8014f8e <_strtod_l+0x7d6>
 8014f86:	692b      	ldr	r3, [r5, #16]
 8014f88:	2b01      	cmp	r3, #1
 8014f8a:	f340 8090 	ble.w	80150ae <_strtod_l+0x8f6>
 8014f8e:	4629      	mov	r1, r5
 8014f90:	2201      	movs	r2, #1
 8014f92:	4620      	mov	r0, r4
 8014f94:	f001 ff38 	bl	8016e08 <__lshift>
 8014f98:	4631      	mov	r1, r6
 8014f9a:	4605      	mov	r5, r0
 8014f9c:	f001 ffa4 	bl	8016ee8 <__mcmp>
 8014fa0:	2800      	cmp	r0, #0
 8014fa2:	f340 8084 	ble.w	80150ae <_strtod_l+0x8f6>
 8014fa6:	9904      	ldr	r1, [sp, #16]
 8014fa8:	4a2b      	ldr	r2, [pc, #172]	; (8015058 <_strtod_l+0x8a0>)
 8014faa:	464b      	mov	r3, r9
 8014fac:	2900      	cmp	r1, #0
 8014fae:	f000 809d 	beq.w	80150ec <_strtod_l+0x934>
 8014fb2:	ea02 0109 	and.w	r1, r2, r9
 8014fb6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014fba:	f300 8097 	bgt.w	80150ec <_strtod_l+0x934>
 8014fbe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014fc2:	f77f aea5 	ble.w	8014d10 <_strtod_l+0x558>
 8014fc6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8015048 <_strtod_l+0x890>
 8014fca:	ec49 8b16 	vmov	d6, r8, r9
 8014fce:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014fd2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014fd6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8014fda:	4313      	orrs	r3, r2
 8014fdc:	bf08      	it	eq
 8014fde:	2322      	moveq	r3, #34	; 0x22
 8014fe0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8014fe4:	bf08      	it	eq
 8014fe6:	6023      	streq	r3, [r4, #0]
 8014fe8:	e62c      	b.n	8014c44 <_strtod_l+0x48c>
 8014fea:	f04f 31ff 	mov.w	r1, #4294967295
 8014fee:	fa01 f202 	lsl.w	r2, r1, r2
 8014ff2:	ea02 0808 	and.w	r8, r2, r8
 8014ff6:	e6d9      	b.n	8014dac <_strtod_l+0x5f4>
 8014ff8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8014ffc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8015000:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8015004:	33e2      	adds	r3, #226	; 0xe2
 8015006:	fa00 f303 	lsl.w	r3, r0, r3
 801500a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801500e:	e73f      	b.n	8014e90 <_strtod_l+0x6d8>
 8015010:	2200      	movs	r2, #0
 8015012:	2301      	movs	r3, #1
 8015014:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015018:	e73a      	b.n	8014e90 <_strtod_l+0x6d8>
 801501a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801501c:	461a      	mov	r2, r3
 801501e:	4620      	mov	r0, r4
 8015020:	f001 fef2 	bl	8016e08 <__lshift>
 8015024:	9012      	str	r0, [sp, #72]	; 0x48
 8015026:	2800      	cmp	r0, #0
 8015028:	f47f af64 	bne.w	8014ef4 <_strtod_l+0x73c>
 801502c:	e600      	b.n	8014c30 <_strtod_l+0x478>
 801502e:	bf00      	nop
 8015030:	94a03595 	.word	0x94a03595
 8015034:	3fcfffff 	.word	0x3fcfffff
 8015038:	94a03595 	.word	0x94a03595
 801503c:	3fdfffff 	.word	0x3fdfffff
 8015040:	35afe535 	.word	0x35afe535
 8015044:	3fe00000 	.word	0x3fe00000
 8015048:	00000000 	.word	0x00000000
 801504c:	39500000 	.word	0x39500000
 8015050:	08018798 	.word	0x08018798
 8015054:	fffffc02 	.word	0xfffffc02
 8015058:	7ff00000 	.word	0x7ff00000
 801505c:	46cb      	mov	fp, r9
 801505e:	d15f      	bne.n	8015120 <_strtod_l+0x968>
 8015060:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015064:	f1ba 0f00 	cmp.w	sl, #0
 8015068:	d02a      	beq.n	80150c0 <_strtod_l+0x908>
 801506a:	4aa7      	ldr	r2, [pc, #668]	; (8015308 <_strtod_l+0xb50>)
 801506c:	4293      	cmp	r3, r2
 801506e:	d12b      	bne.n	80150c8 <_strtod_l+0x910>
 8015070:	9b04      	ldr	r3, [sp, #16]
 8015072:	4642      	mov	r2, r8
 8015074:	b1fb      	cbz	r3, 80150b6 <_strtod_l+0x8fe>
 8015076:	4ba5      	ldr	r3, [pc, #660]	; (801530c <_strtod_l+0xb54>)
 8015078:	ea09 0303 	and.w	r3, r9, r3
 801507c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015080:	f04f 31ff 	mov.w	r1, #4294967295
 8015084:	d81a      	bhi.n	80150bc <_strtod_l+0x904>
 8015086:	0d1b      	lsrs	r3, r3, #20
 8015088:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801508c:	fa01 f303 	lsl.w	r3, r1, r3
 8015090:	429a      	cmp	r2, r3
 8015092:	d119      	bne.n	80150c8 <_strtod_l+0x910>
 8015094:	4b9e      	ldr	r3, [pc, #632]	; (8015310 <_strtod_l+0xb58>)
 8015096:	459b      	cmp	fp, r3
 8015098:	d102      	bne.n	80150a0 <_strtod_l+0x8e8>
 801509a:	3201      	adds	r2, #1
 801509c:	f43f adc8 	beq.w	8014c30 <_strtod_l+0x478>
 80150a0:	4b9a      	ldr	r3, [pc, #616]	; (801530c <_strtod_l+0xb54>)
 80150a2:	ea0b 0303 	and.w	r3, fp, r3
 80150a6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80150aa:	f04f 0800 	mov.w	r8, #0
 80150ae:	9b04      	ldr	r3, [sp, #16]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d188      	bne.n	8014fc6 <_strtod_l+0x80e>
 80150b4:	e5c6      	b.n	8014c44 <_strtod_l+0x48c>
 80150b6:	f04f 33ff 	mov.w	r3, #4294967295
 80150ba:	e7e9      	b.n	8015090 <_strtod_l+0x8d8>
 80150bc:	460b      	mov	r3, r1
 80150be:	e7e7      	b.n	8015090 <_strtod_l+0x8d8>
 80150c0:	ea53 0308 	orrs.w	r3, r3, r8
 80150c4:	f43f af6f 	beq.w	8014fa6 <_strtod_l+0x7ee>
 80150c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150ca:	b1cb      	cbz	r3, 8015100 <_strtod_l+0x948>
 80150cc:	ea13 0f0b 	tst.w	r3, fp
 80150d0:	d0ed      	beq.n	80150ae <_strtod_l+0x8f6>
 80150d2:	9a04      	ldr	r2, [sp, #16]
 80150d4:	4640      	mov	r0, r8
 80150d6:	4649      	mov	r1, r9
 80150d8:	f1ba 0f00 	cmp.w	sl, #0
 80150dc:	d014      	beq.n	8015108 <_strtod_l+0x950>
 80150de:	f7ff fb4e 	bl	801477e <sulp>
 80150e2:	ee38 7b00 	vadd.f64	d7, d8, d0
 80150e6:	ec59 8b17 	vmov	r8, r9, d7
 80150ea:	e7e0      	b.n	80150ae <_strtod_l+0x8f6>
 80150ec:	4013      	ands	r3, r2
 80150ee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80150f2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80150f6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80150fa:	f04f 38ff 	mov.w	r8, #4294967295
 80150fe:	e7d6      	b.n	80150ae <_strtod_l+0x8f6>
 8015100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015102:	ea13 0f08 	tst.w	r3, r8
 8015106:	e7e3      	b.n	80150d0 <_strtod_l+0x918>
 8015108:	f7ff fb39 	bl	801477e <sulp>
 801510c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8015110:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8015114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015118:	ec59 8b10 	vmov	r8, r9, d0
 801511c:	d1c7      	bne.n	80150ae <_strtod_l+0x8f6>
 801511e:	e5f7      	b.n	8014d10 <_strtod_l+0x558>
 8015120:	4631      	mov	r1, r6
 8015122:	4628      	mov	r0, r5
 8015124:	f002 f85e 	bl	80171e4 <__ratio>
 8015128:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801512c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015134:	d865      	bhi.n	8015202 <_strtod_l+0xa4a>
 8015136:	f1ba 0f00 	cmp.w	sl, #0
 801513a:	d042      	beq.n	80151c2 <_strtod_l+0xa0a>
 801513c:	4b75      	ldr	r3, [pc, #468]	; (8015314 <_strtod_l+0xb5c>)
 801513e:	2200      	movs	r2, #0
 8015140:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8015144:	4871      	ldr	r0, [pc, #452]	; (801530c <_strtod_l+0xb54>)
 8015146:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8015320 <_strtod_l+0xb68>
 801514a:	ea0b 0100 	and.w	r1, fp, r0
 801514e:	4561      	cmp	r1, ip
 8015150:	f040 808e 	bne.w	8015270 <_strtod_l+0xab8>
 8015154:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8015158:	ec49 8b10 	vmov	d0, r8, r9
 801515c:	ec43 2b1c 	vmov	d12, r2, r3
 8015160:	910a      	str	r1, [sp, #40]	; 0x28
 8015162:	f001 ff67 	bl	8017034 <__ulp>
 8015166:	ec49 8b1e 	vmov	d14, r8, r9
 801516a:	4868      	ldr	r0, [pc, #416]	; (801530c <_strtod_l+0xb54>)
 801516c:	eeac eb00 	vfma.f64	d14, d12, d0
 8015170:	ee1e 3a90 	vmov	r3, s29
 8015174:	4a68      	ldr	r2, [pc, #416]	; (8015318 <_strtod_l+0xb60>)
 8015176:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015178:	4018      	ands	r0, r3
 801517a:	4290      	cmp	r0, r2
 801517c:	ec59 8b1e 	vmov	r8, r9, d14
 8015180:	d94e      	bls.n	8015220 <_strtod_l+0xa68>
 8015182:	ee18 3a90 	vmov	r3, s17
 8015186:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801518a:	4293      	cmp	r3, r2
 801518c:	d104      	bne.n	8015198 <_strtod_l+0x9e0>
 801518e:	ee18 3a10 	vmov	r3, s16
 8015192:	3301      	adds	r3, #1
 8015194:	f43f ad4c 	beq.w	8014c30 <_strtod_l+0x478>
 8015198:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8015310 <_strtod_l+0xb58>
 801519c:	f04f 38ff 	mov.w	r8, #4294967295
 80151a0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80151a2:	4620      	mov	r0, r4
 80151a4:	f001 fc14 	bl	80169d0 <_Bfree>
 80151a8:	4639      	mov	r1, r7
 80151aa:	4620      	mov	r0, r4
 80151ac:	f001 fc10 	bl	80169d0 <_Bfree>
 80151b0:	4631      	mov	r1, r6
 80151b2:	4620      	mov	r0, r4
 80151b4:	f001 fc0c 	bl	80169d0 <_Bfree>
 80151b8:	4629      	mov	r1, r5
 80151ba:	4620      	mov	r0, r4
 80151bc:	f001 fc08 	bl	80169d0 <_Bfree>
 80151c0:	e619      	b.n	8014df6 <_strtod_l+0x63e>
 80151c2:	f1b8 0f00 	cmp.w	r8, #0
 80151c6:	d112      	bne.n	80151ee <_strtod_l+0xa36>
 80151c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80151cc:	b9b3      	cbnz	r3, 80151fc <_strtod_l+0xa44>
 80151ce:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80151d2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80151d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151da:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80151de:	bf58      	it	pl
 80151e0:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 80151e4:	eeb1 7b4d 	vneg.f64	d7, d13
 80151e8:	ec53 2b17 	vmov	r2, r3, d7
 80151ec:	e7aa      	b.n	8015144 <_strtod_l+0x98c>
 80151ee:	f1b8 0f01 	cmp.w	r8, #1
 80151f2:	d103      	bne.n	80151fc <_strtod_l+0xa44>
 80151f4:	f1b9 0f00 	cmp.w	r9, #0
 80151f8:	f43f ad8a 	beq.w	8014d10 <_strtod_l+0x558>
 80151fc:	4b47      	ldr	r3, [pc, #284]	; (801531c <_strtod_l+0xb64>)
 80151fe:	2200      	movs	r2, #0
 8015200:	e79e      	b.n	8015140 <_strtod_l+0x988>
 8015202:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8015206:	ee20 db0d 	vmul.f64	d13, d0, d13
 801520a:	f1ba 0f00 	cmp.w	sl, #0
 801520e:	d104      	bne.n	801521a <_strtod_l+0xa62>
 8015210:	eeb1 7b4d 	vneg.f64	d7, d13
 8015214:	ec53 2b17 	vmov	r2, r3, d7
 8015218:	e794      	b.n	8015144 <_strtod_l+0x98c>
 801521a:	eeb0 7b4d 	vmov.f64	d7, d13
 801521e:	e7f9      	b.n	8015214 <_strtod_l+0xa5c>
 8015220:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8015224:	9b04      	ldr	r3, [sp, #16]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d1ba      	bne.n	80151a0 <_strtod_l+0x9e8>
 801522a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801522e:	0d1b      	lsrs	r3, r3, #20
 8015230:	051b      	lsls	r3, r3, #20
 8015232:	4299      	cmp	r1, r3
 8015234:	d1b4      	bne.n	80151a0 <_strtod_l+0x9e8>
 8015236:	ec51 0b1d 	vmov	r0, r1, d13
 801523a:	f7eb fa2d 	bl	8000698 <__aeabi_d2lz>
 801523e:	f7eb f9e5 	bl	800060c <__aeabi_l2d>
 8015242:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015246:	ec41 0b17 	vmov	d7, r0, r1
 801524a:	ea43 0308 	orr.w	r3, r3, r8
 801524e:	ea53 030a 	orrs.w	r3, r3, sl
 8015252:	ee3d db47 	vsub.f64	d13, d13, d7
 8015256:	d03c      	beq.n	80152d2 <_strtod_l+0xb1a>
 8015258:	eeb4 dbca 	vcmpe.f64	d13, d10
 801525c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015260:	f53f acf0 	bmi.w	8014c44 <_strtod_l+0x48c>
 8015264:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8015268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801526c:	dd98      	ble.n	80151a0 <_strtod_l+0x9e8>
 801526e:	e4e9      	b.n	8014c44 <_strtod_l+0x48c>
 8015270:	9804      	ldr	r0, [sp, #16]
 8015272:	b1f0      	cbz	r0, 80152b2 <_strtod_l+0xafa>
 8015274:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8015278:	d81b      	bhi.n	80152b2 <_strtod_l+0xafa>
 801527a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8015300 <_strtod_l+0xb48>
 801527e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8015282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015286:	d811      	bhi.n	80152ac <_strtod_l+0xaf4>
 8015288:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801528c:	ee1d 3a10 	vmov	r3, s26
 8015290:	2b01      	cmp	r3, #1
 8015292:	bf38      	it	cc
 8015294:	2301      	movcc	r3, #1
 8015296:	ee0d 3a10 	vmov	s26, r3
 801529a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801529e:	f1ba 0f00 	cmp.w	sl, #0
 80152a2:	d113      	bne.n	80152cc <_strtod_l+0xb14>
 80152a4:	eeb1 7b4d 	vneg.f64	d7, d13
 80152a8:	ec53 2b17 	vmov	r2, r3, d7
 80152ac:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80152b0:	1a43      	subs	r3, r0, r1
 80152b2:	eeb0 0b48 	vmov.f64	d0, d8
 80152b6:	ec43 2b1c 	vmov	d12, r2, r3
 80152ba:	910a      	str	r1, [sp, #40]	; 0x28
 80152bc:	f001 feba 	bl	8017034 <__ulp>
 80152c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80152c2:	eeac 8b00 	vfma.f64	d8, d12, d0
 80152c6:	ec59 8b18 	vmov	r8, r9, d8
 80152ca:	e7ab      	b.n	8015224 <_strtod_l+0xa6c>
 80152cc:	eeb0 7b4d 	vmov.f64	d7, d13
 80152d0:	e7ea      	b.n	80152a8 <_strtod_l+0xaf0>
 80152d2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80152d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152da:	f57f af61 	bpl.w	80151a0 <_strtod_l+0x9e8>
 80152de:	e4b1      	b.n	8014c44 <_strtod_l+0x48c>
 80152e0:	2300      	movs	r3, #0
 80152e2:	9308      	str	r3, [sp, #32]
 80152e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80152e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80152e8:	6013      	str	r3, [r2, #0]
 80152ea:	f7ff baad 	b.w	8014848 <_strtod_l+0x90>
 80152ee:	2a65      	cmp	r2, #101	; 0x65
 80152f0:	f43f ab9f 	beq.w	8014a32 <_strtod_l+0x27a>
 80152f4:	2a45      	cmp	r2, #69	; 0x45
 80152f6:	f43f ab9c 	beq.w	8014a32 <_strtod_l+0x27a>
 80152fa:	2101      	movs	r1, #1
 80152fc:	f7ff bbd4 	b.w	8014aa8 <_strtod_l+0x2f0>
 8015300:	ffc00000 	.word	0xffc00000
 8015304:	41dfffff 	.word	0x41dfffff
 8015308:	000fffff 	.word	0x000fffff
 801530c:	7ff00000 	.word	0x7ff00000
 8015310:	7fefffff 	.word	0x7fefffff
 8015314:	3ff00000 	.word	0x3ff00000
 8015318:	7c9fffff 	.word	0x7c9fffff
 801531c:	bff00000 	.word	0xbff00000
 8015320:	7fe00000 	.word	0x7fe00000

08015324 <_strtod_r>:
 8015324:	4b01      	ldr	r3, [pc, #4]	; (801532c <_strtod_r+0x8>)
 8015326:	f7ff ba47 	b.w	80147b8 <_strtod_l>
 801532a:	bf00      	nop
 801532c:	20000228 	.word	0x20000228

08015330 <_strtol_l.constprop.0>:
 8015330:	2b01      	cmp	r3, #1
 8015332:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015336:	d001      	beq.n	801533c <_strtol_l.constprop.0+0xc>
 8015338:	2b24      	cmp	r3, #36	; 0x24
 801533a:	d906      	bls.n	801534a <_strtol_l.constprop.0+0x1a>
 801533c:	f7fe f926 	bl	801358c <__errno>
 8015340:	2316      	movs	r3, #22
 8015342:	6003      	str	r3, [r0, #0]
 8015344:	2000      	movs	r0, #0
 8015346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801534a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8015430 <_strtol_l.constprop.0+0x100>
 801534e:	460d      	mov	r5, r1
 8015350:	462e      	mov	r6, r5
 8015352:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015356:	f814 700c 	ldrb.w	r7, [r4, ip]
 801535a:	f017 0708 	ands.w	r7, r7, #8
 801535e:	d1f7      	bne.n	8015350 <_strtol_l.constprop.0+0x20>
 8015360:	2c2d      	cmp	r4, #45	; 0x2d
 8015362:	d132      	bne.n	80153ca <_strtol_l.constprop.0+0x9a>
 8015364:	782c      	ldrb	r4, [r5, #0]
 8015366:	2701      	movs	r7, #1
 8015368:	1cb5      	adds	r5, r6, #2
 801536a:	2b00      	cmp	r3, #0
 801536c:	d05b      	beq.n	8015426 <_strtol_l.constprop.0+0xf6>
 801536e:	2b10      	cmp	r3, #16
 8015370:	d109      	bne.n	8015386 <_strtol_l.constprop.0+0x56>
 8015372:	2c30      	cmp	r4, #48	; 0x30
 8015374:	d107      	bne.n	8015386 <_strtol_l.constprop.0+0x56>
 8015376:	782c      	ldrb	r4, [r5, #0]
 8015378:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801537c:	2c58      	cmp	r4, #88	; 0x58
 801537e:	d14d      	bne.n	801541c <_strtol_l.constprop.0+0xec>
 8015380:	786c      	ldrb	r4, [r5, #1]
 8015382:	2310      	movs	r3, #16
 8015384:	3502      	adds	r5, #2
 8015386:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801538a:	f108 38ff 	add.w	r8, r8, #4294967295
 801538e:	f04f 0c00 	mov.w	ip, #0
 8015392:	fbb8 f9f3 	udiv	r9, r8, r3
 8015396:	4666      	mov	r6, ip
 8015398:	fb03 8a19 	mls	sl, r3, r9, r8
 801539c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80153a0:	f1be 0f09 	cmp.w	lr, #9
 80153a4:	d816      	bhi.n	80153d4 <_strtol_l.constprop.0+0xa4>
 80153a6:	4674      	mov	r4, lr
 80153a8:	42a3      	cmp	r3, r4
 80153aa:	dd24      	ble.n	80153f6 <_strtol_l.constprop.0+0xc6>
 80153ac:	f1bc 0f00 	cmp.w	ip, #0
 80153b0:	db1e      	blt.n	80153f0 <_strtol_l.constprop.0+0xc0>
 80153b2:	45b1      	cmp	r9, r6
 80153b4:	d31c      	bcc.n	80153f0 <_strtol_l.constprop.0+0xc0>
 80153b6:	d101      	bne.n	80153bc <_strtol_l.constprop.0+0x8c>
 80153b8:	45a2      	cmp	sl, r4
 80153ba:	db19      	blt.n	80153f0 <_strtol_l.constprop.0+0xc0>
 80153bc:	fb06 4603 	mla	r6, r6, r3, r4
 80153c0:	f04f 0c01 	mov.w	ip, #1
 80153c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80153c8:	e7e8      	b.n	801539c <_strtol_l.constprop.0+0x6c>
 80153ca:	2c2b      	cmp	r4, #43	; 0x2b
 80153cc:	bf04      	itt	eq
 80153ce:	782c      	ldrbeq	r4, [r5, #0]
 80153d0:	1cb5      	addeq	r5, r6, #2
 80153d2:	e7ca      	b.n	801536a <_strtol_l.constprop.0+0x3a>
 80153d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80153d8:	f1be 0f19 	cmp.w	lr, #25
 80153dc:	d801      	bhi.n	80153e2 <_strtol_l.constprop.0+0xb2>
 80153de:	3c37      	subs	r4, #55	; 0x37
 80153e0:	e7e2      	b.n	80153a8 <_strtol_l.constprop.0+0x78>
 80153e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80153e6:	f1be 0f19 	cmp.w	lr, #25
 80153ea:	d804      	bhi.n	80153f6 <_strtol_l.constprop.0+0xc6>
 80153ec:	3c57      	subs	r4, #87	; 0x57
 80153ee:	e7db      	b.n	80153a8 <_strtol_l.constprop.0+0x78>
 80153f0:	f04f 3cff 	mov.w	ip, #4294967295
 80153f4:	e7e6      	b.n	80153c4 <_strtol_l.constprop.0+0x94>
 80153f6:	f1bc 0f00 	cmp.w	ip, #0
 80153fa:	da05      	bge.n	8015408 <_strtol_l.constprop.0+0xd8>
 80153fc:	2322      	movs	r3, #34	; 0x22
 80153fe:	6003      	str	r3, [r0, #0]
 8015400:	4646      	mov	r6, r8
 8015402:	b942      	cbnz	r2, 8015416 <_strtol_l.constprop.0+0xe6>
 8015404:	4630      	mov	r0, r6
 8015406:	e79e      	b.n	8015346 <_strtol_l.constprop.0+0x16>
 8015408:	b107      	cbz	r7, 801540c <_strtol_l.constprop.0+0xdc>
 801540a:	4276      	negs	r6, r6
 801540c:	2a00      	cmp	r2, #0
 801540e:	d0f9      	beq.n	8015404 <_strtol_l.constprop.0+0xd4>
 8015410:	f1bc 0f00 	cmp.w	ip, #0
 8015414:	d000      	beq.n	8015418 <_strtol_l.constprop.0+0xe8>
 8015416:	1e69      	subs	r1, r5, #1
 8015418:	6011      	str	r1, [r2, #0]
 801541a:	e7f3      	b.n	8015404 <_strtol_l.constprop.0+0xd4>
 801541c:	2430      	movs	r4, #48	; 0x30
 801541e:	2b00      	cmp	r3, #0
 8015420:	d1b1      	bne.n	8015386 <_strtol_l.constprop.0+0x56>
 8015422:	2308      	movs	r3, #8
 8015424:	e7af      	b.n	8015386 <_strtol_l.constprop.0+0x56>
 8015426:	2c30      	cmp	r4, #48	; 0x30
 8015428:	d0a5      	beq.n	8015376 <_strtol_l.constprop.0+0x46>
 801542a:	230a      	movs	r3, #10
 801542c:	e7ab      	b.n	8015386 <_strtol_l.constprop.0+0x56>
 801542e:	bf00      	nop
 8015430:	080187c1 	.word	0x080187c1

08015434 <_strtol_r>:
 8015434:	f7ff bf7c 	b.w	8015330 <_strtol_l.constprop.0>

08015438 <_write_r>:
 8015438:	b538      	push	{r3, r4, r5, lr}
 801543a:	4d07      	ldr	r5, [pc, #28]	; (8015458 <_write_r+0x20>)
 801543c:	4604      	mov	r4, r0
 801543e:	4608      	mov	r0, r1
 8015440:	4611      	mov	r1, r2
 8015442:	2200      	movs	r2, #0
 8015444:	602a      	str	r2, [r5, #0]
 8015446:	461a      	mov	r2, r3
 8015448:	f7f1 faed 	bl	8006a26 <_write>
 801544c:	1c43      	adds	r3, r0, #1
 801544e:	d102      	bne.n	8015456 <_write_r+0x1e>
 8015450:	682b      	ldr	r3, [r5, #0]
 8015452:	b103      	cbz	r3, 8015456 <_write_r+0x1e>
 8015454:	6023      	str	r3, [r4, #0]
 8015456:	bd38      	pop	{r3, r4, r5, pc}
 8015458:	200061e0 	.word	0x200061e0

0801545c <_close_r>:
 801545c:	b538      	push	{r3, r4, r5, lr}
 801545e:	4d06      	ldr	r5, [pc, #24]	; (8015478 <_close_r+0x1c>)
 8015460:	2300      	movs	r3, #0
 8015462:	4604      	mov	r4, r0
 8015464:	4608      	mov	r0, r1
 8015466:	602b      	str	r3, [r5, #0]
 8015468:	f7f1 faf9 	bl	8006a5e <_close>
 801546c:	1c43      	adds	r3, r0, #1
 801546e:	d102      	bne.n	8015476 <_close_r+0x1a>
 8015470:	682b      	ldr	r3, [r5, #0]
 8015472:	b103      	cbz	r3, 8015476 <_close_r+0x1a>
 8015474:	6023      	str	r3, [r4, #0]
 8015476:	bd38      	pop	{r3, r4, r5, pc}
 8015478:	200061e0 	.word	0x200061e0

0801547c <quorem>:
 801547c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015480:	6903      	ldr	r3, [r0, #16]
 8015482:	690c      	ldr	r4, [r1, #16]
 8015484:	42a3      	cmp	r3, r4
 8015486:	4607      	mov	r7, r0
 8015488:	f2c0 8081 	blt.w	801558e <quorem+0x112>
 801548c:	3c01      	subs	r4, #1
 801548e:	f101 0814 	add.w	r8, r1, #20
 8015492:	f100 0514 	add.w	r5, r0, #20
 8015496:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801549a:	9301      	str	r3, [sp, #4]
 801549c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80154a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80154a4:	3301      	adds	r3, #1
 80154a6:	429a      	cmp	r2, r3
 80154a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80154ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80154b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80154b4:	d331      	bcc.n	801551a <quorem+0x9e>
 80154b6:	f04f 0e00 	mov.w	lr, #0
 80154ba:	4640      	mov	r0, r8
 80154bc:	46ac      	mov	ip, r5
 80154be:	46f2      	mov	sl, lr
 80154c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80154c4:	b293      	uxth	r3, r2
 80154c6:	fb06 e303 	mla	r3, r6, r3, lr
 80154ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80154ce:	b29b      	uxth	r3, r3
 80154d0:	ebaa 0303 	sub.w	r3, sl, r3
 80154d4:	f8dc a000 	ldr.w	sl, [ip]
 80154d8:	0c12      	lsrs	r2, r2, #16
 80154da:	fa13 f38a 	uxtah	r3, r3, sl
 80154de:	fb06 e202 	mla	r2, r6, r2, lr
 80154e2:	9300      	str	r3, [sp, #0]
 80154e4:	9b00      	ldr	r3, [sp, #0]
 80154e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80154ea:	b292      	uxth	r2, r2
 80154ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80154f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80154f4:	f8bd 3000 	ldrh.w	r3, [sp]
 80154f8:	4581      	cmp	r9, r0
 80154fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80154fe:	f84c 3b04 	str.w	r3, [ip], #4
 8015502:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015506:	d2db      	bcs.n	80154c0 <quorem+0x44>
 8015508:	f855 300b 	ldr.w	r3, [r5, fp]
 801550c:	b92b      	cbnz	r3, 801551a <quorem+0x9e>
 801550e:	9b01      	ldr	r3, [sp, #4]
 8015510:	3b04      	subs	r3, #4
 8015512:	429d      	cmp	r5, r3
 8015514:	461a      	mov	r2, r3
 8015516:	d32e      	bcc.n	8015576 <quorem+0xfa>
 8015518:	613c      	str	r4, [r7, #16]
 801551a:	4638      	mov	r0, r7
 801551c:	f001 fce4 	bl	8016ee8 <__mcmp>
 8015520:	2800      	cmp	r0, #0
 8015522:	db24      	blt.n	801556e <quorem+0xf2>
 8015524:	3601      	adds	r6, #1
 8015526:	4628      	mov	r0, r5
 8015528:	f04f 0c00 	mov.w	ip, #0
 801552c:	f858 2b04 	ldr.w	r2, [r8], #4
 8015530:	f8d0 e000 	ldr.w	lr, [r0]
 8015534:	b293      	uxth	r3, r2
 8015536:	ebac 0303 	sub.w	r3, ip, r3
 801553a:	0c12      	lsrs	r2, r2, #16
 801553c:	fa13 f38e 	uxtah	r3, r3, lr
 8015540:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015544:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015548:	b29b      	uxth	r3, r3
 801554a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801554e:	45c1      	cmp	r9, r8
 8015550:	f840 3b04 	str.w	r3, [r0], #4
 8015554:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015558:	d2e8      	bcs.n	801552c <quorem+0xb0>
 801555a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801555e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015562:	b922      	cbnz	r2, 801556e <quorem+0xf2>
 8015564:	3b04      	subs	r3, #4
 8015566:	429d      	cmp	r5, r3
 8015568:	461a      	mov	r2, r3
 801556a:	d30a      	bcc.n	8015582 <quorem+0x106>
 801556c:	613c      	str	r4, [r7, #16]
 801556e:	4630      	mov	r0, r6
 8015570:	b003      	add	sp, #12
 8015572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015576:	6812      	ldr	r2, [r2, #0]
 8015578:	3b04      	subs	r3, #4
 801557a:	2a00      	cmp	r2, #0
 801557c:	d1cc      	bne.n	8015518 <quorem+0x9c>
 801557e:	3c01      	subs	r4, #1
 8015580:	e7c7      	b.n	8015512 <quorem+0x96>
 8015582:	6812      	ldr	r2, [r2, #0]
 8015584:	3b04      	subs	r3, #4
 8015586:	2a00      	cmp	r2, #0
 8015588:	d1f0      	bne.n	801556c <quorem+0xf0>
 801558a:	3c01      	subs	r4, #1
 801558c:	e7eb      	b.n	8015566 <quorem+0xea>
 801558e:	2000      	movs	r0, #0
 8015590:	e7ee      	b.n	8015570 <quorem+0xf4>
 8015592:	0000      	movs	r0, r0
 8015594:	0000      	movs	r0, r0
	...

08015598 <_dtoa_r>:
 8015598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801559c:	ed2d 8b02 	vpush	{d8}
 80155a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80155a2:	b091      	sub	sp, #68	; 0x44
 80155a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80155a8:	ec59 8b10 	vmov	r8, r9, d0
 80155ac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80155ae:	9106      	str	r1, [sp, #24]
 80155b0:	4606      	mov	r6, r0
 80155b2:	9208      	str	r2, [sp, #32]
 80155b4:	930c      	str	r3, [sp, #48]	; 0x30
 80155b6:	b975      	cbnz	r5, 80155d6 <_dtoa_r+0x3e>
 80155b8:	2010      	movs	r0, #16
 80155ba:	f001 f9a3 	bl	8016904 <malloc>
 80155be:	4602      	mov	r2, r0
 80155c0:	6270      	str	r0, [r6, #36]	; 0x24
 80155c2:	b920      	cbnz	r0, 80155ce <_dtoa_r+0x36>
 80155c4:	4baa      	ldr	r3, [pc, #680]	; (8015870 <_dtoa_r+0x2d8>)
 80155c6:	21ea      	movs	r1, #234	; 0xea
 80155c8:	48aa      	ldr	r0, [pc, #680]	; (8015874 <_dtoa_r+0x2dc>)
 80155ca:	f002 f87b 	bl	80176c4 <__assert_func>
 80155ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80155d2:	6005      	str	r5, [r0, #0]
 80155d4:	60c5      	str	r5, [r0, #12]
 80155d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80155d8:	6819      	ldr	r1, [r3, #0]
 80155da:	b151      	cbz	r1, 80155f2 <_dtoa_r+0x5a>
 80155dc:	685a      	ldr	r2, [r3, #4]
 80155de:	604a      	str	r2, [r1, #4]
 80155e0:	2301      	movs	r3, #1
 80155e2:	4093      	lsls	r3, r2
 80155e4:	608b      	str	r3, [r1, #8]
 80155e6:	4630      	mov	r0, r6
 80155e8:	f001 f9f2 	bl	80169d0 <_Bfree>
 80155ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80155ee:	2200      	movs	r2, #0
 80155f0:	601a      	str	r2, [r3, #0]
 80155f2:	f1b9 0300 	subs.w	r3, r9, #0
 80155f6:	bfbb      	ittet	lt
 80155f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80155fc:	9303      	strlt	r3, [sp, #12]
 80155fe:	2300      	movge	r3, #0
 8015600:	2201      	movlt	r2, #1
 8015602:	bfac      	ite	ge
 8015604:	6023      	strge	r3, [r4, #0]
 8015606:	6022      	strlt	r2, [r4, #0]
 8015608:	4b9b      	ldr	r3, [pc, #620]	; (8015878 <_dtoa_r+0x2e0>)
 801560a:	9c03      	ldr	r4, [sp, #12]
 801560c:	43a3      	bics	r3, r4
 801560e:	d11c      	bne.n	801564a <_dtoa_r+0xb2>
 8015610:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015612:	f242 730f 	movw	r3, #9999	; 0x270f
 8015616:	6013      	str	r3, [r2, #0]
 8015618:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801561c:	ea53 0308 	orrs.w	r3, r3, r8
 8015620:	f000 84fd 	beq.w	801601e <_dtoa_r+0xa86>
 8015624:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015626:	b963      	cbnz	r3, 8015642 <_dtoa_r+0xaa>
 8015628:	4b94      	ldr	r3, [pc, #592]	; (801587c <_dtoa_r+0x2e4>)
 801562a:	e01f      	b.n	801566c <_dtoa_r+0xd4>
 801562c:	4b94      	ldr	r3, [pc, #592]	; (8015880 <_dtoa_r+0x2e8>)
 801562e:	9301      	str	r3, [sp, #4]
 8015630:	3308      	adds	r3, #8
 8015632:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015634:	6013      	str	r3, [r2, #0]
 8015636:	9801      	ldr	r0, [sp, #4]
 8015638:	b011      	add	sp, #68	; 0x44
 801563a:	ecbd 8b02 	vpop	{d8}
 801563e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015642:	4b8e      	ldr	r3, [pc, #568]	; (801587c <_dtoa_r+0x2e4>)
 8015644:	9301      	str	r3, [sp, #4]
 8015646:	3303      	adds	r3, #3
 8015648:	e7f3      	b.n	8015632 <_dtoa_r+0x9a>
 801564a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801564e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015656:	d10b      	bne.n	8015670 <_dtoa_r+0xd8>
 8015658:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801565a:	2301      	movs	r3, #1
 801565c:	6013      	str	r3, [r2, #0]
 801565e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015660:	2b00      	cmp	r3, #0
 8015662:	f000 84d9 	beq.w	8016018 <_dtoa_r+0xa80>
 8015666:	4887      	ldr	r0, [pc, #540]	; (8015884 <_dtoa_r+0x2ec>)
 8015668:	6018      	str	r0, [r3, #0]
 801566a:	1e43      	subs	r3, r0, #1
 801566c:	9301      	str	r3, [sp, #4]
 801566e:	e7e2      	b.n	8015636 <_dtoa_r+0x9e>
 8015670:	a90f      	add	r1, sp, #60	; 0x3c
 8015672:	aa0e      	add	r2, sp, #56	; 0x38
 8015674:	4630      	mov	r0, r6
 8015676:	eeb0 0b48 	vmov.f64	d0, d8
 801567a:	f001 fd57 	bl	801712c <__d2b>
 801567e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8015682:	4605      	mov	r5, r0
 8015684:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015686:	2900      	cmp	r1, #0
 8015688:	d046      	beq.n	8015718 <_dtoa_r+0x180>
 801568a:	ee18 4a90 	vmov	r4, s17
 801568e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8015692:	ec53 2b18 	vmov	r2, r3, d8
 8015696:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801569a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801569e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80156a2:	2400      	movs	r4, #0
 80156a4:	ec43 2b16 	vmov	d6, r2, r3
 80156a8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80156ac:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8015858 <_dtoa_r+0x2c0>
 80156b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80156b4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8015860 <_dtoa_r+0x2c8>
 80156b8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80156bc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8015868 <_dtoa_r+0x2d0>
 80156c0:	ee07 1a90 	vmov	s15, r1
 80156c4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80156c8:	eeb0 7b46 	vmov.f64	d7, d6
 80156cc:	eea4 7b05 	vfma.f64	d7, d4, d5
 80156d0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80156d4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80156d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156dc:	ee16 ba90 	vmov	fp, s13
 80156e0:	940a      	str	r4, [sp, #40]	; 0x28
 80156e2:	d508      	bpl.n	80156f6 <_dtoa_r+0x15e>
 80156e4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80156e8:	eeb4 6b47 	vcmp.f64	d6, d7
 80156ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156f0:	bf18      	it	ne
 80156f2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80156f6:	f1bb 0f16 	cmp.w	fp, #22
 80156fa:	d82f      	bhi.n	801575c <_dtoa_r+0x1c4>
 80156fc:	4b62      	ldr	r3, [pc, #392]	; (8015888 <_dtoa_r+0x2f0>)
 80156fe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015702:	ed93 7b00 	vldr	d7, [r3]
 8015706:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801570a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801570e:	d501      	bpl.n	8015714 <_dtoa_r+0x17c>
 8015710:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015714:	2300      	movs	r3, #0
 8015716:	e022      	b.n	801575e <_dtoa_r+0x1c6>
 8015718:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801571a:	4401      	add	r1, r0
 801571c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8015720:	2b20      	cmp	r3, #32
 8015722:	bfc1      	itttt	gt
 8015724:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015728:	fa04 f303 	lslgt.w	r3, r4, r3
 801572c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8015730:	fa28 f804 	lsrgt.w	r8, r8, r4
 8015734:	bfd6      	itet	le
 8015736:	f1c3 0320 	rsble	r3, r3, #32
 801573a:	ea43 0808 	orrgt.w	r8, r3, r8
 801573e:	fa08 f803 	lslle.w	r8, r8, r3
 8015742:	ee07 8a90 	vmov	s15, r8
 8015746:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801574a:	3901      	subs	r1, #1
 801574c:	ee17 4a90 	vmov	r4, s15
 8015750:	ec53 2b17 	vmov	r2, r3, d7
 8015754:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8015758:	2401      	movs	r4, #1
 801575a:	e7a3      	b.n	80156a4 <_dtoa_r+0x10c>
 801575c:	2301      	movs	r3, #1
 801575e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015760:	1a43      	subs	r3, r0, r1
 8015762:	1e5a      	subs	r2, r3, #1
 8015764:	bf45      	ittet	mi
 8015766:	f1c3 0301 	rsbmi	r3, r3, #1
 801576a:	9304      	strmi	r3, [sp, #16]
 801576c:	2300      	movpl	r3, #0
 801576e:	2300      	movmi	r3, #0
 8015770:	9205      	str	r2, [sp, #20]
 8015772:	bf54      	ite	pl
 8015774:	9304      	strpl	r3, [sp, #16]
 8015776:	9305      	strmi	r3, [sp, #20]
 8015778:	f1bb 0f00 	cmp.w	fp, #0
 801577c:	db18      	blt.n	80157b0 <_dtoa_r+0x218>
 801577e:	9b05      	ldr	r3, [sp, #20]
 8015780:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8015784:	445b      	add	r3, fp
 8015786:	9305      	str	r3, [sp, #20]
 8015788:	2300      	movs	r3, #0
 801578a:	9a06      	ldr	r2, [sp, #24]
 801578c:	2a09      	cmp	r2, #9
 801578e:	d849      	bhi.n	8015824 <_dtoa_r+0x28c>
 8015790:	2a05      	cmp	r2, #5
 8015792:	bfc4      	itt	gt
 8015794:	3a04      	subgt	r2, #4
 8015796:	9206      	strgt	r2, [sp, #24]
 8015798:	9a06      	ldr	r2, [sp, #24]
 801579a:	f1a2 0202 	sub.w	r2, r2, #2
 801579e:	bfcc      	ite	gt
 80157a0:	2400      	movgt	r4, #0
 80157a2:	2401      	movle	r4, #1
 80157a4:	2a03      	cmp	r2, #3
 80157a6:	d848      	bhi.n	801583a <_dtoa_r+0x2a2>
 80157a8:	e8df f002 	tbb	[pc, r2]
 80157ac:	3a2c2e0b 	.word	0x3a2c2e0b
 80157b0:	9b04      	ldr	r3, [sp, #16]
 80157b2:	2200      	movs	r2, #0
 80157b4:	eba3 030b 	sub.w	r3, r3, fp
 80157b8:	9304      	str	r3, [sp, #16]
 80157ba:	9209      	str	r2, [sp, #36]	; 0x24
 80157bc:	f1cb 0300 	rsb	r3, fp, #0
 80157c0:	e7e3      	b.n	801578a <_dtoa_r+0x1f2>
 80157c2:	2200      	movs	r2, #0
 80157c4:	9207      	str	r2, [sp, #28]
 80157c6:	9a08      	ldr	r2, [sp, #32]
 80157c8:	2a00      	cmp	r2, #0
 80157ca:	dc39      	bgt.n	8015840 <_dtoa_r+0x2a8>
 80157cc:	f04f 0a01 	mov.w	sl, #1
 80157d0:	46d1      	mov	r9, sl
 80157d2:	4652      	mov	r2, sl
 80157d4:	f8cd a020 	str.w	sl, [sp, #32]
 80157d8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80157da:	2100      	movs	r1, #0
 80157dc:	6079      	str	r1, [r7, #4]
 80157de:	2004      	movs	r0, #4
 80157e0:	f100 0c14 	add.w	ip, r0, #20
 80157e4:	4594      	cmp	ip, r2
 80157e6:	6879      	ldr	r1, [r7, #4]
 80157e8:	d92f      	bls.n	801584a <_dtoa_r+0x2b2>
 80157ea:	4630      	mov	r0, r6
 80157ec:	930d      	str	r3, [sp, #52]	; 0x34
 80157ee:	f001 f8af 	bl	8016950 <_Balloc>
 80157f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80157f4:	9001      	str	r0, [sp, #4]
 80157f6:	4602      	mov	r2, r0
 80157f8:	2800      	cmp	r0, #0
 80157fa:	d149      	bne.n	8015890 <_dtoa_r+0x2f8>
 80157fc:	4b23      	ldr	r3, [pc, #140]	; (801588c <_dtoa_r+0x2f4>)
 80157fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015802:	e6e1      	b.n	80155c8 <_dtoa_r+0x30>
 8015804:	2201      	movs	r2, #1
 8015806:	e7dd      	b.n	80157c4 <_dtoa_r+0x22c>
 8015808:	2200      	movs	r2, #0
 801580a:	9207      	str	r2, [sp, #28]
 801580c:	9a08      	ldr	r2, [sp, #32]
 801580e:	eb0b 0a02 	add.w	sl, fp, r2
 8015812:	f10a 0901 	add.w	r9, sl, #1
 8015816:	464a      	mov	r2, r9
 8015818:	2a01      	cmp	r2, #1
 801581a:	bfb8      	it	lt
 801581c:	2201      	movlt	r2, #1
 801581e:	e7db      	b.n	80157d8 <_dtoa_r+0x240>
 8015820:	2201      	movs	r2, #1
 8015822:	e7f2      	b.n	801580a <_dtoa_r+0x272>
 8015824:	2401      	movs	r4, #1
 8015826:	2200      	movs	r2, #0
 8015828:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801582c:	f04f 3aff 	mov.w	sl, #4294967295
 8015830:	2100      	movs	r1, #0
 8015832:	46d1      	mov	r9, sl
 8015834:	2212      	movs	r2, #18
 8015836:	9108      	str	r1, [sp, #32]
 8015838:	e7ce      	b.n	80157d8 <_dtoa_r+0x240>
 801583a:	2201      	movs	r2, #1
 801583c:	9207      	str	r2, [sp, #28]
 801583e:	e7f5      	b.n	801582c <_dtoa_r+0x294>
 8015840:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015844:	46d1      	mov	r9, sl
 8015846:	4652      	mov	r2, sl
 8015848:	e7c6      	b.n	80157d8 <_dtoa_r+0x240>
 801584a:	3101      	adds	r1, #1
 801584c:	6079      	str	r1, [r7, #4]
 801584e:	0040      	lsls	r0, r0, #1
 8015850:	e7c6      	b.n	80157e0 <_dtoa_r+0x248>
 8015852:	bf00      	nop
 8015854:	f3af 8000 	nop.w
 8015858:	636f4361 	.word	0x636f4361
 801585c:	3fd287a7 	.word	0x3fd287a7
 8015860:	8b60c8b3 	.word	0x8b60c8b3
 8015864:	3fc68a28 	.word	0x3fc68a28
 8015868:	509f79fb 	.word	0x509f79fb
 801586c:	3fd34413 	.word	0x3fd34413
 8015870:	080188ce 	.word	0x080188ce
 8015874:	080188e5 	.word	0x080188e5
 8015878:	7ff00000 	.word	0x7ff00000
 801587c:	080188ca 	.word	0x080188ca
 8015880:	080188c1 	.word	0x080188c1
 8015884:	08018745 	.word	0x08018745
 8015888:	08018a50 	.word	0x08018a50
 801588c:	08018940 	.word	0x08018940
 8015890:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8015892:	9901      	ldr	r1, [sp, #4]
 8015894:	6011      	str	r1, [r2, #0]
 8015896:	f1b9 0f0e 	cmp.w	r9, #14
 801589a:	d86c      	bhi.n	8015976 <_dtoa_r+0x3de>
 801589c:	2c00      	cmp	r4, #0
 801589e:	d06a      	beq.n	8015976 <_dtoa_r+0x3de>
 80158a0:	f1bb 0f00 	cmp.w	fp, #0
 80158a4:	f340 80a0 	ble.w	80159e8 <_dtoa_r+0x450>
 80158a8:	49c1      	ldr	r1, [pc, #772]	; (8015bb0 <_dtoa_r+0x618>)
 80158aa:	f00b 020f 	and.w	r2, fp, #15
 80158ae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80158b2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80158b6:	ed92 7b00 	vldr	d7, [r2]
 80158ba:	ea4f 112b 	mov.w	r1, fp, asr #4
 80158be:	f000 8087 	beq.w	80159d0 <_dtoa_r+0x438>
 80158c2:	4abc      	ldr	r2, [pc, #752]	; (8015bb4 <_dtoa_r+0x61c>)
 80158c4:	ed92 6b08 	vldr	d6, [r2, #32]
 80158c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80158cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80158d0:	f001 010f 	and.w	r1, r1, #15
 80158d4:	2203      	movs	r2, #3
 80158d6:	48b7      	ldr	r0, [pc, #732]	; (8015bb4 <_dtoa_r+0x61c>)
 80158d8:	2900      	cmp	r1, #0
 80158da:	d17b      	bne.n	80159d4 <_dtoa_r+0x43c>
 80158dc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80158e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80158e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80158e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80158ea:	2900      	cmp	r1, #0
 80158ec:	f000 80a2 	beq.w	8015a34 <_dtoa_r+0x49c>
 80158f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80158f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80158f8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80158fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015900:	f140 8098 	bpl.w	8015a34 <_dtoa_r+0x49c>
 8015904:	f1b9 0f00 	cmp.w	r9, #0
 8015908:	f000 8094 	beq.w	8015a34 <_dtoa_r+0x49c>
 801590c:	f1ba 0f00 	cmp.w	sl, #0
 8015910:	dd2f      	ble.n	8015972 <_dtoa_r+0x3da>
 8015912:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8015916:	ee27 7b06 	vmul.f64	d7, d7, d6
 801591a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801591e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8015922:	3201      	adds	r2, #1
 8015924:	4650      	mov	r0, sl
 8015926:	ed9d 6b02 	vldr	d6, [sp, #8]
 801592a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801592e:	ee07 2a90 	vmov	s15, r2
 8015932:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015936:	eea7 5b06 	vfma.f64	d5, d7, d6
 801593a:	ee15 4a90 	vmov	r4, s11
 801593e:	ec52 1b15 	vmov	r1, r2, d5
 8015942:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8015946:	2800      	cmp	r0, #0
 8015948:	d177      	bne.n	8015a3a <_dtoa_r+0x4a2>
 801594a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801594e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8015952:	ec42 1b17 	vmov	d7, r1, r2
 8015956:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801595a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801595e:	f300 8263 	bgt.w	8015e28 <_dtoa_r+0x890>
 8015962:	eeb1 7b47 	vneg.f64	d7, d7
 8015966:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801596a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801596e:	f100 8258 	bmi.w	8015e22 <_dtoa_r+0x88a>
 8015972:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015976:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015978:	2a00      	cmp	r2, #0
 801597a:	f2c0 811d 	blt.w	8015bb8 <_dtoa_r+0x620>
 801597e:	f1bb 0f0e 	cmp.w	fp, #14
 8015982:	f300 8119 	bgt.w	8015bb8 <_dtoa_r+0x620>
 8015986:	4b8a      	ldr	r3, [pc, #552]	; (8015bb0 <_dtoa_r+0x618>)
 8015988:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801598c:	ed93 6b00 	vldr	d6, [r3]
 8015990:	9b08      	ldr	r3, [sp, #32]
 8015992:	2b00      	cmp	r3, #0
 8015994:	f280 80b7 	bge.w	8015b06 <_dtoa_r+0x56e>
 8015998:	f1b9 0f00 	cmp.w	r9, #0
 801599c:	f300 80b3 	bgt.w	8015b06 <_dtoa_r+0x56e>
 80159a0:	f040 823f 	bne.w	8015e22 <_dtoa_r+0x88a>
 80159a4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80159a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80159ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80159b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80159b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159b8:	464c      	mov	r4, r9
 80159ba:	464f      	mov	r7, r9
 80159bc:	f280 8215 	bge.w	8015dea <_dtoa_r+0x852>
 80159c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80159c4:	2331      	movs	r3, #49	; 0x31
 80159c6:	f808 3b01 	strb.w	r3, [r8], #1
 80159ca:	f10b 0b01 	add.w	fp, fp, #1
 80159ce:	e211      	b.n	8015df4 <_dtoa_r+0x85c>
 80159d0:	2202      	movs	r2, #2
 80159d2:	e780      	b.n	80158d6 <_dtoa_r+0x33e>
 80159d4:	07cc      	lsls	r4, r1, #31
 80159d6:	d504      	bpl.n	80159e2 <_dtoa_r+0x44a>
 80159d8:	ed90 6b00 	vldr	d6, [r0]
 80159dc:	3201      	adds	r2, #1
 80159de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80159e2:	1049      	asrs	r1, r1, #1
 80159e4:	3008      	adds	r0, #8
 80159e6:	e777      	b.n	80158d8 <_dtoa_r+0x340>
 80159e8:	d022      	beq.n	8015a30 <_dtoa_r+0x498>
 80159ea:	f1cb 0100 	rsb	r1, fp, #0
 80159ee:	4a70      	ldr	r2, [pc, #448]	; (8015bb0 <_dtoa_r+0x618>)
 80159f0:	f001 000f 	and.w	r0, r1, #15
 80159f4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80159f8:	ed92 7b00 	vldr	d7, [r2]
 80159fc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8015a00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015a04:	486b      	ldr	r0, [pc, #428]	; (8015bb4 <_dtoa_r+0x61c>)
 8015a06:	1109      	asrs	r1, r1, #4
 8015a08:	2400      	movs	r4, #0
 8015a0a:	2202      	movs	r2, #2
 8015a0c:	b929      	cbnz	r1, 8015a1a <_dtoa_r+0x482>
 8015a0e:	2c00      	cmp	r4, #0
 8015a10:	f43f af6a 	beq.w	80158e8 <_dtoa_r+0x350>
 8015a14:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015a18:	e766      	b.n	80158e8 <_dtoa_r+0x350>
 8015a1a:	07cf      	lsls	r7, r1, #31
 8015a1c:	d505      	bpl.n	8015a2a <_dtoa_r+0x492>
 8015a1e:	ed90 6b00 	vldr	d6, [r0]
 8015a22:	3201      	adds	r2, #1
 8015a24:	2401      	movs	r4, #1
 8015a26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015a2a:	1049      	asrs	r1, r1, #1
 8015a2c:	3008      	adds	r0, #8
 8015a2e:	e7ed      	b.n	8015a0c <_dtoa_r+0x474>
 8015a30:	2202      	movs	r2, #2
 8015a32:	e759      	b.n	80158e8 <_dtoa_r+0x350>
 8015a34:	465f      	mov	r7, fp
 8015a36:	4648      	mov	r0, r9
 8015a38:	e775      	b.n	8015926 <_dtoa_r+0x38e>
 8015a3a:	ec42 1b17 	vmov	d7, r1, r2
 8015a3e:	4a5c      	ldr	r2, [pc, #368]	; (8015bb0 <_dtoa_r+0x618>)
 8015a40:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015a44:	ed12 4b02 	vldr	d4, [r2, #-8]
 8015a48:	9a01      	ldr	r2, [sp, #4]
 8015a4a:	1814      	adds	r4, r2, r0
 8015a4c:	9a07      	ldr	r2, [sp, #28]
 8015a4e:	b352      	cbz	r2, 8015aa6 <_dtoa_r+0x50e>
 8015a50:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8015a54:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8015a58:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015a5c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8015a60:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015a64:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015a68:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015a6c:	ee14 2a90 	vmov	r2, s9
 8015a70:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015a74:	3230      	adds	r2, #48	; 0x30
 8015a76:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015a7a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a82:	f808 2b01 	strb.w	r2, [r8], #1
 8015a86:	d439      	bmi.n	8015afc <_dtoa_r+0x564>
 8015a88:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015a8c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a94:	d472      	bmi.n	8015b7c <_dtoa_r+0x5e4>
 8015a96:	45a0      	cmp	r8, r4
 8015a98:	f43f af6b 	beq.w	8015972 <_dtoa_r+0x3da>
 8015a9c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8015aa0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015aa4:	e7e0      	b.n	8015a68 <_dtoa_r+0x4d0>
 8015aa6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015aaa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015aae:	4621      	mov	r1, r4
 8015ab0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015ab4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015ab8:	ee14 2a90 	vmov	r2, s9
 8015abc:	3230      	adds	r2, #48	; 0x30
 8015abe:	f808 2b01 	strb.w	r2, [r8], #1
 8015ac2:	45a0      	cmp	r8, r4
 8015ac4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015ac8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015acc:	d118      	bne.n	8015b00 <_dtoa_r+0x568>
 8015ace:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8015ad2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8015ad6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8015ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ade:	dc4d      	bgt.n	8015b7c <_dtoa_r+0x5e4>
 8015ae0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015ae4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015aec:	f57f af41 	bpl.w	8015972 <_dtoa_r+0x3da>
 8015af0:	4688      	mov	r8, r1
 8015af2:	3901      	subs	r1, #1
 8015af4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8015af8:	2b30      	cmp	r3, #48	; 0x30
 8015afa:	d0f9      	beq.n	8015af0 <_dtoa_r+0x558>
 8015afc:	46bb      	mov	fp, r7
 8015afe:	e02a      	b.n	8015b56 <_dtoa_r+0x5be>
 8015b00:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015b04:	e7d6      	b.n	8015ab4 <_dtoa_r+0x51c>
 8015b06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015b0a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8015b0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015b12:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8015b16:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8015b1a:	ee15 3a10 	vmov	r3, s10
 8015b1e:	3330      	adds	r3, #48	; 0x30
 8015b20:	f808 3b01 	strb.w	r3, [r8], #1
 8015b24:	9b01      	ldr	r3, [sp, #4]
 8015b26:	eba8 0303 	sub.w	r3, r8, r3
 8015b2a:	4599      	cmp	r9, r3
 8015b2c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8015b30:	eea3 7b46 	vfms.f64	d7, d3, d6
 8015b34:	d133      	bne.n	8015b9e <_dtoa_r+0x606>
 8015b36:	ee37 7b07 	vadd.f64	d7, d7, d7
 8015b3a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b42:	dc1a      	bgt.n	8015b7a <_dtoa_r+0x5e2>
 8015b44:	eeb4 7b46 	vcmp.f64	d7, d6
 8015b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b4c:	d103      	bne.n	8015b56 <_dtoa_r+0x5be>
 8015b4e:	ee15 3a10 	vmov	r3, s10
 8015b52:	07d9      	lsls	r1, r3, #31
 8015b54:	d411      	bmi.n	8015b7a <_dtoa_r+0x5e2>
 8015b56:	4629      	mov	r1, r5
 8015b58:	4630      	mov	r0, r6
 8015b5a:	f000 ff39 	bl	80169d0 <_Bfree>
 8015b5e:	2300      	movs	r3, #0
 8015b60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015b62:	f888 3000 	strb.w	r3, [r8]
 8015b66:	f10b 0301 	add.w	r3, fp, #1
 8015b6a:	6013      	str	r3, [r2, #0]
 8015b6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	f43f ad61 	beq.w	8015636 <_dtoa_r+0x9e>
 8015b74:	f8c3 8000 	str.w	r8, [r3]
 8015b78:	e55d      	b.n	8015636 <_dtoa_r+0x9e>
 8015b7a:	465f      	mov	r7, fp
 8015b7c:	4643      	mov	r3, r8
 8015b7e:	4698      	mov	r8, r3
 8015b80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015b84:	2a39      	cmp	r2, #57	; 0x39
 8015b86:	d106      	bne.n	8015b96 <_dtoa_r+0x5fe>
 8015b88:	9a01      	ldr	r2, [sp, #4]
 8015b8a:	429a      	cmp	r2, r3
 8015b8c:	d1f7      	bne.n	8015b7e <_dtoa_r+0x5e6>
 8015b8e:	9901      	ldr	r1, [sp, #4]
 8015b90:	2230      	movs	r2, #48	; 0x30
 8015b92:	3701      	adds	r7, #1
 8015b94:	700a      	strb	r2, [r1, #0]
 8015b96:	781a      	ldrb	r2, [r3, #0]
 8015b98:	3201      	adds	r2, #1
 8015b9a:	701a      	strb	r2, [r3, #0]
 8015b9c:	e7ae      	b.n	8015afc <_dtoa_r+0x564>
 8015b9e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015ba2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015baa:	d1b2      	bne.n	8015b12 <_dtoa_r+0x57a>
 8015bac:	e7d3      	b.n	8015b56 <_dtoa_r+0x5be>
 8015bae:	bf00      	nop
 8015bb0:	08018a50 	.word	0x08018a50
 8015bb4:	08018a28 	.word	0x08018a28
 8015bb8:	9907      	ldr	r1, [sp, #28]
 8015bba:	2900      	cmp	r1, #0
 8015bbc:	f000 80d0 	beq.w	8015d60 <_dtoa_r+0x7c8>
 8015bc0:	9906      	ldr	r1, [sp, #24]
 8015bc2:	2901      	cmp	r1, #1
 8015bc4:	f300 80b4 	bgt.w	8015d30 <_dtoa_r+0x798>
 8015bc8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015bca:	2900      	cmp	r1, #0
 8015bcc:	f000 80ac 	beq.w	8015d28 <_dtoa_r+0x790>
 8015bd0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015bd4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015bd8:	461c      	mov	r4, r3
 8015bda:	930a      	str	r3, [sp, #40]	; 0x28
 8015bdc:	9b04      	ldr	r3, [sp, #16]
 8015bde:	4413      	add	r3, r2
 8015be0:	9304      	str	r3, [sp, #16]
 8015be2:	9b05      	ldr	r3, [sp, #20]
 8015be4:	2101      	movs	r1, #1
 8015be6:	4413      	add	r3, r2
 8015be8:	4630      	mov	r0, r6
 8015bea:	9305      	str	r3, [sp, #20]
 8015bec:	f000 fff2 	bl	8016bd4 <__i2b>
 8015bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bf2:	4607      	mov	r7, r0
 8015bf4:	f1b8 0f00 	cmp.w	r8, #0
 8015bf8:	dd0d      	ble.n	8015c16 <_dtoa_r+0x67e>
 8015bfa:	9a05      	ldr	r2, [sp, #20]
 8015bfc:	2a00      	cmp	r2, #0
 8015bfe:	dd0a      	ble.n	8015c16 <_dtoa_r+0x67e>
 8015c00:	4542      	cmp	r2, r8
 8015c02:	9904      	ldr	r1, [sp, #16]
 8015c04:	bfa8      	it	ge
 8015c06:	4642      	movge	r2, r8
 8015c08:	1a89      	subs	r1, r1, r2
 8015c0a:	9104      	str	r1, [sp, #16]
 8015c0c:	9905      	ldr	r1, [sp, #20]
 8015c0e:	eba8 0802 	sub.w	r8, r8, r2
 8015c12:	1a8a      	subs	r2, r1, r2
 8015c14:	9205      	str	r2, [sp, #20]
 8015c16:	b303      	cbz	r3, 8015c5a <_dtoa_r+0x6c2>
 8015c18:	9a07      	ldr	r2, [sp, #28]
 8015c1a:	2a00      	cmp	r2, #0
 8015c1c:	f000 80a5 	beq.w	8015d6a <_dtoa_r+0x7d2>
 8015c20:	2c00      	cmp	r4, #0
 8015c22:	dd13      	ble.n	8015c4c <_dtoa_r+0x6b4>
 8015c24:	4639      	mov	r1, r7
 8015c26:	4622      	mov	r2, r4
 8015c28:	4630      	mov	r0, r6
 8015c2a:	930d      	str	r3, [sp, #52]	; 0x34
 8015c2c:	f001 f892 	bl	8016d54 <__pow5mult>
 8015c30:	462a      	mov	r2, r5
 8015c32:	4601      	mov	r1, r0
 8015c34:	4607      	mov	r7, r0
 8015c36:	4630      	mov	r0, r6
 8015c38:	f000 ffe2 	bl	8016c00 <__multiply>
 8015c3c:	4629      	mov	r1, r5
 8015c3e:	900a      	str	r0, [sp, #40]	; 0x28
 8015c40:	4630      	mov	r0, r6
 8015c42:	f000 fec5 	bl	80169d0 <_Bfree>
 8015c46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c4a:	4615      	mov	r5, r2
 8015c4c:	1b1a      	subs	r2, r3, r4
 8015c4e:	d004      	beq.n	8015c5a <_dtoa_r+0x6c2>
 8015c50:	4629      	mov	r1, r5
 8015c52:	4630      	mov	r0, r6
 8015c54:	f001 f87e 	bl	8016d54 <__pow5mult>
 8015c58:	4605      	mov	r5, r0
 8015c5a:	2101      	movs	r1, #1
 8015c5c:	4630      	mov	r0, r6
 8015c5e:	f000 ffb9 	bl	8016bd4 <__i2b>
 8015c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	4604      	mov	r4, r0
 8015c68:	f340 8081 	ble.w	8015d6e <_dtoa_r+0x7d6>
 8015c6c:	461a      	mov	r2, r3
 8015c6e:	4601      	mov	r1, r0
 8015c70:	4630      	mov	r0, r6
 8015c72:	f001 f86f 	bl	8016d54 <__pow5mult>
 8015c76:	9b06      	ldr	r3, [sp, #24]
 8015c78:	2b01      	cmp	r3, #1
 8015c7a:	4604      	mov	r4, r0
 8015c7c:	dd7a      	ble.n	8015d74 <_dtoa_r+0x7dc>
 8015c7e:	2300      	movs	r3, #0
 8015c80:	930a      	str	r3, [sp, #40]	; 0x28
 8015c82:	6922      	ldr	r2, [r4, #16]
 8015c84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015c88:	6910      	ldr	r0, [r2, #16]
 8015c8a:	f000 ff53 	bl	8016b34 <__hi0bits>
 8015c8e:	f1c0 0020 	rsb	r0, r0, #32
 8015c92:	9b05      	ldr	r3, [sp, #20]
 8015c94:	4418      	add	r0, r3
 8015c96:	f010 001f 	ands.w	r0, r0, #31
 8015c9a:	f000 808c 	beq.w	8015db6 <_dtoa_r+0x81e>
 8015c9e:	f1c0 0220 	rsb	r2, r0, #32
 8015ca2:	2a04      	cmp	r2, #4
 8015ca4:	f340 8085 	ble.w	8015db2 <_dtoa_r+0x81a>
 8015ca8:	f1c0 001c 	rsb	r0, r0, #28
 8015cac:	9b04      	ldr	r3, [sp, #16]
 8015cae:	4403      	add	r3, r0
 8015cb0:	9304      	str	r3, [sp, #16]
 8015cb2:	9b05      	ldr	r3, [sp, #20]
 8015cb4:	4403      	add	r3, r0
 8015cb6:	4480      	add	r8, r0
 8015cb8:	9305      	str	r3, [sp, #20]
 8015cba:	9b04      	ldr	r3, [sp, #16]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	dd05      	ble.n	8015ccc <_dtoa_r+0x734>
 8015cc0:	4629      	mov	r1, r5
 8015cc2:	461a      	mov	r2, r3
 8015cc4:	4630      	mov	r0, r6
 8015cc6:	f001 f89f 	bl	8016e08 <__lshift>
 8015cca:	4605      	mov	r5, r0
 8015ccc:	9b05      	ldr	r3, [sp, #20]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	dd05      	ble.n	8015cde <_dtoa_r+0x746>
 8015cd2:	4621      	mov	r1, r4
 8015cd4:	461a      	mov	r2, r3
 8015cd6:	4630      	mov	r0, r6
 8015cd8:	f001 f896 	bl	8016e08 <__lshift>
 8015cdc:	4604      	mov	r4, r0
 8015cde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d06a      	beq.n	8015dba <_dtoa_r+0x822>
 8015ce4:	4621      	mov	r1, r4
 8015ce6:	4628      	mov	r0, r5
 8015ce8:	f001 f8fe 	bl	8016ee8 <__mcmp>
 8015cec:	2800      	cmp	r0, #0
 8015cee:	da64      	bge.n	8015dba <_dtoa_r+0x822>
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	4629      	mov	r1, r5
 8015cf4:	220a      	movs	r2, #10
 8015cf6:	4630      	mov	r0, r6
 8015cf8:	f000 fe8c 	bl	8016a14 <__multadd>
 8015cfc:	9b07      	ldr	r3, [sp, #28]
 8015cfe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015d02:	4605      	mov	r5, r0
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	f000 8191 	beq.w	801602c <_dtoa_r+0xa94>
 8015d0a:	4639      	mov	r1, r7
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	220a      	movs	r2, #10
 8015d10:	4630      	mov	r0, r6
 8015d12:	f000 fe7f 	bl	8016a14 <__multadd>
 8015d16:	f1ba 0f00 	cmp.w	sl, #0
 8015d1a:	4607      	mov	r7, r0
 8015d1c:	f300 808d 	bgt.w	8015e3a <_dtoa_r+0x8a2>
 8015d20:	9b06      	ldr	r3, [sp, #24]
 8015d22:	2b02      	cmp	r3, #2
 8015d24:	dc50      	bgt.n	8015dc8 <_dtoa_r+0x830>
 8015d26:	e088      	b.n	8015e3a <_dtoa_r+0x8a2>
 8015d28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015d2a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015d2e:	e751      	b.n	8015bd4 <_dtoa_r+0x63c>
 8015d30:	f109 34ff 	add.w	r4, r9, #4294967295
 8015d34:	42a3      	cmp	r3, r4
 8015d36:	bfbf      	itttt	lt
 8015d38:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8015d3a:	1ae3      	sublt	r3, r4, r3
 8015d3c:	18d2      	addlt	r2, r2, r3
 8015d3e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8015d40:	bfb6      	itet	lt
 8015d42:	4623      	movlt	r3, r4
 8015d44:	1b1c      	subge	r4, r3, r4
 8015d46:	2400      	movlt	r4, #0
 8015d48:	f1b9 0f00 	cmp.w	r9, #0
 8015d4c:	bfb5      	itete	lt
 8015d4e:	9a04      	ldrlt	r2, [sp, #16]
 8015d50:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8015d54:	eba2 0809 	sublt.w	r8, r2, r9
 8015d58:	464a      	movge	r2, r9
 8015d5a:	bfb8      	it	lt
 8015d5c:	2200      	movlt	r2, #0
 8015d5e:	e73c      	b.n	8015bda <_dtoa_r+0x642>
 8015d60:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015d64:	9f07      	ldr	r7, [sp, #28]
 8015d66:	461c      	mov	r4, r3
 8015d68:	e744      	b.n	8015bf4 <_dtoa_r+0x65c>
 8015d6a:	461a      	mov	r2, r3
 8015d6c:	e770      	b.n	8015c50 <_dtoa_r+0x6b8>
 8015d6e:	9b06      	ldr	r3, [sp, #24]
 8015d70:	2b01      	cmp	r3, #1
 8015d72:	dc18      	bgt.n	8015da6 <_dtoa_r+0x80e>
 8015d74:	9b02      	ldr	r3, [sp, #8]
 8015d76:	b9b3      	cbnz	r3, 8015da6 <_dtoa_r+0x80e>
 8015d78:	9b03      	ldr	r3, [sp, #12]
 8015d7a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8015d7e:	b9a2      	cbnz	r2, 8015daa <_dtoa_r+0x812>
 8015d80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015d84:	0d12      	lsrs	r2, r2, #20
 8015d86:	0512      	lsls	r2, r2, #20
 8015d88:	b18a      	cbz	r2, 8015dae <_dtoa_r+0x816>
 8015d8a:	9b04      	ldr	r3, [sp, #16]
 8015d8c:	3301      	adds	r3, #1
 8015d8e:	9304      	str	r3, [sp, #16]
 8015d90:	9b05      	ldr	r3, [sp, #20]
 8015d92:	3301      	adds	r3, #1
 8015d94:	9305      	str	r3, [sp, #20]
 8015d96:	2301      	movs	r3, #1
 8015d98:	930a      	str	r3, [sp, #40]	; 0x28
 8015d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	f47f af70 	bne.w	8015c82 <_dtoa_r+0x6ea>
 8015da2:	2001      	movs	r0, #1
 8015da4:	e775      	b.n	8015c92 <_dtoa_r+0x6fa>
 8015da6:	2300      	movs	r3, #0
 8015da8:	e7f6      	b.n	8015d98 <_dtoa_r+0x800>
 8015daa:	9b02      	ldr	r3, [sp, #8]
 8015dac:	e7f4      	b.n	8015d98 <_dtoa_r+0x800>
 8015dae:	920a      	str	r2, [sp, #40]	; 0x28
 8015db0:	e7f3      	b.n	8015d9a <_dtoa_r+0x802>
 8015db2:	d082      	beq.n	8015cba <_dtoa_r+0x722>
 8015db4:	4610      	mov	r0, r2
 8015db6:	301c      	adds	r0, #28
 8015db8:	e778      	b.n	8015cac <_dtoa_r+0x714>
 8015dba:	f1b9 0f00 	cmp.w	r9, #0
 8015dbe:	dc37      	bgt.n	8015e30 <_dtoa_r+0x898>
 8015dc0:	9b06      	ldr	r3, [sp, #24]
 8015dc2:	2b02      	cmp	r3, #2
 8015dc4:	dd34      	ble.n	8015e30 <_dtoa_r+0x898>
 8015dc6:	46ca      	mov	sl, r9
 8015dc8:	f1ba 0f00 	cmp.w	sl, #0
 8015dcc:	d10d      	bne.n	8015dea <_dtoa_r+0x852>
 8015dce:	4621      	mov	r1, r4
 8015dd0:	4653      	mov	r3, sl
 8015dd2:	2205      	movs	r2, #5
 8015dd4:	4630      	mov	r0, r6
 8015dd6:	f000 fe1d 	bl	8016a14 <__multadd>
 8015dda:	4601      	mov	r1, r0
 8015ddc:	4604      	mov	r4, r0
 8015dde:	4628      	mov	r0, r5
 8015de0:	f001 f882 	bl	8016ee8 <__mcmp>
 8015de4:	2800      	cmp	r0, #0
 8015de6:	f73f adeb 	bgt.w	80159c0 <_dtoa_r+0x428>
 8015dea:	9b08      	ldr	r3, [sp, #32]
 8015dec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015df0:	ea6f 0b03 	mvn.w	fp, r3
 8015df4:	f04f 0900 	mov.w	r9, #0
 8015df8:	4621      	mov	r1, r4
 8015dfa:	4630      	mov	r0, r6
 8015dfc:	f000 fde8 	bl	80169d0 <_Bfree>
 8015e00:	2f00      	cmp	r7, #0
 8015e02:	f43f aea8 	beq.w	8015b56 <_dtoa_r+0x5be>
 8015e06:	f1b9 0f00 	cmp.w	r9, #0
 8015e0a:	d005      	beq.n	8015e18 <_dtoa_r+0x880>
 8015e0c:	45b9      	cmp	r9, r7
 8015e0e:	d003      	beq.n	8015e18 <_dtoa_r+0x880>
 8015e10:	4649      	mov	r1, r9
 8015e12:	4630      	mov	r0, r6
 8015e14:	f000 fddc 	bl	80169d0 <_Bfree>
 8015e18:	4639      	mov	r1, r7
 8015e1a:	4630      	mov	r0, r6
 8015e1c:	f000 fdd8 	bl	80169d0 <_Bfree>
 8015e20:	e699      	b.n	8015b56 <_dtoa_r+0x5be>
 8015e22:	2400      	movs	r4, #0
 8015e24:	4627      	mov	r7, r4
 8015e26:	e7e0      	b.n	8015dea <_dtoa_r+0x852>
 8015e28:	46bb      	mov	fp, r7
 8015e2a:	4604      	mov	r4, r0
 8015e2c:	4607      	mov	r7, r0
 8015e2e:	e5c7      	b.n	80159c0 <_dtoa_r+0x428>
 8015e30:	9b07      	ldr	r3, [sp, #28]
 8015e32:	46ca      	mov	sl, r9
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	f000 8100 	beq.w	801603a <_dtoa_r+0xaa2>
 8015e3a:	f1b8 0f00 	cmp.w	r8, #0
 8015e3e:	dd05      	ble.n	8015e4c <_dtoa_r+0x8b4>
 8015e40:	4639      	mov	r1, r7
 8015e42:	4642      	mov	r2, r8
 8015e44:	4630      	mov	r0, r6
 8015e46:	f000 ffdf 	bl	8016e08 <__lshift>
 8015e4a:	4607      	mov	r7, r0
 8015e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d05d      	beq.n	8015f0e <_dtoa_r+0x976>
 8015e52:	6879      	ldr	r1, [r7, #4]
 8015e54:	4630      	mov	r0, r6
 8015e56:	f000 fd7b 	bl	8016950 <_Balloc>
 8015e5a:	4680      	mov	r8, r0
 8015e5c:	b928      	cbnz	r0, 8015e6a <_dtoa_r+0x8d2>
 8015e5e:	4b82      	ldr	r3, [pc, #520]	; (8016068 <_dtoa_r+0xad0>)
 8015e60:	4602      	mov	r2, r0
 8015e62:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015e66:	f7ff bbaf 	b.w	80155c8 <_dtoa_r+0x30>
 8015e6a:	693a      	ldr	r2, [r7, #16]
 8015e6c:	3202      	adds	r2, #2
 8015e6e:	0092      	lsls	r2, r2, #2
 8015e70:	f107 010c 	add.w	r1, r7, #12
 8015e74:	300c      	adds	r0, #12
 8015e76:	f7fd fcac 	bl	80137d2 <memcpy>
 8015e7a:	2201      	movs	r2, #1
 8015e7c:	4641      	mov	r1, r8
 8015e7e:	4630      	mov	r0, r6
 8015e80:	f000 ffc2 	bl	8016e08 <__lshift>
 8015e84:	9b01      	ldr	r3, [sp, #4]
 8015e86:	3301      	adds	r3, #1
 8015e88:	9304      	str	r3, [sp, #16]
 8015e8a:	9b01      	ldr	r3, [sp, #4]
 8015e8c:	4453      	add	r3, sl
 8015e8e:	9308      	str	r3, [sp, #32]
 8015e90:	9b02      	ldr	r3, [sp, #8]
 8015e92:	f003 0301 	and.w	r3, r3, #1
 8015e96:	46b9      	mov	r9, r7
 8015e98:	9307      	str	r3, [sp, #28]
 8015e9a:	4607      	mov	r7, r0
 8015e9c:	9b04      	ldr	r3, [sp, #16]
 8015e9e:	4621      	mov	r1, r4
 8015ea0:	3b01      	subs	r3, #1
 8015ea2:	4628      	mov	r0, r5
 8015ea4:	9302      	str	r3, [sp, #8]
 8015ea6:	f7ff fae9 	bl	801547c <quorem>
 8015eaa:	4603      	mov	r3, r0
 8015eac:	3330      	adds	r3, #48	; 0x30
 8015eae:	9005      	str	r0, [sp, #20]
 8015eb0:	4649      	mov	r1, r9
 8015eb2:	4628      	mov	r0, r5
 8015eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8015eb6:	f001 f817 	bl	8016ee8 <__mcmp>
 8015eba:	463a      	mov	r2, r7
 8015ebc:	4682      	mov	sl, r0
 8015ebe:	4621      	mov	r1, r4
 8015ec0:	4630      	mov	r0, r6
 8015ec2:	f001 f82d 	bl	8016f20 <__mdiff>
 8015ec6:	68c2      	ldr	r2, [r0, #12]
 8015ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015eca:	4680      	mov	r8, r0
 8015ecc:	bb0a      	cbnz	r2, 8015f12 <_dtoa_r+0x97a>
 8015ece:	4601      	mov	r1, r0
 8015ed0:	4628      	mov	r0, r5
 8015ed2:	f001 f809 	bl	8016ee8 <__mcmp>
 8015ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ed8:	4602      	mov	r2, r0
 8015eda:	4641      	mov	r1, r8
 8015edc:	4630      	mov	r0, r6
 8015ede:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8015ee2:	f000 fd75 	bl	80169d0 <_Bfree>
 8015ee6:	9b06      	ldr	r3, [sp, #24]
 8015ee8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015eea:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015eee:	ea43 0102 	orr.w	r1, r3, r2
 8015ef2:	9b07      	ldr	r3, [sp, #28]
 8015ef4:	430b      	orrs	r3, r1
 8015ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ef8:	d10d      	bne.n	8015f16 <_dtoa_r+0x97e>
 8015efa:	2b39      	cmp	r3, #57	; 0x39
 8015efc:	d029      	beq.n	8015f52 <_dtoa_r+0x9ba>
 8015efe:	f1ba 0f00 	cmp.w	sl, #0
 8015f02:	dd01      	ble.n	8015f08 <_dtoa_r+0x970>
 8015f04:	9b05      	ldr	r3, [sp, #20]
 8015f06:	3331      	adds	r3, #49	; 0x31
 8015f08:	9a02      	ldr	r2, [sp, #8]
 8015f0a:	7013      	strb	r3, [r2, #0]
 8015f0c:	e774      	b.n	8015df8 <_dtoa_r+0x860>
 8015f0e:	4638      	mov	r0, r7
 8015f10:	e7b8      	b.n	8015e84 <_dtoa_r+0x8ec>
 8015f12:	2201      	movs	r2, #1
 8015f14:	e7e1      	b.n	8015eda <_dtoa_r+0x942>
 8015f16:	f1ba 0f00 	cmp.w	sl, #0
 8015f1a:	db06      	blt.n	8015f2a <_dtoa_r+0x992>
 8015f1c:	9906      	ldr	r1, [sp, #24]
 8015f1e:	ea41 0a0a 	orr.w	sl, r1, sl
 8015f22:	9907      	ldr	r1, [sp, #28]
 8015f24:	ea5a 0101 	orrs.w	r1, sl, r1
 8015f28:	d120      	bne.n	8015f6c <_dtoa_r+0x9d4>
 8015f2a:	2a00      	cmp	r2, #0
 8015f2c:	ddec      	ble.n	8015f08 <_dtoa_r+0x970>
 8015f2e:	4629      	mov	r1, r5
 8015f30:	2201      	movs	r2, #1
 8015f32:	4630      	mov	r0, r6
 8015f34:	9304      	str	r3, [sp, #16]
 8015f36:	f000 ff67 	bl	8016e08 <__lshift>
 8015f3a:	4621      	mov	r1, r4
 8015f3c:	4605      	mov	r5, r0
 8015f3e:	f000 ffd3 	bl	8016ee8 <__mcmp>
 8015f42:	2800      	cmp	r0, #0
 8015f44:	9b04      	ldr	r3, [sp, #16]
 8015f46:	dc02      	bgt.n	8015f4e <_dtoa_r+0x9b6>
 8015f48:	d1de      	bne.n	8015f08 <_dtoa_r+0x970>
 8015f4a:	07da      	lsls	r2, r3, #31
 8015f4c:	d5dc      	bpl.n	8015f08 <_dtoa_r+0x970>
 8015f4e:	2b39      	cmp	r3, #57	; 0x39
 8015f50:	d1d8      	bne.n	8015f04 <_dtoa_r+0x96c>
 8015f52:	9a02      	ldr	r2, [sp, #8]
 8015f54:	2339      	movs	r3, #57	; 0x39
 8015f56:	7013      	strb	r3, [r2, #0]
 8015f58:	4643      	mov	r3, r8
 8015f5a:	4698      	mov	r8, r3
 8015f5c:	3b01      	subs	r3, #1
 8015f5e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8015f62:	2a39      	cmp	r2, #57	; 0x39
 8015f64:	d051      	beq.n	801600a <_dtoa_r+0xa72>
 8015f66:	3201      	adds	r2, #1
 8015f68:	701a      	strb	r2, [r3, #0]
 8015f6a:	e745      	b.n	8015df8 <_dtoa_r+0x860>
 8015f6c:	2a00      	cmp	r2, #0
 8015f6e:	dd03      	ble.n	8015f78 <_dtoa_r+0x9e0>
 8015f70:	2b39      	cmp	r3, #57	; 0x39
 8015f72:	d0ee      	beq.n	8015f52 <_dtoa_r+0x9ba>
 8015f74:	3301      	adds	r3, #1
 8015f76:	e7c7      	b.n	8015f08 <_dtoa_r+0x970>
 8015f78:	9a04      	ldr	r2, [sp, #16]
 8015f7a:	9908      	ldr	r1, [sp, #32]
 8015f7c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015f80:	428a      	cmp	r2, r1
 8015f82:	d02b      	beq.n	8015fdc <_dtoa_r+0xa44>
 8015f84:	4629      	mov	r1, r5
 8015f86:	2300      	movs	r3, #0
 8015f88:	220a      	movs	r2, #10
 8015f8a:	4630      	mov	r0, r6
 8015f8c:	f000 fd42 	bl	8016a14 <__multadd>
 8015f90:	45b9      	cmp	r9, r7
 8015f92:	4605      	mov	r5, r0
 8015f94:	f04f 0300 	mov.w	r3, #0
 8015f98:	f04f 020a 	mov.w	r2, #10
 8015f9c:	4649      	mov	r1, r9
 8015f9e:	4630      	mov	r0, r6
 8015fa0:	d107      	bne.n	8015fb2 <_dtoa_r+0xa1a>
 8015fa2:	f000 fd37 	bl	8016a14 <__multadd>
 8015fa6:	4681      	mov	r9, r0
 8015fa8:	4607      	mov	r7, r0
 8015faa:	9b04      	ldr	r3, [sp, #16]
 8015fac:	3301      	adds	r3, #1
 8015fae:	9304      	str	r3, [sp, #16]
 8015fb0:	e774      	b.n	8015e9c <_dtoa_r+0x904>
 8015fb2:	f000 fd2f 	bl	8016a14 <__multadd>
 8015fb6:	4639      	mov	r1, r7
 8015fb8:	4681      	mov	r9, r0
 8015fba:	2300      	movs	r3, #0
 8015fbc:	220a      	movs	r2, #10
 8015fbe:	4630      	mov	r0, r6
 8015fc0:	f000 fd28 	bl	8016a14 <__multadd>
 8015fc4:	4607      	mov	r7, r0
 8015fc6:	e7f0      	b.n	8015faa <_dtoa_r+0xa12>
 8015fc8:	f1ba 0f00 	cmp.w	sl, #0
 8015fcc:	9a01      	ldr	r2, [sp, #4]
 8015fce:	bfcc      	ite	gt
 8015fd0:	46d0      	movgt	r8, sl
 8015fd2:	f04f 0801 	movle.w	r8, #1
 8015fd6:	4490      	add	r8, r2
 8015fd8:	f04f 0900 	mov.w	r9, #0
 8015fdc:	4629      	mov	r1, r5
 8015fde:	2201      	movs	r2, #1
 8015fe0:	4630      	mov	r0, r6
 8015fe2:	9302      	str	r3, [sp, #8]
 8015fe4:	f000 ff10 	bl	8016e08 <__lshift>
 8015fe8:	4621      	mov	r1, r4
 8015fea:	4605      	mov	r5, r0
 8015fec:	f000 ff7c 	bl	8016ee8 <__mcmp>
 8015ff0:	2800      	cmp	r0, #0
 8015ff2:	dcb1      	bgt.n	8015f58 <_dtoa_r+0x9c0>
 8015ff4:	d102      	bne.n	8015ffc <_dtoa_r+0xa64>
 8015ff6:	9b02      	ldr	r3, [sp, #8]
 8015ff8:	07db      	lsls	r3, r3, #31
 8015ffa:	d4ad      	bmi.n	8015f58 <_dtoa_r+0x9c0>
 8015ffc:	4643      	mov	r3, r8
 8015ffe:	4698      	mov	r8, r3
 8016000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016004:	2a30      	cmp	r2, #48	; 0x30
 8016006:	d0fa      	beq.n	8015ffe <_dtoa_r+0xa66>
 8016008:	e6f6      	b.n	8015df8 <_dtoa_r+0x860>
 801600a:	9a01      	ldr	r2, [sp, #4]
 801600c:	429a      	cmp	r2, r3
 801600e:	d1a4      	bne.n	8015f5a <_dtoa_r+0x9c2>
 8016010:	f10b 0b01 	add.w	fp, fp, #1
 8016014:	2331      	movs	r3, #49	; 0x31
 8016016:	e778      	b.n	8015f0a <_dtoa_r+0x972>
 8016018:	4b14      	ldr	r3, [pc, #80]	; (801606c <_dtoa_r+0xad4>)
 801601a:	f7ff bb27 	b.w	801566c <_dtoa_r+0xd4>
 801601e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016020:	2b00      	cmp	r3, #0
 8016022:	f47f ab03 	bne.w	801562c <_dtoa_r+0x94>
 8016026:	4b12      	ldr	r3, [pc, #72]	; (8016070 <_dtoa_r+0xad8>)
 8016028:	f7ff bb20 	b.w	801566c <_dtoa_r+0xd4>
 801602c:	f1ba 0f00 	cmp.w	sl, #0
 8016030:	dc03      	bgt.n	801603a <_dtoa_r+0xaa2>
 8016032:	9b06      	ldr	r3, [sp, #24]
 8016034:	2b02      	cmp	r3, #2
 8016036:	f73f aec7 	bgt.w	8015dc8 <_dtoa_r+0x830>
 801603a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801603e:	4621      	mov	r1, r4
 8016040:	4628      	mov	r0, r5
 8016042:	f7ff fa1b 	bl	801547c <quorem>
 8016046:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801604a:	f808 3b01 	strb.w	r3, [r8], #1
 801604e:	9a01      	ldr	r2, [sp, #4]
 8016050:	eba8 0202 	sub.w	r2, r8, r2
 8016054:	4592      	cmp	sl, r2
 8016056:	ddb7      	ble.n	8015fc8 <_dtoa_r+0xa30>
 8016058:	4629      	mov	r1, r5
 801605a:	2300      	movs	r3, #0
 801605c:	220a      	movs	r2, #10
 801605e:	4630      	mov	r0, r6
 8016060:	f000 fcd8 	bl	8016a14 <__multadd>
 8016064:	4605      	mov	r5, r0
 8016066:	e7ea      	b.n	801603e <_dtoa_r+0xaa6>
 8016068:	08018940 	.word	0x08018940
 801606c:	08018744 	.word	0x08018744
 8016070:	080188c1 	.word	0x080188c1

08016074 <__sflush_r>:
 8016074:	898a      	ldrh	r2, [r1, #12]
 8016076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801607a:	4605      	mov	r5, r0
 801607c:	0710      	lsls	r0, r2, #28
 801607e:	460c      	mov	r4, r1
 8016080:	d458      	bmi.n	8016134 <__sflush_r+0xc0>
 8016082:	684b      	ldr	r3, [r1, #4]
 8016084:	2b00      	cmp	r3, #0
 8016086:	dc05      	bgt.n	8016094 <__sflush_r+0x20>
 8016088:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801608a:	2b00      	cmp	r3, #0
 801608c:	dc02      	bgt.n	8016094 <__sflush_r+0x20>
 801608e:	2000      	movs	r0, #0
 8016090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016096:	2e00      	cmp	r6, #0
 8016098:	d0f9      	beq.n	801608e <__sflush_r+0x1a>
 801609a:	2300      	movs	r3, #0
 801609c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80160a0:	682f      	ldr	r7, [r5, #0]
 80160a2:	602b      	str	r3, [r5, #0]
 80160a4:	d032      	beq.n	801610c <__sflush_r+0x98>
 80160a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80160a8:	89a3      	ldrh	r3, [r4, #12]
 80160aa:	075a      	lsls	r2, r3, #29
 80160ac:	d505      	bpl.n	80160ba <__sflush_r+0x46>
 80160ae:	6863      	ldr	r3, [r4, #4]
 80160b0:	1ac0      	subs	r0, r0, r3
 80160b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80160b4:	b10b      	cbz	r3, 80160ba <__sflush_r+0x46>
 80160b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80160b8:	1ac0      	subs	r0, r0, r3
 80160ba:	2300      	movs	r3, #0
 80160bc:	4602      	mov	r2, r0
 80160be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80160c0:	6a21      	ldr	r1, [r4, #32]
 80160c2:	4628      	mov	r0, r5
 80160c4:	47b0      	blx	r6
 80160c6:	1c43      	adds	r3, r0, #1
 80160c8:	89a3      	ldrh	r3, [r4, #12]
 80160ca:	d106      	bne.n	80160da <__sflush_r+0x66>
 80160cc:	6829      	ldr	r1, [r5, #0]
 80160ce:	291d      	cmp	r1, #29
 80160d0:	d82c      	bhi.n	801612c <__sflush_r+0xb8>
 80160d2:	4a2a      	ldr	r2, [pc, #168]	; (801617c <__sflush_r+0x108>)
 80160d4:	40ca      	lsrs	r2, r1
 80160d6:	07d6      	lsls	r6, r2, #31
 80160d8:	d528      	bpl.n	801612c <__sflush_r+0xb8>
 80160da:	2200      	movs	r2, #0
 80160dc:	6062      	str	r2, [r4, #4]
 80160de:	04d9      	lsls	r1, r3, #19
 80160e0:	6922      	ldr	r2, [r4, #16]
 80160e2:	6022      	str	r2, [r4, #0]
 80160e4:	d504      	bpl.n	80160f0 <__sflush_r+0x7c>
 80160e6:	1c42      	adds	r2, r0, #1
 80160e8:	d101      	bne.n	80160ee <__sflush_r+0x7a>
 80160ea:	682b      	ldr	r3, [r5, #0]
 80160ec:	b903      	cbnz	r3, 80160f0 <__sflush_r+0x7c>
 80160ee:	6560      	str	r0, [r4, #84]	; 0x54
 80160f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80160f2:	602f      	str	r7, [r5, #0]
 80160f4:	2900      	cmp	r1, #0
 80160f6:	d0ca      	beq.n	801608e <__sflush_r+0x1a>
 80160f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80160fc:	4299      	cmp	r1, r3
 80160fe:	d002      	beq.n	8016106 <__sflush_r+0x92>
 8016100:	4628      	mov	r0, r5
 8016102:	f001 f8f9 	bl	80172f8 <_free_r>
 8016106:	2000      	movs	r0, #0
 8016108:	6360      	str	r0, [r4, #52]	; 0x34
 801610a:	e7c1      	b.n	8016090 <__sflush_r+0x1c>
 801610c:	6a21      	ldr	r1, [r4, #32]
 801610e:	2301      	movs	r3, #1
 8016110:	4628      	mov	r0, r5
 8016112:	47b0      	blx	r6
 8016114:	1c41      	adds	r1, r0, #1
 8016116:	d1c7      	bne.n	80160a8 <__sflush_r+0x34>
 8016118:	682b      	ldr	r3, [r5, #0]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d0c4      	beq.n	80160a8 <__sflush_r+0x34>
 801611e:	2b1d      	cmp	r3, #29
 8016120:	d001      	beq.n	8016126 <__sflush_r+0xb2>
 8016122:	2b16      	cmp	r3, #22
 8016124:	d101      	bne.n	801612a <__sflush_r+0xb6>
 8016126:	602f      	str	r7, [r5, #0]
 8016128:	e7b1      	b.n	801608e <__sflush_r+0x1a>
 801612a:	89a3      	ldrh	r3, [r4, #12]
 801612c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016130:	81a3      	strh	r3, [r4, #12]
 8016132:	e7ad      	b.n	8016090 <__sflush_r+0x1c>
 8016134:	690f      	ldr	r7, [r1, #16]
 8016136:	2f00      	cmp	r7, #0
 8016138:	d0a9      	beq.n	801608e <__sflush_r+0x1a>
 801613a:	0793      	lsls	r3, r2, #30
 801613c:	680e      	ldr	r6, [r1, #0]
 801613e:	bf08      	it	eq
 8016140:	694b      	ldreq	r3, [r1, #20]
 8016142:	600f      	str	r7, [r1, #0]
 8016144:	bf18      	it	ne
 8016146:	2300      	movne	r3, #0
 8016148:	eba6 0807 	sub.w	r8, r6, r7
 801614c:	608b      	str	r3, [r1, #8]
 801614e:	f1b8 0f00 	cmp.w	r8, #0
 8016152:	dd9c      	ble.n	801608e <__sflush_r+0x1a>
 8016154:	6a21      	ldr	r1, [r4, #32]
 8016156:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016158:	4643      	mov	r3, r8
 801615a:	463a      	mov	r2, r7
 801615c:	4628      	mov	r0, r5
 801615e:	47b0      	blx	r6
 8016160:	2800      	cmp	r0, #0
 8016162:	dc06      	bgt.n	8016172 <__sflush_r+0xfe>
 8016164:	89a3      	ldrh	r3, [r4, #12]
 8016166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801616a:	81a3      	strh	r3, [r4, #12]
 801616c:	f04f 30ff 	mov.w	r0, #4294967295
 8016170:	e78e      	b.n	8016090 <__sflush_r+0x1c>
 8016172:	4407      	add	r7, r0
 8016174:	eba8 0800 	sub.w	r8, r8, r0
 8016178:	e7e9      	b.n	801614e <__sflush_r+0xda>
 801617a:	bf00      	nop
 801617c:	20400001 	.word	0x20400001

08016180 <_fflush_r>:
 8016180:	b538      	push	{r3, r4, r5, lr}
 8016182:	690b      	ldr	r3, [r1, #16]
 8016184:	4605      	mov	r5, r0
 8016186:	460c      	mov	r4, r1
 8016188:	b913      	cbnz	r3, 8016190 <_fflush_r+0x10>
 801618a:	2500      	movs	r5, #0
 801618c:	4628      	mov	r0, r5
 801618e:	bd38      	pop	{r3, r4, r5, pc}
 8016190:	b118      	cbz	r0, 801619a <_fflush_r+0x1a>
 8016192:	6983      	ldr	r3, [r0, #24]
 8016194:	b90b      	cbnz	r3, 801619a <_fflush_r+0x1a>
 8016196:	f7fd fa57 	bl	8013648 <__sinit>
 801619a:	4b14      	ldr	r3, [pc, #80]	; (80161ec <_fflush_r+0x6c>)
 801619c:	429c      	cmp	r4, r3
 801619e:	d11b      	bne.n	80161d8 <_fflush_r+0x58>
 80161a0:	686c      	ldr	r4, [r5, #4]
 80161a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d0ef      	beq.n	801618a <_fflush_r+0xa>
 80161aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80161ac:	07d0      	lsls	r0, r2, #31
 80161ae:	d404      	bmi.n	80161ba <_fflush_r+0x3a>
 80161b0:	0599      	lsls	r1, r3, #22
 80161b2:	d402      	bmi.n	80161ba <_fflush_r+0x3a>
 80161b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80161b6:	f7fd fb0a 	bl	80137ce <__retarget_lock_acquire_recursive>
 80161ba:	4628      	mov	r0, r5
 80161bc:	4621      	mov	r1, r4
 80161be:	f7ff ff59 	bl	8016074 <__sflush_r>
 80161c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80161c4:	07da      	lsls	r2, r3, #31
 80161c6:	4605      	mov	r5, r0
 80161c8:	d4e0      	bmi.n	801618c <_fflush_r+0xc>
 80161ca:	89a3      	ldrh	r3, [r4, #12]
 80161cc:	059b      	lsls	r3, r3, #22
 80161ce:	d4dd      	bmi.n	801618c <_fflush_r+0xc>
 80161d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80161d2:	f7fd fafd 	bl	80137d0 <__retarget_lock_release_recursive>
 80161d6:	e7d9      	b.n	801618c <_fflush_r+0xc>
 80161d8:	4b05      	ldr	r3, [pc, #20]	; (80161f0 <_fflush_r+0x70>)
 80161da:	429c      	cmp	r4, r3
 80161dc:	d101      	bne.n	80161e2 <_fflush_r+0x62>
 80161de:	68ac      	ldr	r4, [r5, #8]
 80161e0:	e7df      	b.n	80161a2 <_fflush_r+0x22>
 80161e2:	4b04      	ldr	r3, [pc, #16]	; (80161f4 <_fflush_r+0x74>)
 80161e4:	429c      	cmp	r4, r3
 80161e6:	bf08      	it	eq
 80161e8:	68ec      	ldreq	r4, [r5, #12]
 80161ea:	e7da      	b.n	80161a2 <_fflush_r+0x22>
 80161ec:	080186f0 	.word	0x080186f0
 80161f0:	08018710 	.word	0x08018710
 80161f4:	080186d0 	.word	0x080186d0

080161f8 <rshift>:
 80161f8:	6903      	ldr	r3, [r0, #16]
 80161fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80161fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016202:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016206:	f100 0414 	add.w	r4, r0, #20
 801620a:	dd45      	ble.n	8016298 <rshift+0xa0>
 801620c:	f011 011f 	ands.w	r1, r1, #31
 8016210:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016214:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016218:	d10c      	bne.n	8016234 <rshift+0x3c>
 801621a:	f100 0710 	add.w	r7, r0, #16
 801621e:	4629      	mov	r1, r5
 8016220:	42b1      	cmp	r1, r6
 8016222:	d334      	bcc.n	801628e <rshift+0x96>
 8016224:	1a9b      	subs	r3, r3, r2
 8016226:	009b      	lsls	r3, r3, #2
 8016228:	1eea      	subs	r2, r5, #3
 801622a:	4296      	cmp	r6, r2
 801622c:	bf38      	it	cc
 801622e:	2300      	movcc	r3, #0
 8016230:	4423      	add	r3, r4
 8016232:	e015      	b.n	8016260 <rshift+0x68>
 8016234:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016238:	f1c1 0820 	rsb	r8, r1, #32
 801623c:	40cf      	lsrs	r7, r1
 801623e:	f105 0e04 	add.w	lr, r5, #4
 8016242:	46a1      	mov	r9, r4
 8016244:	4576      	cmp	r6, lr
 8016246:	46f4      	mov	ip, lr
 8016248:	d815      	bhi.n	8016276 <rshift+0x7e>
 801624a:	1a9a      	subs	r2, r3, r2
 801624c:	0092      	lsls	r2, r2, #2
 801624e:	3a04      	subs	r2, #4
 8016250:	3501      	adds	r5, #1
 8016252:	42ae      	cmp	r6, r5
 8016254:	bf38      	it	cc
 8016256:	2200      	movcc	r2, #0
 8016258:	18a3      	adds	r3, r4, r2
 801625a:	50a7      	str	r7, [r4, r2]
 801625c:	b107      	cbz	r7, 8016260 <rshift+0x68>
 801625e:	3304      	adds	r3, #4
 8016260:	1b1a      	subs	r2, r3, r4
 8016262:	42a3      	cmp	r3, r4
 8016264:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016268:	bf08      	it	eq
 801626a:	2300      	moveq	r3, #0
 801626c:	6102      	str	r2, [r0, #16]
 801626e:	bf08      	it	eq
 8016270:	6143      	streq	r3, [r0, #20]
 8016272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016276:	f8dc c000 	ldr.w	ip, [ip]
 801627a:	fa0c fc08 	lsl.w	ip, ip, r8
 801627e:	ea4c 0707 	orr.w	r7, ip, r7
 8016282:	f849 7b04 	str.w	r7, [r9], #4
 8016286:	f85e 7b04 	ldr.w	r7, [lr], #4
 801628a:	40cf      	lsrs	r7, r1
 801628c:	e7da      	b.n	8016244 <rshift+0x4c>
 801628e:	f851 cb04 	ldr.w	ip, [r1], #4
 8016292:	f847 cf04 	str.w	ip, [r7, #4]!
 8016296:	e7c3      	b.n	8016220 <rshift+0x28>
 8016298:	4623      	mov	r3, r4
 801629a:	e7e1      	b.n	8016260 <rshift+0x68>

0801629c <__hexdig_fun>:
 801629c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80162a0:	2b09      	cmp	r3, #9
 80162a2:	d802      	bhi.n	80162aa <__hexdig_fun+0xe>
 80162a4:	3820      	subs	r0, #32
 80162a6:	b2c0      	uxtb	r0, r0
 80162a8:	4770      	bx	lr
 80162aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80162ae:	2b05      	cmp	r3, #5
 80162b0:	d801      	bhi.n	80162b6 <__hexdig_fun+0x1a>
 80162b2:	3847      	subs	r0, #71	; 0x47
 80162b4:	e7f7      	b.n	80162a6 <__hexdig_fun+0xa>
 80162b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80162ba:	2b05      	cmp	r3, #5
 80162bc:	d801      	bhi.n	80162c2 <__hexdig_fun+0x26>
 80162be:	3827      	subs	r0, #39	; 0x27
 80162c0:	e7f1      	b.n	80162a6 <__hexdig_fun+0xa>
 80162c2:	2000      	movs	r0, #0
 80162c4:	4770      	bx	lr
	...

080162c8 <__gethex>:
 80162c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162cc:	ed2d 8b02 	vpush	{d8}
 80162d0:	b089      	sub	sp, #36	; 0x24
 80162d2:	ee08 0a10 	vmov	s16, r0
 80162d6:	9304      	str	r3, [sp, #16]
 80162d8:	4bb4      	ldr	r3, [pc, #720]	; (80165ac <__gethex+0x2e4>)
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	9301      	str	r3, [sp, #4]
 80162de:	4618      	mov	r0, r3
 80162e0:	468b      	mov	fp, r1
 80162e2:	4690      	mov	r8, r2
 80162e4:	f7e9 ffac 	bl	8000240 <strlen>
 80162e8:	9b01      	ldr	r3, [sp, #4]
 80162ea:	f8db 2000 	ldr.w	r2, [fp]
 80162ee:	4403      	add	r3, r0
 80162f0:	4682      	mov	sl, r0
 80162f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80162f6:	9305      	str	r3, [sp, #20]
 80162f8:	1c93      	adds	r3, r2, #2
 80162fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80162fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016302:	32fe      	adds	r2, #254	; 0xfe
 8016304:	18d1      	adds	r1, r2, r3
 8016306:	461f      	mov	r7, r3
 8016308:	f813 0b01 	ldrb.w	r0, [r3], #1
 801630c:	9100      	str	r1, [sp, #0]
 801630e:	2830      	cmp	r0, #48	; 0x30
 8016310:	d0f8      	beq.n	8016304 <__gethex+0x3c>
 8016312:	f7ff ffc3 	bl	801629c <__hexdig_fun>
 8016316:	4604      	mov	r4, r0
 8016318:	2800      	cmp	r0, #0
 801631a:	d13a      	bne.n	8016392 <__gethex+0xca>
 801631c:	9901      	ldr	r1, [sp, #4]
 801631e:	4652      	mov	r2, sl
 8016320:	4638      	mov	r0, r7
 8016322:	f001 f9ad 	bl	8017680 <strncmp>
 8016326:	4605      	mov	r5, r0
 8016328:	2800      	cmp	r0, #0
 801632a:	d168      	bne.n	80163fe <__gethex+0x136>
 801632c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8016330:	eb07 060a 	add.w	r6, r7, sl
 8016334:	f7ff ffb2 	bl	801629c <__hexdig_fun>
 8016338:	2800      	cmp	r0, #0
 801633a:	d062      	beq.n	8016402 <__gethex+0x13a>
 801633c:	4633      	mov	r3, r6
 801633e:	7818      	ldrb	r0, [r3, #0]
 8016340:	2830      	cmp	r0, #48	; 0x30
 8016342:	461f      	mov	r7, r3
 8016344:	f103 0301 	add.w	r3, r3, #1
 8016348:	d0f9      	beq.n	801633e <__gethex+0x76>
 801634a:	f7ff ffa7 	bl	801629c <__hexdig_fun>
 801634e:	2301      	movs	r3, #1
 8016350:	fab0 f480 	clz	r4, r0
 8016354:	0964      	lsrs	r4, r4, #5
 8016356:	4635      	mov	r5, r6
 8016358:	9300      	str	r3, [sp, #0]
 801635a:	463a      	mov	r2, r7
 801635c:	4616      	mov	r6, r2
 801635e:	3201      	adds	r2, #1
 8016360:	7830      	ldrb	r0, [r6, #0]
 8016362:	f7ff ff9b 	bl	801629c <__hexdig_fun>
 8016366:	2800      	cmp	r0, #0
 8016368:	d1f8      	bne.n	801635c <__gethex+0x94>
 801636a:	9901      	ldr	r1, [sp, #4]
 801636c:	4652      	mov	r2, sl
 801636e:	4630      	mov	r0, r6
 8016370:	f001 f986 	bl	8017680 <strncmp>
 8016374:	b980      	cbnz	r0, 8016398 <__gethex+0xd0>
 8016376:	b94d      	cbnz	r5, 801638c <__gethex+0xc4>
 8016378:	eb06 050a 	add.w	r5, r6, sl
 801637c:	462a      	mov	r2, r5
 801637e:	4616      	mov	r6, r2
 8016380:	3201      	adds	r2, #1
 8016382:	7830      	ldrb	r0, [r6, #0]
 8016384:	f7ff ff8a 	bl	801629c <__hexdig_fun>
 8016388:	2800      	cmp	r0, #0
 801638a:	d1f8      	bne.n	801637e <__gethex+0xb6>
 801638c:	1bad      	subs	r5, r5, r6
 801638e:	00ad      	lsls	r5, r5, #2
 8016390:	e004      	b.n	801639c <__gethex+0xd4>
 8016392:	2400      	movs	r4, #0
 8016394:	4625      	mov	r5, r4
 8016396:	e7e0      	b.n	801635a <__gethex+0x92>
 8016398:	2d00      	cmp	r5, #0
 801639a:	d1f7      	bne.n	801638c <__gethex+0xc4>
 801639c:	7833      	ldrb	r3, [r6, #0]
 801639e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80163a2:	2b50      	cmp	r3, #80	; 0x50
 80163a4:	d13b      	bne.n	801641e <__gethex+0x156>
 80163a6:	7873      	ldrb	r3, [r6, #1]
 80163a8:	2b2b      	cmp	r3, #43	; 0x2b
 80163aa:	d02c      	beq.n	8016406 <__gethex+0x13e>
 80163ac:	2b2d      	cmp	r3, #45	; 0x2d
 80163ae:	d02e      	beq.n	801640e <__gethex+0x146>
 80163b0:	1c71      	adds	r1, r6, #1
 80163b2:	f04f 0900 	mov.w	r9, #0
 80163b6:	7808      	ldrb	r0, [r1, #0]
 80163b8:	f7ff ff70 	bl	801629c <__hexdig_fun>
 80163bc:	1e43      	subs	r3, r0, #1
 80163be:	b2db      	uxtb	r3, r3
 80163c0:	2b18      	cmp	r3, #24
 80163c2:	d82c      	bhi.n	801641e <__gethex+0x156>
 80163c4:	f1a0 0210 	sub.w	r2, r0, #16
 80163c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80163cc:	f7ff ff66 	bl	801629c <__hexdig_fun>
 80163d0:	1e43      	subs	r3, r0, #1
 80163d2:	b2db      	uxtb	r3, r3
 80163d4:	2b18      	cmp	r3, #24
 80163d6:	d91d      	bls.n	8016414 <__gethex+0x14c>
 80163d8:	f1b9 0f00 	cmp.w	r9, #0
 80163dc:	d000      	beq.n	80163e0 <__gethex+0x118>
 80163de:	4252      	negs	r2, r2
 80163e0:	4415      	add	r5, r2
 80163e2:	f8cb 1000 	str.w	r1, [fp]
 80163e6:	b1e4      	cbz	r4, 8016422 <__gethex+0x15a>
 80163e8:	9b00      	ldr	r3, [sp, #0]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	bf14      	ite	ne
 80163ee:	2700      	movne	r7, #0
 80163f0:	2706      	moveq	r7, #6
 80163f2:	4638      	mov	r0, r7
 80163f4:	b009      	add	sp, #36	; 0x24
 80163f6:	ecbd 8b02 	vpop	{d8}
 80163fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163fe:	463e      	mov	r6, r7
 8016400:	4625      	mov	r5, r4
 8016402:	2401      	movs	r4, #1
 8016404:	e7ca      	b.n	801639c <__gethex+0xd4>
 8016406:	f04f 0900 	mov.w	r9, #0
 801640a:	1cb1      	adds	r1, r6, #2
 801640c:	e7d3      	b.n	80163b6 <__gethex+0xee>
 801640e:	f04f 0901 	mov.w	r9, #1
 8016412:	e7fa      	b.n	801640a <__gethex+0x142>
 8016414:	230a      	movs	r3, #10
 8016416:	fb03 0202 	mla	r2, r3, r2, r0
 801641a:	3a10      	subs	r2, #16
 801641c:	e7d4      	b.n	80163c8 <__gethex+0x100>
 801641e:	4631      	mov	r1, r6
 8016420:	e7df      	b.n	80163e2 <__gethex+0x11a>
 8016422:	1bf3      	subs	r3, r6, r7
 8016424:	3b01      	subs	r3, #1
 8016426:	4621      	mov	r1, r4
 8016428:	2b07      	cmp	r3, #7
 801642a:	dc0b      	bgt.n	8016444 <__gethex+0x17c>
 801642c:	ee18 0a10 	vmov	r0, s16
 8016430:	f000 fa8e 	bl	8016950 <_Balloc>
 8016434:	4604      	mov	r4, r0
 8016436:	b940      	cbnz	r0, 801644a <__gethex+0x182>
 8016438:	4b5d      	ldr	r3, [pc, #372]	; (80165b0 <__gethex+0x2e8>)
 801643a:	4602      	mov	r2, r0
 801643c:	21de      	movs	r1, #222	; 0xde
 801643e:	485d      	ldr	r0, [pc, #372]	; (80165b4 <__gethex+0x2ec>)
 8016440:	f001 f940 	bl	80176c4 <__assert_func>
 8016444:	3101      	adds	r1, #1
 8016446:	105b      	asrs	r3, r3, #1
 8016448:	e7ee      	b.n	8016428 <__gethex+0x160>
 801644a:	f100 0914 	add.w	r9, r0, #20
 801644e:	f04f 0b00 	mov.w	fp, #0
 8016452:	f1ca 0301 	rsb	r3, sl, #1
 8016456:	f8cd 9008 	str.w	r9, [sp, #8]
 801645a:	f8cd b000 	str.w	fp, [sp]
 801645e:	9306      	str	r3, [sp, #24]
 8016460:	42b7      	cmp	r7, r6
 8016462:	d340      	bcc.n	80164e6 <__gethex+0x21e>
 8016464:	9802      	ldr	r0, [sp, #8]
 8016466:	9b00      	ldr	r3, [sp, #0]
 8016468:	f840 3b04 	str.w	r3, [r0], #4
 801646c:	eba0 0009 	sub.w	r0, r0, r9
 8016470:	1080      	asrs	r0, r0, #2
 8016472:	0146      	lsls	r6, r0, #5
 8016474:	6120      	str	r0, [r4, #16]
 8016476:	4618      	mov	r0, r3
 8016478:	f000 fb5c 	bl	8016b34 <__hi0bits>
 801647c:	1a30      	subs	r0, r6, r0
 801647e:	f8d8 6000 	ldr.w	r6, [r8]
 8016482:	42b0      	cmp	r0, r6
 8016484:	dd63      	ble.n	801654e <__gethex+0x286>
 8016486:	1b87      	subs	r7, r0, r6
 8016488:	4639      	mov	r1, r7
 801648a:	4620      	mov	r0, r4
 801648c:	f000 fefd 	bl	801728a <__any_on>
 8016490:	4682      	mov	sl, r0
 8016492:	b1a8      	cbz	r0, 80164c0 <__gethex+0x1f8>
 8016494:	1e7b      	subs	r3, r7, #1
 8016496:	1159      	asrs	r1, r3, #5
 8016498:	f003 021f 	and.w	r2, r3, #31
 801649c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80164a0:	f04f 0a01 	mov.w	sl, #1
 80164a4:	fa0a f202 	lsl.w	r2, sl, r2
 80164a8:	420a      	tst	r2, r1
 80164aa:	d009      	beq.n	80164c0 <__gethex+0x1f8>
 80164ac:	4553      	cmp	r3, sl
 80164ae:	dd05      	ble.n	80164bc <__gethex+0x1f4>
 80164b0:	1eb9      	subs	r1, r7, #2
 80164b2:	4620      	mov	r0, r4
 80164b4:	f000 fee9 	bl	801728a <__any_on>
 80164b8:	2800      	cmp	r0, #0
 80164ba:	d145      	bne.n	8016548 <__gethex+0x280>
 80164bc:	f04f 0a02 	mov.w	sl, #2
 80164c0:	4639      	mov	r1, r7
 80164c2:	4620      	mov	r0, r4
 80164c4:	f7ff fe98 	bl	80161f8 <rshift>
 80164c8:	443d      	add	r5, r7
 80164ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80164ce:	42ab      	cmp	r3, r5
 80164d0:	da4c      	bge.n	801656c <__gethex+0x2a4>
 80164d2:	ee18 0a10 	vmov	r0, s16
 80164d6:	4621      	mov	r1, r4
 80164d8:	f000 fa7a 	bl	80169d0 <_Bfree>
 80164dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80164de:	2300      	movs	r3, #0
 80164e0:	6013      	str	r3, [r2, #0]
 80164e2:	27a3      	movs	r7, #163	; 0xa3
 80164e4:	e785      	b.n	80163f2 <__gethex+0x12a>
 80164e6:	1e73      	subs	r3, r6, #1
 80164e8:	9a05      	ldr	r2, [sp, #20]
 80164ea:	9303      	str	r3, [sp, #12]
 80164ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80164f0:	4293      	cmp	r3, r2
 80164f2:	d019      	beq.n	8016528 <__gethex+0x260>
 80164f4:	f1bb 0f20 	cmp.w	fp, #32
 80164f8:	d107      	bne.n	801650a <__gethex+0x242>
 80164fa:	9b02      	ldr	r3, [sp, #8]
 80164fc:	9a00      	ldr	r2, [sp, #0]
 80164fe:	f843 2b04 	str.w	r2, [r3], #4
 8016502:	9302      	str	r3, [sp, #8]
 8016504:	2300      	movs	r3, #0
 8016506:	9300      	str	r3, [sp, #0]
 8016508:	469b      	mov	fp, r3
 801650a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801650e:	f7ff fec5 	bl	801629c <__hexdig_fun>
 8016512:	9b00      	ldr	r3, [sp, #0]
 8016514:	f000 000f 	and.w	r0, r0, #15
 8016518:	fa00 f00b 	lsl.w	r0, r0, fp
 801651c:	4303      	orrs	r3, r0
 801651e:	9300      	str	r3, [sp, #0]
 8016520:	f10b 0b04 	add.w	fp, fp, #4
 8016524:	9b03      	ldr	r3, [sp, #12]
 8016526:	e00d      	b.n	8016544 <__gethex+0x27c>
 8016528:	9b03      	ldr	r3, [sp, #12]
 801652a:	9a06      	ldr	r2, [sp, #24]
 801652c:	4413      	add	r3, r2
 801652e:	42bb      	cmp	r3, r7
 8016530:	d3e0      	bcc.n	80164f4 <__gethex+0x22c>
 8016532:	4618      	mov	r0, r3
 8016534:	9901      	ldr	r1, [sp, #4]
 8016536:	9307      	str	r3, [sp, #28]
 8016538:	4652      	mov	r2, sl
 801653a:	f001 f8a1 	bl	8017680 <strncmp>
 801653e:	9b07      	ldr	r3, [sp, #28]
 8016540:	2800      	cmp	r0, #0
 8016542:	d1d7      	bne.n	80164f4 <__gethex+0x22c>
 8016544:	461e      	mov	r6, r3
 8016546:	e78b      	b.n	8016460 <__gethex+0x198>
 8016548:	f04f 0a03 	mov.w	sl, #3
 801654c:	e7b8      	b.n	80164c0 <__gethex+0x1f8>
 801654e:	da0a      	bge.n	8016566 <__gethex+0x29e>
 8016550:	1a37      	subs	r7, r6, r0
 8016552:	4621      	mov	r1, r4
 8016554:	ee18 0a10 	vmov	r0, s16
 8016558:	463a      	mov	r2, r7
 801655a:	f000 fc55 	bl	8016e08 <__lshift>
 801655e:	1bed      	subs	r5, r5, r7
 8016560:	4604      	mov	r4, r0
 8016562:	f100 0914 	add.w	r9, r0, #20
 8016566:	f04f 0a00 	mov.w	sl, #0
 801656a:	e7ae      	b.n	80164ca <__gethex+0x202>
 801656c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016570:	42a8      	cmp	r0, r5
 8016572:	dd72      	ble.n	801665a <__gethex+0x392>
 8016574:	1b45      	subs	r5, r0, r5
 8016576:	42ae      	cmp	r6, r5
 8016578:	dc36      	bgt.n	80165e8 <__gethex+0x320>
 801657a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801657e:	2b02      	cmp	r3, #2
 8016580:	d02a      	beq.n	80165d8 <__gethex+0x310>
 8016582:	2b03      	cmp	r3, #3
 8016584:	d02c      	beq.n	80165e0 <__gethex+0x318>
 8016586:	2b01      	cmp	r3, #1
 8016588:	d11c      	bne.n	80165c4 <__gethex+0x2fc>
 801658a:	42ae      	cmp	r6, r5
 801658c:	d11a      	bne.n	80165c4 <__gethex+0x2fc>
 801658e:	2e01      	cmp	r6, #1
 8016590:	d112      	bne.n	80165b8 <__gethex+0x2f0>
 8016592:	9a04      	ldr	r2, [sp, #16]
 8016594:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016598:	6013      	str	r3, [r2, #0]
 801659a:	2301      	movs	r3, #1
 801659c:	6123      	str	r3, [r4, #16]
 801659e:	f8c9 3000 	str.w	r3, [r9]
 80165a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80165a4:	2762      	movs	r7, #98	; 0x62
 80165a6:	601c      	str	r4, [r3, #0]
 80165a8:	e723      	b.n	80163f2 <__gethex+0x12a>
 80165aa:	bf00      	nop
 80165ac:	080189b8 	.word	0x080189b8
 80165b0:	08018940 	.word	0x08018940
 80165b4:	08018951 	.word	0x08018951
 80165b8:	1e71      	subs	r1, r6, #1
 80165ba:	4620      	mov	r0, r4
 80165bc:	f000 fe65 	bl	801728a <__any_on>
 80165c0:	2800      	cmp	r0, #0
 80165c2:	d1e6      	bne.n	8016592 <__gethex+0x2ca>
 80165c4:	ee18 0a10 	vmov	r0, s16
 80165c8:	4621      	mov	r1, r4
 80165ca:	f000 fa01 	bl	80169d0 <_Bfree>
 80165ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80165d0:	2300      	movs	r3, #0
 80165d2:	6013      	str	r3, [r2, #0]
 80165d4:	2750      	movs	r7, #80	; 0x50
 80165d6:	e70c      	b.n	80163f2 <__gethex+0x12a>
 80165d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d1f2      	bne.n	80165c4 <__gethex+0x2fc>
 80165de:	e7d8      	b.n	8016592 <__gethex+0x2ca>
 80165e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d1d5      	bne.n	8016592 <__gethex+0x2ca>
 80165e6:	e7ed      	b.n	80165c4 <__gethex+0x2fc>
 80165e8:	1e6f      	subs	r7, r5, #1
 80165ea:	f1ba 0f00 	cmp.w	sl, #0
 80165ee:	d131      	bne.n	8016654 <__gethex+0x38c>
 80165f0:	b127      	cbz	r7, 80165fc <__gethex+0x334>
 80165f2:	4639      	mov	r1, r7
 80165f4:	4620      	mov	r0, r4
 80165f6:	f000 fe48 	bl	801728a <__any_on>
 80165fa:	4682      	mov	sl, r0
 80165fc:	117b      	asrs	r3, r7, #5
 80165fe:	2101      	movs	r1, #1
 8016600:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016604:	f007 071f 	and.w	r7, r7, #31
 8016608:	fa01 f707 	lsl.w	r7, r1, r7
 801660c:	421f      	tst	r7, r3
 801660e:	4629      	mov	r1, r5
 8016610:	4620      	mov	r0, r4
 8016612:	bf18      	it	ne
 8016614:	f04a 0a02 	orrne.w	sl, sl, #2
 8016618:	1b76      	subs	r6, r6, r5
 801661a:	f7ff fded 	bl	80161f8 <rshift>
 801661e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016622:	2702      	movs	r7, #2
 8016624:	f1ba 0f00 	cmp.w	sl, #0
 8016628:	d048      	beq.n	80166bc <__gethex+0x3f4>
 801662a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801662e:	2b02      	cmp	r3, #2
 8016630:	d015      	beq.n	801665e <__gethex+0x396>
 8016632:	2b03      	cmp	r3, #3
 8016634:	d017      	beq.n	8016666 <__gethex+0x39e>
 8016636:	2b01      	cmp	r3, #1
 8016638:	d109      	bne.n	801664e <__gethex+0x386>
 801663a:	f01a 0f02 	tst.w	sl, #2
 801663e:	d006      	beq.n	801664e <__gethex+0x386>
 8016640:	f8d9 0000 	ldr.w	r0, [r9]
 8016644:	ea4a 0a00 	orr.w	sl, sl, r0
 8016648:	f01a 0f01 	tst.w	sl, #1
 801664c:	d10e      	bne.n	801666c <__gethex+0x3a4>
 801664e:	f047 0710 	orr.w	r7, r7, #16
 8016652:	e033      	b.n	80166bc <__gethex+0x3f4>
 8016654:	f04f 0a01 	mov.w	sl, #1
 8016658:	e7d0      	b.n	80165fc <__gethex+0x334>
 801665a:	2701      	movs	r7, #1
 801665c:	e7e2      	b.n	8016624 <__gethex+0x35c>
 801665e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016660:	f1c3 0301 	rsb	r3, r3, #1
 8016664:	9315      	str	r3, [sp, #84]	; 0x54
 8016666:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016668:	2b00      	cmp	r3, #0
 801666a:	d0f0      	beq.n	801664e <__gethex+0x386>
 801666c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016670:	f104 0314 	add.w	r3, r4, #20
 8016674:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016678:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801667c:	f04f 0c00 	mov.w	ip, #0
 8016680:	4618      	mov	r0, r3
 8016682:	f853 2b04 	ldr.w	r2, [r3], #4
 8016686:	f1b2 3fff 	cmp.w	r2, #4294967295
 801668a:	d01c      	beq.n	80166c6 <__gethex+0x3fe>
 801668c:	3201      	adds	r2, #1
 801668e:	6002      	str	r2, [r0, #0]
 8016690:	2f02      	cmp	r7, #2
 8016692:	f104 0314 	add.w	r3, r4, #20
 8016696:	d13f      	bne.n	8016718 <__gethex+0x450>
 8016698:	f8d8 2000 	ldr.w	r2, [r8]
 801669c:	3a01      	subs	r2, #1
 801669e:	42b2      	cmp	r2, r6
 80166a0:	d10a      	bne.n	80166b8 <__gethex+0x3f0>
 80166a2:	1171      	asrs	r1, r6, #5
 80166a4:	2201      	movs	r2, #1
 80166a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80166aa:	f006 061f 	and.w	r6, r6, #31
 80166ae:	fa02 f606 	lsl.w	r6, r2, r6
 80166b2:	421e      	tst	r6, r3
 80166b4:	bf18      	it	ne
 80166b6:	4617      	movne	r7, r2
 80166b8:	f047 0720 	orr.w	r7, r7, #32
 80166bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80166be:	601c      	str	r4, [r3, #0]
 80166c0:	9b04      	ldr	r3, [sp, #16]
 80166c2:	601d      	str	r5, [r3, #0]
 80166c4:	e695      	b.n	80163f2 <__gethex+0x12a>
 80166c6:	4299      	cmp	r1, r3
 80166c8:	f843 cc04 	str.w	ip, [r3, #-4]
 80166cc:	d8d8      	bhi.n	8016680 <__gethex+0x3b8>
 80166ce:	68a3      	ldr	r3, [r4, #8]
 80166d0:	459b      	cmp	fp, r3
 80166d2:	db19      	blt.n	8016708 <__gethex+0x440>
 80166d4:	6861      	ldr	r1, [r4, #4]
 80166d6:	ee18 0a10 	vmov	r0, s16
 80166da:	3101      	adds	r1, #1
 80166dc:	f000 f938 	bl	8016950 <_Balloc>
 80166e0:	4681      	mov	r9, r0
 80166e2:	b918      	cbnz	r0, 80166ec <__gethex+0x424>
 80166e4:	4b1a      	ldr	r3, [pc, #104]	; (8016750 <__gethex+0x488>)
 80166e6:	4602      	mov	r2, r0
 80166e8:	2184      	movs	r1, #132	; 0x84
 80166ea:	e6a8      	b.n	801643e <__gethex+0x176>
 80166ec:	6922      	ldr	r2, [r4, #16]
 80166ee:	3202      	adds	r2, #2
 80166f0:	f104 010c 	add.w	r1, r4, #12
 80166f4:	0092      	lsls	r2, r2, #2
 80166f6:	300c      	adds	r0, #12
 80166f8:	f7fd f86b 	bl	80137d2 <memcpy>
 80166fc:	4621      	mov	r1, r4
 80166fe:	ee18 0a10 	vmov	r0, s16
 8016702:	f000 f965 	bl	80169d0 <_Bfree>
 8016706:	464c      	mov	r4, r9
 8016708:	6923      	ldr	r3, [r4, #16]
 801670a:	1c5a      	adds	r2, r3, #1
 801670c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016710:	6122      	str	r2, [r4, #16]
 8016712:	2201      	movs	r2, #1
 8016714:	615a      	str	r2, [r3, #20]
 8016716:	e7bb      	b.n	8016690 <__gethex+0x3c8>
 8016718:	6922      	ldr	r2, [r4, #16]
 801671a:	455a      	cmp	r2, fp
 801671c:	dd0b      	ble.n	8016736 <__gethex+0x46e>
 801671e:	2101      	movs	r1, #1
 8016720:	4620      	mov	r0, r4
 8016722:	f7ff fd69 	bl	80161f8 <rshift>
 8016726:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801672a:	3501      	adds	r5, #1
 801672c:	42ab      	cmp	r3, r5
 801672e:	f6ff aed0 	blt.w	80164d2 <__gethex+0x20a>
 8016732:	2701      	movs	r7, #1
 8016734:	e7c0      	b.n	80166b8 <__gethex+0x3f0>
 8016736:	f016 061f 	ands.w	r6, r6, #31
 801673a:	d0fa      	beq.n	8016732 <__gethex+0x46a>
 801673c:	4453      	add	r3, sl
 801673e:	f1c6 0620 	rsb	r6, r6, #32
 8016742:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016746:	f000 f9f5 	bl	8016b34 <__hi0bits>
 801674a:	42b0      	cmp	r0, r6
 801674c:	dbe7      	blt.n	801671e <__gethex+0x456>
 801674e:	e7f0      	b.n	8016732 <__gethex+0x46a>
 8016750:	08018940 	.word	0x08018940

08016754 <L_shift>:
 8016754:	f1c2 0208 	rsb	r2, r2, #8
 8016758:	0092      	lsls	r2, r2, #2
 801675a:	b570      	push	{r4, r5, r6, lr}
 801675c:	f1c2 0620 	rsb	r6, r2, #32
 8016760:	6843      	ldr	r3, [r0, #4]
 8016762:	6804      	ldr	r4, [r0, #0]
 8016764:	fa03 f506 	lsl.w	r5, r3, r6
 8016768:	432c      	orrs	r4, r5
 801676a:	40d3      	lsrs	r3, r2
 801676c:	6004      	str	r4, [r0, #0]
 801676e:	f840 3f04 	str.w	r3, [r0, #4]!
 8016772:	4288      	cmp	r0, r1
 8016774:	d3f4      	bcc.n	8016760 <L_shift+0xc>
 8016776:	bd70      	pop	{r4, r5, r6, pc}

08016778 <__match>:
 8016778:	b530      	push	{r4, r5, lr}
 801677a:	6803      	ldr	r3, [r0, #0]
 801677c:	3301      	adds	r3, #1
 801677e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016782:	b914      	cbnz	r4, 801678a <__match+0x12>
 8016784:	6003      	str	r3, [r0, #0]
 8016786:	2001      	movs	r0, #1
 8016788:	bd30      	pop	{r4, r5, pc}
 801678a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801678e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016792:	2d19      	cmp	r5, #25
 8016794:	bf98      	it	ls
 8016796:	3220      	addls	r2, #32
 8016798:	42a2      	cmp	r2, r4
 801679a:	d0f0      	beq.n	801677e <__match+0x6>
 801679c:	2000      	movs	r0, #0
 801679e:	e7f3      	b.n	8016788 <__match+0x10>

080167a0 <__hexnan>:
 80167a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167a4:	680b      	ldr	r3, [r1, #0]
 80167a6:	115e      	asrs	r6, r3, #5
 80167a8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80167ac:	f013 031f 	ands.w	r3, r3, #31
 80167b0:	b087      	sub	sp, #28
 80167b2:	bf18      	it	ne
 80167b4:	3604      	addne	r6, #4
 80167b6:	2500      	movs	r5, #0
 80167b8:	1f37      	subs	r7, r6, #4
 80167ba:	4690      	mov	r8, r2
 80167bc:	6802      	ldr	r2, [r0, #0]
 80167be:	9301      	str	r3, [sp, #4]
 80167c0:	4682      	mov	sl, r0
 80167c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80167c6:	46b9      	mov	r9, r7
 80167c8:	463c      	mov	r4, r7
 80167ca:	9502      	str	r5, [sp, #8]
 80167cc:	46ab      	mov	fp, r5
 80167ce:	7851      	ldrb	r1, [r2, #1]
 80167d0:	1c53      	adds	r3, r2, #1
 80167d2:	9303      	str	r3, [sp, #12]
 80167d4:	b341      	cbz	r1, 8016828 <__hexnan+0x88>
 80167d6:	4608      	mov	r0, r1
 80167d8:	9205      	str	r2, [sp, #20]
 80167da:	9104      	str	r1, [sp, #16]
 80167dc:	f7ff fd5e 	bl	801629c <__hexdig_fun>
 80167e0:	2800      	cmp	r0, #0
 80167e2:	d14f      	bne.n	8016884 <__hexnan+0xe4>
 80167e4:	9904      	ldr	r1, [sp, #16]
 80167e6:	9a05      	ldr	r2, [sp, #20]
 80167e8:	2920      	cmp	r1, #32
 80167ea:	d818      	bhi.n	801681e <__hexnan+0x7e>
 80167ec:	9b02      	ldr	r3, [sp, #8]
 80167ee:	459b      	cmp	fp, r3
 80167f0:	dd13      	ble.n	801681a <__hexnan+0x7a>
 80167f2:	454c      	cmp	r4, r9
 80167f4:	d206      	bcs.n	8016804 <__hexnan+0x64>
 80167f6:	2d07      	cmp	r5, #7
 80167f8:	dc04      	bgt.n	8016804 <__hexnan+0x64>
 80167fa:	462a      	mov	r2, r5
 80167fc:	4649      	mov	r1, r9
 80167fe:	4620      	mov	r0, r4
 8016800:	f7ff ffa8 	bl	8016754 <L_shift>
 8016804:	4544      	cmp	r4, r8
 8016806:	d950      	bls.n	80168aa <__hexnan+0x10a>
 8016808:	2300      	movs	r3, #0
 801680a:	f1a4 0904 	sub.w	r9, r4, #4
 801680e:	f844 3c04 	str.w	r3, [r4, #-4]
 8016812:	f8cd b008 	str.w	fp, [sp, #8]
 8016816:	464c      	mov	r4, r9
 8016818:	461d      	mov	r5, r3
 801681a:	9a03      	ldr	r2, [sp, #12]
 801681c:	e7d7      	b.n	80167ce <__hexnan+0x2e>
 801681e:	2929      	cmp	r1, #41	; 0x29
 8016820:	d156      	bne.n	80168d0 <__hexnan+0x130>
 8016822:	3202      	adds	r2, #2
 8016824:	f8ca 2000 	str.w	r2, [sl]
 8016828:	f1bb 0f00 	cmp.w	fp, #0
 801682c:	d050      	beq.n	80168d0 <__hexnan+0x130>
 801682e:	454c      	cmp	r4, r9
 8016830:	d206      	bcs.n	8016840 <__hexnan+0xa0>
 8016832:	2d07      	cmp	r5, #7
 8016834:	dc04      	bgt.n	8016840 <__hexnan+0xa0>
 8016836:	462a      	mov	r2, r5
 8016838:	4649      	mov	r1, r9
 801683a:	4620      	mov	r0, r4
 801683c:	f7ff ff8a 	bl	8016754 <L_shift>
 8016840:	4544      	cmp	r4, r8
 8016842:	d934      	bls.n	80168ae <__hexnan+0x10e>
 8016844:	f1a8 0204 	sub.w	r2, r8, #4
 8016848:	4623      	mov	r3, r4
 801684a:	f853 1b04 	ldr.w	r1, [r3], #4
 801684e:	f842 1f04 	str.w	r1, [r2, #4]!
 8016852:	429f      	cmp	r7, r3
 8016854:	d2f9      	bcs.n	801684a <__hexnan+0xaa>
 8016856:	1b3b      	subs	r3, r7, r4
 8016858:	f023 0303 	bic.w	r3, r3, #3
 801685c:	3304      	adds	r3, #4
 801685e:	3401      	adds	r4, #1
 8016860:	3e03      	subs	r6, #3
 8016862:	42b4      	cmp	r4, r6
 8016864:	bf88      	it	hi
 8016866:	2304      	movhi	r3, #4
 8016868:	4443      	add	r3, r8
 801686a:	2200      	movs	r2, #0
 801686c:	f843 2b04 	str.w	r2, [r3], #4
 8016870:	429f      	cmp	r7, r3
 8016872:	d2fb      	bcs.n	801686c <__hexnan+0xcc>
 8016874:	683b      	ldr	r3, [r7, #0]
 8016876:	b91b      	cbnz	r3, 8016880 <__hexnan+0xe0>
 8016878:	4547      	cmp	r7, r8
 801687a:	d127      	bne.n	80168cc <__hexnan+0x12c>
 801687c:	2301      	movs	r3, #1
 801687e:	603b      	str	r3, [r7, #0]
 8016880:	2005      	movs	r0, #5
 8016882:	e026      	b.n	80168d2 <__hexnan+0x132>
 8016884:	3501      	adds	r5, #1
 8016886:	2d08      	cmp	r5, #8
 8016888:	f10b 0b01 	add.w	fp, fp, #1
 801688c:	dd06      	ble.n	801689c <__hexnan+0xfc>
 801688e:	4544      	cmp	r4, r8
 8016890:	d9c3      	bls.n	801681a <__hexnan+0x7a>
 8016892:	2300      	movs	r3, #0
 8016894:	f844 3c04 	str.w	r3, [r4, #-4]
 8016898:	2501      	movs	r5, #1
 801689a:	3c04      	subs	r4, #4
 801689c:	6822      	ldr	r2, [r4, #0]
 801689e:	f000 000f 	and.w	r0, r0, #15
 80168a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80168a6:	6022      	str	r2, [r4, #0]
 80168a8:	e7b7      	b.n	801681a <__hexnan+0x7a>
 80168aa:	2508      	movs	r5, #8
 80168ac:	e7b5      	b.n	801681a <__hexnan+0x7a>
 80168ae:	9b01      	ldr	r3, [sp, #4]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d0df      	beq.n	8016874 <__hexnan+0xd4>
 80168b4:	f04f 32ff 	mov.w	r2, #4294967295
 80168b8:	f1c3 0320 	rsb	r3, r3, #32
 80168bc:	fa22 f303 	lsr.w	r3, r2, r3
 80168c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80168c4:	401a      	ands	r2, r3
 80168c6:	f846 2c04 	str.w	r2, [r6, #-4]
 80168ca:	e7d3      	b.n	8016874 <__hexnan+0xd4>
 80168cc:	3f04      	subs	r7, #4
 80168ce:	e7d1      	b.n	8016874 <__hexnan+0xd4>
 80168d0:	2004      	movs	r0, #4
 80168d2:	b007      	add	sp, #28
 80168d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080168d8 <_localeconv_r>:
 80168d8:	4800      	ldr	r0, [pc, #0]	; (80168dc <_localeconv_r+0x4>)
 80168da:	4770      	bx	lr
 80168dc:	20000318 	.word	0x20000318

080168e0 <_lseek_r>:
 80168e0:	b538      	push	{r3, r4, r5, lr}
 80168e2:	4d07      	ldr	r5, [pc, #28]	; (8016900 <_lseek_r+0x20>)
 80168e4:	4604      	mov	r4, r0
 80168e6:	4608      	mov	r0, r1
 80168e8:	4611      	mov	r1, r2
 80168ea:	2200      	movs	r2, #0
 80168ec:	602a      	str	r2, [r5, #0]
 80168ee:	461a      	mov	r2, r3
 80168f0:	f7f0 f8dc 	bl	8006aac <_lseek>
 80168f4:	1c43      	adds	r3, r0, #1
 80168f6:	d102      	bne.n	80168fe <_lseek_r+0x1e>
 80168f8:	682b      	ldr	r3, [r5, #0]
 80168fa:	b103      	cbz	r3, 80168fe <_lseek_r+0x1e>
 80168fc:	6023      	str	r3, [r4, #0]
 80168fe:	bd38      	pop	{r3, r4, r5, pc}
 8016900:	200061e0 	.word	0x200061e0

08016904 <malloc>:
 8016904:	4b02      	ldr	r3, [pc, #8]	; (8016910 <malloc+0xc>)
 8016906:	4601      	mov	r1, r0
 8016908:	6818      	ldr	r0, [r3, #0]
 801690a:	f7fc bf99 	b.w	8013840 <_malloc_r>
 801690e:	bf00      	nop
 8016910:	200001c0 	.word	0x200001c0

08016914 <__ascii_mbtowc>:
 8016914:	b082      	sub	sp, #8
 8016916:	b901      	cbnz	r1, 801691a <__ascii_mbtowc+0x6>
 8016918:	a901      	add	r1, sp, #4
 801691a:	b142      	cbz	r2, 801692e <__ascii_mbtowc+0x1a>
 801691c:	b14b      	cbz	r3, 8016932 <__ascii_mbtowc+0x1e>
 801691e:	7813      	ldrb	r3, [r2, #0]
 8016920:	600b      	str	r3, [r1, #0]
 8016922:	7812      	ldrb	r2, [r2, #0]
 8016924:	1e10      	subs	r0, r2, #0
 8016926:	bf18      	it	ne
 8016928:	2001      	movne	r0, #1
 801692a:	b002      	add	sp, #8
 801692c:	4770      	bx	lr
 801692e:	4610      	mov	r0, r2
 8016930:	e7fb      	b.n	801692a <__ascii_mbtowc+0x16>
 8016932:	f06f 0001 	mvn.w	r0, #1
 8016936:	e7f8      	b.n	801692a <__ascii_mbtowc+0x16>

08016938 <__malloc_lock>:
 8016938:	4801      	ldr	r0, [pc, #4]	; (8016940 <__malloc_lock+0x8>)
 801693a:	f7fc bf48 	b.w	80137ce <__retarget_lock_acquire_recursive>
 801693e:	bf00      	nop
 8016940:	200061d4 	.word	0x200061d4

08016944 <__malloc_unlock>:
 8016944:	4801      	ldr	r0, [pc, #4]	; (801694c <__malloc_unlock+0x8>)
 8016946:	f7fc bf43 	b.w	80137d0 <__retarget_lock_release_recursive>
 801694a:	bf00      	nop
 801694c:	200061d4 	.word	0x200061d4

08016950 <_Balloc>:
 8016950:	b570      	push	{r4, r5, r6, lr}
 8016952:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016954:	4604      	mov	r4, r0
 8016956:	460d      	mov	r5, r1
 8016958:	b976      	cbnz	r6, 8016978 <_Balloc+0x28>
 801695a:	2010      	movs	r0, #16
 801695c:	f7ff ffd2 	bl	8016904 <malloc>
 8016960:	4602      	mov	r2, r0
 8016962:	6260      	str	r0, [r4, #36]	; 0x24
 8016964:	b920      	cbnz	r0, 8016970 <_Balloc+0x20>
 8016966:	4b18      	ldr	r3, [pc, #96]	; (80169c8 <_Balloc+0x78>)
 8016968:	4818      	ldr	r0, [pc, #96]	; (80169cc <_Balloc+0x7c>)
 801696a:	2166      	movs	r1, #102	; 0x66
 801696c:	f000 feaa 	bl	80176c4 <__assert_func>
 8016970:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016974:	6006      	str	r6, [r0, #0]
 8016976:	60c6      	str	r6, [r0, #12]
 8016978:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801697a:	68f3      	ldr	r3, [r6, #12]
 801697c:	b183      	cbz	r3, 80169a0 <_Balloc+0x50>
 801697e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016980:	68db      	ldr	r3, [r3, #12]
 8016982:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016986:	b9b8      	cbnz	r0, 80169b8 <_Balloc+0x68>
 8016988:	2101      	movs	r1, #1
 801698a:	fa01 f605 	lsl.w	r6, r1, r5
 801698e:	1d72      	adds	r2, r6, #5
 8016990:	0092      	lsls	r2, r2, #2
 8016992:	4620      	mov	r0, r4
 8016994:	f000 fc9a 	bl	80172cc <_calloc_r>
 8016998:	b160      	cbz	r0, 80169b4 <_Balloc+0x64>
 801699a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801699e:	e00e      	b.n	80169be <_Balloc+0x6e>
 80169a0:	2221      	movs	r2, #33	; 0x21
 80169a2:	2104      	movs	r1, #4
 80169a4:	4620      	mov	r0, r4
 80169a6:	f000 fc91 	bl	80172cc <_calloc_r>
 80169aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80169ac:	60f0      	str	r0, [r6, #12]
 80169ae:	68db      	ldr	r3, [r3, #12]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d1e4      	bne.n	801697e <_Balloc+0x2e>
 80169b4:	2000      	movs	r0, #0
 80169b6:	bd70      	pop	{r4, r5, r6, pc}
 80169b8:	6802      	ldr	r2, [r0, #0]
 80169ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80169be:	2300      	movs	r3, #0
 80169c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80169c4:	e7f7      	b.n	80169b6 <_Balloc+0x66>
 80169c6:	bf00      	nop
 80169c8:	080188ce 	.word	0x080188ce
 80169cc:	080189cc 	.word	0x080189cc

080169d0 <_Bfree>:
 80169d0:	b570      	push	{r4, r5, r6, lr}
 80169d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80169d4:	4605      	mov	r5, r0
 80169d6:	460c      	mov	r4, r1
 80169d8:	b976      	cbnz	r6, 80169f8 <_Bfree+0x28>
 80169da:	2010      	movs	r0, #16
 80169dc:	f7ff ff92 	bl	8016904 <malloc>
 80169e0:	4602      	mov	r2, r0
 80169e2:	6268      	str	r0, [r5, #36]	; 0x24
 80169e4:	b920      	cbnz	r0, 80169f0 <_Bfree+0x20>
 80169e6:	4b09      	ldr	r3, [pc, #36]	; (8016a0c <_Bfree+0x3c>)
 80169e8:	4809      	ldr	r0, [pc, #36]	; (8016a10 <_Bfree+0x40>)
 80169ea:	218a      	movs	r1, #138	; 0x8a
 80169ec:	f000 fe6a 	bl	80176c4 <__assert_func>
 80169f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80169f4:	6006      	str	r6, [r0, #0]
 80169f6:	60c6      	str	r6, [r0, #12]
 80169f8:	b13c      	cbz	r4, 8016a0a <_Bfree+0x3a>
 80169fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80169fc:	6862      	ldr	r2, [r4, #4]
 80169fe:	68db      	ldr	r3, [r3, #12]
 8016a00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016a04:	6021      	str	r1, [r4, #0]
 8016a06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016a0a:	bd70      	pop	{r4, r5, r6, pc}
 8016a0c:	080188ce 	.word	0x080188ce
 8016a10:	080189cc 	.word	0x080189cc

08016a14 <__multadd>:
 8016a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a18:	690d      	ldr	r5, [r1, #16]
 8016a1a:	4607      	mov	r7, r0
 8016a1c:	460c      	mov	r4, r1
 8016a1e:	461e      	mov	r6, r3
 8016a20:	f101 0c14 	add.w	ip, r1, #20
 8016a24:	2000      	movs	r0, #0
 8016a26:	f8dc 3000 	ldr.w	r3, [ip]
 8016a2a:	b299      	uxth	r1, r3
 8016a2c:	fb02 6101 	mla	r1, r2, r1, r6
 8016a30:	0c1e      	lsrs	r6, r3, #16
 8016a32:	0c0b      	lsrs	r3, r1, #16
 8016a34:	fb02 3306 	mla	r3, r2, r6, r3
 8016a38:	b289      	uxth	r1, r1
 8016a3a:	3001      	adds	r0, #1
 8016a3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016a40:	4285      	cmp	r5, r0
 8016a42:	f84c 1b04 	str.w	r1, [ip], #4
 8016a46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016a4a:	dcec      	bgt.n	8016a26 <__multadd+0x12>
 8016a4c:	b30e      	cbz	r6, 8016a92 <__multadd+0x7e>
 8016a4e:	68a3      	ldr	r3, [r4, #8]
 8016a50:	42ab      	cmp	r3, r5
 8016a52:	dc19      	bgt.n	8016a88 <__multadd+0x74>
 8016a54:	6861      	ldr	r1, [r4, #4]
 8016a56:	4638      	mov	r0, r7
 8016a58:	3101      	adds	r1, #1
 8016a5a:	f7ff ff79 	bl	8016950 <_Balloc>
 8016a5e:	4680      	mov	r8, r0
 8016a60:	b928      	cbnz	r0, 8016a6e <__multadd+0x5a>
 8016a62:	4602      	mov	r2, r0
 8016a64:	4b0c      	ldr	r3, [pc, #48]	; (8016a98 <__multadd+0x84>)
 8016a66:	480d      	ldr	r0, [pc, #52]	; (8016a9c <__multadd+0x88>)
 8016a68:	21b5      	movs	r1, #181	; 0xb5
 8016a6a:	f000 fe2b 	bl	80176c4 <__assert_func>
 8016a6e:	6922      	ldr	r2, [r4, #16]
 8016a70:	3202      	adds	r2, #2
 8016a72:	f104 010c 	add.w	r1, r4, #12
 8016a76:	0092      	lsls	r2, r2, #2
 8016a78:	300c      	adds	r0, #12
 8016a7a:	f7fc feaa 	bl	80137d2 <memcpy>
 8016a7e:	4621      	mov	r1, r4
 8016a80:	4638      	mov	r0, r7
 8016a82:	f7ff ffa5 	bl	80169d0 <_Bfree>
 8016a86:	4644      	mov	r4, r8
 8016a88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016a8c:	3501      	adds	r5, #1
 8016a8e:	615e      	str	r6, [r3, #20]
 8016a90:	6125      	str	r5, [r4, #16]
 8016a92:	4620      	mov	r0, r4
 8016a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a98:	08018940 	.word	0x08018940
 8016a9c:	080189cc 	.word	0x080189cc

08016aa0 <__s2b>:
 8016aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016aa4:	460c      	mov	r4, r1
 8016aa6:	4615      	mov	r5, r2
 8016aa8:	461f      	mov	r7, r3
 8016aaa:	2209      	movs	r2, #9
 8016aac:	3308      	adds	r3, #8
 8016aae:	4606      	mov	r6, r0
 8016ab0:	fb93 f3f2 	sdiv	r3, r3, r2
 8016ab4:	2100      	movs	r1, #0
 8016ab6:	2201      	movs	r2, #1
 8016ab8:	429a      	cmp	r2, r3
 8016aba:	db09      	blt.n	8016ad0 <__s2b+0x30>
 8016abc:	4630      	mov	r0, r6
 8016abe:	f7ff ff47 	bl	8016950 <_Balloc>
 8016ac2:	b940      	cbnz	r0, 8016ad6 <__s2b+0x36>
 8016ac4:	4602      	mov	r2, r0
 8016ac6:	4b19      	ldr	r3, [pc, #100]	; (8016b2c <__s2b+0x8c>)
 8016ac8:	4819      	ldr	r0, [pc, #100]	; (8016b30 <__s2b+0x90>)
 8016aca:	21ce      	movs	r1, #206	; 0xce
 8016acc:	f000 fdfa 	bl	80176c4 <__assert_func>
 8016ad0:	0052      	lsls	r2, r2, #1
 8016ad2:	3101      	adds	r1, #1
 8016ad4:	e7f0      	b.n	8016ab8 <__s2b+0x18>
 8016ad6:	9b08      	ldr	r3, [sp, #32]
 8016ad8:	6143      	str	r3, [r0, #20]
 8016ada:	2d09      	cmp	r5, #9
 8016adc:	f04f 0301 	mov.w	r3, #1
 8016ae0:	6103      	str	r3, [r0, #16]
 8016ae2:	dd16      	ble.n	8016b12 <__s2b+0x72>
 8016ae4:	f104 0909 	add.w	r9, r4, #9
 8016ae8:	46c8      	mov	r8, r9
 8016aea:	442c      	add	r4, r5
 8016aec:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016af0:	4601      	mov	r1, r0
 8016af2:	3b30      	subs	r3, #48	; 0x30
 8016af4:	220a      	movs	r2, #10
 8016af6:	4630      	mov	r0, r6
 8016af8:	f7ff ff8c 	bl	8016a14 <__multadd>
 8016afc:	45a0      	cmp	r8, r4
 8016afe:	d1f5      	bne.n	8016aec <__s2b+0x4c>
 8016b00:	f1a5 0408 	sub.w	r4, r5, #8
 8016b04:	444c      	add	r4, r9
 8016b06:	1b2d      	subs	r5, r5, r4
 8016b08:	1963      	adds	r3, r4, r5
 8016b0a:	42bb      	cmp	r3, r7
 8016b0c:	db04      	blt.n	8016b18 <__s2b+0x78>
 8016b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b12:	340a      	adds	r4, #10
 8016b14:	2509      	movs	r5, #9
 8016b16:	e7f6      	b.n	8016b06 <__s2b+0x66>
 8016b18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016b1c:	4601      	mov	r1, r0
 8016b1e:	3b30      	subs	r3, #48	; 0x30
 8016b20:	220a      	movs	r2, #10
 8016b22:	4630      	mov	r0, r6
 8016b24:	f7ff ff76 	bl	8016a14 <__multadd>
 8016b28:	e7ee      	b.n	8016b08 <__s2b+0x68>
 8016b2a:	bf00      	nop
 8016b2c:	08018940 	.word	0x08018940
 8016b30:	080189cc 	.word	0x080189cc

08016b34 <__hi0bits>:
 8016b34:	0c03      	lsrs	r3, r0, #16
 8016b36:	041b      	lsls	r3, r3, #16
 8016b38:	b9d3      	cbnz	r3, 8016b70 <__hi0bits+0x3c>
 8016b3a:	0400      	lsls	r0, r0, #16
 8016b3c:	2310      	movs	r3, #16
 8016b3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016b42:	bf04      	itt	eq
 8016b44:	0200      	lsleq	r0, r0, #8
 8016b46:	3308      	addeq	r3, #8
 8016b48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016b4c:	bf04      	itt	eq
 8016b4e:	0100      	lsleq	r0, r0, #4
 8016b50:	3304      	addeq	r3, #4
 8016b52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016b56:	bf04      	itt	eq
 8016b58:	0080      	lsleq	r0, r0, #2
 8016b5a:	3302      	addeq	r3, #2
 8016b5c:	2800      	cmp	r0, #0
 8016b5e:	db05      	blt.n	8016b6c <__hi0bits+0x38>
 8016b60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016b64:	f103 0301 	add.w	r3, r3, #1
 8016b68:	bf08      	it	eq
 8016b6a:	2320      	moveq	r3, #32
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	4770      	bx	lr
 8016b70:	2300      	movs	r3, #0
 8016b72:	e7e4      	b.n	8016b3e <__hi0bits+0xa>

08016b74 <__lo0bits>:
 8016b74:	6803      	ldr	r3, [r0, #0]
 8016b76:	f013 0207 	ands.w	r2, r3, #7
 8016b7a:	4601      	mov	r1, r0
 8016b7c:	d00b      	beq.n	8016b96 <__lo0bits+0x22>
 8016b7e:	07da      	lsls	r2, r3, #31
 8016b80:	d423      	bmi.n	8016bca <__lo0bits+0x56>
 8016b82:	0798      	lsls	r0, r3, #30
 8016b84:	bf49      	itett	mi
 8016b86:	085b      	lsrmi	r3, r3, #1
 8016b88:	089b      	lsrpl	r3, r3, #2
 8016b8a:	2001      	movmi	r0, #1
 8016b8c:	600b      	strmi	r3, [r1, #0]
 8016b8e:	bf5c      	itt	pl
 8016b90:	600b      	strpl	r3, [r1, #0]
 8016b92:	2002      	movpl	r0, #2
 8016b94:	4770      	bx	lr
 8016b96:	b298      	uxth	r0, r3
 8016b98:	b9a8      	cbnz	r0, 8016bc6 <__lo0bits+0x52>
 8016b9a:	0c1b      	lsrs	r3, r3, #16
 8016b9c:	2010      	movs	r0, #16
 8016b9e:	b2da      	uxtb	r2, r3
 8016ba0:	b90a      	cbnz	r2, 8016ba6 <__lo0bits+0x32>
 8016ba2:	3008      	adds	r0, #8
 8016ba4:	0a1b      	lsrs	r3, r3, #8
 8016ba6:	071a      	lsls	r2, r3, #28
 8016ba8:	bf04      	itt	eq
 8016baa:	091b      	lsreq	r3, r3, #4
 8016bac:	3004      	addeq	r0, #4
 8016bae:	079a      	lsls	r2, r3, #30
 8016bb0:	bf04      	itt	eq
 8016bb2:	089b      	lsreq	r3, r3, #2
 8016bb4:	3002      	addeq	r0, #2
 8016bb6:	07da      	lsls	r2, r3, #31
 8016bb8:	d403      	bmi.n	8016bc2 <__lo0bits+0x4e>
 8016bba:	085b      	lsrs	r3, r3, #1
 8016bbc:	f100 0001 	add.w	r0, r0, #1
 8016bc0:	d005      	beq.n	8016bce <__lo0bits+0x5a>
 8016bc2:	600b      	str	r3, [r1, #0]
 8016bc4:	4770      	bx	lr
 8016bc6:	4610      	mov	r0, r2
 8016bc8:	e7e9      	b.n	8016b9e <__lo0bits+0x2a>
 8016bca:	2000      	movs	r0, #0
 8016bcc:	4770      	bx	lr
 8016bce:	2020      	movs	r0, #32
 8016bd0:	4770      	bx	lr
	...

08016bd4 <__i2b>:
 8016bd4:	b510      	push	{r4, lr}
 8016bd6:	460c      	mov	r4, r1
 8016bd8:	2101      	movs	r1, #1
 8016bda:	f7ff feb9 	bl	8016950 <_Balloc>
 8016bde:	4602      	mov	r2, r0
 8016be0:	b928      	cbnz	r0, 8016bee <__i2b+0x1a>
 8016be2:	4b05      	ldr	r3, [pc, #20]	; (8016bf8 <__i2b+0x24>)
 8016be4:	4805      	ldr	r0, [pc, #20]	; (8016bfc <__i2b+0x28>)
 8016be6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016bea:	f000 fd6b 	bl	80176c4 <__assert_func>
 8016bee:	2301      	movs	r3, #1
 8016bf0:	6144      	str	r4, [r0, #20]
 8016bf2:	6103      	str	r3, [r0, #16]
 8016bf4:	bd10      	pop	{r4, pc}
 8016bf6:	bf00      	nop
 8016bf8:	08018940 	.word	0x08018940
 8016bfc:	080189cc 	.word	0x080189cc

08016c00 <__multiply>:
 8016c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c04:	4691      	mov	r9, r2
 8016c06:	690a      	ldr	r2, [r1, #16]
 8016c08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016c0c:	429a      	cmp	r2, r3
 8016c0e:	bfb8      	it	lt
 8016c10:	460b      	movlt	r3, r1
 8016c12:	460c      	mov	r4, r1
 8016c14:	bfbc      	itt	lt
 8016c16:	464c      	movlt	r4, r9
 8016c18:	4699      	movlt	r9, r3
 8016c1a:	6927      	ldr	r7, [r4, #16]
 8016c1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016c20:	68a3      	ldr	r3, [r4, #8]
 8016c22:	6861      	ldr	r1, [r4, #4]
 8016c24:	eb07 060a 	add.w	r6, r7, sl
 8016c28:	42b3      	cmp	r3, r6
 8016c2a:	b085      	sub	sp, #20
 8016c2c:	bfb8      	it	lt
 8016c2e:	3101      	addlt	r1, #1
 8016c30:	f7ff fe8e 	bl	8016950 <_Balloc>
 8016c34:	b930      	cbnz	r0, 8016c44 <__multiply+0x44>
 8016c36:	4602      	mov	r2, r0
 8016c38:	4b44      	ldr	r3, [pc, #272]	; (8016d4c <__multiply+0x14c>)
 8016c3a:	4845      	ldr	r0, [pc, #276]	; (8016d50 <__multiply+0x150>)
 8016c3c:	f240 115d 	movw	r1, #349	; 0x15d
 8016c40:	f000 fd40 	bl	80176c4 <__assert_func>
 8016c44:	f100 0514 	add.w	r5, r0, #20
 8016c48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016c4c:	462b      	mov	r3, r5
 8016c4e:	2200      	movs	r2, #0
 8016c50:	4543      	cmp	r3, r8
 8016c52:	d321      	bcc.n	8016c98 <__multiply+0x98>
 8016c54:	f104 0314 	add.w	r3, r4, #20
 8016c58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016c5c:	f109 0314 	add.w	r3, r9, #20
 8016c60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016c64:	9202      	str	r2, [sp, #8]
 8016c66:	1b3a      	subs	r2, r7, r4
 8016c68:	3a15      	subs	r2, #21
 8016c6a:	f022 0203 	bic.w	r2, r2, #3
 8016c6e:	3204      	adds	r2, #4
 8016c70:	f104 0115 	add.w	r1, r4, #21
 8016c74:	428f      	cmp	r7, r1
 8016c76:	bf38      	it	cc
 8016c78:	2204      	movcc	r2, #4
 8016c7a:	9201      	str	r2, [sp, #4]
 8016c7c:	9a02      	ldr	r2, [sp, #8]
 8016c7e:	9303      	str	r3, [sp, #12]
 8016c80:	429a      	cmp	r2, r3
 8016c82:	d80c      	bhi.n	8016c9e <__multiply+0x9e>
 8016c84:	2e00      	cmp	r6, #0
 8016c86:	dd03      	ble.n	8016c90 <__multiply+0x90>
 8016c88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d05a      	beq.n	8016d46 <__multiply+0x146>
 8016c90:	6106      	str	r6, [r0, #16]
 8016c92:	b005      	add	sp, #20
 8016c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c98:	f843 2b04 	str.w	r2, [r3], #4
 8016c9c:	e7d8      	b.n	8016c50 <__multiply+0x50>
 8016c9e:	f8b3 a000 	ldrh.w	sl, [r3]
 8016ca2:	f1ba 0f00 	cmp.w	sl, #0
 8016ca6:	d024      	beq.n	8016cf2 <__multiply+0xf2>
 8016ca8:	f104 0e14 	add.w	lr, r4, #20
 8016cac:	46a9      	mov	r9, r5
 8016cae:	f04f 0c00 	mov.w	ip, #0
 8016cb2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016cb6:	f8d9 1000 	ldr.w	r1, [r9]
 8016cba:	fa1f fb82 	uxth.w	fp, r2
 8016cbe:	b289      	uxth	r1, r1
 8016cc0:	fb0a 110b 	mla	r1, sl, fp, r1
 8016cc4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016cc8:	f8d9 2000 	ldr.w	r2, [r9]
 8016ccc:	4461      	add	r1, ip
 8016cce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016cd2:	fb0a c20b 	mla	r2, sl, fp, ip
 8016cd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016cda:	b289      	uxth	r1, r1
 8016cdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016ce0:	4577      	cmp	r7, lr
 8016ce2:	f849 1b04 	str.w	r1, [r9], #4
 8016ce6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016cea:	d8e2      	bhi.n	8016cb2 <__multiply+0xb2>
 8016cec:	9a01      	ldr	r2, [sp, #4]
 8016cee:	f845 c002 	str.w	ip, [r5, r2]
 8016cf2:	9a03      	ldr	r2, [sp, #12]
 8016cf4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016cf8:	3304      	adds	r3, #4
 8016cfa:	f1b9 0f00 	cmp.w	r9, #0
 8016cfe:	d020      	beq.n	8016d42 <__multiply+0x142>
 8016d00:	6829      	ldr	r1, [r5, #0]
 8016d02:	f104 0c14 	add.w	ip, r4, #20
 8016d06:	46ae      	mov	lr, r5
 8016d08:	f04f 0a00 	mov.w	sl, #0
 8016d0c:	f8bc b000 	ldrh.w	fp, [ip]
 8016d10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016d14:	fb09 220b 	mla	r2, r9, fp, r2
 8016d18:	4492      	add	sl, r2
 8016d1a:	b289      	uxth	r1, r1
 8016d1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8016d20:	f84e 1b04 	str.w	r1, [lr], #4
 8016d24:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016d28:	f8be 1000 	ldrh.w	r1, [lr]
 8016d2c:	0c12      	lsrs	r2, r2, #16
 8016d2e:	fb09 1102 	mla	r1, r9, r2, r1
 8016d32:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8016d36:	4567      	cmp	r7, ip
 8016d38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016d3c:	d8e6      	bhi.n	8016d0c <__multiply+0x10c>
 8016d3e:	9a01      	ldr	r2, [sp, #4]
 8016d40:	50a9      	str	r1, [r5, r2]
 8016d42:	3504      	adds	r5, #4
 8016d44:	e79a      	b.n	8016c7c <__multiply+0x7c>
 8016d46:	3e01      	subs	r6, #1
 8016d48:	e79c      	b.n	8016c84 <__multiply+0x84>
 8016d4a:	bf00      	nop
 8016d4c:	08018940 	.word	0x08018940
 8016d50:	080189cc 	.word	0x080189cc

08016d54 <__pow5mult>:
 8016d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d58:	4615      	mov	r5, r2
 8016d5a:	f012 0203 	ands.w	r2, r2, #3
 8016d5e:	4606      	mov	r6, r0
 8016d60:	460f      	mov	r7, r1
 8016d62:	d007      	beq.n	8016d74 <__pow5mult+0x20>
 8016d64:	4c25      	ldr	r4, [pc, #148]	; (8016dfc <__pow5mult+0xa8>)
 8016d66:	3a01      	subs	r2, #1
 8016d68:	2300      	movs	r3, #0
 8016d6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016d6e:	f7ff fe51 	bl	8016a14 <__multadd>
 8016d72:	4607      	mov	r7, r0
 8016d74:	10ad      	asrs	r5, r5, #2
 8016d76:	d03d      	beq.n	8016df4 <__pow5mult+0xa0>
 8016d78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016d7a:	b97c      	cbnz	r4, 8016d9c <__pow5mult+0x48>
 8016d7c:	2010      	movs	r0, #16
 8016d7e:	f7ff fdc1 	bl	8016904 <malloc>
 8016d82:	4602      	mov	r2, r0
 8016d84:	6270      	str	r0, [r6, #36]	; 0x24
 8016d86:	b928      	cbnz	r0, 8016d94 <__pow5mult+0x40>
 8016d88:	4b1d      	ldr	r3, [pc, #116]	; (8016e00 <__pow5mult+0xac>)
 8016d8a:	481e      	ldr	r0, [pc, #120]	; (8016e04 <__pow5mult+0xb0>)
 8016d8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016d90:	f000 fc98 	bl	80176c4 <__assert_func>
 8016d94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016d98:	6004      	str	r4, [r0, #0]
 8016d9a:	60c4      	str	r4, [r0, #12]
 8016d9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016da0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016da4:	b94c      	cbnz	r4, 8016dba <__pow5mult+0x66>
 8016da6:	f240 2171 	movw	r1, #625	; 0x271
 8016daa:	4630      	mov	r0, r6
 8016dac:	f7ff ff12 	bl	8016bd4 <__i2b>
 8016db0:	2300      	movs	r3, #0
 8016db2:	f8c8 0008 	str.w	r0, [r8, #8]
 8016db6:	4604      	mov	r4, r0
 8016db8:	6003      	str	r3, [r0, #0]
 8016dba:	f04f 0900 	mov.w	r9, #0
 8016dbe:	07eb      	lsls	r3, r5, #31
 8016dc0:	d50a      	bpl.n	8016dd8 <__pow5mult+0x84>
 8016dc2:	4639      	mov	r1, r7
 8016dc4:	4622      	mov	r2, r4
 8016dc6:	4630      	mov	r0, r6
 8016dc8:	f7ff ff1a 	bl	8016c00 <__multiply>
 8016dcc:	4639      	mov	r1, r7
 8016dce:	4680      	mov	r8, r0
 8016dd0:	4630      	mov	r0, r6
 8016dd2:	f7ff fdfd 	bl	80169d0 <_Bfree>
 8016dd6:	4647      	mov	r7, r8
 8016dd8:	106d      	asrs	r5, r5, #1
 8016dda:	d00b      	beq.n	8016df4 <__pow5mult+0xa0>
 8016ddc:	6820      	ldr	r0, [r4, #0]
 8016dde:	b938      	cbnz	r0, 8016df0 <__pow5mult+0x9c>
 8016de0:	4622      	mov	r2, r4
 8016de2:	4621      	mov	r1, r4
 8016de4:	4630      	mov	r0, r6
 8016de6:	f7ff ff0b 	bl	8016c00 <__multiply>
 8016dea:	6020      	str	r0, [r4, #0]
 8016dec:	f8c0 9000 	str.w	r9, [r0]
 8016df0:	4604      	mov	r4, r0
 8016df2:	e7e4      	b.n	8016dbe <__pow5mult+0x6a>
 8016df4:	4638      	mov	r0, r7
 8016df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016dfa:	bf00      	nop
 8016dfc:	08018b18 	.word	0x08018b18
 8016e00:	080188ce 	.word	0x080188ce
 8016e04:	080189cc 	.word	0x080189cc

08016e08 <__lshift>:
 8016e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e0c:	460c      	mov	r4, r1
 8016e0e:	6849      	ldr	r1, [r1, #4]
 8016e10:	6923      	ldr	r3, [r4, #16]
 8016e12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016e16:	68a3      	ldr	r3, [r4, #8]
 8016e18:	4607      	mov	r7, r0
 8016e1a:	4691      	mov	r9, r2
 8016e1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016e20:	f108 0601 	add.w	r6, r8, #1
 8016e24:	42b3      	cmp	r3, r6
 8016e26:	db0b      	blt.n	8016e40 <__lshift+0x38>
 8016e28:	4638      	mov	r0, r7
 8016e2a:	f7ff fd91 	bl	8016950 <_Balloc>
 8016e2e:	4605      	mov	r5, r0
 8016e30:	b948      	cbnz	r0, 8016e46 <__lshift+0x3e>
 8016e32:	4602      	mov	r2, r0
 8016e34:	4b2a      	ldr	r3, [pc, #168]	; (8016ee0 <__lshift+0xd8>)
 8016e36:	482b      	ldr	r0, [pc, #172]	; (8016ee4 <__lshift+0xdc>)
 8016e38:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016e3c:	f000 fc42 	bl	80176c4 <__assert_func>
 8016e40:	3101      	adds	r1, #1
 8016e42:	005b      	lsls	r3, r3, #1
 8016e44:	e7ee      	b.n	8016e24 <__lshift+0x1c>
 8016e46:	2300      	movs	r3, #0
 8016e48:	f100 0114 	add.w	r1, r0, #20
 8016e4c:	f100 0210 	add.w	r2, r0, #16
 8016e50:	4618      	mov	r0, r3
 8016e52:	4553      	cmp	r3, sl
 8016e54:	db37      	blt.n	8016ec6 <__lshift+0xbe>
 8016e56:	6920      	ldr	r0, [r4, #16]
 8016e58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016e5c:	f104 0314 	add.w	r3, r4, #20
 8016e60:	f019 091f 	ands.w	r9, r9, #31
 8016e64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016e68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016e6c:	d02f      	beq.n	8016ece <__lshift+0xc6>
 8016e6e:	f1c9 0e20 	rsb	lr, r9, #32
 8016e72:	468a      	mov	sl, r1
 8016e74:	f04f 0c00 	mov.w	ip, #0
 8016e78:	681a      	ldr	r2, [r3, #0]
 8016e7a:	fa02 f209 	lsl.w	r2, r2, r9
 8016e7e:	ea42 020c 	orr.w	r2, r2, ip
 8016e82:	f84a 2b04 	str.w	r2, [sl], #4
 8016e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e8a:	4298      	cmp	r0, r3
 8016e8c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8016e90:	d8f2      	bhi.n	8016e78 <__lshift+0x70>
 8016e92:	1b03      	subs	r3, r0, r4
 8016e94:	3b15      	subs	r3, #21
 8016e96:	f023 0303 	bic.w	r3, r3, #3
 8016e9a:	3304      	adds	r3, #4
 8016e9c:	f104 0215 	add.w	r2, r4, #21
 8016ea0:	4290      	cmp	r0, r2
 8016ea2:	bf38      	it	cc
 8016ea4:	2304      	movcc	r3, #4
 8016ea6:	f841 c003 	str.w	ip, [r1, r3]
 8016eaa:	f1bc 0f00 	cmp.w	ip, #0
 8016eae:	d001      	beq.n	8016eb4 <__lshift+0xac>
 8016eb0:	f108 0602 	add.w	r6, r8, #2
 8016eb4:	3e01      	subs	r6, #1
 8016eb6:	4638      	mov	r0, r7
 8016eb8:	612e      	str	r6, [r5, #16]
 8016eba:	4621      	mov	r1, r4
 8016ebc:	f7ff fd88 	bl	80169d0 <_Bfree>
 8016ec0:	4628      	mov	r0, r5
 8016ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ec6:	f842 0f04 	str.w	r0, [r2, #4]!
 8016eca:	3301      	adds	r3, #1
 8016ecc:	e7c1      	b.n	8016e52 <__lshift+0x4a>
 8016ece:	3904      	subs	r1, #4
 8016ed0:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ed4:	f841 2f04 	str.w	r2, [r1, #4]!
 8016ed8:	4298      	cmp	r0, r3
 8016eda:	d8f9      	bhi.n	8016ed0 <__lshift+0xc8>
 8016edc:	e7ea      	b.n	8016eb4 <__lshift+0xac>
 8016ede:	bf00      	nop
 8016ee0:	08018940 	.word	0x08018940
 8016ee4:	080189cc 	.word	0x080189cc

08016ee8 <__mcmp>:
 8016ee8:	b530      	push	{r4, r5, lr}
 8016eea:	6902      	ldr	r2, [r0, #16]
 8016eec:	690c      	ldr	r4, [r1, #16]
 8016eee:	1b12      	subs	r2, r2, r4
 8016ef0:	d10e      	bne.n	8016f10 <__mcmp+0x28>
 8016ef2:	f100 0314 	add.w	r3, r0, #20
 8016ef6:	3114      	adds	r1, #20
 8016ef8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016efc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016f00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016f04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016f08:	42a5      	cmp	r5, r4
 8016f0a:	d003      	beq.n	8016f14 <__mcmp+0x2c>
 8016f0c:	d305      	bcc.n	8016f1a <__mcmp+0x32>
 8016f0e:	2201      	movs	r2, #1
 8016f10:	4610      	mov	r0, r2
 8016f12:	bd30      	pop	{r4, r5, pc}
 8016f14:	4283      	cmp	r3, r0
 8016f16:	d3f3      	bcc.n	8016f00 <__mcmp+0x18>
 8016f18:	e7fa      	b.n	8016f10 <__mcmp+0x28>
 8016f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8016f1e:	e7f7      	b.n	8016f10 <__mcmp+0x28>

08016f20 <__mdiff>:
 8016f20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f24:	460c      	mov	r4, r1
 8016f26:	4606      	mov	r6, r0
 8016f28:	4611      	mov	r1, r2
 8016f2a:	4620      	mov	r0, r4
 8016f2c:	4690      	mov	r8, r2
 8016f2e:	f7ff ffdb 	bl	8016ee8 <__mcmp>
 8016f32:	1e05      	subs	r5, r0, #0
 8016f34:	d110      	bne.n	8016f58 <__mdiff+0x38>
 8016f36:	4629      	mov	r1, r5
 8016f38:	4630      	mov	r0, r6
 8016f3a:	f7ff fd09 	bl	8016950 <_Balloc>
 8016f3e:	b930      	cbnz	r0, 8016f4e <__mdiff+0x2e>
 8016f40:	4b3a      	ldr	r3, [pc, #232]	; (801702c <__mdiff+0x10c>)
 8016f42:	4602      	mov	r2, r0
 8016f44:	f240 2132 	movw	r1, #562	; 0x232
 8016f48:	4839      	ldr	r0, [pc, #228]	; (8017030 <__mdiff+0x110>)
 8016f4a:	f000 fbbb 	bl	80176c4 <__assert_func>
 8016f4e:	2301      	movs	r3, #1
 8016f50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016f54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f58:	bfa4      	itt	ge
 8016f5a:	4643      	movge	r3, r8
 8016f5c:	46a0      	movge	r8, r4
 8016f5e:	4630      	mov	r0, r6
 8016f60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016f64:	bfa6      	itte	ge
 8016f66:	461c      	movge	r4, r3
 8016f68:	2500      	movge	r5, #0
 8016f6a:	2501      	movlt	r5, #1
 8016f6c:	f7ff fcf0 	bl	8016950 <_Balloc>
 8016f70:	b920      	cbnz	r0, 8016f7c <__mdiff+0x5c>
 8016f72:	4b2e      	ldr	r3, [pc, #184]	; (801702c <__mdiff+0x10c>)
 8016f74:	4602      	mov	r2, r0
 8016f76:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016f7a:	e7e5      	b.n	8016f48 <__mdiff+0x28>
 8016f7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016f80:	6926      	ldr	r6, [r4, #16]
 8016f82:	60c5      	str	r5, [r0, #12]
 8016f84:	f104 0914 	add.w	r9, r4, #20
 8016f88:	f108 0514 	add.w	r5, r8, #20
 8016f8c:	f100 0e14 	add.w	lr, r0, #20
 8016f90:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016f94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016f98:	f108 0210 	add.w	r2, r8, #16
 8016f9c:	46f2      	mov	sl, lr
 8016f9e:	2100      	movs	r1, #0
 8016fa0:	f859 3b04 	ldr.w	r3, [r9], #4
 8016fa4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016fa8:	fa1f f883 	uxth.w	r8, r3
 8016fac:	fa11 f18b 	uxtah	r1, r1, fp
 8016fb0:	0c1b      	lsrs	r3, r3, #16
 8016fb2:	eba1 0808 	sub.w	r8, r1, r8
 8016fb6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016fba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016fbe:	fa1f f888 	uxth.w	r8, r8
 8016fc2:	1419      	asrs	r1, r3, #16
 8016fc4:	454e      	cmp	r6, r9
 8016fc6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016fca:	f84a 3b04 	str.w	r3, [sl], #4
 8016fce:	d8e7      	bhi.n	8016fa0 <__mdiff+0x80>
 8016fd0:	1b33      	subs	r3, r6, r4
 8016fd2:	3b15      	subs	r3, #21
 8016fd4:	f023 0303 	bic.w	r3, r3, #3
 8016fd8:	3304      	adds	r3, #4
 8016fda:	3415      	adds	r4, #21
 8016fdc:	42a6      	cmp	r6, r4
 8016fde:	bf38      	it	cc
 8016fe0:	2304      	movcc	r3, #4
 8016fe2:	441d      	add	r5, r3
 8016fe4:	4473      	add	r3, lr
 8016fe6:	469e      	mov	lr, r3
 8016fe8:	462e      	mov	r6, r5
 8016fea:	4566      	cmp	r6, ip
 8016fec:	d30e      	bcc.n	801700c <__mdiff+0xec>
 8016fee:	f10c 0203 	add.w	r2, ip, #3
 8016ff2:	1b52      	subs	r2, r2, r5
 8016ff4:	f022 0203 	bic.w	r2, r2, #3
 8016ff8:	3d03      	subs	r5, #3
 8016ffa:	45ac      	cmp	ip, r5
 8016ffc:	bf38      	it	cc
 8016ffe:	2200      	movcc	r2, #0
 8017000:	441a      	add	r2, r3
 8017002:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8017006:	b17b      	cbz	r3, 8017028 <__mdiff+0x108>
 8017008:	6107      	str	r7, [r0, #16]
 801700a:	e7a3      	b.n	8016f54 <__mdiff+0x34>
 801700c:	f856 8b04 	ldr.w	r8, [r6], #4
 8017010:	fa11 f288 	uxtah	r2, r1, r8
 8017014:	1414      	asrs	r4, r2, #16
 8017016:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801701a:	b292      	uxth	r2, r2
 801701c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017020:	f84e 2b04 	str.w	r2, [lr], #4
 8017024:	1421      	asrs	r1, r4, #16
 8017026:	e7e0      	b.n	8016fea <__mdiff+0xca>
 8017028:	3f01      	subs	r7, #1
 801702a:	e7ea      	b.n	8017002 <__mdiff+0xe2>
 801702c:	08018940 	.word	0x08018940
 8017030:	080189cc 	.word	0x080189cc

08017034 <__ulp>:
 8017034:	b082      	sub	sp, #8
 8017036:	ed8d 0b00 	vstr	d0, [sp]
 801703a:	9b01      	ldr	r3, [sp, #4]
 801703c:	4912      	ldr	r1, [pc, #72]	; (8017088 <__ulp+0x54>)
 801703e:	4019      	ands	r1, r3
 8017040:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8017044:	2900      	cmp	r1, #0
 8017046:	dd05      	ble.n	8017054 <__ulp+0x20>
 8017048:	2200      	movs	r2, #0
 801704a:	460b      	mov	r3, r1
 801704c:	ec43 2b10 	vmov	d0, r2, r3
 8017050:	b002      	add	sp, #8
 8017052:	4770      	bx	lr
 8017054:	4249      	negs	r1, r1
 8017056:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801705a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801705e:	f04f 0200 	mov.w	r2, #0
 8017062:	f04f 0300 	mov.w	r3, #0
 8017066:	da04      	bge.n	8017072 <__ulp+0x3e>
 8017068:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801706c:	fa41 f300 	asr.w	r3, r1, r0
 8017070:	e7ec      	b.n	801704c <__ulp+0x18>
 8017072:	f1a0 0114 	sub.w	r1, r0, #20
 8017076:	291e      	cmp	r1, #30
 8017078:	bfda      	itte	le
 801707a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801707e:	fa20 f101 	lsrle.w	r1, r0, r1
 8017082:	2101      	movgt	r1, #1
 8017084:	460a      	mov	r2, r1
 8017086:	e7e1      	b.n	801704c <__ulp+0x18>
 8017088:	7ff00000 	.word	0x7ff00000

0801708c <__b2d>:
 801708c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801708e:	6905      	ldr	r5, [r0, #16]
 8017090:	f100 0714 	add.w	r7, r0, #20
 8017094:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017098:	1f2e      	subs	r6, r5, #4
 801709a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801709e:	4620      	mov	r0, r4
 80170a0:	f7ff fd48 	bl	8016b34 <__hi0bits>
 80170a4:	f1c0 0320 	rsb	r3, r0, #32
 80170a8:	280a      	cmp	r0, #10
 80170aa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8017128 <__b2d+0x9c>
 80170ae:	600b      	str	r3, [r1, #0]
 80170b0:	dc14      	bgt.n	80170dc <__b2d+0x50>
 80170b2:	f1c0 0e0b 	rsb	lr, r0, #11
 80170b6:	fa24 f10e 	lsr.w	r1, r4, lr
 80170ba:	42b7      	cmp	r7, r6
 80170bc:	ea41 030c 	orr.w	r3, r1, ip
 80170c0:	bf34      	ite	cc
 80170c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80170c6:	2100      	movcs	r1, #0
 80170c8:	3015      	adds	r0, #21
 80170ca:	fa04 f000 	lsl.w	r0, r4, r0
 80170ce:	fa21 f10e 	lsr.w	r1, r1, lr
 80170d2:	ea40 0201 	orr.w	r2, r0, r1
 80170d6:	ec43 2b10 	vmov	d0, r2, r3
 80170da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170dc:	42b7      	cmp	r7, r6
 80170de:	bf3a      	itte	cc
 80170e0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80170e4:	f1a5 0608 	subcc.w	r6, r5, #8
 80170e8:	2100      	movcs	r1, #0
 80170ea:	380b      	subs	r0, #11
 80170ec:	d017      	beq.n	801711e <__b2d+0x92>
 80170ee:	f1c0 0c20 	rsb	ip, r0, #32
 80170f2:	fa04 f500 	lsl.w	r5, r4, r0
 80170f6:	42be      	cmp	r6, r7
 80170f8:	fa21 f40c 	lsr.w	r4, r1, ip
 80170fc:	ea45 0504 	orr.w	r5, r5, r4
 8017100:	bf8c      	ite	hi
 8017102:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017106:	2400      	movls	r4, #0
 8017108:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801710c:	fa01 f000 	lsl.w	r0, r1, r0
 8017110:	fa24 f40c 	lsr.w	r4, r4, ip
 8017114:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017118:	ea40 0204 	orr.w	r2, r0, r4
 801711c:	e7db      	b.n	80170d6 <__b2d+0x4a>
 801711e:	ea44 030c 	orr.w	r3, r4, ip
 8017122:	460a      	mov	r2, r1
 8017124:	e7d7      	b.n	80170d6 <__b2d+0x4a>
 8017126:	bf00      	nop
 8017128:	3ff00000 	.word	0x3ff00000

0801712c <__d2b>:
 801712c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017130:	4689      	mov	r9, r1
 8017132:	2101      	movs	r1, #1
 8017134:	ec57 6b10 	vmov	r6, r7, d0
 8017138:	4690      	mov	r8, r2
 801713a:	f7ff fc09 	bl	8016950 <_Balloc>
 801713e:	4604      	mov	r4, r0
 8017140:	b930      	cbnz	r0, 8017150 <__d2b+0x24>
 8017142:	4602      	mov	r2, r0
 8017144:	4b25      	ldr	r3, [pc, #148]	; (80171dc <__d2b+0xb0>)
 8017146:	4826      	ldr	r0, [pc, #152]	; (80171e0 <__d2b+0xb4>)
 8017148:	f240 310a 	movw	r1, #778	; 0x30a
 801714c:	f000 faba 	bl	80176c4 <__assert_func>
 8017150:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8017154:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017158:	bb35      	cbnz	r5, 80171a8 <__d2b+0x7c>
 801715a:	2e00      	cmp	r6, #0
 801715c:	9301      	str	r3, [sp, #4]
 801715e:	d028      	beq.n	80171b2 <__d2b+0x86>
 8017160:	4668      	mov	r0, sp
 8017162:	9600      	str	r6, [sp, #0]
 8017164:	f7ff fd06 	bl	8016b74 <__lo0bits>
 8017168:	9900      	ldr	r1, [sp, #0]
 801716a:	b300      	cbz	r0, 80171ae <__d2b+0x82>
 801716c:	9a01      	ldr	r2, [sp, #4]
 801716e:	f1c0 0320 	rsb	r3, r0, #32
 8017172:	fa02 f303 	lsl.w	r3, r2, r3
 8017176:	430b      	orrs	r3, r1
 8017178:	40c2      	lsrs	r2, r0
 801717a:	6163      	str	r3, [r4, #20]
 801717c:	9201      	str	r2, [sp, #4]
 801717e:	9b01      	ldr	r3, [sp, #4]
 8017180:	61a3      	str	r3, [r4, #24]
 8017182:	2b00      	cmp	r3, #0
 8017184:	bf14      	ite	ne
 8017186:	2202      	movne	r2, #2
 8017188:	2201      	moveq	r2, #1
 801718a:	6122      	str	r2, [r4, #16]
 801718c:	b1d5      	cbz	r5, 80171c4 <__d2b+0x98>
 801718e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017192:	4405      	add	r5, r0
 8017194:	f8c9 5000 	str.w	r5, [r9]
 8017198:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801719c:	f8c8 0000 	str.w	r0, [r8]
 80171a0:	4620      	mov	r0, r4
 80171a2:	b003      	add	sp, #12
 80171a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80171ac:	e7d5      	b.n	801715a <__d2b+0x2e>
 80171ae:	6161      	str	r1, [r4, #20]
 80171b0:	e7e5      	b.n	801717e <__d2b+0x52>
 80171b2:	a801      	add	r0, sp, #4
 80171b4:	f7ff fcde 	bl	8016b74 <__lo0bits>
 80171b8:	9b01      	ldr	r3, [sp, #4]
 80171ba:	6163      	str	r3, [r4, #20]
 80171bc:	2201      	movs	r2, #1
 80171be:	6122      	str	r2, [r4, #16]
 80171c0:	3020      	adds	r0, #32
 80171c2:	e7e3      	b.n	801718c <__d2b+0x60>
 80171c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80171c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80171cc:	f8c9 0000 	str.w	r0, [r9]
 80171d0:	6918      	ldr	r0, [r3, #16]
 80171d2:	f7ff fcaf 	bl	8016b34 <__hi0bits>
 80171d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80171da:	e7df      	b.n	801719c <__d2b+0x70>
 80171dc:	08018940 	.word	0x08018940
 80171e0:	080189cc 	.word	0x080189cc

080171e4 <__ratio>:
 80171e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171e8:	4688      	mov	r8, r1
 80171ea:	4669      	mov	r1, sp
 80171ec:	4681      	mov	r9, r0
 80171ee:	f7ff ff4d 	bl	801708c <__b2d>
 80171f2:	a901      	add	r1, sp, #4
 80171f4:	4640      	mov	r0, r8
 80171f6:	ec55 4b10 	vmov	r4, r5, d0
 80171fa:	ee10 aa10 	vmov	sl, s0
 80171fe:	f7ff ff45 	bl	801708c <__b2d>
 8017202:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017206:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801720a:	1a59      	subs	r1, r3, r1
 801720c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017210:	1ad3      	subs	r3, r2, r3
 8017212:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8017216:	ec57 6b10 	vmov	r6, r7, d0
 801721a:	2b00      	cmp	r3, #0
 801721c:	bfd6      	itet	le
 801721e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017222:	462a      	movgt	r2, r5
 8017224:	463a      	movle	r2, r7
 8017226:	46ab      	mov	fp, r5
 8017228:	bfd6      	itet	le
 801722a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801722e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8017232:	ee00 3a90 	vmovle	s1, r3
 8017236:	ec4b ab17 	vmov	d7, sl, fp
 801723a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801723e:	b003      	add	sp, #12
 8017240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017244 <__copybits>:
 8017244:	3901      	subs	r1, #1
 8017246:	b570      	push	{r4, r5, r6, lr}
 8017248:	1149      	asrs	r1, r1, #5
 801724a:	6914      	ldr	r4, [r2, #16]
 801724c:	3101      	adds	r1, #1
 801724e:	f102 0314 	add.w	r3, r2, #20
 8017252:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017256:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801725a:	1f05      	subs	r5, r0, #4
 801725c:	42a3      	cmp	r3, r4
 801725e:	d30c      	bcc.n	801727a <__copybits+0x36>
 8017260:	1aa3      	subs	r3, r4, r2
 8017262:	3b11      	subs	r3, #17
 8017264:	f023 0303 	bic.w	r3, r3, #3
 8017268:	3211      	adds	r2, #17
 801726a:	42a2      	cmp	r2, r4
 801726c:	bf88      	it	hi
 801726e:	2300      	movhi	r3, #0
 8017270:	4418      	add	r0, r3
 8017272:	2300      	movs	r3, #0
 8017274:	4288      	cmp	r0, r1
 8017276:	d305      	bcc.n	8017284 <__copybits+0x40>
 8017278:	bd70      	pop	{r4, r5, r6, pc}
 801727a:	f853 6b04 	ldr.w	r6, [r3], #4
 801727e:	f845 6f04 	str.w	r6, [r5, #4]!
 8017282:	e7eb      	b.n	801725c <__copybits+0x18>
 8017284:	f840 3b04 	str.w	r3, [r0], #4
 8017288:	e7f4      	b.n	8017274 <__copybits+0x30>

0801728a <__any_on>:
 801728a:	f100 0214 	add.w	r2, r0, #20
 801728e:	6900      	ldr	r0, [r0, #16]
 8017290:	114b      	asrs	r3, r1, #5
 8017292:	4298      	cmp	r0, r3
 8017294:	b510      	push	{r4, lr}
 8017296:	db11      	blt.n	80172bc <__any_on+0x32>
 8017298:	dd0a      	ble.n	80172b0 <__any_on+0x26>
 801729a:	f011 011f 	ands.w	r1, r1, #31
 801729e:	d007      	beq.n	80172b0 <__any_on+0x26>
 80172a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80172a4:	fa24 f001 	lsr.w	r0, r4, r1
 80172a8:	fa00 f101 	lsl.w	r1, r0, r1
 80172ac:	428c      	cmp	r4, r1
 80172ae:	d10b      	bne.n	80172c8 <__any_on+0x3e>
 80172b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80172b4:	4293      	cmp	r3, r2
 80172b6:	d803      	bhi.n	80172c0 <__any_on+0x36>
 80172b8:	2000      	movs	r0, #0
 80172ba:	bd10      	pop	{r4, pc}
 80172bc:	4603      	mov	r3, r0
 80172be:	e7f7      	b.n	80172b0 <__any_on+0x26>
 80172c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80172c4:	2900      	cmp	r1, #0
 80172c6:	d0f5      	beq.n	80172b4 <__any_on+0x2a>
 80172c8:	2001      	movs	r0, #1
 80172ca:	e7f6      	b.n	80172ba <__any_on+0x30>

080172cc <_calloc_r>:
 80172cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80172ce:	fba1 2402 	umull	r2, r4, r1, r2
 80172d2:	b94c      	cbnz	r4, 80172e8 <_calloc_r+0x1c>
 80172d4:	4611      	mov	r1, r2
 80172d6:	9201      	str	r2, [sp, #4]
 80172d8:	f7fc fab2 	bl	8013840 <_malloc_r>
 80172dc:	9a01      	ldr	r2, [sp, #4]
 80172de:	4605      	mov	r5, r0
 80172e0:	b930      	cbnz	r0, 80172f0 <_calloc_r+0x24>
 80172e2:	4628      	mov	r0, r5
 80172e4:	b003      	add	sp, #12
 80172e6:	bd30      	pop	{r4, r5, pc}
 80172e8:	220c      	movs	r2, #12
 80172ea:	6002      	str	r2, [r0, #0]
 80172ec:	2500      	movs	r5, #0
 80172ee:	e7f8      	b.n	80172e2 <_calloc_r+0x16>
 80172f0:	4621      	mov	r1, r4
 80172f2:	f7fc fa7c 	bl	80137ee <memset>
 80172f6:	e7f4      	b.n	80172e2 <_calloc_r+0x16>

080172f8 <_free_r>:
 80172f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80172fa:	2900      	cmp	r1, #0
 80172fc:	d044      	beq.n	8017388 <_free_r+0x90>
 80172fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017302:	9001      	str	r0, [sp, #4]
 8017304:	2b00      	cmp	r3, #0
 8017306:	f1a1 0404 	sub.w	r4, r1, #4
 801730a:	bfb8      	it	lt
 801730c:	18e4      	addlt	r4, r4, r3
 801730e:	f7ff fb13 	bl	8016938 <__malloc_lock>
 8017312:	4a1e      	ldr	r2, [pc, #120]	; (801738c <_free_r+0x94>)
 8017314:	9801      	ldr	r0, [sp, #4]
 8017316:	6813      	ldr	r3, [r2, #0]
 8017318:	b933      	cbnz	r3, 8017328 <_free_r+0x30>
 801731a:	6063      	str	r3, [r4, #4]
 801731c:	6014      	str	r4, [r2, #0]
 801731e:	b003      	add	sp, #12
 8017320:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017324:	f7ff bb0e 	b.w	8016944 <__malloc_unlock>
 8017328:	42a3      	cmp	r3, r4
 801732a:	d908      	bls.n	801733e <_free_r+0x46>
 801732c:	6825      	ldr	r5, [r4, #0]
 801732e:	1961      	adds	r1, r4, r5
 8017330:	428b      	cmp	r3, r1
 8017332:	bf01      	itttt	eq
 8017334:	6819      	ldreq	r1, [r3, #0]
 8017336:	685b      	ldreq	r3, [r3, #4]
 8017338:	1949      	addeq	r1, r1, r5
 801733a:	6021      	streq	r1, [r4, #0]
 801733c:	e7ed      	b.n	801731a <_free_r+0x22>
 801733e:	461a      	mov	r2, r3
 8017340:	685b      	ldr	r3, [r3, #4]
 8017342:	b10b      	cbz	r3, 8017348 <_free_r+0x50>
 8017344:	42a3      	cmp	r3, r4
 8017346:	d9fa      	bls.n	801733e <_free_r+0x46>
 8017348:	6811      	ldr	r1, [r2, #0]
 801734a:	1855      	adds	r5, r2, r1
 801734c:	42a5      	cmp	r5, r4
 801734e:	d10b      	bne.n	8017368 <_free_r+0x70>
 8017350:	6824      	ldr	r4, [r4, #0]
 8017352:	4421      	add	r1, r4
 8017354:	1854      	adds	r4, r2, r1
 8017356:	42a3      	cmp	r3, r4
 8017358:	6011      	str	r1, [r2, #0]
 801735a:	d1e0      	bne.n	801731e <_free_r+0x26>
 801735c:	681c      	ldr	r4, [r3, #0]
 801735e:	685b      	ldr	r3, [r3, #4]
 8017360:	6053      	str	r3, [r2, #4]
 8017362:	4421      	add	r1, r4
 8017364:	6011      	str	r1, [r2, #0]
 8017366:	e7da      	b.n	801731e <_free_r+0x26>
 8017368:	d902      	bls.n	8017370 <_free_r+0x78>
 801736a:	230c      	movs	r3, #12
 801736c:	6003      	str	r3, [r0, #0]
 801736e:	e7d6      	b.n	801731e <_free_r+0x26>
 8017370:	6825      	ldr	r5, [r4, #0]
 8017372:	1961      	adds	r1, r4, r5
 8017374:	428b      	cmp	r3, r1
 8017376:	bf04      	itt	eq
 8017378:	6819      	ldreq	r1, [r3, #0]
 801737a:	685b      	ldreq	r3, [r3, #4]
 801737c:	6063      	str	r3, [r4, #4]
 801737e:	bf04      	itt	eq
 8017380:	1949      	addeq	r1, r1, r5
 8017382:	6021      	streq	r1, [r4, #0]
 8017384:	6054      	str	r4, [r2, #4]
 8017386:	e7ca      	b.n	801731e <_free_r+0x26>
 8017388:	b003      	add	sp, #12
 801738a:	bd30      	pop	{r4, r5, pc}
 801738c:	200061d8 	.word	0x200061d8

08017390 <__ssputs_r>:
 8017390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017394:	688e      	ldr	r6, [r1, #8]
 8017396:	429e      	cmp	r6, r3
 8017398:	4682      	mov	sl, r0
 801739a:	460c      	mov	r4, r1
 801739c:	4690      	mov	r8, r2
 801739e:	461f      	mov	r7, r3
 80173a0:	d838      	bhi.n	8017414 <__ssputs_r+0x84>
 80173a2:	898a      	ldrh	r2, [r1, #12]
 80173a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80173a8:	d032      	beq.n	8017410 <__ssputs_r+0x80>
 80173aa:	6825      	ldr	r5, [r4, #0]
 80173ac:	6909      	ldr	r1, [r1, #16]
 80173ae:	eba5 0901 	sub.w	r9, r5, r1
 80173b2:	6965      	ldr	r5, [r4, #20]
 80173b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80173b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80173bc:	3301      	adds	r3, #1
 80173be:	444b      	add	r3, r9
 80173c0:	106d      	asrs	r5, r5, #1
 80173c2:	429d      	cmp	r5, r3
 80173c4:	bf38      	it	cc
 80173c6:	461d      	movcc	r5, r3
 80173c8:	0553      	lsls	r3, r2, #21
 80173ca:	d531      	bpl.n	8017430 <__ssputs_r+0xa0>
 80173cc:	4629      	mov	r1, r5
 80173ce:	f7fc fa37 	bl	8013840 <_malloc_r>
 80173d2:	4606      	mov	r6, r0
 80173d4:	b950      	cbnz	r0, 80173ec <__ssputs_r+0x5c>
 80173d6:	230c      	movs	r3, #12
 80173d8:	f8ca 3000 	str.w	r3, [sl]
 80173dc:	89a3      	ldrh	r3, [r4, #12]
 80173de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173e2:	81a3      	strh	r3, [r4, #12]
 80173e4:	f04f 30ff 	mov.w	r0, #4294967295
 80173e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173ec:	6921      	ldr	r1, [r4, #16]
 80173ee:	464a      	mov	r2, r9
 80173f0:	f7fc f9ef 	bl	80137d2 <memcpy>
 80173f4:	89a3      	ldrh	r3, [r4, #12]
 80173f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80173fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80173fe:	81a3      	strh	r3, [r4, #12]
 8017400:	6126      	str	r6, [r4, #16]
 8017402:	6165      	str	r5, [r4, #20]
 8017404:	444e      	add	r6, r9
 8017406:	eba5 0509 	sub.w	r5, r5, r9
 801740a:	6026      	str	r6, [r4, #0]
 801740c:	60a5      	str	r5, [r4, #8]
 801740e:	463e      	mov	r6, r7
 8017410:	42be      	cmp	r6, r7
 8017412:	d900      	bls.n	8017416 <__ssputs_r+0x86>
 8017414:	463e      	mov	r6, r7
 8017416:	6820      	ldr	r0, [r4, #0]
 8017418:	4632      	mov	r2, r6
 801741a:	4641      	mov	r1, r8
 801741c:	f000 f982 	bl	8017724 <memmove>
 8017420:	68a3      	ldr	r3, [r4, #8]
 8017422:	1b9b      	subs	r3, r3, r6
 8017424:	60a3      	str	r3, [r4, #8]
 8017426:	6823      	ldr	r3, [r4, #0]
 8017428:	4433      	add	r3, r6
 801742a:	6023      	str	r3, [r4, #0]
 801742c:	2000      	movs	r0, #0
 801742e:	e7db      	b.n	80173e8 <__ssputs_r+0x58>
 8017430:	462a      	mov	r2, r5
 8017432:	f000 f991 	bl	8017758 <_realloc_r>
 8017436:	4606      	mov	r6, r0
 8017438:	2800      	cmp	r0, #0
 801743a:	d1e1      	bne.n	8017400 <__ssputs_r+0x70>
 801743c:	6921      	ldr	r1, [r4, #16]
 801743e:	4650      	mov	r0, sl
 8017440:	f7ff ff5a 	bl	80172f8 <_free_r>
 8017444:	e7c7      	b.n	80173d6 <__ssputs_r+0x46>
	...

08017448 <_svfiprintf_r>:
 8017448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801744c:	4698      	mov	r8, r3
 801744e:	898b      	ldrh	r3, [r1, #12]
 8017450:	061b      	lsls	r3, r3, #24
 8017452:	b09d      	sub	sp, #116	; 0x74
 8017454:	4607      	mov	r7, r0
 8017456:	460d      	mov	r5, r1
 8017458:	4614      	mov	r4, r2
 801745a:	d50e      	bpl.n	801747a <_svfiprintf_r+0x32>
 801745c:	690b      	ldr	r3, [r1, #16]
 801745e:	b963      	cbnz	r3, 801747a <_svfiprintf_r+0x32>
 8017460:	2140      	movs	r1, #64	; 0x40
 8017462:	f7fc f9ed 	bl	8013840 <_malloc_r>
 8017466:	6028      	str	r0, [r5, #0]
 8017468:	6128      	str	r0, [r5, #16]
 801746a:	b920      	cbnz	r0, 8017476 <_svfiprintf_r+0x2e>
 801746c:	230c      	movs	r3, #12
 801746e:	603b      	str	r3, [r7, #0]
 8017470:	f04f 30ff 	mov.w	r0, #4294967295
 8017474:	e0d1      	b.n	801761a <_svfiprintf_r+0x1d2>
 8017476:	2340      	movs	r3, #64	; 0x40
 8017478:	616b      	str	r3, [r5, #20]
 801747a:	2300      	movs	r3, #0
 801747c:	9309      	str	r3, [sp, #36]	; 0x24
 801747e:	2320      	movs	r3, #32
 8017480:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017484:	f8cd 800c 	str.w	r8, [sp, #12]
 8017488:	2330      	movs	r3, #48	; 0x30
 801748a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017634 <_svfiprintf_r+0x1ec>
 801748e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017492:	f04f 0901 	mov.w	r9, #1
 8017496:	4623      	mov	r3, r4
 8017498:	469a      	mov	sl, r3
 801749a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801749e:	b10a      	cbz	r2, 80174a4 <_svfiprintf_r+0x5c>
 80174a0:	2a25      	cmp	r2, #37	; 0x25
 80174a2:	d1f9      	bne.n	8017498 <_svfiprintf_r+0x50>
 80174a4:	ebba 0b04 	subs.w	fp, sl, r4
 80174a8:	d00b      	beq.n	80174c2 <_svfiprintf_r+0x7a>
 80174aa:	465b      	mov	r3, fp
 80174ac:	4622      	mov	r2, r4
 80174ae:	4629      	mov	r1, r5
 80174b0:	4638      	mov	r0, r7
 80174b2:	f7ff ff6d 	bl	8017390 <__ssputs_r>
 80174b6:	3001      	adds	r0, #1
 80174b8:	f000 80aa 	beq.w	8017610 <_svfiprintf_r+0x1c8>
 80174bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80174be:	445a      	add	r2, fp
 80174c0:	9209      	str	r2, [sp, #36]	; 0x24
 80174c2:	f89a 3000 	ldrb.w	r3, [sl]
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	f000 80a2 	beq.w	8017610 <_svfiprintf_r+0x1c8>
 80174cc:	2300      	movs	r3, #0
 80174ce:	f04f 32ff 	mov.w	r2, #4294967295
 80174d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80174d6:	f10a 0a01 	add.w	sl, sl, #1
 80174da:	9304      	str	r3, [sp, #16]
 80174dc:	9307      	str	r3, [sp, #28]
 80174de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80174e2:	931a      	str	r3, [sp, #104]	; 0x68
 80174e4:	4654      	mov	r4, sl
 80174e6:	2205      	movs	r2, #5
 80174e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174ec:	4851      	ldr	r0, [pc, #324]	; (8017634 <_svfiprintf_r+0x1ec>)
 80174ee:	f7e8 feaf 	bl	8000250 <memchr>
 80174f2:	9a04      	ldr	r2, [sp, #16]
 80174f4:	b9d8      	cbnz	r0, 801752e <_svfiprintf_r+0xe6>
 80174f6:	06d0      	lsls	r0, r2, #27
 80174f8:	bf44      	itt	mi
 80174fa:	2320      	movmi	r3, #32
 80174fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017500:	0711      	lsls	r1, r2, #28
 8017502:	bf44      	itt	mi
 8017504:	232b      	movmi	r3, #43	; 0x2b
 8017506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801750a:	f89a 3000 	ldrb.w	r3, [sl]
 801750e:	2b2a      	cmp	r3, #42	; 0x2a
 8017510:	d015      	beq.n	801753e <_svfiprintf_r+0xf6>
 8017512:	9a07      	ldr	r2, [sp, #28]
 8017514:	4654      	mov	r4, sl
 8017516:	2000      	movs	r0, #0
 8017518:	f04f 0c0a 	mov.w	ip, #10
 801751c:	4621      	mov	r1, r4
 801751e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017522:	3b30      	subs	r3, #48	; 0x30
 8017524:	2b09      	cmp	r3, #9
 8017526:	d94e      	bls.n	80175c6 <_svfiprintf_r+0x17e>
 8017528:	b1b0      	cbz	r0, 8017558 <_svfiprintf_r+0x110>
 801752a:	9207      	str	r2, [sp, #28]
 801752c:	e014      	b.n	8017558 <_svfiprintf_r+0x110>
 801752e:	eba0 0308 	sub.w	r3, r0, r8
 8017532:	fa09 f303 	lsl.w	r3, r9, r3
 8017536:	4313      	orrs	r3, r2
 8017538:	9304      	str	r3, [sp, #16]
 801753a:	46a2      	mov	sl, r4
 801753c:	e7d2      	b.n	80174e4 <_svfiprintf_r+0x9c>
 801753e:	9b03      	ldr	r3, [sp, #12]
 8017540:	1d19      	adds	r1, r3, #4
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	9103      	str	r1, [sp, #12]
 8017546:	2b00      	cmp	r3, #0
 8017548:	bfbb      	ittet	lt
 801754a:	425b      	neglt	r3, r3
 801754c:	f042 0202 	orrlt.w	r2, r2, #2
 8017550:	9307      	strge	r3, [sp, #28]
 8017552:	9307      	strlt	r3, [sp, #28]
 8017554:	bfb8      	it	lt
 8017556:	9204      	strlt	r2, [sp, #16]
 8017558:	7823      	ldrb	r3, [r4, #0]
 801755a:	2b2e      	cmp	r3, #46	; 0x2e
 801755c:	d10c      	bne.n	8017578 <_svfiprintf_r+0x130>
 801755e:	7863      	ldrb	r3, [r4, #1]
 8017560:	2b2a      	cmp	r3, #42	; 0x2a
 8017562:	d135      	bne.n	80175d0 <_svfiprintf_r+0x188>
 8017564:	9b03      	ldr	r3, [sp, #12]
 8017566:	1d1a      	adds	r2, r3, #4
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	9203      	str	r2, [sp, #12]
 801756c:	2b00      	cmp	r3, #0
 801756e:	bfb8      	it	lt
 8017570:	f04f 33ff 	movlt.w	r3, #4294967295
 8017574:	3402      	adds	r4, #2
 8017576:	9305      	str	r3, [sp, #20]
 8017578:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017644 <_svfiprintf_r+0x1fc>
 801757c:	7821      	ldrb	r1, [r4, #0]
 801757e:	2203      	movs	r2, #3
 8017580:	4650      	mov	r0, sl
 8017582:	f7e8 fe65 	bl	8000250 <memchr>
 8017586:	b140      	cbz	r0, 801759a <_svfiprintf_r+0x152>
 8017588:	2340      	movs	r3, #64	; 0x40
 801758a:	eba0 000a 	sub.w	r0, r0, sl
 801758e:	fa03 f000 	lsl.w	r0, r3, r0
 8017592:	9b04      	ldr	r3, [sp, #16]
 8017594:	4303      	orrs	r3, r0
 8017596:	3401      	adds	r4, #1
 8017598:	9304      	str	r3, [sp, #16]
 801759a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801759e:	4826      	ldr	r0, [pc, #152]	; (8017638 <_svfiprintf_r+0x1f0>)
 80175a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80175a4:	2206      	movs	r2, #6
 80175a6:	f7e8 fe53 	bl	8000250 <memchr>
 80175aa:	2800      	cmp	r0, #0
 80175ac:	d038      	beq.n	8017620 <_svfiprintf_r+0x1d8>
 80175ae:	4b23      	ldr	r3, [pc, #140]	; (801763c <_svfiprintf_r+0x1f4>)
 80175b0:	bb1b      	cbnz	r3, 80175fa <_svfiprintf_r+0x1b2>
 80175b2:	9b03      	ldr	r3, [sp, #12]
 80175b4:	3307      	adds	r3, #7
 80175b6:	f023 0307 	bic.w	r3, r3, #7
 80175ba:	3308      	adds	r3, #8
 80175bc:	9303      	str	r3, [sp, #12]
 80175be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175c0:	4433      	add	r3, r6
 80175c2:	9309      	str	r3, [sp, #36]	; 0x24
 80175c4:	e767      	b.n	8017496 <_svfiprintf_r+0x4e>
 80175c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80175ca:	460c      	mov	r4, r1
 80175cc:	2001      	movs	r0, #1
 80175ce:	e7a5      	b.n	801751c <_svfiprintf_r+0xd4>
 80175d0:	2300      	movs	r3, #0
 80175d2:	3401      	adds	r4, #1
 80175d4:	9305      	str	r3, [sp, #20]
 80175d6:	4619      	mov	r1, r3
 80175d8:	f04f 0c0a 	mov.w	ip, #10
 80175dc:	4620      	mov	r0, r4
 80175de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80175e2:	3a30      	subs	r2, #48	; 0x30
 80175e4:	2a09      	cmp	r2, #9
 80175e6:	d903      	bls.n	80175f0 <_svfiprintf_r+0x1a8>
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d0c5      	beq.n	8017578 <_svfiprintf_r+0x130>
 80175ec:	9105      	str	r1, [sp, #20]
 80175ee:	e7c3      	b.n	8017578 <_svfiprintf_r+0x130>
 80175f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80175f4:	4604      	mov	r4, r0
 80175f6:	2301      	movs	r3, #1
 80175f8:	e7f0      	b.n	80175dc <_svfiprintf_r+0x194>
 80175fa:	ab03      	add	r3, sp, #12
 80175fc:	9300      	str	r3, [sp, #0]
 80175fe:	462a      	mov	r2, r5
 8017600:	4b0f      	ldr	r3, [pc, #60]	; (8017640 <_svfiprintf_r+0x1f8>)
 8017602:	a904      	add	r1, sp, #16
 8017604:	4638      	mov	r0, r7
 8017606:	f7fc fa1f 	bl	8013a48 <_printf_float>
 801760a:	1c42      	adds	r2, r0, #1
 801760c:	4606      	mov	r6, r0
 801760e:	d1d6      	bne.n	80175be <_svfiprintf_r+0x176>
 8017610:	89ab      	ldrh	r3, [r5, #12]
 8017612:	065b      	lsls	r3, r3, #25
 8017614:	f53f af2c 	bmi.w	8017470 <_svfiprintf_r+0x28>
 8017618:	9809      	ldr	r0, [sp, #36]	; 0x24
 801761a:	b01d      	add	sp, #116	; 0x74
 801761c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017620:	ab03      	add	r3, sp, #12
 8017622:	9300      	str	r3, [sp, #0]
 8017624:	462a      	mov	r2, r5
 8017626:	4b06      	ldr	r3, [pc, #24]	; (8017640 <_svfiprintf_r+0x1f8>)
 8017628:	a904      	add	r1, sp, #16
 801762a:	4638      	mov	r0, r7
 801762c:	f7fc fc98 	bl	8013f60 <_printf_i>
 8017630:	e7eb      	b.n	801760a <_svfiprintf_r+0x1c2>
 8017632:	bf00      	nop
 8017634:	08018b24 	.word	0x08018b24
 8017638:	08018b2e 	.word	0x08018b2e
 801763c:	08013a49 	.word	0x08013a49
 8017640:	08017391 	.word	0x08017391
 8017644:	08018b2a 	.word	0x08018b2a

08017648 <_read_r>:
 8017648:	b538      	push	{r3, r4, r5, lr}
 801764a:	4d07      	ldr	r5, [pc, #28]	; (8017668 <_read_r+0x20>)
 801764c:	4604      	mov	r4, r0
 801764e:	4608      	mov	r0, r1
 8017650:	4611      	mov	r1, r2
 8017652:	2200      	movs	r2, #0
 8017654:	602a      	str	r2, [r5, #0]
 8017656:	461a      	mov	r2, r3
 8017658:	f7ef f9c8 	bl	80069ec <_read>
 801765c:	1c43      	adds	r3, r0, #1
 801765e:	d102      	bne.n	8017666 <_read_r+0x1e>
 8017660:	682b      	ldr	r3, [r5, #0]
 8017662:	b103      	cbz	r3, 8017666 <_read_r+0x1e>
 8017664:	6023      	str	r3, [r4, #0]
 8017666:	bd38      	pop	{r3, r4, r5, pc}
 8017668:	200061e0 	.word	0x200061e0
 801766c:	00000000 	.word	0x00000000

08017670 <nan>:
 8017670:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017678 <nan+0x8>
 8017674:	4770      	bx	lr
 8017676:	bf00      	nop
 8017678:	00000000 	.word	0x00000000
 801767c:	7ff80000 	.word	0x7ff80000

08017680 <strncmp>:
 8017680:	b510      	push	{r4, lr}
 8017682:	b17a      	cbz	r2, 80176a4 <strncmp+0x24>
 8017684:	4603      	mov	r3, r0
 8017686:	3901      	subs	r1, #1
 8017688:	1884      	adds	r4, r0, r2
 801768a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801768e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017692:	4290      	cmp	r0, r2
 8017694:	d101      	bne.n	801769a <strncmp+0x1a>
 8017696:	42a3      	cmp	r3, r4
 8017698:	d101      	bne.n	801769e <strncmp+0x1e>
 801769a:	1a80      	subs	r0, r0, r2
 801769c:	bd10      	pop	{r4, pc}
 801769e:	2800      	cmp	r0, #0
 80176a0:	d1f3      	bne.n	801768a <strncmp+0xa>
 80176a2:	e7fa      	b.n	801769a <strncmp+0x1a>
 80176a4:	4610      	mov	r0, r2
 80176a6:	e7f9      	b.n	801769c <strncmp+0x1c>

080176a8 <__ascii_wctomb>:
 80176a8:	b149      	cbz	r1, 80176be <__ascii_wctomb+0x16>
 80176aa:	2aff      	cmp	r2, #255	; 0xff
 80176ac:	bf85      	ittet	hi
 80176ae:	238a      	movhi	r3, #138	; 0x8a
 80176b0:	6003      	strhi	r3, [r0, #0]
 80176b2:	700a      	strbls	r2, [r1, #0]
 80176b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80176b8:	bf98      	it	ls
 80176ba:	2001      	movls	r0, #1
 80176bc:	4770      	bx	lr
 80176be:	4608      	mov	r0, r1
 80176c0:	4770      	bx	lr
	...

080176c4 <__assert_func>:
 80176c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80176c6:	4614      	mov	r4, r2
 80176c8:	461a      	mov	r2, r3
 80176ca:	4b09      	ldr	r3, [pc, #36]	; (80176f0 <__assert_func+0x2c>)
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	4605      	mov	r5, r0
 80176d0:	68d8      	ldr	r0, [r3, #12]
 80176d2:	b14c      	cbz	r4, 80176e8 <__assert_func+0x24>
 80176d4:	4b07      	ldr	r3, [pc, #28]	; (80176f4 <__assert_func+0x30>)
 80176d6:	9100      	str	r1, [sp, #0]
 80176d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80176dc:	4906      	ldr	r1, [pc, #24]	; (80176f8 <__assert_func+0x34>)
 80176de:	462b      	mov	r3, r5
 80176e0:	f000 f80e 	bl	8017700 <fiprintf>
 80176e4:	f000 fa80 	bl	8017be8 <abort>
 80176e8:	4b04      	ldr	r3, [pc, #16]	; (80176fc <__assert_func+0x38>)
 80176ea:	461c      	mov	r4, r3
 80176ec:	e7f3      	b.n	80176d6 <__assert_func+0x12>
 80176ee:	bf00      	nop
 80176f0:	200001c0 	.word	0x200001c0
 80176f4:	08018b35 	.word	0x08018b35
 80176f8:	08018b42 	.word	0x08018b42
 80176fc:	08018b70 	.word	0x08018b70

08017700 <fiprintf>:
 8017700:	b40e      	push	{r1, r2, r3}
 8017702:	b503      	push	{r0, r1, lr}
 8017704:	4601      	mov	r1, r0
 8017706:	ab03      	add	r3, sp, #12
 8017708:	4805      	ldr	r0, [pc, #20]	; (8017720 <fiprintf+0x20>)
 801770a:	f853 2b04 	ldr.w	r2, [r3], #4
 801770e:	6800      	ldr	r0, [r0, #0]
 8017710:	9301      	str	r3, [sp, #4]
 8017712:	f000 f879 	bl	8017808 <_vfiprintf_r>
 8017716:	b002      	add	sp, #8
 8017718:	f85d eb04 	ldr.w	lr, [sp], #4
 801771c:	b003      	add	sp, #12
 801771e:	4770      	bx	lr
 8017720:	200001c0 	.word	0x200001c0

08017724 <memmove>:
 8017724:	4288      	cmp	r0, r1
 8017726:	b510      	push	{r4, lr}
 8017728:	eb01 0402 	add.w	r4, r1, r2
 801772c:	d902      	bls.n	8017734 <memmove+0x10>
 801772e:	4284      	cmp	r4, r0
 8017730:	4623      	mov	r3, r4
 8017732:	d807      	bhi.n	8017744 <memmove+0x20>
 8017734:	1e43      	subs	r3, r0, #1
 8017736:	42a1      	cmp	r1, r4
 8017738:	d008      	beq.n	801774c <memmove+0x28>
 801773a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801773e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017742:	e7f8      	b.n	8017736 <memmove+0x12>
 8017744:	4402      	add	r2, r0
 8017746:	4601      	mov	r1, r0
 8017748:	428a      	cmp	r2, r1
 801774a:	d100      	bne.n	801774e <memmove+0x2a>
 801774c:	bd10      	pop	{r4, pc}
 801774e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017752:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017756:	e7f7      	b.n	8017748 <memmove+0x24>

08017758 <_realloc_r>:
 8017758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801775c:	4680      	mov	r8, r0
 801775e:	4614      	mov	r4, r2
 8017760:	460e      	mov	r6, r1
 8017762:	b921      	cbnz	r1, 801776e <_realloc_r+0x16>
 8017764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017768:	4611      	mov	r1, r2
 801776a:	f7fc b869 	b.w	8013840 <_malloc_r>
 801776e:	b92a      	cbnz	r2, 801777c <_realloc_r+0x24>
 8017770:	f7ff fdc2 	bl	80172f8 <_free_r>
 8017774:	4625      	mov	r5, r4
 8017776:	4628      	mov	r0, r5
 8017778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801777c:	f000 faa0 	bl	8017cc0 <_malloc_usable_size_r>
 8017780:	4284      	cmp	r4, r0
 8017782:	4607      	mov	r7, r0
 8017784:	d802      	bhi.n	801778c <_realloc_r+0x34>
 8017786:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801778a:	d812      	bhi.n	80177b2 <_realloc_r+0x5a>
 801778c:	4621      	mov	r1, r4
 801778e:	4640      	mov	r0, r8
 8017790:	f7fc f856 	bl	8013840 <_malloc_r>
 8017794:	4605      	mov	r5, r0
 8017796:	2800      	cmp	r0, #0
 8017798:	d0ed      	beq.n	8017776 <_realloc_r+0x1e>
 801779a:	42bc      	cmp	r4, r7
 801779c:	4622      	mov	r2, r4
 801779e:	4631      	mov	r1, r6
 80177a0:	bf28      	it	cs
 80177a2:	463a      	movcs	r2, r7
 80177a4:	f7fc f815 	bl	80137d2 <memcpy>
 80177a8:	4631      	mov	r1, r6
 80177aa:	4640      	mov	r0, r8
 80177ac:	f7ff fda4 	bl	80172f8 <_free_r>
 80177b0:	e7e1      	b.n	8017776 <_realloc_r+0x1e>
 80177b2:	4635      	mov	r5, r6
 80177b4:	e7df      	b.n	8017776 <_realloc_r+0x1e>

080177b6 <__sfputc_r>:
 80177b6:	6893      	ldr	r3, [r2, #8]
 80177b8:	3b01      	subs	r3, #1
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	b410      	push	{r4}
 80177be:	6093      	str	r3, [r2, #8]
 80177c0:	da08      	bge.n	80177d4 <__sfputc_r+0x1e>
 80177c2:	6994      	ldr	r4, [r2, #24]
 80177c4:	42a3      	cmp	r3, r4
 80177c6:	db01      	blt.n	80177cc <__sfputc_r+0x16>
 80177c8:	290a      	cmp	r1, #10
 80177ca:	d103      	bne.n	80177d4 <__sfputc_r+0x1e>
 80177cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177d0:	f000 b94a 	b.w	8017a68 <__swbuf_r>
 80177d4:	6813      	ldr	r3, [r2, #0]
 80177d6:	1c58      	adds	r0, r3, #1
 80177d8:	6010      	str	r0, [r2, #0]
 80177da:	7019      	strb	r1, [r3, #0]
 80177dc:	4608      	mov	r0, r1
 80177de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177e2:	4770      	bx	lr

080177e4 <__sfputs_r>:
 80177e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177e6:	4606      	mov	r6, r0
 80177e8:	460f      	mov	r7, r1
 80177ea:	4614      	mov	r4, r2
 80177ec:	18d5      	adds	r5, r2, r3
 80177ee:	42ac      	cmp	r4, r5
 80177f0:	d101      	bne.n	80177f6 <__sfputs_r+0x12>
 80177f2:	2000      	movs	r0, #0
 80177f4:	e007      	b.n	8017806 <__sfputs_r+0x22>
 80177f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177fa:	463a      	mov	r2, r7
 80177fc:	4630      	mov	r0, r6
 80177fe:	f7ff ffda 	bl	80177b6 <__sfputc_r>
 8017802:	1c43      	adds	r3, r0, #1
 8017804:	d1f3      	bne.n	80177ee <__sfputs_r+0xa>
 8017806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017808 <_vfiprintf_r>:
 8017808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801780c:	460d      	mov	r5, r1
 801780e:	b09d      	sub	sp, #116	; 0x74
 8017810:	4614      	mov	r4, r2
 8017812:	4698      	mov	r8, r3
 8017814:	4606      	mov	r6, r0
 8017816:	b118      	cbz	r0, 8017820 <_vfiprintf_r+0x18>
 8017818:	6983      	ldr	r3, [r0, #24]
 801781a:	b90b      	cbnz	r3, 8017820 <_vfiprintf_r+0x18>
 801781c:	f7fb ff14 	bl	8013648 <__sinit>
 8017820:	4b89      	ldr	r3, [pc, #548]	; (8017a48 <_vfiprintf_r+0x240>)
 8017822:	429d      	cmp	r5, r3
 8017824:	d11b      	bne.n	801785e <_vfiprintf_r+0x56>
 8017826:	6875      	ldr	r5, [r6, #4]
 8017828:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801782a:	07d9      	lsls	r1, r3, #31
 801782c:	d405      	bmi.n	801783a <_vfiprintf_r+0x32>
 801782e:	89ab      	ldrh	r3, [r5, #12]
 8017830:	059a      	lsls	r2, r3, #22
 8017832:	d402      	bmi.n	801783a <_vfiprintf_r+0x32>
 8017834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017836:	f7fb ffca 	bl	80137ce <__retarget_lock_acquire_recursive>
 801783a:	89ab      	ldrh	r3, [r5, #12]
 801783c:	071b      	lsls	r3, r3, #28
 801783e:	d501      	bpl.n	8017844 <_vfiprintf_r+0x3c>
 8017840:	692b      	ldr	r3, [r5, #16]
 8017842:	b9eb      	cbnz	r3, 8017880 <_vfiprintf_r+0x78>
 8017844:	4629      	mov	r1, r5
 8017846:	4630      	mov	r0, r6
 8017848:	f000 f960 	bl	8017b0c <__swsetup_r>
 801784c:	b1c0      	cbz	r0, 8017880 <_vfiprintf_r+0x78>
 801784e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017850:	07dc      	lsls	r4, r3, #31
 8017852:	d50e      	bpl.n	8017872 <_vfiprintf_r+0x6a>
 8017854:	f04f 30ff 	mov.w	r0, #4294967295
 8017858:	b01d      	add	sp, #116	; 0x74
 801785a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801785e:	4b7b      	ldr	r3, [pc, #492]	; (8017a4c <_vfiprintf_r+0x244>)
 8017860:	429d      	cmp	r5, r3
 8017862:	d101      	bne.n	8017868 <_vfiprintf_r+0x60>
 8017864:	68b5      	ldr	r5, [r6, #8]
 8017866:	e7df      	b.n	8017828 <_vfiprintf_r+0x20>
 8017868:	4b79      	ldr	r3, [pc, #484]	; (8017a50 <_vfiprintf_r+0x248>)
 801786a:	429d      	cmp	r5, r3
 801786c:	bf08      	it	eq
 801786e:	68f5      	ldreq	r5, [r6, #12]
 8017870:	e7da      	b.n	8017828 <_vfiprintf_r+0x20>
 8017872:	89ab      	ldrh	r3, [r5, #12]
 8017874:	0598      	lsls	r0, r3, #22
 8017876:	d4ed      	bmi.n	8017854 <_vfiprintf_r+0x4c>
 8017878:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801787a:	f7fb ffa9 	bl	80137d0 <__retarget_lock_release_recursive>
 801787e:	e7e9      	b.n	8017854 <_vfiprintf_r+0x4c>
 8017880:	2300      	movs	r3, #0
 8017882:	9309      	str	r3, [sp, #36]	; 0x24
 8017884:	2320      	movs	r3, #32
 8017886:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801788a:	f8cd 800c 	str.w	r8, [sp, #12]
 801788e:	2330      	movs	r3, #48	; 0x30
 8017890:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017a54 <_vfiprintf_r+0x24c>
 8017894:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017898:	f04f 0901 	mov.w	r9, #1
 801789c:	4623      	mov	r3, r4
 801789e:	469a      	mov	sl, r3
 80178a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80178a4:	b10a      	cbz	r2, 80178aa <_vfiprintf_r+0xa2>
 80178a6:	2a25      	cmp	r2, #37	; 0x25
 80178a8:	d1f9      	bne.n	801789e <_vfiprintf_r+0x96>
 80178aa:	ebba 0b04 	subs.w	fp, sl, r4
 80178ae:	d00b      	beq.n	80178c8 <_vfiprintf_r+0xc0>
 80178b0:	465b      	mov	r3, fp
 80178b2:	4622      	mov	r2, r4
 80178b4:	4629      	mov	r1, r5
 80178b6:	4630      	mov	r0, r6
 80178b8:	f7ff ff94 	bl	80177e4 <__sfputs_r>
 80178bc:	3001      	adds	r0, #1
 80178be:	f000 80aa 	beq.w	8017a16 <_vfiprintf_r+0x20e>
 80178c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80178c4:	445a      	add	r2, fp
 80178c6:	9209      	str	r2, [sp, #36]	; 0x24
 80178c8:	f89a 3000 	ldrb.w	r3, [sl]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	f000 80a2 	beq.w	8017a16 <_vfiprintf_r+0x20e>
 80178d2:	2300      	movs	r3, #0
 80178d4:	f04f 32ff 	mov.w	r2, #4294967295
 80178d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80178dc:	f10a 0a01 	add.w	sl, sl, #1
 80178e0:	9304      	str	r3, [sp, #16]
 80178e2:	9307      	str	r3, [sp, #28]
 80178e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80178e8:	931a      	str	r3, [sp, #104]	; 0x68
 80178ea:	4654      	mov	r4, sl
 80178ec:	2205      	movs	r2, #5
 80178ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178f2:	4858      	ldr	r0, [pc, #352]	; (8017a54 <_vfiprintf_r+0x24c>)
 80178f4:	f7e8 fcac 	bl	8000250 <memchr>
 80178f8:	9a04      	ldr	r2, [sp, #16]
 80178fa:	b9d8      	cbnz	r0, 8017934 <_vfiprintf_r+0x12c>
 80178fc:	06d1      	lsls	r1, r2, #27
 80178fe:	bf44      	itt	mi
 8017900:	2320      	movmi	r3, #32
 8017902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017906:	0713      	lsls	r3, r2, #28
 8017908:	bf44      	itt	mi
 801790a:	232b      	movmi	r3, #43	; 0x2b
 801790c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017910:	f89a 3000 	ldrb.w	r3, [sl]
 8017914:	2b2a      	cmp	r3, #42	; 0x2a
 8017916:	d015      	beq.n	8017944 <_vfiprintf_r+0x13c>
 8017918:	9a07      	ldr	r2, [sp, #28]
 801791a:	4654      	mov	r4, sl
 801791c:	2000      	movs	r0, #0
 801791e:	f04f 0c0a 	mov.w	ip, #10
 8017922:	4621      	mov	r1, r4
 8017924:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017928:	3b30      	subs	r3, #48	; 0x30
 801792a:	2b09      	cmp	r3, #9
 801792c:	d94e      	bls.n	80179cc <_vfiprintf_r+0x1c4>
 801792e:	b1b0      	cbz	r0, 801795e <_vfiprintf_r+0x156>
 8017930:	9207      	str	r2, [sp, #28]
 8017932:	e014      	b.n	801795e <_vfiprintf_r+0x156>
 8017934:	eba0 0308 	sub.w	r3, r0, r8
 8017938:	fa09 f303 	lsl.w	r3, r9, r3
 801793c:	4313      	orrs	r3, r2
 801793e:	9304      	str	r3, [sp, #16]
 8017940:	46a2      	mov	sl, r4
 8017942:	e7d2      	b.n	80178ea <_vfiprintf_r+0xe2>
 8017944:	9b03      	ldr	r3, [sp, #12]
 8017946:	1d19      	adds	r1, r3, #4
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	9103      	str	r1, [sp, #12]
 801794c:	2b00      	cmp	r3, #0
 801794e:	bfbb      	ittet	lt
 8017950:	425b      	neglt	r3, r3
 8017952:	f042 0202 	orrlt.w	r2, r2, #2
 8017956:	9307      	strge	r3, [sp, #28]
 8017958:	9307      	strlt	r3, [sp, #28]
 801795a:	bfb8      	it	lt
 801795c:	9204      	strlt	r2, [sp, #16]
 801795e:	7823      	ldrb	r3, [r4, #0]
 8017960:	2b2e      	cmp	r3, #46	; 0x2e
 8017962:	d10c      	bne.n	801797e <_vfiprintf_r+0x176>
 8017964:	7863      	ldrb	r3, [r4, #1]
 8017966:	2b2a      	cmp	r3, #42	; 0x2a
 8017968:	d135      	bne.n	80179d6 <_vfiprintf_r+0x1ce>
 801796a:	9b03      	ldr	r3, [sp, #12]
 801796c:	1d1a      	adds	r2, r3, #4
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	9203      	str	r2, [sp, #12]
 8017972:	2b00      	cmp	r3, #0
 8017974:	bfb8      	it	lt
 8017976:	f04f 33ff 	movlt.w	r3, #4294967295
 801797a:	3402      	adds	r4, #2
 801797c:	9305      	str	r3, [sp, #20]
 801797e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017a64 <_vfiprintf_r+0x25c>
 8017982:	7821      	ldrb	r1, [r4, #0]
 8017984:	2203      	movs	r2, #3
 8017986:	4650      	mov	r0, sl
 8017988:	f7e8 fc62 	bl	8000250 <memchr>
 801798c:	b140      	cbz	r0, 80179a0 <_vfiprintf_r+0x198>
 801798e:	2340      	movs	r3, #64	; 0x40
 8017990:	eba0 000a 	sub.w	r0, r0, sl
 8017994:	fa03 f000 	lsl.w	r0, r3, r0
 8017998:	9b04      	ldr	r3, [sp, #16]
 801799a:	4303      	orrs	r3, r0
 801799c:	3401      	adds	r4, #1
 801799e:	9304      	str	r3, [sp, #16]
 80179a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179a4:	482c      	ldr	r0, [pc, #176]	; (8017a58 <_vfiprintf_r+0x250>)
 80179a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80179aa:	2206      	movs	r2, #6
 80179ac:	f7e8 fc50 	bl	8000250 <memchr>
 80179b0:	2800      	cmp	r0, #0
 80179b2:	d03f      	beq.n	8017a34 <_vfiprintf_r+0x22c>
 80179b4:	4b29      	ldr	r3, [pc, #164]	; (8017a5c <_vfiprintf_r+0x254>)
 80179b6:	bb1b      	cbnz	r3, 8017a00 <_vfiprintf_r+0x1f8>
 80179b8:	9b03      	ldr	r3, [sp, #12]
 80179ba:	3307      	adds	r3, #7
 80179bc:	f023 0307 	bic.w	r3, r3, #7
 80179c0:	3308      	adds	r3, #8
 80179c2:	9303      	str	r3, [sp, #12]
 80179c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179c6:	443b      	add	r3, r7
 80179c8:	9309      	str	r3, [sp, #36]	; 0x24
 80179ca:	e767      	b.n	801789c <_vfiprintf_r+0x94>
 80179cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80179d0:	460c      	mov	r4, r1
 80179d2:	2001      	movs	r0, #1
 80179d4:	e7a5      	b.n	8017922 <_vfiprintf_r+0x11a>
 80179d6:	2300      	movs	r3, #0
 80179d8:	3401      	adds	r4, #1
 80179da:	9305      	str	r3, [sp, #20]
 80179dc:	4619      	mov	r1, r3
 80179de:	f04f 0c0a 	mov.w	ip, #10
 80179e2:	4620      	mov	r0, r4
 80179e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80179e8:	3a30      	subs	r2, #48	; 0x30
 80179ea:	2a09      	cmp	r2, #9
 80179ec:	d903      	bls.n	80179f6 <_vfiprintf_r+0x1ee>
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d0c5      	beq.n	801797e <_vfiprintf_r+0x176>
 80179f2:	9105      	str	r1, [sp, #20]
 80179f4:	e7c3      	b.n	801797e <_vfiprintf_r+0x176>
 80179f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80179fa:	4604      	mov	r4, r0
 80179fc:	2301      	movs	r3, #1
 80179fe:	e7f0      	b.n	80179e2 <_vfiprintf_r+0x1da>
 8017a00:	ab03      	add	r3, sp, #12
 8017a02:	9300      	str	r3, [sp, #0]
 8017a04:	462a      	mov	r2, r5
 8017a06:	4b16      	ldr	r3, [pc, #88]	; (8017a60 <_vfiprintf_r+0x258>)
 8017a08:	a904      	add	r1, sp, #16
 8017a0a:	4630      	mov	r0, r6
 8017a0c:	f7fc f81c 	bl	8013a48 <_printf_float>
 8017a10:	4607      	mov	r7, r0
 8017a12:	1c78      	adds	r0, r7, #1
 8017a14:	d1d6      	bne.n	80179c4 <_vfiprintf_r+0x1bc>
 8017a16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017a18:	07d9      	lsls	r1, r3, #31
 8017a1a:	d405      	bmi.n	8017a28 <_vfiprintf_r+0x220>
 8017a1c:	89ab      	ldrh	r3, [r5, #12]
 8017a1e:	059a      	lsls	r2, r3, #22
 8017a20:	d402      	bmi.n	8017a28 <_vfiprintf_r+0x220>
 8017a22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a24:	f7fb fed4 	bl	80137d0 <__retarget_lock_release_recursive>
 8017a28:	89ab      	ldrh	r3, [r5, #12]
 8017a2a:	065b      	lsls	r3, r3, #25
 8017a2c:	f53f af12 	bmi.w	8017854 <_vfiprintf_r+0x4c>
 8017a30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017a32:	e711      	b.n	8017858 <_vfiprintf_r+0x50>
 8017a34:	ab03      	add	r3, sp, #12
 8017a36:	9300      	str	r3, [sp, #0]
 8017a38:	462a      	mov	r2, r5
 8017a3a:	4b09      	ldr	r3, [pc, #36]	; (8017a60 <_vfiprintf_r+0x258>)
 8017a3c:	a904      	add	r1, sp, #16
 8017a3e:	4630      	mov	r0, r6
 8017a40:	f7fc fa8e 	bl	8013f60 <_printf_i>
 8017a44:	e7e4      	b.n	8017a10 <_vfiprintf_r+0x208>
 8017a46:	bf00      	nop
 8017a48:	080186f0 	.word	0x080186f0
 8017a4c:	08018710 	.word	0x08018710
 8017a50:	080186d0 	.word	0x080186d0
 8017a54:	08018b24 	.word	0x08018b24
 8017a58:	08018b2e 	.word	0x08018b2e
 8017a5c:	08013a49 	.word	0x08013a49
 8017a60:	080177e5 	.word	0x080177e5
 8017a64:	08018b2a 	.word	0x08018b2a

08017a68 <__swbuf_r>:
 8017a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a6a:	460e      	mov	r6, r1
 8017a6c:	4614      	mov	r4, r2
 8017a6e:	4605      	mov	r5, r0
 8017a70:	b118      	cbz	r0, 8017a7a <__swbuf_r+0x12>
 8017a72:	6983      	ldr	r3, [r0, #24]
 8017a74:	b90b      	cbnz	r3, 8017a7a <__swbuf_r+0x12>
 8017a76:	f7fb fde7 	bl	8013648 <__sinit>
 8017a7a:	4b21      	ldr	r3, [pc, #132]	; (8017b00 <__swbuf_r+0x98>)
 8017a7c:	429c      	cmp	r4, r3
 8017a7e:	d12b      	bne.n	8017ad8 <__swbuf_r+0x70>
 8017a80:	686c      	ldr	r4, [r5, #4]
 8017a82:	69a3      	ldr	r3, [r4, #24]
 8017a84:	60a3      	str	r3, [r4, #8]
 8017a86:	89a3      	ldrh	r3, [r4, #12]
 8017a88:	071a      	lsls	r2, r3, #28
 8017a8a:	d52f      	bpl.n	8017aec <__swbuf_r+0x84>
 8017a8c:	6923      	ldr	r3, [r4, #16]
 8017a8e:	b36b      	cbz	r3, 8017aec <__swbuf_r+0x84>
 8017a90:	6923      	ldr	r3, [r4, #16]
 8017a92:	6820      	ldr	r0, [r4, #0]
 8017a94:	1ac0      	subs	r0, r0, r3
 8017a96:	6963      	ldr	r3, [r4, #20]
 8017a98:	b2f6      	uxtb	r6, r6
 8017a9a:	4283      	cmp	r3, r0
 8017a9c:	4637      	mov	r7, r6
 8017a9e:	dc04      	bgt.n	8017aaa <__swbuf_r+0x42>
 8017aa0:	4621      	mov	r1, r4
 8017aa2:	4628      	mov	r0, r5
 8017aa4:	f7fe fb6c 	bl	8016180 <_fflush_r>
 8017aa8:	bb30      	cbnz	r0, 8017af8 <__swbuf_r+0x90>
 8017aaa:	68a3      	ldr	r3, [r4, #8]
 8017aac:	3b01      	subs	r3, #1
 8017aae:	60a3      	str	r3, [r4, #8]
 8017ab0:	6823      	ldr	r3, [r4, #0]
 8017ab2:	1c5a      	adds	r2, r3, #1
 8017ab4:	6022      	str	r2, [r4, #0]
 8017ab6:	701e      	strb	r6, [r3, #0]
 8017ab8:	6963      	ldr	r3, [r4, #20]
 8017aba:	3001      	adds	r0, #1
 8017abc:	4283      	cmp	r3, r0
 8017abe:	d004      	beq.n	8017aca <__swbuf_r+0x62>
 8017ac0:	89a3      	ldrh	r3, [r4, #12]
 8017ac2:	07db      	lsls	r3, r3, #31
 8017ac4:	d506      	bpl.n	8017ad4 <__swbuf_r+0x6c>
 8017ac6:	2e0a      	cmp	r6, #10
 8017ac8:	d104      	bne.n	8017ad4 <__swbuf_r+0x6c>
 8017aca:	4621      	mov	r1, r4
 8017acc:	4628      	mov	r0, r5
 8017ace:	f7fe fb57 	bl	8016180 <_fflush_r>
 8017ad2:	b988      	cbnz	r0, 8017af8 <__swbuf_r+0x90>
 8017ad4:	4638      	mov	r0, r7
 8017ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ad8:	4b0a      	ldr	r3, [pc, #40]	; (8017b04 <__swbuf_r+0x9c>)
 8017ada:	429c      	cmp	r4, r3
 8017adc:	d101      	bne.n	8017ae2 <__swbuf_r+0x7a>
 8017ade:	68ac      	ldr	r4, [r5, #8]
 8017ae0:	e7cf      	b.n	8017a82 <__swbuf_r+0x1a>
 8017ae2:	4b09      	ldr	r3, [pc, #36]	; (8017b08 <__swbuf_r+0xa0>)
 8017ae4:	429c      	cmp	r4, r3
 8017ae6:	bf08      	it	eq
 8017ae8:	68ec      	ldreq	r4, [r5, #12]
 8017aea:	e7ca      	b.n	8017a82 <__swbuf_r+0x1a>
 8017aec:	4621      	mov	r1, r4
 8017aee:	4628      	mov	r0, r5
 8017af0:	f000 f80c 	bl	8017b0c <__swsetup_r>
 8017af4:	2800      	cmp	r0, #0
 8017af6:	d0cb      	beq.n	8017a90 <__swbuf_r+0x28>
 8017af8:	f04f 37ff 	mov.w	r7, #4294967295
 8017afc:	e7ea      	b.n	8017ad4 <__swbuf_r+0x6c>
 8017afe:	bf00      	nop
 8017b00:	080186f0 	.word	0x080186f0
 8017b04:	08018710 	.word	0x08018710
 8017b08:	080186d0 	.word	0x080186d0

08017b0c <__swsetup_r>:
 8017b0c:	4b32      	ldr	r3, [pc, #200]	; (8017bd8 <__swsetup_r+0xcc>)
 8017b0e:	b570      	push	{r4, r5, r6, lr}
 8017b10:	681d      	ldr	r5, [r3, #0]
 8017b12:	4606      	mov	r6, r0
 8017b14:	460c      	mov	r4, r1
 8017b16:	b125      	cbz	r5, 8017b22 <__swsetup_r+0x16>
 8017b18:	69ab      	ldr	r3, [r5, #24]
 8017b1a:	b913      	cbnz	r3, 8017b22 <__swsetup_r+0x16>
 8017b1c:	4628      	mov	r0, r5
 8017b1e:	f7fb fd93 	bl	8013648 <__sinit>
 8017b22:	4b2e      	ldr	r3, [pc, #184]	; (8017bdc <__swsetup_r+0xd0>)
 8017b24:	429c      	cmp	r4, r3
 8017b26:	d10f      	bne.n	8017b48 <__swsetup_r+0x3c>
 8017b28:	686c      	ldr	r4, [r5, #4]
 8017b2a:	89a3      	ldrh	r3, [r4, #12]
 8017b2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017b30:	0719      	lsls	r1, r3, #28
 8017b32:	d42c      	bmi.n	8017b8e <__swsetup_r+0x82>
 8017b34:	06dd      	lsls	r5, r3, #27
 8017b36:	d411      	bmi.n	8017b5c <__swsetup_r+0x50>
 8017b38:	2309      	movs	r3, #9
 8017b3a:	6033      	str	r3, [r6, #0]
 8017b3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017b40:	81a3      	strh	r3, [r4, #12]
 8017b42:	f04f 30ff 	mov.w	r0, #4294967295
 8017b46:	e03e      	b.n	8017bc6 <__swsetup_r+0xba>
 8017b48:	4b25      	ldr	r3, [pc, #148]	; (8017be0 <__swsetup_r+0xd4>)
 8017b4a:	429c      	cmp	r4, r3
 8017b4c:	d101      	bne.n	8017b52 <__swsetup_r+0x46>
 8017b4e:	68ac      	ldr	r4, [r5, #8]
 8017b50:	e7eb      	b.n	8017b2a <__swsetup_r+0x1e>
 8017b52:	4b24      	ldr	r3, [pc, #144]	; (8017be4 <__swsetup_r+0xd8>)
 8017b54:	429c      	cmp	r4, r3
 8017b56:	bf08      	it	eq
 8017b58:	68ec      	ldreq	r4, [r5, #12]
 8017b5a:	e7e6      	b.n	8017b2a <__swsetup_r+0x1e>
 8017b5c:	0758      	lsls	r0, r3, #29
 8017b5e:	d512      	bpl.n	8017b86 <__swsetup_r+0x7a>
 8017b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017b62:	b141      	cbz	r1, 8017b76 <__swsetup_r+0x6a>
 8017b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017b68:	4299      	cmp	r1, r3
 8017b6a:	d002      	beq.n	8017b72 <__swsetup_r+0x66>
 8017b6c:	4630      	mov	r0, r6
 8017b6e:	f7ff fbc3 	bl	80172f8 <_free_r>
 8017b72:	2300      	movs	r3, #0
 8017b74:	6363      	str	r3, [r4, #52]	; 0x34
 8017b76:	89a3      	ldrh	r3, [r4, #12]
 8017b78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017b7c:	81a3      	strh	r3, [r4, #12]
 8017b7e:	2300      	movs	r3, #0
 8017b80:	6063      	str	r3, [r4, #4]
 8017b82:	6923      	ldr	r3, [r4, #16]
 8017b84:	6023      	str	r3, [r4, #0]
 8017b86:	89a3      	ldrh	r3, [r4, #12]
 8017b88:	f043 0308 	orr.w	r3, r3, #8
 8017b8c:	81a3      	strh	r3, [r4, #12]
 8017b8e:	6923      	ldr	r3, [r4, #16]
 8017b90:	b94b      	cbnz	r3, 8017ba6 <__swsetup_r+0x9a>
 8017b92:	89a3      	ldrh	r3, [r4, #12]
 8017b94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017b9c:	d003      	beq.n	8017ba6 <__swsetup_r+0x9a>
 8017b9e:	4621      	mov	r1, r4
 8017ba0:	4630      	mov	r0, r6
 8017ba2:	f000 f84d 	bl	8017c40 <__smakebuf_r>
 8017ba6:	89a0      	ldrh	r0, [r4, #12]
 8017ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017bac:	f010 0301 	ands.w	r3, r0, #1
 8017bb0:	d00a      	beq.n	8017bc8 <__swsetup_r+0xbc>
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	60a3      	str	r3, [r4, #8]
 8017bb6:	6963      	ldr	r3, [r4, #20]
 8017bb8:	425b      	negs	r3, r3
 8017bba:	61a3      	str	r3, [r4, #24]
 8017bbc:	6923      	ldr	r3, [r4, #16]
 8017bbe:	b943      	cbnz	r3, 8017bd2 <__swsetup_r+0xc6>
 8017bc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017bc4:	d1ba      	bne.n	8017b3c <__swsetup_r+0x30>
 8017bc6:	bd70      	pop	{r4, r5, r6, pc}
 8017bc8:	0781      	lsls	r1, r0, #30
 8017bca:	bf58      	it	pl
 8017bcc:	6963      	ldrpl	r3, [r4, #20]
 8017bce:	60a3      	str	r3, [r4, #8]
 8017bd0:	e7f4      	b.n	8017bbc <__swsetup_r+0xb0>
 8017bd2:	2000      	movs	r0, #0
 8017bd4:	e7f7      	b.n	8017bc6 <__swsetup_r+0xba>
 8017bd6:	bf00      	nop
 8017bd8:	200001c0 	.word	0x200001c0
 8017bdc:	080186f0 	.word	0x080186f0
 8017be0:	08018710 	.word	0x08018710
 8017be4:	080186d0 	.word	0x080186d0

08017be8 <abort>:
 8017be8:	b508      	push	{r3, lr}
 8017bea:	2006      	movs	r0, #6
 8017bec:	f000 f898 	bl	8017d20 <raise>
 8017bf0:	2001      	movs	r0, #1
 8017bf2:	f7ee fef1 	bl	80069d8 <_exit>

08017bf6 <__swhatbuf_r>:
 8017bf6:	b570      	push	{r4, r5, r6, lr}
 8017bf8:	460e      	mov	r6, r1
 8017bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bfe:	2900      	cmp	r1, #0
 8017c00:	b096      	sub	sp, #88	; 0x58
 8017c02:	4614      	mov	r4, r2
 8017c04:	461d      	mov	r5, r3
 8017c06:	da08      	bge.n	8017c1a <__swhatbuf_r+0x24>
 8017c08:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017c0c:	2200      	movs	r2, #0
 8017c0e:	602a      	str	r2, [r5, #0]
 8017c10:	061a      	lsls	r2, r3, #24
 8017c12:	d410      	bmi.n	8017c36 <__swhatbuf_r+0x40>
 8017c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017c18:	e00e      	b.n	8017c38 <__swhatbuf_r+0x42>
 8017c1a:	466a      	mov	r2, sp
 8017c1c:	f000 f89c 	bl	8017d58 <_fstat_r>
 8017c20:	2800      	cmp	r0, #0
 8017c22:	dbf1      	blt.n	8017c08 <__swhatbuf_r+0x12>
 8017c24:	9a01      	ldr	r2, [sp, #4]
 8017c26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017c2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017c2e:	425a      	negs	r2, r3
 8017c30:	415a      	adcs	r2, r3
 8017c32:	602a      	str	r2, [r5, #0]
 8017c34:	e7ee      	b.n	8017c14 <__swhatbuf_r+0x1e>
 8017c36:	2340      	movs	r3, #64	; 0x40
 8017c38:	2000      	movs	r0, #0
 8017c3a:	6023      	str	r3, [r4, #0]
 8017c3c:	b016      	add	sp, #88	; 0x58
 8017c3e:	bd70      	pop	{r4, r5, r6, pc}

08017c40 <__smakebuf_r>:
 8017c40:	898b      	ldrh	r3, [r1, #12]
 8017c42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017c44:	079d      	lsls	r5, r3, #30
 8017c46:	4606      	mov	r6, r0
 8017c48:	460c      	mov	r4, r1
 8017c4a:	d507      	bpl.n	8017c5c <__smakebuf_r+0x1c>
 8017c4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017c50:	6023      	str	r3, [r4, #0]
 8017c52:	6123      	str	r3, [r4, #16]
 8017c54:	2301      	movs	r3, #1
 8017c56:	6163      	str	r3, [r4, #20]
 8017c58:	b002      	add	sp, #8
 8017c5a:	bd70      	pop	{r4, r5, r6, pc}
 8017c5c:	ab01      	add	r3, sp, #4
 8017c5e:	466a      	mov	r2, sp
 8017c60:	f7ff ffc9 	bl	8017bf6 <__swhatbuf_r>
 8017c64:	9900      	ldr	r1, [sp, #0]
 8017c66:	4605      	mov	r5, r0
 8017c68:	4630      	mov	r0, r6
 8017c6a:	f7fb fde9 	bl	8013840 <_malloc_r>
 8017c6e:	b948      	cbnz	r0, 8017c84 <__smakebuf_r+0x44>
 8017c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c74:	059a      	lsls	r2, r3, #22
 8017c76:	d4ef      	bmi.n	8017c58 <__smakebuf_r+0x18>
 8017c78:	f023 0303 	bic.w	r3, r3, #3
 8017c7c:	f043 0302 	orr.w	r3, r3, #2
 8017c80:	81a3      	strh	r3, [r4, #12]
 8017c82:	e7e3      	b.n	8017c4c <__smakebuf_r+0xc>
 8017c84:	4b0d      	ldr	r3, [pc, #52]	; (8017cbc <__smakebuf_r+0x7c>)
 8017c86:	62b3      	str	r3, [r6, #40]	; 0x28
 8017c88:	89a3      	ldrh	r3, [r4, #12]
 8017c8a:	6020      	str	r0, [r4, #0]
 8017c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017c90:	81a3      	strh	r3, [r4, #12]
 8017c92:	9b00      	ldr	r3, [sp, #0]
 8017c94:	6163      	str	r3, [r4, #20]
 8017c96:	9b01      	ldr	r3, [sp, #4]
 8017c98:	6120      	str	r0, [r4, #16]
 8017c9a:	b15b      	cbz	r3, 8017cb4 <__smakebuf_r+0x74>
 8017c9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ca0:	4630      	mov	r0, r6
 8017ca2:	f000 f86b 	bl	8017d7c <_isatty_r>
 8017ca6:	b128      	cbz	r0, 8017cb4 <__smakebuf_r+0x74>
 8017ca8:	89a3      	ldrh	r3, [r4, #12]
 8017caa:	f023 0303 	bic.w	r3, r3, #3
 8017cae:	f043 0301 	orr.w	r3, r3, #1
 8017cb2:	81a3      	strh	r3, [r4, #12]
 8017cb4:	89a0      	ldrh	r0, [r4, #12]
 8017cb6:	4305      	orrs	r5, r0
 8017cb8:	81a5      	strh	r5, [r4, #12]
 8017cba:	e7cd      	b.n	8017c58 <__smakebuf_r+0x18>
 8017cbc:	080135e1 	.word	0x080135e1

08017cc0 <_malloc_usable_size_r>:
 8017cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017cc4:	1f18      	subs	r0, r3, #4
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	bfbc      	itt	lt
 8017cca:	580b      	ldrlt	r3, [r1, r0]
 8017ccc:	18c0      	addlt	r0, r0, r3
 8017cce:	4770      	bx	lr

08017cd0 <_raise_r>:
 8017cd0:	291f      	cmp	r1, #31
 8017cd2:	b538      	push	{r3, r4, r5, lr}
 8017cd4:	4604      	mov	r4, r0
 8017cd6:	460d      	mov	r5, r1
 8017cd8:	d904      	bls.n	8017ce4 <_raise_r+0x14>
 8017cda:	2316      	movs	r3, #22
 8017cdc:	6003      	str	r3, [r0, #0]
 8017cde:	f04f 30ff 	mov.w	r0, #4294967295
 8017ce2:	bd38      	pop	{r3, r4, r5, pc}
 8017ce4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017ce6:	b112      	cbz	r2, 8017cee <_raise_r+0x1e>
 8017ce8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017cec:	b94b      	cbnz	r3, 8017d02 <_raise_r+0x32>
 8017cee:	4620      	mov	r0, r4
 8017cf0:	f000 f830 	bl	8017d54 <_getpid_r>
 8017cf4:	462a      	mov	r2, r5
 8017cf6:	4601      	mov	r1, r0
 8017cf8:	4620      	mov	r0, r4
 8017cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017cfe:	f000 b817 	b.w	8017d30 <_kill_r>
 8017d02:	2b01      	cmp	r3, #1
 8017d04:	d00a      	beq.n	8017d1c <_raise_r+0x4c>
 8017d06:	1c59      	adds	r1, r3, #1
 8017d08:	d103      	bne.n	8017d12 <_raise_r+0x42>
 8017d0a:	2316      	movs	r3, #22
 8017d0c:	6003      	str	r3, [r0, #0]
 8017d0e:	2001      	movs	r0, #1
 8017d10:	e7e7      	b.n	8017ce2 <_raise_r+0x12>
 8017d12:	2400      	movs	r4, #0
 8017d14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017d18:	4628      	mov	r0, r5
 8017d1a:	4798      	blx	r3
 8017d1c:	2000      	movs	r0, #0
 8017d1e:	e7e0      	b.n	8017ce2 <_raise_r+0x12>

08017d20 <raise>:
 8017d20:	4b02      	ldr	r3, [pc, #8]	; (8017d2c <raise+0xc>)
 8017d22:	4601      	mov	r1, r0
 8017d24:	6818      	ldr	r0, [r3, #0]
 8017d26:	f7ff bfd3 	b.w	8017cd0 <_raise_r>
 8017d2a:	bf00      	nop
 8017d2c:	200001c0 	.word	0x200001c0

08017d30 <_kill_r>:
 8017d30:	b538      	push	{r3, r4, r5, lr}
 8017d32:	4d07      	ldr	r5, [pc, #28]	; (8017d50 <_kill_r+0x20>)
 8017d34:	2300      	movs	r3, #0
 8017d36:	4604      	mov	r4, r0
 8017d38:	4608      	mov	r0, r1
 8017d3a:	4611      	mov	r1, r2
 8017d3c:	602b      	str	r3, [r5, #0]
 8017d3e:	f7ee fe3b 	bl	80069b8 <_kill>
 8017d42:	1c43      	adds	r3, r0, #1
 8017d44:	d102      	bne.n	8017d4c <_kill_r+0x1c>
 8017d46:	682b      	ldr	r3, [r5, #0]
 8017d48:	b103      	cbz	r3, 8017d4c <_kill_r+0x1c>
 8017d4a:	6023      	str	r3, [r4, #0]
 8017d4c:	bd38      	pop	{r3, r4, r5, pc}
 8017d4e:	bf00      	nop
 8017d50:	200061e0 	.word	0x200061e0

08017d54 <_getpid_r>:
 8017d54:	f7ee be28 	b.w	80069a8 <_getpid>

08017d58 <_fstat_r>:
 8017d58:	b538      	push	{r3, r4, r5, lr}
 8017d5a:	4d07      	ldr	r5, [pc, #28]	; (8017d78 <_fstat_r+0x20>)
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	4604      	mov	r4, r0
 8017d60:	4608      	mov	r0, r1
 8017d62:	4611      	mov	r1, r2
 8017d64:	602b      	str	r3, [r5, #0]
 8017d66:	f7ee fe86 	bl	8006a76 <_fstat>
 8017d6a:	1c43      	adds	r3, r0, #1
 8017d6c:	d102      	bne.n	8017d74 <_fstat_r+0x1c>
 8017d6e:	682b      	ldr	r3, [r5, #0]
 8017d70:	b103      	cbz	r3, 8017d74 <_fstat_r+0x1c>
 8017d72:	6023      	str	r3, [r4, #0]
 8017d74:	bd38      	pop	{r3, r4, r5, pc}
 8017d76:	bf00      	nop
 8017d78:	200061e0 	.word	0x200061e0

08017d7c <_isatty_r>:
 8017d7c:	b538      	push	{r3, r4, r5, lr}
 8017d7e:	4d06      	ldr	r5, [pc, #24]	; (8017d98 <_isatty_r+0x1c>)
 8017d80:	2300      	movs	r3, #0
 8017d82:	4604      	mov	r4, r0
 8017d84:	4608      	mov	r0, r1
 8017d86:	602b      	str	r3, [r5, #0]
 8017d88:	f7ee fe85 	bl	8006a96 <_isatty>
 8017d8c:	1c43      	adds	r3, r0, #1
 8017d8e:	d102      	bne.n	8017d96 <_isatty_r+0x1a>
 8017d90:	682b      	ldr	r3, [r5, #0]
 8017d92:	b103      	cbz	r3, 8017d96 <_isatty_r+0x1a>
 8017d94:	6023      	str	r3, [r4, #0]
 8017d96:	bd38      	pop	{r3, r4, r5, pc}
 8017d98:	200061e0 	.word	0x200061e0

08017d9c <lrintf>:
 8017d9c:	ee10 3a10 	vmov	r3, s0
 8017da0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8017da4:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8017da8:	281e      	cmp	r0, #30
 8017daa:	b082      	sub	sp, #8
 8017dac:	dc2e      	bgt.n	8017e0c <lrintf+0x70>
 8017dae:	1c41      	adds	r1, r0, #1
 8017db0:	da02      	bge.n	8017db8 <lrintf+0x1c>
 8017db2:	2000      	movs	r0, #0
 8017db4:	b002      	add	sp, #8
 8017db6:	4770      	bx	lr
 8017db8:	2816      	cmp	r0, #22
 8017dba:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8017dbe:	dd09      	ble.n	8017dd4 <lrintf+0x38>
 8017dc0:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8017dc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8017dc8:	3a96      	subs	r2, #150	; 0x96
 8017dca:	4090      	lsls	r0, r2
 8017dcc:	2900      	cmp	r1, #0
 8017dce:	d0f1      	beq.n	8017db4 <lrintf+0x18>
 8017dd0:	4240      	negs	r0, r0
 8017dd2:	e7ef      	b.n	8017db4 <lrintf+0x18>
 8017dd4:	4b10      	ldr	r3, [pc, #64]	; (8017e18 <lrintf+0x7c>)
 8017dd6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8017dda:	ed93 7a00 	vldr	s14, [r3]
 8017dde:	ee37 0a00 	vadd.f32	s0, s14, s0
 8017de2:	ed8d 0a01 	vstr	s0, [sp, #4]
 8017de6:	eddd 7a01 	vldr	s15, [sp, #4]
 8017dea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017dee:	ee17 3a90 	vmov	r3, s15
 8017df2:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8017df6:	d0dc      	beq.n	8017db2 <lrintf+0x16>
 8017df8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8017dfc:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8017e00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8017e04:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8017e08:	40d8      	lsrs	r0, r3
 8017e0a:	e7df      	b.n	8017dcc <lrintf+0x30>
 8017e0c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8017e10:	ee17 0a90 	vmov	r0, s15
 8017e14:	e7ce      	b.n	8017db4 <lrintf+0x18>
 8017e16:	bf00      	nop
 8017e18:	08018b74 	.word	0x08018b74

08017e1c <checkint>:
 8017e1c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8017e20:	2b7e      	cmp	r3, #126	; 0x7e
 8017e22:	dd10      	ble.n	8017e46 <checkint+0x2a>
 8017e24:	2b96      	cmp	r3, #150	; 0x96
 8017e26:	dc0c      	bgt.n	8017e42 <checkint+0x26>
 8017e28:	2201      	movs	r2, #1
 8017e2a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8017e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8017e32:	1e5a      	subs	r2, r3, #1
 8017e34:	4202      	tst	r2, r0
 8017e36:	d106      	bne.n	8017e46 <checkint+0x2a>
 8017e38:	4203      	tst	r3, r0
 8017e3a:	bf0c      	ite	eq
 8017e3c:	2002      	moveq	r0, #2
 8017e3e:	2001      	movne	r0, #1
 8017e40:	4770      	bx	lr
 8017e42:	2002      	movs	r0, #2
 8017e44:	4770      	bx	lr
 8017e46:	2000      	movs	r0, #0
 8017e48:	4770      	bx	lr
 8017e4a:	0000      	movs	r0, r0
 8017e4c:	0000      	movs	r0, r0
	...

08017e50 <powf>:
 8017e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017e52:	ee10 1a10 	vmov	r1, s0
 8017e56:	ee10 4a90 	vmov	r4, s1
 8017e5a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8017e5e:	0062      	lsls	r2, r4, #1
 8017e60:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8017e64:	eef0 7a40 	vmov.f32	s15, s0
 8017e68:	f102 30ff 	add.w	r0, r2, #4294967295
 8017e6c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8017e70:	d252      	bcs.n	8017f18 <powf+0xc8>
 8017e72:	4298      	cmp	r0, r3
 8017e74:	d252      	bcs.n	8017f1c <powf+0xcc>
 8017e76:	2000      	movs	r0, #0
 8017e78:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8017e7c:	4ca0      	ldr	r4, [pc, #640]	; (8018100 <powf+0x2b0>)
 8017e7e:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8017e82:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8017e86:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 8017e8a:	0dd2      	lsrs	r2, r2, #23
 8017e8c:	05d2      	lsls	r2, r2, #23
 8017e8e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8017e92:	1a8b      	subs	r3, r1, r2
 8017e94:	ed95 6b00 	vldr	d6, [r5]
 8017e98:	ee07 3a90 	vmov	s15, r3
 8017e9c:	15d2      	asrs	r2, r2, #23
 8017e9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017ea2:	eea6 5b07 	vfma.f64	d5, d6, d7
 8017ea6:	ed95 6b02 	vldr	d6, [r5, #8]
 8017eaa:	ee25 2b05 	vmul.f64	d2, d5, d5
 8017eae:	ee22 1b02 	vmul.f64	d1, d2, d2
 8017eb2:	ee07 2a90 	vmov	s15, r2
 8017eb6:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 8017eba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017ebe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017ec2:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 8017ec6:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 8017eca:	eea5 3b06 	vfma.f64	d3, d5, d6
 8017ece:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 8017ed2:	eea5 6b04 	vfma.f64	d6, d5, d4
 8017ed6:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 8017eda:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8017ede:	eea5 7b04 	vfma.f64	d7, d5, d4
 8017ee2:	eea2 7b06 	vfma.f64	d7, d2, d6
 8017ee6:	eea3 7b01 	vfma.f64	d7, d3, d1
 8017eea:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017eee:	ee10 3a90 	vmov	r3, s1
 8017ef2:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8017ef6:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8017efa:	429a      	cmp	r2, r3
 8017efc:	f0c0 80b1 	bcc.w	8018062 <powf+0x212>
 8017f00:	ed9f 7b77 	vldr	d7, [pc, #476]	; 80180e0 <powf+0x290>
 8017f04:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f0c:	dd79      	ble.n	8018002 <powf+0x1b2>
 8017f0e:	b003      	add	sp, #12
 8017f10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017f14:	f000 b940 	b.w	8018198 <__math_oflowf>
 8017f18:	4298      	cmp	r0, r3
 8017f1a:	d32d      	bcc.n	8017f78 <powf+0x128>
 8017f1c:	b952      	cbnz	r2, 8017f34 <powf+0xe4>
 8017f1e:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8017f22:	005b      	lsls	r3, r3, #1
 8017f24:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8017f28:	f240 80c9 	bls.w	80180be <powf+0x26e>
 8017f2c:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8017f30:	b003      	add	sp, #12
 8017f32:	bd30      	pop	{r4, r5, pc}
 8017f34:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8017f38:	d105      	bne.n	8017f46 <powf+0xf6>
 8017f3a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8017f3e:	0064      	lsls	r4, r4, #1
 8017f40:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8017f44:	e7f0      	b.n	8017f28 <powf+0xd8>
 8017f46:	004b      	lsls	r3, r1, #1
 8017f48:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8017f4c:	d8ee      	bhi.n	8017f2c <powf+0xdc>
 8017f4e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8017f52:	d1eb      	bne.n	8017f2c <powf+0xdc>
 8017f54:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8017f58:	f000 80b1 	beq.w	80180be <powf+0x26e>
 8017f5c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8017f60:	ea6f 0404 	mvn.w	r4, r4
 8017f64:	bf34      	ite	cc
 8017f66:	2300      	movcc	r3, #0
 8017f68:	2301      	movcs	r3, #1
 8017f6a:	0fe4      	lsrs	r4, r4, #31
 8017f6c:	42a3      	cmp	r3, r4
 8017f6e:	f040 80a9 	bne.w	80180c4 <powf+0x274>
 8017f72:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8017f76:	e7db      	b.n	8017f30 <powf+0xe0>
 8017f78:	004d      	lsls	r5, r1, #1
 8017f7a:	1e6a      	subs	r2, r5, #1
 8017f7c:	429a      	cmp	r2, r3
 8017f7e:	d31c      	bcc.n	8017fba <powf+0x16a>
 8017f80:	2900      	cmp	r1, #0
 8017f82:	ee20 0a00 	vmul.f32	s0, s0, s0
 8017f86:	da0f      	bge.n	8017fa8 <powf+0x158>
 8017f88:	ee10 0a90 	vmov	r0, s1
 8017f8c:	f7ff ff46 	bl	8017e1c <checkint>
 8017f90:	2801      	cmp	r0, #1
 8017f92:	d109      	bne.n	8017fa8 <powf+0x158>
 8017f94:	eeb1 0a40 	vneg.f32	s0, s0
 8017f98:	b945      	cbnz	r5, 8017fac <powf+0x15c>
 8017f9a:	2c00      	cmp	r4, #0
 8017f9c:	dac8      	bge.n	8017f30 <powf+0xe0>
 8017f9e:	b003      	add	sp, #12
 8017fa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017fa4:	f000 b8fe 	b.w	80181a4 <__math_divzerof>
 8017fa8:	2000      	movs	r0, #0
 8017faa:	e7f5      	b.n	8017f98 <powf+0x148>
 8017fac:	2c00      	cmp	r4, #0
 8017fae:	dabf      	bge.n	8017f30 <powf+0xe0>
 8017fb0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017fb4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8017fb8:	e7ba      	b.n	8017f30 <powf+0xe0>
 8017fba:	2900      	cmp	r1, #0
 8017fbc:	da1f      	bge.n	8017ffe <powf+0x1ae>
 8017fbe:	ee10 0a90 	vmov	r0, s1
 8017fc2:	f7ff ff2b 	bl	8017e1c <checkint>
 8017fc6:	b920      	cbnz	r0, 8017fd2 <powf+0x182>
 8017fc8:	b003      	add	sp, #12
 8017fca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017fce:	f000 b8f9 	b.w	80181c4 <__math_invalidf>
 8017fd2:	2801      	cmp	r0, #1
 8017fd4:	bf14      	ite	ne
 8017fd6:	2000      	movne	r0, #0
 8017fd8:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8017fdc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8017fe0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8017fe4:	f4bf af48 	bcs.w	8017e78 <powf+0x28>
 8017fe8:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8018104 <powf+0x2b4>
 8017fec:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017ff0:	ee10 3a10 	vmov	r3, s0
 8017ff4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017ff8:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8017ffc:	e73c      	b.n	8017e78 <powf+0x28>
 8017ffe:	2000      	movs	r0, #0
 8018000:	e7ee      	b.n	8017fe0 <powf+0x190>
 8018002:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80180e8 <powf+0x298>
 8018006:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801800a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801800e:	dd10      	ble.n	8018032 <powf+0x1e2>
 8018010:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8018014:	2800      	cmp	r0, #0
 8018016:	d158      	bne.n	80180ca <powf+0x27a>
 8018018:	9300      	str	r3, [sp, #0]
 801801a:	eddd 7a00 	vldr	s15, [sp]
 801801e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018022:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018026:	eef4 7a47 	vcmp.f32	s15, s14
 801802a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801802e:	f47f af6e 	bne.w	8017f0e <powf+0xbe>
 8018032:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80180f0 <powf+0x2a0>
 8018036:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801803a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801803e:	d804      	bhi.n	801804a <powf+0x1fa>
 8018040:	b003      	add	sp, #12
 8018042:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018046:	f000 b89b 	b.w	8018180 <__math_uflowf>
 801804a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 80180f8 <powf+0x2a8>
 801804e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8018052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018056:	d504      	bpl.n	8018062 <powf+0x212>
 8018058:	b003      	add	sp, #12
 801805a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801805e:	f000 b895 	b.w	801818c <__math_may_uflowf>
 8018062:	4b29      	ldr	r3, [pc, #164]	; (8018108 <powf+0x2b8>)
 8018064:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8018068:	ee30 6b07 	vadd.f64	d6, d0, d7
 801806c:	ee16 2a10 	vmov	r2, s12
 8018070:	ee36 7b47 	vsub.f64	d7, d6, d7
 8018074:	f002 011f 	and.w	r1, r2, #31
 8018078:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 801807c:	ee30 7b47 	vsub.f64	d7, d0, d7
 8018080:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8018084:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8018088:	ee27 4b07 	vmul.f64	d4, d7, d7
 801808c:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8018090:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8018094:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018098:	686d      	ldr	r5, [r5, #4]
 801809a:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 801809e:	1882      	adds	r2, r0, r2
 80180a0:	2300      	movs	r3, #0
 80180a2:	1918      	adds	r0, r3, r4
 80180a4:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 80180a8:	eea7 0b05 	vfma.f64	d0, d7, d5
 80180ac:	ec41 0b17 	vmov	d7, r0, r1
 80180b0:	eea6 0b04 	vfma.f64	d0, d6, d4
 80180b4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80180b8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80180bc:	e738      	b.n	8017f30 <powf+0xe0>
 80180be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80180c2:	e735      	b.n	8017f30 <powf+0xe0>
 80180c4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801810c <powf+0x2bc>
 80180c8:	e732      	b.n	8017f30 <powf+0xe0>
 80180ca:	9301      	str	r3, [sp, #4]
 80180cc:	eddd 7a01 	vldr	s15, [sp, #4]
 80180d0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80180d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80180d8:	e7a5      	b.n	8018026 <powf+0x1d6>
 80180da:	bf00      	nop
 80180dc:	f3af 8000 	nop.w
 80180e0:	ffd1d571 	.word	0xffd1d571
 80180e4:	405fffff 	.word	0x405fffff
 80180e8:	ffa3aae2 	.word	0xffa3aae2
 80180ec:	405fffff 	.word	0x405fffff
 80180f0:	00000000 	.word	0x00000000
 80180f4:	c062c000 	.word	0xc062c000
 80180f8:	00000000 	.word	0x00000000
 80180fc:	c062a000 	.word	0xc062a000
 8018100:	08018b80 	.word	0x08018b80
 8018104:	4b000000 	.word	0x4b000000
 8018108:	08018ca8 	.word	0x08018ca8
 801810c:	00000000 	.word	0x00000000

08018110 <sqrtf>:
 8018110:	b508      	push	{r3, lr}
 8018112:	ed2d 8b02 	vpush	{d8}
 8018116:	eeb0 8a40 	vmov.f32	s16, s0
 801811a:	f000 f817 	bl	801814c <__ieee754_sqrtf>
 801811e:	eeb4 8a48 	vcmp.f32	s16, s16
 8018122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018126:	d60c      	bvs.n	8018142 <sqrtf+0x32>
 8018128:	eddf 8a07 	vldr	s17, [pc, #28]	; 8018148 <sqrtf+0x38>
 801812c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018134:	d505      	bpl.n	8018142 <sqrtf+0x32>
 8018136:	f7fb fa29 	bl	801358c <__errno>
 801813a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801813e:	2321      	movs	r3, #33	; 0x21
 8018140:	6003      	str	r3, [r0, #0]
 8018142:	ecbd 8b02 	vpop	{d8}
 8018146:	bd08      	pop	{r3, pc}
 8018148:	00000000 	.word	0x00000000

0801814c <__ieee754_sqrtf>:
 801814c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8018150:	4770      	bx	lr

08018152 <with_errnof>:
 8018152:	b513      	push	{r0, r1, r4, lr}
 8018154:	4604      	mov	r4, r0
 8018156:	ed8d 0a01 	vstr	s0, [sp, #4]
 801815a:	f7fb fa17 	bl	801358c <__errno>
 801815e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8018162:	6004      	str	r4, [r0, #0]
 8018164:	b002      	add	sp, #8
 8018166:	bd10      	pop	{r4, pc}

08018168 <xflowf>:
 8018168:	b130      	cbz	r0, 8018178 <xflowf+0x10>
 801816a:	eef1 7a40 	vneg.f32	s15, s0
 801816e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018172:	2022      	movs	r0, #34	; 0x22
 8018174:	f7ff bfed 	b.w	8018152 <with_errnof>
 8018178:	eef0 7a40 	vmov.f32	s15, s0
 801817c:	e7f7      	b.n	801816e <xflowf+0x6>
	...

08018180 <__math_uflowf>:
 8018180:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018188 <__math_uflowf+0x8>
 8018184:	f7ff bff0 	b.w	8018168 <xflowf>
 8018188:	10000000 	.word	0x10000000

0801818c <__math_may_uflowf>:
 801818c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018194 <__math_may_uflowf+0x8>
 8018190:	f7ff bfea 	b.w	8018168 <xflowf>
 8018194:	1a200000 	.word	0x1a200000

08018198 <__math_oflowf>:
 8018198:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80181a0 <__math_oflowf+0x8>
 801819c:	f7ff bfe4 	b.w	8018168 <xflowf>
 80181a0:	70000000 	.word	0x70000000

080181a4 <__math_divzerof>:
 80181a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80181a8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80181ac:	2800      	cmp	r0, #0
 80181ae:	fe40 7a27 	vseleq.f32	s15, s0, s15
 80181b2:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80181c0 <__math_divzerof+0x1c>
 80181b6:	2022      	movs	r0, #34	; 0x22
 80181b8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80181bc:	f7ff bfc9 	b.w	8018152 <with_errnof>
 80181c0:	00000000 	.word	0x00000000

080181c4 <__math_invalidf>:
 80181c4:	eef0 7a40 	vmov.f32	s15, s0
 80181c8:	ee30 7a40 	vsub.f32	s14, s0, s0
 80181cc:	eef4 7a67 	vcmp.f32	s15, s15
 80181d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181d4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80181d8:	d602      	bvs.n	80181e0 <__math_invalidf+0x1c>
 80181da:	2021      	movs	r0, #33	; 0x21
 80181dc:	f7ff bfb9 	b.w	8018152 <with_errnof>
 80181e0:	4770      	bx	lr
	...

080181e4 <_init>:
 80181e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181e6:	bf00      	nop
 80181e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181ea:	bc08      	pop	{r3}
 80181ec:	469e      	mov	lr, r3
 80181ee:	4770      	bx	lr

080181f0 <_fini>:
 80181f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181f2:	bf00      	nop
 80181f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181f6:	bc08      	pop	{r3}
 80181f8:	469e      	mov	lr, r3
 80181fa:	4770      	bx	lr
